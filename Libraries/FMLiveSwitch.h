//
// Title: LiveSwitch for Cocoa
// Version: 0.0.0.0
// Copyright Frozen Mountain Software 2011+
//

#import <Foundation/Foundation.h>


#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"
#pragma clang diagnostic ignored "-Wnullability-completeness"

@class FMLiveSwitchAction0;
@class FMLiveSwitchAction1<__covariant T>;
@class FMLiveSwitchAction2<__covariant T1, __covariant T2>;
@class FMLiveSwitchAction3<__covariant T1, __covariant T2, __covariant T3>;
@class FMLiveSwitchAction4<__covariant T1, __covariant T2, __covariant T3, __covariant T4>;
@class FMLiveSwitchAction5<__covariant T1, __covariant T2, __covariant T3, __covariant T4, __covariant T5>;
@class FMLiveSwitchAction6<__covariant T1, __covariant T2, __covariant T3, __covariant T4, __covariant T5, __covariant T6>;
@class FMLiveSwitchAsyncSocket;
@class FMLiveSwitchAtomicInteger;
@class FMLiveSwitchAtomicLong;
@class FMLiveSwitchBase64;
@class FMLiveSwitchBitAssistant;
@class FMLiveSwitchByteCollection;
@class FMLiveSwitchConvert;
@class FMLiveSwitchCultureInfo;
@class FMLiveSwitchDateTimeFormatInfo;
@class FMLiveSwitchDnsRequest;
@class FMLiveSwitchEcdsaCrypto;
@class FMLiveSwitchEncoding;
@class FMLiveSwitchEnvironment;
@class FMLiveSwitchFileStream;
@class FMLiveSwitchFunction0<__covariant R>;
@class FMLiveSwitchFunction1<__covariant T, __covariant R>;
@class FMLiveSwitchFunction2<__covariant T1, __covariant T2, __covariant R>;
@class FMLiveSwitchFunction3<__covariant T1, __covariant T2, __covariant T3, __covariant R>;
@class FMLiveSwitchFunction4<__covariant T1, __covariant T2, __covariant T3, __covariant T4, __covariant R>;
@class FMLiveSwitchFunction5<__covariant T1, __covariant T2, __covariant T3, __covariant T4, __covariant T5, __covariant R>;
@class FMLiveSwitchFunction6<__covariant T1, __covariant T2, __covariant T3, __covariant T4, __covariant T5, __covariant T6, __covariant R>;
@class FMLiveSwitchGlobal;
@class FMLiveSwitchGuid;
@class FMLiveSwitchHashContext;
@class FMLiveSwitchHttpRequest;
@class FMLiveSwitchHttpWebRequest;
@class FMLiveSwitchHttpWebRequestTransfer;
@class FMLiveSwitchIFormatProvider;
@class FMLiveSwitchJsonChecker;
@class FMLiveSwitchLocalNetwork;
@class FMLiveSwitchMacContext;
@class FMLiveSwitchManagedAutoReleasePool;
@class FMLiveSwitchManagedCondition;
@class FMLiveSwitchManagedLock;
@class FMLiveSwitchManagedStopwatch;
@class FMLiveSwitchManagedThread;
@class FMLiveSwitchMathAssistant;
@class FMLiveSwitchNameValueCollection;
@class FMLiveSwitchNSLogProvider;
@class FMLiveSwitchNullableBool;
@class FMLiveSwitchNullableChar;
@class FMLiveSwitchNullableDate;
@class FMLiveSwitchNullableDecimal;
@class FMLiveSwitchNullableDouble;
@class FMLiveSwitchNullableFloat;
@class FMLiveSwitchNullableGuid;
@class FMLiveSwitchNullableInt;
@class FMLiveSwitchNullableLong;
@class FMLiveSwitchNullableShort;
@class FMLiveSwitchNullableUnichar;
@class FMLiveSwitchNumberFormatInfo;
@class FMLiveSwitchOpenSslEcdsaCrypto;
@class FMLiveSwitchParseAssistant;
@class FMLiveSwitchPathUtility;
@class FMLiveSwitchPlatform;
@class FMLiveSwitchRandom;
@class FMLiveSwitchRandomizer;
@class FMLiveSwitchRecursiveCondition;
@class FMLiveSwitchRsaCrypto;
@class FMLiveSwitchTcpSocket;
@class FMLiveSwitchTimeoutTimer;
@class FMLiveSwitchTimeSpan;
@class FMLiveSwitchUdpSocket;
@class FMLiveSwitchWebSocketMockRequest;
@class FMLiveSwitchWebSocketMockResponse;
@class FMLiveSwitchZeroingWeakProxy;
@class FMLiveSwitchZeroingWeakRef;
@class FMLiveSwitchAesCounterContext;
@class FMLiveSwitchDtlsFactory;
@class FMLiveSwitchDtlsOpenSslClient;
@class FMLiveSwitchDtlsOpenSslPeer;
@class FMLiveSwitchDtlsOpenSslServer;
@class FMLiveSwitchNative;
@class FMLiveSwitchPcmaCodec;
@class FMLiveSwitchPcmuCodec;
@class FMLiveSwitchBitrateMonitor;
@class FMLiveSwitchCommonConstants;
@class FMLiveSwitchCryptoLibraryWrapper;
@protocol FMLiveSwitchIDataBufferPool;
@class FMLiveSwitchDataBufferPoolTracer;
@protocol FMLiveSwitchIDispatchQueue;
@class FMLiveSwitchIPNetwork;
@protocol FMLiveSwitchISystemClock;
@class FMLiveSwitchLogContext;
@class FMLiveSwitchFrequentReadSynchronizedHash<__covariant TKey, __covariant TValue>;
@class FMLiveSwitchFrequentReadSynchronizedList<__covariant T>;
@class FMLiveSwitchPlatformTypeWrapper;
@class FMLiveSwitchRelayPort;
@class FMLiveSwitchSystemClock;
@class FMLiveSwitchThreadDispatchQueue<__covariant T>;
@class FMLiveSwitchProxyCredentialsCache;
@class FMLiveSwitchProxyCredentials;
@class FMLiveSwitchProxyAuthCheckResult;
@class FMLiveSwitchProxy;
@class FMLiveSwitchAddressTypeWrapper;
@class FMLiveSwitchAscii;
@class FMLiveSwitchAsymmetricKey;
@class FMLiveSwitchAsymmetricKeyTypeWrapper;
@protocol FMLiveSwitchILog;
@class FMLiveSwitchAtomicMutex;
@class FMLiveSwitchBinary;
@class FMLiveSwitchBooleanHolder;
@class FMLiveSwitchBuild;
@class FMLiveSwitchByteHolder;
@class FMLiveSwitchByteInputStream;
@class FMLiveSwitchByteOutputStream;
@class FMLiveSwitchBZip2Decompressor;
@class FMLiveSwitchCertificate<__covariant TCertificate, __covariant TFingerprint>;
@class FMLiveSwitchCharacterHolder;
@class FMLiveSwitchCircularBuffer;
@class FMLiveSwitchCollection<__covariant T, __covariant TCollection>;
@class FMLiveSwitchLogProvider;
@class FMLiveSwitchDataBufferFramer;
@class FMLiveSwitchDiagnosticSampler;
@class FMLiveSwitchDispatchQueue<__covariant T>;
@class FMLiveSwitchDtlsCertificate;
@class FMLiveSwitchFingerprint;
@class FMLiveSwitchDtlsFingerprint;
@class FMLiveSwitchEcdsaNamedCurveWrapper;
@protocol FMLiveSwitchIEquivalent;
@protocol FMLiveSwitchIFileStream;
@class FMLiveSwitchIso8601Timestamp;
@class FMLiveSwitchNetworkTypeWrapper;
@class FMLiveSwitchLogStashLogProvider;
@class FMLiveSwitchManagedCountdownLatch;
@class FMLiveSwitchOperatingSystemWrapper;
@class FMLiveSwitchArchitectureWrapper;
@protocol FMLiveSwitchIPlatform;
@class FMLiveSwitchPool<__covariant T>;
@class FMLiveSwitchProtocolTypeWrapper;
@class FMLiveSwitchEcdsaKey;
@class FMLiveSwitchSourceLanguageWrapper;
@class FMLiveSwitchJsonSerializer;
@class FMLiveSwitchSerializer;
@class FMLiveSwitchStateMachine<__covariant T>;
@class FMLiveSwitchLinkedListNode<__covariant T>;
@class FMLiveSwitchLinkedListEnumerator<__covariant T>;
@class FMLiveSwitchManagedConcurrentDictionary<__covariant TKey, __covariant TValue>;
@class FMLiveSwitchManagedConcurrentQueue<__covariant T>;
@class FMLiveSwitchManagedConcurrentStack<__covariant TValue>;
@class FMLiveSwitchLinkedList<__covariant T>;
@class FMLiveSwitchMutablePair<__covariant T1, __covariant T2>;
@class FMLiveSwitchMutableUnit<__covariant T>;
@class FMLiveSwitchPair<__covariant T1, __covariant T2>;
@class FMLiveSwitchPriorityQueue<__covariant T>;
@protocol FMLiveSwitchITimeoutTimer;
@class FMLiveSwitchLogEventLogProvider;
@class FMLiveSwitchTlsCertificate;
@class FMLiveSwitchTlsFingerprint;
@class FMLiveSwitchTriple<__covariant T1, __covariant T2, __covariant T3>;
@class FMLiveSwitchUnit<__covariant T>;
@class FMLiveSwitchCompareResultWrapper;
@class FMLiveSwitchConstants;
@class FMLiveSwitchCrc32;
@class FMLiveSwitchDataBufferStream;
@class FMLiveSwitchDataBuffer;
@class FMLiveSwitchCircularDataBuffer;
@class FMLiveSwitchDataBufferSubset;
@class FMLiveSwitchManagedSocket;
@class FMLiveSwitchDatagramSocket;
@class FMLiveSwitchDatagramSocketCreateArgs;
@class FMLiveSwitchHashContextBase;
@class FMLiveSwitchMacContextBase;
@class FMLiveSwitchLogEvent;
@class FMLiveSwitchHashTypeWrapper;
@class FMLiveSwitchMacTypeWrapper;
@class FMLiveSwitchManagedAutoResetEvent;
@class FMLiveSwitchManagedTimer;
@class FMLiveSwitchMd5Sha1HashContext;
@class FMLiveSwitchUnixTimestamp;
@class FMLiveSwitchDns;
@class FMLiveSwitchDoubleHolder;
@class FMLiveSwitchSerializable;
@class FMLiveSwitchDynamic;
@class FMLiveSwitchError;
@class FMLiveSwitchErrorCodeWrapper;
@class FMLiveSwitchFileAssistant;
@class FMLiveSwitchFileStreamAccessWrapper;
@class FMLiveSwitchFloatHolder;
@class FMLiveSwitchFutureBase<__covariant T>;
@class FMLiveSwitchFuture<__covariant T>;
@class FMLiveSwitchHttpFileTransfer;
@class FMLiveSwitchHttpMethodWrapper;
@class FMLiveSwitchHttpRequestArgs;
@class FMLiveSwitchHttpRequestCreatedArgs;
@class FMLiveSwitchHttpResponseArgs;
@class FMLiveSwitchHttpResponseReceivedArgs;
@class FMLiveSwitchHttpSendFinishArgs;
@class FMLiveSwitchHttpSendStartArgs;
@class FMLiveSwitchHttpTransfer;
@class FMLiveSwitchHttpTransferFactory;
@class FMLiveSwitchHttpWebRequestSender;
@class FMLiveSwitchIntegerHolder;
@protocol FMLiveSwitchIPromise;
@class FMLiveSwitchJson;
@class FMLiveSwitchJsonProvider;
@class FMLiveSwitchLicense;
@class FMLiveSwitchLockedRandomizer;
@class FMLiveSwitchLog;
@class FMLiveSwitchLogLevelWrapper;
@class FMLiveSwitchLongHolder;
@class FMLiveSwitchNetworkTimeProtocol;
@class FMLiveSwitchNullJsonProvider;
@class FMLiveSwitchNullLogProvider;
@class FMLiveSwitchDataBufferPool;
@class FMLiveSwitchPoolStatistics;
@class FMLiveSwitchPromiseBase<__covariant T>;
@class FMLiveSwitchPromise<__covariant T>;
@class FMLiveSwitchFutureStateWrapper;
@class FMLiveSwitchRsaKey;
@class FMLiveSwitchShortHolder;
@class FMLiveSwitchSort;
@class FMLiveSwitchSplitter;
@class FMLiveSwitchStreamSocket;
@class FMLiveSwitchStreamSocketCreateArgs;
@class FMLiveSwitchStringAssistant;
@class FMLiveSwitchTextLogProvider;
@class FMLiveSwitchTransportAddress;
@class FMLiveSwitchUnhandled;
@class FMLiveSwitchUnhandledExceptionArgs;
@class FMLiveSwitchUtf8;
@class FMLiveSwitchWebSocketBase;
@class FMLiveSwitchWebSocketReceiverRelay;
@protocol FMLiveSwitchIWebSocket;
@class FMLiveSwitchWebSocket;
@class FMLiveSwitchWebSocketCloseArgs;
@class FMLiveSwitchWebSocketCloseCompleteArgs;
@class FMLiveSwitchWebSocketOpenArgs;
@class FMLiveSwitchWebSocketOpenFailureArgs;
@class FMLiveSwitchWebSocketOpenSuccessArgs;
@class FMLiveSwitchWebSocketReceiveArgs;
@class FMLiveSwitchWebSocketSendArgs;
@class FMLiveSwitchWebSocketStatusCodeWrapper;
@class FMLiveSwitchWebSocketStreamFailureArgs;
@class FMLiveSwitchWebSocketTransfer;
@class FMLiveSwitchWebSocketTransferFactory;
@class FMLiveSwitchWebSocketWebRequestTransfer;
@class FMLiveSwitchWssPingMessage;
@class FMLiveSwitchWssPongMessage;
@class FMLiveSwitchRemoteReceiverStats;
@class FMLiveSwitchRtcpDataChannelSignallingActivation;
@class FMLiveSwitchMediaConfig<__covariant TConfig>;
@class FMLiveSwitchAudioConfig;
@class FMLiveSwitchBandwidthAdaptationPolicyWrapper;
@class FMLiveSwitchBaseStats;
@class FMLiveSwitchBitrateNotification;
@class FMLiveSwitchBitrateRequest;
@class FMLiveSwitchInfo;
@class FMLiveSwitchCandidateInfo;
@class FMLiveSwitchCandidatePairInfo;
@class FMLiveSwitchCandidatePairStateWrapper;
@class FMLiveSwitchCandidatePairStats;
@class FMLiveSwitchCandidateStats;
@class FMLiveSwitchCandidateTypeWrapper;
@class FMLiveSwitchCandidateUtility;
@class FMLiveSwitchCertificateInfo;
@class FMLiveSwitchCertificateStats;
@class FMLiveSwitchCodecInfo;
@class FMLiveSwitchCodecStats;
@class FMLiveSwitchCodecTypeWrapper;
@class FMLiveSwitchConnectionStateWrapper;
@class FMLiveSwitchConnectionStats;
@class FMLiveSwitchDataChannelInfo;
@class FMLiveSwitchDataChannelStateWrapper;
@class FMLiveSwitchDataChannelStats;
@class FMLiveSwitchStreamInfo;
@class FMLiveSwitchDataStreamInfo;
@class FMLiveSwitchStreamStats;
@class FMLiveSwitchDataStreamStats;
@class FMLiveSwitchEncodingConfig;
@class FMLiveSwitchAudioEncodingConfig;
@class FMLiveSwitchDtmfPacket;
@class FMLiveSwitchDtmfTone;
@class FMLiveSwitchSdpContent;
@class FMLiveSwitchSdpAttribute;
@class FMLiveSwitchSdpContentAttribute;
@class FMLiveSwitchSdpMutedAttribute;
@class FMLiveSwitchSimulcastNotification;
@class FMLiveSwitchSimulcastStreamStateWrapper;
@class FMLiveSwitchStreamDescription;
@class FMLiveSwitchStreamTypeHelper;
@class FMLiveSwitchVideoContent;
@class FMLiveSwitchVideoDegradationPreferenceWrapper;
@class FMLiveSwitchVideoEncodingConfig;
@class FMLiveSwitchEncryptionModeWrapper;
@class FMLiveSwitchFormatInfo;
@class FMLiveSwitchLayoutFrame;
@class FMLiveSwitchLayoutScaleWrapper;
@class FMLiveSwitchMediaComponentInfo;
@class FMLiveSwitchMediaComponentStats;
@class FMLiveSwitchMediaReceiverInfo;
@class FMLiveSwitchMediaReceiverStats;
@class FMLiveSwitchMediaSenderInfo;
@class FMLiveSwitchMediaSenderStats;
@class FMLiveSwitchMediaSinkInfo;
@class FMLiveSwitchMediaSinkStats;
@class FMLiveSwitchMediaSourceStats;
@class FMLiveSwitchMediaStats;
@class FMLiveSwitchEncodingInfo;
@class FMLiveSwitchMediaStreamInfo;
@class FMLiveSwitchMediaStreamStats;
@class FMLiveSwitchMediaTrackInfo;
@class FMLiveSwitchMediaTrackStats;
@class FMLiveSwitchMediaSourceInfo;
@class FMLiveSwitchPoint;
@class FMLiveSwitchRectangle;
@class FMLiveSwitchSdpAddressType;
@class FMLiveSwitchSdpAttributeCategoryWrapper;
@class FMLiveSwitchSdpAttributeTypeWrapper;
@class FMLiveSwitchSdpBandwidth;
@class FMLiveSwitchSdpBandwidthType;
@class FMLiveSwitchSdpEncryptionKey;
@class FMLiveSwitchSdpBase64EncryptionKey;
@class FMLiveSwitchSdpBundleOnlyAttribute;
@class FMLiveSwitchSdpCategoryAttribute;
@class FMLiveSwitchSdpCharacterSetAttribute;
@class FMLiveSwitchSdpClearEncryptionKey;
@class FMLiveSwitchSdpConferenceType;
@class FMLiveSwitchSdpConferenceTypeAttribute;
@class FMLiveSwitchSdpConnectionData;
@class FMLiveSwitchSdpCryptoAttribute;
@class FMLiveSwitchSdpCryptoKeyMethod;
@class FMLiveSwitchSdpCryptoSessionParam;
@class FMLiveSwitchSdpCryptoSuite;
@class FMLiveSwitchSdpDirectionAttribute;
@class FMLiveSwitchSdpFormatParametersAttribute;
@class FMLiveSwitchSdpFrameRateAttribute;
@class FMLiveSwitchSdpBundleGroup;
@class FMLiveSwitchSdpGroupAttribute;
@class FMLiveSwitchSdpGroupSemanticsTypeWrapper;
@class FMLiveSwitchSdpIceCandidateAttribute;
@class FMLiveSwitchSdpIceCandidateType;
@class FMLiveSwitchSdpIceFingerprintAttribute;
@class FMLiveSwitchSdpIceLiteAttribute;
@class FMLiveSwitchSdpIceMismatchAttribute;
@class FMLiveSwitchSdpIceOptionsAttribute;
@class FMLiveSwitchSdpIceOptionTag;
@class FMLiveSwitchSdpIceOptionTagTypeWrapper;
@class FMLiveSwitchSdpIcePasswordAttribute;
@class FMLiveSwitchSdpIceRemoteCandidate;
@class FMLiveSwitchSdpIceRemoteCandidatesAttribute;
@class FMLiveSwitchSdpIceTransportProtocol;
@class FMLiveSwitchSdpIceTrickleIceOptionTag;
@class FMLiveSwitchSdpIceUfragAttribute;
@class FMLiveSwitchSdpIceUnknownIceOptionTag;
@class FMLiveSwitchSdpInactiveAttribute;
@class FMLiveSwitchSdpKeywordsAttribute;
@class FMLiveSwitchSdpLanguageAttribute;
@class FMLiveSwitchSdpMaxPacketTimeAttribute;
@class FMLiveSwitchSdpMedia;
@class FMLiveSwitchSdpMediaDescription;
@class FMLiveSwitchSdpMediaStreamIdAttribute;
@class FMLiveSwitchSdpMediaStreamIdSemanticAttribute;
@class FMLiveSwitchSdpMediaStreamIdSemanticTokenWrapper;
@class FMLiveSwitchSdpMediaType;
@class FMLiveSwitchSdpMessage;
@class FMLiveSwitchSdpNetworkType;
@class FMLiveSwitchSdpOrientation;
@class FMLiveSwitchSdpOrientationAttribute;
@class FMLiveSwitchSdpOrigin;
@class FMLiveSwitchSdpPacketTimeAttribute;
@class FMLiveSwitchSdpPromptEncryptionKey;
@class FMLiveSwitchSdpQualityAttribute;
@class FMLiveSwitchSdpReceiveOnlyAttribute;
@class FMLiveSwitchSdpRepeatTime;
@class FMLiveSwitchSdpRtcpAttribute;
@class FMLiveSwitchSdpRtcpFeedbackAttribute;
@class FMLiveSwitchSdpRtcpFeedbackAttributeSubType;
@class FMLiveSwitchSdpRtcpFeedbackAttributeType;
@class FMLiveSwitchSdpRtcpMuxAttribute;
@class FMLiveSwitchSdpRtpExtMapAttribute;
@class FMLiveSwitchSdpRtpMapAttribute;
@class FMLiveSwitchSdpRtpMedia;
@class FMLiveSwitchSdpRtpSimulcastStream;
@class FMLiveSwitchSdpRtpSimulcastDirection;
@class FMLiveSwitchSdpRtpSimulcastStreamDescription;
@class FMLiveSwitchSdpRtpRidDirection;
@class FMLiveSwitchSdpRtpRidRestriction;
@class FMLiveSwitchSdpRtpRidAttribute;
@class FMLiveSwitchSdpRtpSimulcastAttribute;
@class FMLiveSwitchSdpRtpSimulcastStreamId;
@class FMLiveSwitchSdpRtpSsrcGroupAttribute;
@class FMLiveSwitchSdpRtpSsrcAttribute;
@class FMLiveSwitchSdpRtpSsrcAttributeName;
@class FMLiveSwitchSdpSctpMapAttribute;
@class FMLiveSwitchSdpSctpMaxMessageSizeAttribute;
@class FMLiveSwitchSdpSctpMedia;
@class FMLiveSwitchSdpSctpPortAttribute;
@class FMLiveSwitchSdpSdpLanguageAttribute;
@class FMLiveSwitchSdpSendOnlyAttribute;
@class FMLiveSwitchSdpSendReceiveAttribute;
@class FMLiveSwitchSdpSetup;
@class FMLiveSwitchSdpSetupAttribute;
@class FMLiveSwitchSdpTimeDescription;
@class FMLiveSwitchSdpTimeZone;
@class FMLiveSwitchSdpTimeZones;
@class FMLiveSwitchSdpTiming;
@class FMLiveSwitchSdpToolAttribute;
@class FMLiveSwitchSdpUdpMedia;
@class FMLiveSwitchSdpUnknownAttribute;
@class FMLiveSwitchSdpUriEncryptionKey;
@class FMLiveSwitchSessionDescription;
@class FMLiveSwitchSessionDescriptionTypeWrapper;
@class FMLiveSwitchSize;
@class FMLiveSwitchStreamDirectionWrapper;
@class FMLiveSwitchStreamDirectionHelper;
@class FMLiveSwitchStreamStateWrapper;
@class FMLiveSwitchStreamTypeWrapper;
@class FMLiveSwitchTransportInfo;
@class FMLiveSwitchTransportStats;
@class FMLiveSwitchUtility;
@class FMLiveSwitchScreenConfig;
@class FMLiveSwitchVideoConfig;
@class FMLiveSwitchVideoTypeWrapper;
@class FMLiveSwitchAecContext;
@protocol FMLiveSwitchIElement;
@protocol FMLiveSwitchIOutput;
@protocol FMLiveSwitchIMediaElement;
@protocol FMLiveSwitchIMediaOutput;
@protocol FMLiveSwitchIInput;
@protocol FMLiveSwitchIMediaInput;
@class FMLiveSwitchMediaPipe<__covariant TIOutput, __covariant TIOutputCollection, __covariant TIInput, __covariant TIInputCollection, __covariant TPipe, __covariant TFrame, __covariant TBuffer, __covariant TBufferCollection, __covariant TFormat>;
@protocol FMLiveSwitchIAudioElement;
@protocol FMLiveSwitchIAudioInput;
@protocol FMLiveSwitchIAudioOutput;
@class FMLiveSwitchAudioPipe;
@class FMLiveSwitchAecPipe;
@class FMLiveSwitchMediaControlFrame;
@class FMLiveSwitchFeedbackControlFrame;
@class FMLiveSwitchPayloadSpecificControlFrame;
@class FMLiveSwitchAfbControlFrame;
@class FMLiveSwitchAppControlFrame;
@class FMLiveSwitchMediaBranch<__covariant TIOutput, __covariant TIOutputCollection, __covariant TIInput, __covariant TIInputCollection, __covariant TIElement, __covariant TSource, __covariant TSink, __covariant TPipe, __covariant TTrack, __covariant TBranch, __covariant TFrame, __covariant TBuffer, __covariant TBufferCollection, __covariant TFormat>;
@class FMLiveSwitchAudioBranch;
@class FMLiveSwitchMediaBuffer<__covariant TFormat, __covariant TBuffer>;
@class FMLiveSwitchAudioBuffer;
@class FMLiveSwitchMediaBufferCollection<__covariant TBuffer, __covariant TBufferCollection, __covariant TFormat>;
@class FMLiveSwitchAudioBufferCollection;
@class FMLiveSwitchAudioClock;
@class FMLiveSwitchAudioDecoder;
@class FMLiveSwitchAudioDepacketizer;
@class FMLiveSwitchAudioEncoder;
@class FMLiveSwitchMediaFormat<__covariant TFormat>;
@class FMLiveSwitchAudioFormat;
@class FMLiveSwitchMediaFormatCollection<__covariant TFormat, __covariant TFormatCollection>;
@class FMLiveSwitchAudioFormatCollection;
@class FMLiveSwitchMediaFrame<__covariant TBuffer, __covariant TBufferCollection, __covariant TFormat, __covariant TFrame>;
@class FMLiveSwitchAudioFrame;
@class FMLiveSwitchAudioMixer;
@class FMLiveSwitchAudioPacketizer;
@class FMLiveSwitchMediaRecorder<__covariant TBuffer, __covariant TFormat>;
@class FMLiveSwitchAudioRecorder;
@class FMLiveSwitchMediaSinkBase;
@class FMLiveSwitchMediaSink<__covariant TIOutput, __covariant TIOutputCollection, __covariant TIInput, __covariant TSink, __covariant TFrame, __covariant TBuffer, __covariant TBufferCollection, __covariant TFormat>;
@class FMLiveSwitchAudioSink;
@class FMLiveSwitchMediaSourceBase;
@class FMLiveSwitchMediaSource<__covariant TIOutput, __covariant TIInput, __covariant TIInputCollection, __covariant TSource, __covariant TFrame, __covariant TBuffer, __covariant TBufferCollection, __covariant TFormat>;
@class FMLiveSwitchAudioSource;
@protocol FMLiveSwitchIStream;
@class FMLiveSwitchStreamBase;
@class FMLiveSwitchStream;
@class FMLiveSwitchMediaStreamBase;
@protocol FMLiveSwitchIMediaStream;
@protocol FMLiveSwitchISynchronizableStream;
@class FMLiveSwitchMediaStream<__covariant TIOutput, __covariant TIOutputCollection, __covariant TIInput, __covariant TIInputCollection, __covariant TIElement, __covariant TSource, __covariant TSink, __covariant TPipe, __covariant TTrack, __covariant TBranch, __covariant TFrame, __covariant TBuffer, __covariant TBufferCollection, __covariant TFormat, __covariant TFormatCollection>;
@protocol FMLiveSwitchIAudioStream;
@class FMLiveSwitchAudioStream;
@protocol FMLiveSwitchISynchronizer;
@class FMLiveSwitchCcmTmmbnPolicyWrapper;
@class FMLiveSwitchCcmTmmbrPolicyWrapper;
@class FMLiveSwitchConnectionStateLedger;
@class FMLiveSwitchControlFrameEntry;
@class FMLiveSwitchDiagnosticsConfigDiagnosticsConfig;
@class FMLiveSwitchDiagnosticsConfigJitterBufferConfig;
@class FMLiveSwitchDiagnosticsConfigReceiverConfig;
@class FMLiveSwitchDiagnosticsConfigRtpConfig;
@protocol FMLiveSwitchMetricsIMetricProvider;
@class FMLiveSwitchSchedulerTypeWrapper;
@class FMLiveSwitchL16Decoder;
@class FMLiveSwitchBasicAudioDepacketizer;
@class FMLiveSwitchL16Depacketizer;
@class FMLiveSwitchL16Encoder;
@class FMLiveSwitchL16Format;
@class FMLiveSwitchBasicAudioPacketizer;
@class FMLiveSwitchL16Packetizer;
@class FMLiveSwitchMatroskaElement;
@class FMLiveSwitchMatroskaBlockAdditions;
@class FMLiveSwitchMediaProtocolWrapper;
@class FMLiveSwitchConnectionStateRecord;
@class FMLiveSwitchVideoRetentionPolicyWrapper;
@class FMLiveSwitchDiagnosticsDurationSample;
@class FMLiveSwitchDtmfModeWrapper;
@protocol FMLiveSwitchIVideoElement;
@protocol FMLiveSwitchIVideoInput;
@protocol FMLiveSwitchIVideoOutput;
@class FMLiveSwitchVideoPipe;
@class FMLiveSwitchVideoDepacketizer<__covariant TFragment>;
@class FMLiveSwitchH265Depacketizer;
@class FMLiveSwitchVideoFragment;
@class FMLiveSwitchH265Fragment;
@class FMLiveSwitchH265Packet;
@class FMLiveSwitchVideoPacketizer;
@class FMLiveSwitchH265Packetizer;
@class FMLiveSwitchRtpControlFrame;
@class FMLiveSwitchTransportCCControlFrame;
@class FMLiveSwitchTransportCCPacketStatusChunk;
@class FMLiveSwitchTransportCCPacketStatusSymbolWrapper;
@class FMLiveSwitchTransportCCRunLengthChunk;
@class FMLiveSwitchTransportCCStatusVectorChunk;
@class FMLiveSwitchVideoFormat;
@class FMLiveSwitchH265Format;
@class FMLiveSwitchH265Nalu;
@class FMLiveSwitchH265Utility;
@class FMLiveSwitchTmmbrEntry;
@class FMLiveSwitchTmmbnEntry;
@class FMLiveSwitchTmmbnControlFrame;
@class FMLiveSwitchTmmbrControlFrame;
@class FMLiveSwitchG722Decoder;
@class FMLiveSwitchG722Depacketizer;
@class FMLiveSwitchG722Encoder;
@class FMLiveSwitchG722Format;
@class FMLiveSwitchG722Packetizer;
@class FMLiveSwitchResetAudioPipe;
@class FMLiveSwitchResetVideoPipe;
@class FMLiveSwitchVideoSource;
@class FMLiveSwitchCameraSourceBase;
@protocol FMLiveSwitchDiagnosticsIDiagnosticsProvider;
@class FMLiveSwitchMovingAverage;
@class FMLiveSwitchScreenSourceBase;
@class FMLiveSwitchCcmLrrPolicyWrapper;
@class FMLiveSwitchCcmUtility;
@class FMLiveSwitchFrameRatePipe;
@class FMLiveSwitchFrameRateController;
@class FMLiveSwitchImageSizePipe;
@class FMLiveSwitchImageScalePipe;
@class FMLiveSwitchLrrEntry;
@class FMLiveSwitchLrrControlFrame;
@class FMLiveSwitchCcmFirPolicyWrapper;
@class FMLiveSwitchNackPliPolicyWrapper;
@class FMLiveSwitchSimulcastModeWrapper;
@protocol FMLiveSwitchIMediaTrack;
@class FMLiveSwitchMediaTrackBase;
@class FMLiveSwitchMediaTrack<__covariant TIOutput, __covariant TIOutputCollection, __covariant TIInput, __covariant TIInputCollection, __covariant TIElement, __covariant TSource, __covariant TSink, __covariant TPipe, __covariant TTrack, __covariant TBranch, __covariant TFrame, __covariant TBuffer, __covariant TBufferCollection, __covariant TFormat>;
@protocol FMLiveSwitchIAudioTrack;
@class FMLiveSwitchAudioTrack;
@class FMLiveSwitchRtcAudioTrackConfig;
@class FMLiveSwitchBasicVideoDepacketizer;
@class FMLiveSwitchBasicVideoPacketizer;
@class FMLiveSwitchBundlePolicyWrapper;
@class FMLiveSwitchByeControlFrame;
@class FMLiveSwitchCandidate;
@class FMLiveSwitchColor;
@protocol FMLiveSwitchIConnection;
@class FMLiveSwitchConnectionBase<__covariant TConnection, __covariant TStream, __covariant TAudioStream, __covariant TVideoStream, __covariant TDataStream, __covariant TDataChannel>;
@class FMLiveSwitchDataChannelStateMachine;
@class FMLiveSwitchIdentityAudioPipe;
@class FMLiveSwitchIdentityVideoPipe;
@class FMLiveSwitchVideoSink;
@protocol FMLiveSwitchIViewSink;
@class FMLiveSwitchViewSink<__covariant T>;
@class FMLiveSwitchNullViewSink<__covariant T>;
@class FMLiveSwitchStreamStateMachine;
@class FMLiveSwitchConnectionStateMachine;
@protocol FMLiveSwitchIDataChannel;
@class FMLiveSwitchDataChannelBase<__covariant TDataChannel>;
@class FMLiveSwitchDataChannel;
@class FMLiveSwitchDataChannelCollection;
@class FMLiveSwitchDataChannelReceiveArgs;
@protocol FMLiveSwitchIDataStream;
@class FMLiveSwitchDataStreamBase<__covariant TDataChannel>;
@class FMLiveSwitchDataStream;
@class FMLiveSwitchDiagnosticsTimer;
@class FMLiveSwitchDiagnosticsDurationTimer;
@class FMLiveSwitchDiagnosticsRateTimer;
@class FMLiveSwitchDiagnosticsTimers;
@class FMLiveSwitchDiagnosticsDiagnosticsData;
@class FMLiveSwitchDiagnosticsDiagnosticsService;
@class FMLiveSwitchDtlsCipherSuiteWrapper;
@class FMLiveSwitchDtlsParameters;
@class FMLiveSwitchDtlsProtocolVersionWrapper;
@class FMLiveSwitchDtlsRoleWrapper;
@class FMLiveSwitchTransport;
@class FMLiveSwitchDtmfSender;
@class FMLiveSwitchDtmfReceiver;
@class FMLiveSwitchDtmfFormat;
@class FMLiveSwitchEncryptionPolicyWrapper;
@class FMLiveSwitchFakeAudioSource;
@class FMLiveSwitchFakeVideoSource;
@class FMLiveSwitchFecMaskTypeWrapper;
@class FMLiveSwitchFecProtectionParameters;
@class FMLiveSwitchFeedback;
@class FMLiveSwitchFirEntry;
@class FMLiveSwitchFirControlFrame;
@class FMLiveSwitchG711Format;
@class FMLiveSwitchGenericNack;
@class FMLiveSwitchGenericNackControlFrame;
@class FMLiveSwitchH264Depacketizer;
@class FMLiveSwitchH264Format;
@class FMLiveSwitchH264Fragment;
@class FMLiveSwitchH264Nalu;
@class FMLiveSwitchH264Packet;
@class FMLiveSwitchH264PacketizationMode;
@class FMLiveSwitchH264Packetizer;
@class FMLiveSwitchH264ProfileIdc;
@class FMLiveSwitchH264ProfileIop;
@class FMLiveSwitchH264ProfileLevelId;
@class FMLiveSwitchH264Utility;
@class FMLiveSwitchIMediaInputCollection<__covariant TIOutput, __covariant TIInput, __covariant TFrame, __covariant TBuffer, __covariant TBufferCollection, __covariant TFormat, __covariant TMediaInputCollection>;
@class FMLiveSwitchIAudioInputCollection;
@class FMLiveSwitchIMediaOutputCollection<__covariant TIOutput, __covariant TIInput, __covariant TFrame, __covariant TBuffer, __covariant TBufferCollection, __covariant TFormat, __covariant TMediaOutputCollection>;
@class FMLiveSwitchIAudioOutputCollection;
@class FMLiveSwitchIceConnectionStateWrapper;
@class FMLiveSwitchIceGatheringStateWrapper;
@class FMLiveSwitchIceGatherPolicyWrapper;
@class FMLiveSwitchIceParameters;
@class FMLiveSwitchIcePolicyWrapper;
@class FMLiveSwitchIcePortRange;
@class FMLiveSwitchIceRoleWrapper;
@class FMLiveSwitchIceServer;
@class FMLiveSwitchIceServerCollection;
@class FMLiveSwitchIceServerTest;
@class FMLiveSwitchIceServerTestResult;
@protocol FMLiveSwitchIMedia;
@protocol FMLiveSwitchILocalMedia;
@protocol FMLiveSwitchIViewableMedia;
@protocol FMLiveSwitchIViewSinkableMedia;
@protocol FMLiveSwitchIRemoteMedia;
@class FMLiveSwitchVideoRecorder;
@class FMLiveSwitchIvfVideoRecorder;
@class FMLiveSwitchIvfVideoSink;
@class FMLiveSwitchIVideoInputCollection;
@class FMLiveSwitchIVideoOutputCollection;
@protocol FMLiveSwitchIVideoStream;
@protocol FMLiveSwitchIVideoTrack;
@class FMLiveSwitchJitterConfig;
@class FMLiveSwitchJitterAudioPipe;
@class FMLiveSwitchJitterVideoPipe;
@class FMLiveSwitchLayout;
@class FMLiveSwitchLayoutAlignmentWrapper;
@class FMLiveSwitchLayoutDirectionWrapper;
@class FMLiveSwitchLayoutPreset;
@class FMLiveSwitchLayoutManager<__covariant T>;
@class FMLiveSwitchLayoutModeWrapper;
@class FMLiveSwitchLayoutOriginWrapper;
@class FMLiveSwitchLayoutTable;
@class FMLiveSwitchMediaBase<__covariant TIAudioTrack, __covariant TIVideoTrack>;
@class FMLiveSwitchMedia<__covariant TAudioTrack, __covariant TVideoTrack>;
@class FMLiveSwitchLocalMediaBase<__covariant TLocalMedia, __covariant TAudioTrack, __covariant TVideoTrack>;
@class FMLiveSwitchLocalMedia;
@class FMLiveSwitchLocalMediaStateWrapper;
@class FMLiveSwitchMatroskaAttachments;
@class FMLiveSwitchMatroskaAudio;
@class FMLiveSwitchMatroskaAudioRecorder;
@class FMLiveSwitchMatroskaAudioSink;
@class FMLiveSwitchMatroskaBlock;
@class FMLiveSwitchMatroskaBlockFlags;
@class FMLiveSwitchMatroskaBlockGroup;
@class FMLiveSwitchMatroskaChapters;
@class FMLiveSwitchMatroskaCluster;
@class FMLiveSwitchMatroskaContentCompAlgo;
@class FMLiveSwitchMatroskaContentCompression;
@class FMLiveSwitchMatroskaContentEncoding;
@class FMLiveSwitchMatroskaContentEncodings;
@class FMLiveSwitchMatroskaContentEncodingScope;
@class FMLiveSwitchMatroskaCues;
@class FMLiveSwitchMatroskaEbml;
@class FMLiveSwitchMatroskaEbmlCrc32;
@class FMLiveSwitchMatroskaEbmlVoid;
@class FMLiveSwitchMatroskaFile;
@class FMLiveSwitchMatroskaAudioSource;
@class FMLiveSwitchMatroskaVideoSource;
@class FMLiveSwitchMatroskaSeek;
@class FMLiveSwitchMatroskaSeekHead;
@class FMLiveSwitchMatroskaSegment;
@class FMLiveSwitchMatroskaSegmentInfo;
@class FMLiveSwitchMatroskaSimpleBlock;
@class FMLiveSwitchMatroskaSimpleBlockFlags;
@class FMLiveSwitchMatroskaTags;
@class FMLiveSwitchMatroskaTrack;
@class FMLiveSwitchMatroskaTrackEntry;
@class FMLiveSwitchMatroskaTrackType;
@class FMLiveSwitchMatroskaVideo;
@class FMLiveSwitchMatroskaVideoDisplayUnit;
@class FMLiveSwitchMatroskaVideoRecorder;
@class FMLiveSwitchMatroskaVideoSink;
@class FMLiveSwitchNullAudioSource;
@class FMLiveSwitchNullVideoSource;
@class FMLiveSwitchNullVideoSink;
@class FMLiveSwitchNullAudioSink;
@class FMLiveSwitchPacketizedAudioBuffer;
@class FMLiveSwitchVideoBuffer;
@class FMLiveSwitchPacketizedVideoBuffer;
@class FMLiveSwitchProcessFramePolicyWrapper;
@class FMLiveSwitchRemoteMediaCollection;
@class FMLiveSwitchMediaCollection;
@class FMLiveSwitchMediaPipeStateWrapper;
@class FMLiveSwitchMediaSinkStateWrapper;
@class FMLiveSwitchMediaSourceStateWrapper;
@class FMLiveSwitchMultiplexPolicyWrapper;
@class FMLiveSwitchNackConfig;
@class FMLiveSwitchNackPolicyWrapper;
@class FMLiveSwitchOggAudioRecorder;
@class FMLiveSwitchOggAudioSink;
@class FMLiveSwitchOggPage;
@class FMLiveSwitchOggPageHeaderType;
@class FMLiveSwitchOpusDepacketizer;
@class FMLiveSwitchOpusFormat;
@class FMLiveSwitchOpusPacketizer;
@class FMLiveSwitchPcmaDecoder;
@class FMLiveSwitchPcmaDepacketizer;
@class FMLiveSwitchPcmaEncoder;
@class FMLiveSwitchPcmaFormat;
@class FMLiveSwitchPcmaPacketizer;
@class FMLiveSwitchPcmuDecoder;
@class FMLiveSwitchPcmuDepacketizer;
@class FMLiveSwitchPcmuEncoder;
@class FMLiveSwitchPcmuFormat;
@class FMLiveSwitchPcmuPacketizer;
@class FMLiveSwitchPcmDepacketizer;
@class FMLiveSwitchPcmFormat;
@class FMLiveSwitchPcmPacketizer;
@class FMLiveSwitchPliControlFrame;
@class FMLiveSwitchRedFecConfig;
@class FMLiveSwitchRedFecPolicyWrapper;
@class FMLiveSwitchRembControlFrame;
@class FMLiveSwitchRembPolicyWrapper;
@class FMLiveSwitchRemoteMedia;
@class FMLiveSwitchReportBlock;
@class FMLiveSwitchReportControlFrame;
@class FMLiveSwitchResampler;
@class FMLiveSwitchRpsi;
@class FMLiveSwitchRpsiControlFrame;
@class FMLiveSwitchRRControlFrame;
@class FMLiveSwitchRtcLocalMedia<__covariant TView>;
@class FMLiveSwitchRtcRemoteMedia<__covariant TView>;
@class FMLiveSwitchRtpPacket;
@class FMLiveSwitchRtpPacketHeader;
@protocol FMLiveSwitchIRtpHeaderExtension;
@class FMLiveSwitchSdesChunk;
@class FMLiveSwitchSdesControlFrame;
@class FMLiveSwitchSdesItem;
@class FMLiveSwitchSdesItemType;
@class FMLiveSwitchSdesPolicyWrapper;
@class FMLiveSwitchServerAddress;
@class FMLiveSwitchSignallingStateWrapper;
@class FMLiveSwitchSinkOutput;
@class FMLiveSwitchSli;
@class FMLiveSwitchSliControlFrame;
@class FMLiveSwitchSoundConverter;
@class FMLiveSwitchSoundReframer;
@class FMLiveSwitchSoundReframerContext;
@class FMLiveSwitchSoundUtility;
@class FMLiveSwitchSourceInput;
@class FMLiveSwitchSRControlFrame;
@class FMLiveSwitchSynchronizeContext;
@class FMLiveSwitchStreamCollection;
@class FMLiveSwitchStunServer;
@class FMLiveSwitchTrickleIcePolicyWrapper;
@class FMLiveSwitchTurnAuthArgs;
@class FMLiveSwitchTurnAuthOperationWrapper;
@class FMLiveSwitchTurnAuthResult;
@class FMLiveSwitchTurnServer;
@class FMLiveSwitchVideoBranch;
@class FMLiveSwitchVideoBufferCollection;
@class FMLiveSwitchVideoDecoder;
@class FMLiveSwitchAudioSynchronizer;
@class FMLiveSwitchVideoSynchronizer;
@class FMLiveSwitchVideoEncoder;
@class FMLiveSwitchVideoFormatCollection;
@class FMLiveSwitchVideoFrame;
@class FMLiveSwitchVideoStream;
@class FMLiveSwitchVideoTrack;
@class FMLiveSwitchRtcVideoTrackConfig;
@class FMLiveSwitchVp8Depacketizer;
@class FMLiveSwitchVp8Format;
@class FMLiveSwitchVp8Fragment;
@class FMLiveSwitchVp8Packetizer;
@class FMLiveSwitchVp8Utility;
@class FMLiveSwitchVp8UtilityExtension;
@class FMLiveSwitchVp9Depacketizer;
@class FMLiveSwitchVp9Format;
@class FMLiveSwitchVp9Fragment;
@class FMLiveSwitchVp9Packetizer;
@class FMLiveSwitchVp9Utility;
@class FMLiveSwitchWaveAudioRecorder;
@class FMLiveSwitchWaveAudioSink;
@class FMLiveSwitchYuv4MpegVideoRecorder;
@class FMLiveSwitchYuv4MpegVideoSink;
@class FMLiveSwitchYuv4MpegVideoSource;
@class FMLiveSwitchStunAddressFamily;
@class FMLiveSwitchStunAttribute;
@class FMLiveSwitchStunAlternateServerAttribute;
@class FMLiveSwitchStunError;
@class FMLiveSwitchStunBadRequestError;
@class FMLiveSwitchStunMessage;
@class FMLiveSwitchStunBindingMessage;
@class FMLiveSwitchStunBindingIndication;
@class FMLiveSwitchStunBindingRequest;
@class FMLiveSwitchStunBindingResponse;
@class FMLiveSwitchStunErrorCodeAttribute;
@class FMLiveSwitchStunFingerprintAttribute;
@class FMLiveSwitchStunIceControlledAttribute;
@class FMLiveSwitchStunIceControllingAttribute;
@class FMLiveSwitchStunIcePriorityAttribute;
@class FMLiveSwitchStunIceRoleConflictError;
@class FMLiveSwitchStunIceUseCandidateAttribute;
@class FMLiveSwitchStunIntegrityCheckFailureError;
@class FMLiveSwitchStunMappedAddressAttribute;
@class FMLiveSwitchStunMessageIntegrityAttribute;
@class FMLiveSwitchStunMessageTypeWrapper;
@class FMLiveSwitchStunMissingUsernameError;
@class FMLiveSwitchStunNonceAttribute;
@class FMLiveSwitchStunRealmAttribute;
@class FMLiveSwitchStunServerError;
@class FMLiveSwitchStunSoftwareAttribute;
@class FMLiveSwitchStunStaleCredentialsError;
@class FMLiveSwitchStunStaleNonceError;
@class FMLiveSwitchStunTransactionTransmitCounterAttribute;
@class FMLiveSwitchStunTryAlternateStunError;
@class FMLiveSwitchStunTurnAddressFamilyNotSupportedError;
@class FMLiveSwitchStunTurnAllocateMessage;
@class FMLiveSwitchStunTurnAllocateRequest;
@class FMLiveSwitchStunTurnAllocateResponse;
@class FMLiveSwitchStunTurnAllocationMismatchError;
@class FMLiveSwitchStunTurnAllocationQuotaReachedError;
@class FMLiveSwitchStunTurnChannelBindMessage;
@class FMLiveSwitchStunTurnChannelBindRequest;
@class FMLiveSwitchStunTurnChannelBindResponse;
@class FMLiveSwitchStunTurnChannelNumberAttribute;
@class FMLiveSwitchStunTurnConnectionAlreadyExistsError;
@class FMLiveSwitchStunTurnDataMessage;
@class FMLiveSwitchStunTurnConnectionAttemptIndication;
@class FMLiveSwitchStunTurnConnectionAttemptMessage;
@class FMLiveSwitchStunTurnConnectionBindMessage;
@class FMLiveSwitchStunTurnConnectionBindRequest;
@class FMLiveSwitchStunTurnConnectionBindResponse;
@class FMLiveSwitchStunTurnConnectionIdAttribute;
@class FMLiveSwitchStunTurnConnectionTimeoutOrFailureError;
@class FMLiveSwitchStunTurnConnectMessage;
@class FMLiveSwitchStunTurnConnectRequest;
@class FMLiveSwitchStunTurnConnectResponse;
@class FMLiveSwitchStunTurnCreatePermissionMessage;
@class FMLiveSwitchStunTurnCreatePermissionRequest;
@class FMLiveSwitchStunTurnCreatePermissionResponse;
@class FMLiveSwitchStunTurnDataAttribute;
@class FMLiveSwitchStunTurnDataIndication;
@class FMLiveSwitchStunTurnDontFragmentAttribute;
@class FMLiveSwitchStunTurnEvenPortAttribute;
@class FMLiveSwitchStunTurnForbiddenError;
@class FMLiveSwitchStunTurnInsufficientCapacityError;
@class FMLiveSwitchStunTurnLifetimeAttribute;
@class FMLiveSwitchStunTurnMobilityForbiddenError;
@class FMLiveSwitchStunTurnPeerAddressFamilyMismatchError;
@class FMLiveSwitchStunTurnRefreshMessage;
@class FMLiveSwitchStunTurnRefreshRequest;
@class FMLiveSwitchStunTurnRefreshResponse;
@class FMLiveSwitchStunTurnRequestedAddressFamilyAttribute;
@class FMLiveSwitchStunTurnRequestedTransportAttribute;
@class FMLiveSwitchStunTurnReservationTokenAttribute;
@class FMLiveSwitchStunTurnSendMessage;
@class FMLiveSwitchStunTurnSendIndication;
@class FMLiveSwitchStunTurnUnsupportedTransportProtocolError;
@class FMLiveSwitchStunTurnWrongCredentialsError;
@class FMLiveSwitchStunTurnXorPeerAddressAttribute;
@class FMLiveSwitchStunTurnXorRelayedAddressAttribute;
@class FMLiveSwitchStunUnauthorizedStunError;
@class FMLiveSwitchStunUnknownAttributeError;
@class FMLiveSwitchStunUnknownAttributesAttribute;
@class FMLiveSwitchStunUsernameAttribute;
@class FMLiveSwitchStunUtility;
@class FMLiveSwitchStunXorMappedAddressAttribute;
@class FMLiveSwitchChannel;
@class FMLiveSwitchClient;
@class FMLiveSwitchClientStateLedger;
@class FMLiveSwitchClientStateMachine;
@class FMLiveSwitchClientStateRecord;
@class FMLiveSwitchInvitation;
@class FMLiveSwitchManagedConnectionCollection;
@class FMLiveSwitchManagedConnection;
@class FMLiveSwitchLayoutUtility;
@class FMLiveSwitchServerConnection;
@class FMLiveSwitchMcuConnection;
@class FMLiveSwitchNoMediaServersAvailableEventArgs;
@class FMLiveSwitchNoWebSocketMediaServersAvailableEventArgs;
@class FMLiveSwitchPeerConnection;
@class FMLiveSwitchPeerConnectionOffer;
@class FMLiveSwitchPeerRoleWrapper;
@class FMLiveSwitchSfuConnection;
@class FMLiveSwitchSfuDownstreamConnection;
@class FMLiveSwitchSfuUpstreamConnection;
@class FMLiveSwitchMetricMonitorStateWrapper;
@class FMLiveSwitchMetricMonitorStateChangeEventArgs;
@class FMLiveSwitchApplicationInfo;
@class FMLiveSwitchReport;
@class FMLiveSwitchCandidatePairReport;
@class FMLiveSwitchLayoutConfig;
@class FMLiveSwitchChannelClientLayoutConfig;
@class FMLiveSwitchChannelLayoutConfig;
@class FMLiveSwitchChannelConnectionLayoutConfig;
@class FMLiveSwitchChannelConnectionConfig;
@class FMLiveSwitchChannelClientConfig;
@class FMLiveSwitchChannelConfig;
@class FMLiveSwitchChannelDeviceLayoutConfig;
@class FMLiveSwitchChannelDeviceConfig;
@class FMLiveSwitchChannelReport;
@class FMLiveSwitchChannelUserLayoutConfig;
@class FMLiveSwitchChannelUserConfig;
@class FMLiveSwitchClientConfig;
@class FMLiveSwitchClientReport;
@class FMLiveSwitchConnectionConfig;
@class FMLiveSwitchDataStreamReport;
@class FMLiveSwitchRecordingMode;
@class FMLiveSwitchRtmpLayoutZones;
@class FMLiveSwitchEventBatch;
@class FMLiveSwitchEventType;
@class FMLiveSwitchMediaComponentReport;
@class FMLiveSwitchMediaTrackReport;
@class FMLiveSwitchChannelClaim;
@class FMLiveSwitchChannelInfo;
@class FMLiveSwitchClientInfo;
@class FMLiveSwitchClientStateWrapper;
@class FMLiveSwitchConnectionInfo;
@class FMLiveSwitchConnectionType;
@class FMLiveSwitchDataChannelReport;
@class FMLiveSwitchEventInfo;
@class FMLiveSwitchEventOrigin;
@class FMLiveSwitchNetworkInfo;
@class FMLiveSwitchExternalNetworkInfo;
@class FMLiveSwitchInternalNetworkInfo;
@class FMLiveSwitchInvitationStateWrapper;
@class FMLiveSwitchInviteFeedback;
@class FMLiveSwitchLogEventInfo;
@class FMLiveSwitchMediaInfo;
@class FMLiveSwitchMediaReceiverReport;
@class FMLiveSwitchMediaSenderReport;
@class FMLiveSwitchMessage;
@class FMLiveSwitchMessageInfo;
@class FMLiveSwitchMessageType;
@class FMLiveSwitchMixerReport;
@class FMLiveSwitchMutedConfig;
@class FMLiveSwitchNetworkInterfaceInfo;
@class FMLiveSwitchToken;
@class FMLiveSwitchClaimAction;
@class FMLiveSwitchTokenType;
@class FMLiveSwitchTransportReport;
@class FMLiveSwitchVideoLayout;
@class FMLiveSwitchVideoLayoutRegion;
@class FMLiveSwitchNetworkConnectionStateWrapper;
@class FMLiveSwitchWebhookInfo;


@interface NSNotificationCenter (FMLiveSwitchZeroingWeakRefAdditions)

/**
 * Returns an opaque observation handle that can be removed with NSNotificationCenter's 'removeObserver:'.
 */
- (id)addWeakObserver: (id)observer selector: (SEL)selector name: (NSString *)name object: (id)object;

@end



@class FMLiveSwitchZeroingWeakRef;

@interface FMLiveSwitchZeroingWeakProxy : NSProxy

+ (id)proxyWithTarget: (id)target;

- (instancetype)initWithTarget: (id)target;

- (id)zeroingProxyTarget;

#if NS_BLOCKS_AVAILABLE
// same caveats/restrictions as FMLiveSwitchZeroingWeakRef cleanup block
- (void)setCleanupBlock: (void (^)(id target))block;
#endif

@end



@interface FMLiveSwitchZeroingWeakRef : NSObject

+ (BOOL)canRefCoreFoundationObjects;

+ (id)refWithTarget: (id)target;

- (instancetype)initWithTarget: (id)target;

#if NS_BLOCKS_AVAILABLE
// ON 10.7:
// cleanup block runs while the target's memory is still
// allocated but after all dealloc methods have run
// (it runs at associated object cleanup time)
// you can use the target's pointer value but don't
// manipulate its contents!

// ON 10.6 AND BELOW:
// cleanup block runs while the global ZWR lock is held
// so make it short and sweet!
// use GCD or something to schedule execution later
// if you need to do something that may take a while
//
// it is unsafe to call -target on the weak ref from
// inside the cleanup block, which is why the target
// is passed in as a parameter
// note that you must not resurrect the target at this point!
- (void)setCleanupBlock: (void (^)(id target))block;
#endif

- (id)target;

@end

#ifndef __has_feature
#define __has_feature(feature) 0
#endif

#define FMLiveSwitchWeakVar(var)            __weak_ ## var

#if __has_feature(objc_arc_weak)

#define FMLiveSwitchWeakDeclare(var)        __weak __typeof__((var)) FMLiveSwitchWeakVar(var) = var
#define FMLiveSwitchWeakImport(var)         __typeof__((FMLiveSwitchWeakVar(var))) var = FMLiveSwitchWeakVar(var)
#define FMLiveSwitchWeakImportReturn(var)   FMLiveSwitchWeakImport(var); do { if(var == nil) return; } while(NO)

#else

#define FMLiveSwitchWeakDeclare(var)        __typeof__((var)) FMLiveSwitchWeakVar(var) = (id)[FMLiveSwitchZeroingWeakRef refWithTarget:var]
#define FMLiveSwitchWeakImport(var)         __typeof__((FMLiveSwitchWeakVar(var))) var = [(FMLiveSwitchZeroingWeakRef *)FMLiveSwitchWeakVar(var) target]
#define FMLiveSwitchWeakImportReturn(var)   FMLiveSwitchWeakImport(var); do { if(var == nil) return; } while(NO)

#endif

#define FMLiveSwitchWeakSelfDeclare()       FMLiveSwitchWeakDeclare(self)
#define FMLiveSwitchWeakSelfImport()        FMLiveSwitchWeakImport(self)
#define FMLiveSwitchWeakSelfImportReturn()  FMLiveSwitchWeakImportReturn(self)



typedef NS_ENUM(NSInteger, FMLiveSwitchStringComparison) {
    FMLiveSwitchStringComparisonCurrentCulture,
    FMLiveSwitchStringComparisonCurrentCultureIgnoreCase,
    FMLiveSwitchStringComparisonInvariantCulture,
    FMLiveSwitchStringComparisonInvariantCultureIgnoreCase,
    FMLiveSwitchStringComparisonOrdinal,
    FMLiveSwitchStringComparisonOrdinalIgnoreCase
};



typedef NS_ENUM(NSInteger, FMLiveSwitchUriKind) {
    FMLiveSwitchUriKindRelativeOrAbsolute = 0,
    FMLiveSwitchUriKindAbsolute = 1,
    FMLiveSwitchUriKindRelative = 2
};



@interface FMLiveSwitchIFormatProvider : NSObject 

@end



@interface FMLiveSwitchCultureInfo : FMLiveSwitchIFormatProvider 

+ (FMLiveSwitchCultureInfo*) invariantCulture;
+ (FMLiveSwitchCultureInfo*) currentCulture;

@end



@interface NSDate (FMLiveSwitchExtensions)

+ (NSDate*) fmNow;
+ (NSDate*) fmUtcNow;
- (instancetype)initWithFmTicks:(long long)ticks;
- (instancetype)initWithFmYear:(int)year month:(int)month day:(int)day hour:(int)hour minute:(int)minute second:(int)second;
- (instancetype)initWithFmYear:(int)year month:(int)month day:(int)day hour:(int)hour minute:(int)minute second:(int)second millisecond:(int)millisecond;
- (long long) fmTicks;
- (NSDate*) fmToUniversalTime;
- (NSString*) fmDescriptionWithFormat: (NSString*) format provider: (FMLiveSwitchIFormatProvider*) provider;
- (NSDate*) fmAddHours: (double) value;
- (NSDate*) fmAddMinutes: (double) value;
- (NSDate*) fmAddSeconds: (double) value;
- (NSDate*) fmAddMilliseconds: (double) value;
- (int) fmYear;
- (int) fmMonth;
- (int) fmDay;
- (int) fmHour;
- (int) fmMinute;
- (int) fmSecond;
- (int) fmMillisecond;

@end


@interface NSException (FMLiveSwitchExtensions)

+ (NSException *)fmException;
+ (NSException *)fmExceptionWithMessage: (NSString*) message;
+ (NSException *)fmExceptionWithMessage: (NSString*) message innerException: (NSException*) innerException;

- (instancetype)initFm;
- (instancetype)initWithFmMessage: (NSString*) message;
- (instancetype)initWithFmMessage: (NSString*) message innerException: (NSException*) innerException;
- (NSString*) fmMessage;

@end


@interface NSMutableArray (FMLiveSwitchExtensions)

- (id)fmPopoff;
- (NSMutableArray*) fmItem;
- (NSMutableArray*) fmToArray;
- (NSMutableArray*) fmGetRangeWithIndex: (int) index count: (int) count;
- (bool) fmRemoveWithItem: (id) item;
- (int) fmLength;
- (void) fmCopyToWithArray: (NSMutableArray*) array arrayIndex: (int) arrayIndex;
- (void) fmInsertWithIndex: (int) index item: (id) item;
- (void) fmRemoveRangeWithIndex: (int) index count: (int) count;
- (id)fmSetObj: (id) obj atIndex: (int) index;
- (id)fmGetObjAtIndex: (int) index;
- (id)fmGetWithIndex: (int) index;
- (void)fmPushWithItem:(id)item;

@end


@interface NSMutableData (FMLiveSwitchExtensions)

- (instancetype)initWithFmCollection:(NSData*)collection;
- (NSMutableData*)fmItem;
- (NSMutableData*)fmToArray;
- (void)fmAddRangeWithCollection:(NSData*)collection;
- (NSMutableData*)fmGetRangeWithIndex:(int)index count:(int)count;
- (void)fmRemoveRangeWithIndex:(int)index count:(int)count;
- (void)fmInsertRangeWithIndex:(int)index collection:(NSData*)collection;
- (NSNumber*)fmGetObjAtIndex:(int)index;
- (void)fmSetObj:(NSNumber*)object atIndex:(int)index;
- (int)fmCount;
- (void)fmAddWithItem:(unsigned char)item;

@end


@interface NSMutableDictionary (FMLiveSwitchExtensions)

- (NSMutableDictionary*) fmItem;
- (bool) fmRemoveWithKey: (NSObject*) key;
- (bool) fmContainsKey: (NSObject*) key;
- (bool) fmContainsValue: (id) value;
- (NSMutableArray*) fmKeys;
- (NSMutableArray*) fmValues;
- (bool) fmTryGetValueWithKey: (NSObject*) key value: (NSObject**) value;
- (id)fmAddWithKey: (NSObject<NSCopying>*) key value: (id) value;
- (id)fmSetObject: (id) obj atKey: (NSObject<NSCopying>*) key;
- (id)fmGetObjectAtKey: (NSObject*) key;

@end



@interface NSMutableString (FMLiveSwitchExtensions)

- (NSMutableString *)fmRemoveWithStartIndex:(int) startIndex length:(int) length;
- (NSMutableString *)fmAppend:(NSString *)value;
- (NSMutableString *)fmAppend:(NSString *)value startIndex:(int)startIndex count:(int)count;
- (NSString *)fmDescription;

@end



@interface NSString (FMLiveSwitchExtensions)

- (bool) fmIsEqual: (NSString*) str comparisonType : (FMLiveSwitchStringComparison)comparisonType;
- (bool) fmContains: (NSString*) str;
- (bool) fmStartsWith: (NSString*) str;
- (bool) fmStartsWith: (NSString*) str comparisonType: (FMLiveSwitchStringComparison) comparisonType;
- (bool) fmEndsWith: (NSString*) str;
- (bool) fmEndsWith: (NSString*) str comparisonType: (FMLiveSwitchStringComparison) comparisonType;
- (int) fmIndexOf: (NSString*) value;
- (int) fmIndexOf: (NSString*) value comparisonType: (FMLiveSwitchStringComparison) comparisonType;
- (int) fmLastIndexOf: (NSString*) value;
- (int) fmLastIndexOf: (NSString*) value comparisonType: (FMLiveSwitchStringComparison) comparisonType;
- (NSString*) fmSubstringWithStartIndex: (int) startIndex;
- (NSString*) fmSubstringWithStartIndex: (int) startIndex length: (int) length;
- (NSString*) fmTrim;
- (NSString*) fmTrimEndWithTrimChars:(NSArray*)trimChars;
- (NSMutableArray*) fmSplitWithSeparator: (NSMutableArray*) separator;
- (NSString*) fmToLower;
- (NSString*) fmToUpper;
- (NSString*) fmToLowerWithCulture: (FMLiveSwitchCultureInfo*) culture;
- (NSString*) fmReplaceWithOldValue: (NSString*) oldValue newValue: (NSString*) newValue;
- (int) fmCompareToWithStrB: (NSString *) strB;
+ (NSString*) fmFormat: (NSString*) format args: (NSMutableArray*) args;
+ (NSString*) fmFormat: (NSString*) format arg0: (NSObject*) arg0;
+ (NSString*) fmFormat: (NSString*) format arg0: (NSObject*) arg0 arg1: (NSObject*) arg1;
+ (NSString*) fmFormat: (NSString*) format arg0: (NSObject*) arg0 arg1: (NSObject*) arg1 arg2: (NSObject*) arg2;
+ (NSString*) fmFormat: (NSString*) format arg0: (NSObject*) arg0 arg1: (NSObject*) arg1 arg2: (NSObject*) arg2 arg3: (NSObject*) arg3;
+ (NSString*) fmFormat: (NSString*) format arg0: (NSObject*) arg0 arg1: (NSObject*) arg1 arg2: (NSObject*) arg2 arg3: (NSObject*) arg3 arg4: (NSObject*) arg4;
+ (NSString*) fmFormat: (NSString*) format arg0: (NSObject*) arg0 arg1: (NSObject*) arg1 arg2: (NSObject*) arg2 arg3: (NSObject*) arg3 arg4: (NSObject*) arg4 arg5: (NSObject*) arg5;
+ (NSString*) fmFormat: (NSString*) format arg0: (NSObject*) arg0 arg1: (NSObject*) arg1 arg2: (NSObject*) arg2 arg3: (NSObject*) arg3 arg4: (NSObject*) arg4 arg5: (NSObject*) arg5 arg6: (NSObject*) arg6;
+ (NSString*) fmFormat: (NSString*) format arg0: (NSObject*) arg0 arg1: (NSObject*) arg1 arg2: (NSObject*) arg2 arg3: (NSObject*) arg3 arg4: (NSObject*) arg4 arg5: (NSObject*) arg5 arg6: (NSObject*) arg6 arg7: (NSObject*) arg7;
+ (NSString*) fmFormat: (NSString*) format arg0: (NSObject*) arg0 arg1: (NSObject*) arg1 arg2: (NSObject*) arg2 arg3: (NSObject*) arg3 arg4: (NSObject*) arg4 arg5: (NSObject*) arg5 arg6: (NSObject*) arg6 arg7: (NSObject*) arg7 arg8: (NSObject*) arg8;
+ (NSString*) fmFormat: (NSString*) format arg0: (NSObject*) arg0 arg1: (NSObject*) arg1 arg2: (NSObject*) arg2 arg3: (NSObject*) arg3 arg4: (NSObject*) arg4 arg5: (NSObject*) arg5 arg6: (NSObject*) arg6 arg7: (NSObject*) arg7 arg8: (NSObject*) arg8 arg9: (NSObject*) arg9;
+ (bool) fmIsNullOrEmpty: (NSString*) value;
+ (NSString*) fmEmpty;
+ (NSString*) fmJoinWithSeparator: (NSString*) separator value: (NSMutableArray*) value;
+ (NSString*) fmConcat: (NSMutableArray*) values;
+ (NSString*) fmConcatWithArgs: (NSMutableArray*) args;
+ (NSString*) fmConcatWithArg0: (NSString*) arg0;
+ (NSString*) fmConcatWithArg0: (NSString*) arg0 arg1: (NSString*) arg1;
+ (NSString*) fmConcatWithArg0: (NSString*) arg0 arg1: (NSString*) arg1 arg2: (NSString*) arg2;
+ (NSString*) fmConcatWithArg0: (NSString*) arg0 arg1: (NSString*) arg1 arg2: (NSString*) arg2 arg3: (NSString*) arg3;
+ (NSString*) fmConcatWithStr0: (NSString*) str0;
+ (NSString*) fmConcatWithStr0: (NSString*) str0 str1: (NSString*) str1;
+ (NSString*) fmConcatWithStr0: (NSString*) str0 str1: (NSString*) str1 str2: (NSString*) str2;
+ (NSString*) fmConcatWithStr0: (NSString*) str0 str1: (NSString*) str1 str2: (NSString*) str2 str3: (NSString*) str3;
+ (NSString*) fmReformatNetFormat: (NSString*) format count: (int) count;

@end


@interface NSThread (FMLiveSwitchExtensions)

+ (void)fmPerformBlockOnMainThread:(void (^)(void))block;
+ (void)fmPerformBlockInBackground:(void (^)(void))block;
+ (void)fmRunBlock:(void (^)(void))block;
- (void)fmPerformBlock:(void (^)(void))block;
- (void)fmPerformBlock:(void (^)(void))block waitUntilDone:(BOOL)wait;
- (void)fmPerformBlock:(void (^)(void))block afterDelay:(NSTimeInterval)delay;

@end



@interface NSURL (FMLiveSwitchExtensions)

- (instancetype)initWithFmUriString: (NSString*) uriString;
- (NSString*) fmDescription;
- (NSString*) fmDnsSafeHost;
- (NSString*) fmAbsolutePath;
- (int) fmPortNet;
- (NSString*) fmQueryNet;
+ (bool) fmTryCreateWithUriString: (NSString*) uriString uriKind: (FMLiveSwitchUriKind) uriKind result: (NSURL**) result;
+ (bool) fmTryCreateWithBaseUri: (NSURL*) baseUri relativeUri: (NSString*) relativeUri result: (NSURL**) result;
+ (NSString*) fmEscapeDataStringWithStringToEscape: (NSString*) stringToEscape;

@end


@interface NSURLResponse (FMLiveSwitchExtensions)

- (NSStream*) fmGetResponseStream;

@end


@interface FMLiveSwitchAction0 : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)actionWithBlock:(void (^)(void))block;
- (instancetype)initWithBlock:(void (^)(void))block;
/* static init */ + (instancetype)actionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (void)invoke;

@end


@interface FMLiveSwitchAction1<__covariant T> : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)actionWithBlock:(void (^)(T))block;
- (instancetype)initWithBlock:(void (^)(T))block;
/* static init */ + (instancetype)actionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (void)invokeWithP:(T)p;

@end


@interface FMLiveSwitchAction2<__covariant T1, __covariant T2> : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)actionWithBlock:(void (^)(T1, T2))block;
- (instancetype)initWithBlock:(void (^)(T1, T2))block;
/* static init */ + (instancetype)actionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (void)invokeWithP1:(T1)p1 p2:(T2)p2;

@end


@interface FMLiveSwitchAction3<__covariant T1, __covariant T2, __covariant T3> : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)actionWithBlock:(void (^)(T1, T2, T3))block;
- (instancetype)initWithBlock:(void (^)(T1, T2, T3))block;
/* static init */ + (instancetype)actionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (void)invokeWithP1:(T1)p1 p2:(T2)p2 p3:(T3)p3;

@end


@interface FMLiveSwitchAction4<__covariant T1, __covariant T2, __covariant T3, __covariant T4> : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)actionWithBlock:(void (^)(T1, T2, T3, T4))block;
- (instancetype)initWithBlock:(void (^)(T1, T2, T3, T4))block;
/* static init */ + (instancetype)actionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (void)invokeWithP1:(T1)p1 p2:(T2)p2 p3:(T3)p3 p4:(T4)p4;

@end


@interface FMLiveSwitchAction5<__covariant T1, __covariant T2, __covariant T3, __covariant T4, __covariant T5> : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)actionWithBlock:(void (^)(T1, T2, T3, T4, T5))block;
- (instancetype)initWithBlock:(void (^)(T1, T2, T3, T4, T5))block;
/* static init */ + (instancetype)actionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (void)invokeWithP1:(T1)p1 p2:(T2)p2 p3:(T3)p3 p4:(T4)p4 p5:(T5)p5;

@end


@interface FMLiveSwitchAction6<__covariant T1, __covariant T2, __covariant T3, __covariant T4, __covariant T5, __covariant T6> : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)actionWithBlock:(void (^)(T1, T2, T3, T4, T5, T6))block;
- (instancetype)initWithBlock:(void (^)(T1, T2, T3, T4, T5, T6))block;
/* static init */ + (instancetype)actionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (void)invokeWithP1:(T1)p1 p2:(T2)p2 p3:(T3)p3 p4:(T4)p4 p5:(T5)p5 p6:(T6)p6;

@end


@interface FMLiveSwitchFunction0<__covariant R> : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)functionWithBlock:(R (^)(void))block;
- (instancetype)initWithBlock:(R (^)(void))block;
/* static init */ + (instancetype)functionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (R)invoke;

@end


@interface FMLiveSwitchFunction1<__covariant T, __covariant R> : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)functionWithBlock:(R (^)(T))block;
- (instancetype)initWithBlock:(R (^)(T))block;
/* static init */ + (instancetype)functionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (R)invokeWithP:(T)p;

@end


@interface FMLiveSwitchFunction2<__covariant T1, __covariant T2, __covariant R> : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)functionWithBlock:(R (^)(T1, T2))block;
- (instancetype)initWithBlock:(R (^)(T1, T2))block;
/* static init */ + (instancetype)functionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (R)invokeWithP1:(T1)p1 p2:(T2)p2;

@end


@interface FMLiveSwitchFunction3<__covariant T1, __covariant T2, __covariant T3, __covariant R> : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)functionWithBlock:(R (^)(T1, T2, T3))block;
- (instancetype)initWithBlock:(R (^)(T1, T2, T3))block;
/* static init */ + (instancetype)functionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (R)invokeWithP1:(T1)p1 p2:(T2)p2 p3:(T3)p3;

@end


@interface FMLiveSwitchFunction4<__covariant T1, __covariant T2, __covariant T3, __covariant T4, __covariant R> : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)functionWithBlock:(R (^)(T1, T2, T3, T4))block;
- (instancetype)initWithBlock:(R (^)(T1, T2, T3, T4))block;
/* static init */ + (instancetype)functionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (R)invokeWithP1:(T1)p1 p2:(T2)p2 p3:(T3)p3 p4:(T4)p4;

@end


@interface FMLiveSwitchFunction5<__covariant T1, __covariant T2, __covariant T3, __covariant T4, __covariant T5, __covariant R> : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)functionWithBlock:(R (^)(T1, T2, T3, T4, T5))block;
- (instancetype)initWithBlock:(R (^)(T1, T2, T3, T4, T5))block;
/* static init */ + (instancetype)functionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (R)invokeWithP1:(T1)p1 p2:(T2)p2 p3:(T3)p3 p4:(T4)p4 p5:(T5)p5;

@end


@interface FMLiveSwitchFunction6<__covariant T1, __covariant T2, __covariant T3, __covariant T4, __covariant T5, __covariant T6, __covariant R> : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)functionWithBlock:(R (^)(T1, T2, T3, T4, T5, T6))block;
- (instancetype)initWithBlock:(R (^)(T1, T2, T3, T4, T5, T6))block;
/* static init */ + (instancetype)functionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (R)invokeWithP1:(T1)p1 p2:(T2)p2 p3:(T3)p3 p4:(T4)p4 p5:(T5)p5 p6:(T6)p6;

@end



@interface FMLiveSwitchBase64 : NSObject 

+ (NSString*)encodeWithB:(NSData*)b;
+ (NSString*)encodeBuffer:(FMLiveSwitchDataBuffer*)buffer;
+ (NSMutableData*)decodeWithS:(NSString*)s;
+ (bool)tryEncodeWithB:(NSData*)b encoded:(NSString**)encoded;
+ (bool)tryEncodeBuffer:(FMLiveSwitchDataBuffer*)buffer encoded:(NSString**)encoded;
+ (bool)tryDecodeWithS:(NSString*)s decoded:(NSData**)decoded;

@end



@interface FMLiveSwitchBitAssistant : NSObject 
+ (bool)isLittleEndian;
+ (unsigned char)castByte:(int)value;
+ (int)castInteger:(unsigned char)value;
+ (long long)castLong:(unsigned char)value;
+ (unsigned char)leftShift:(unsigned char)value count:(int)count;
+ (short)leftShiftShort:(short)value count:(int)count;
+ (int)leftShiftInteger:(int)value count:(int)count;
+ (long long)leftShiftLong:(long long)value count:(int)count;
+ (unsigned char)rightShift:(unsigned char)value count:(int)count;
+ (short)rightShiftShort:(short)value count:(int)count;
+ (int)rightShiftInteger:(int)value count:(int)count;
+ (long long)rightShiftLong:(long long)value count:(int)count;
+ (bool)sequencesAreEqualWithArray1:(NSData*)array1 array2:(NSData*)array2;
+ (bool)sequencesAreEqualWithArray1:(NSData*)array1 offset1:(int)offset1 array2:(NSData*)array2 offset2:(int)offset2 length:(int)length;
+ (bool)sequencesAreEqualConstantTimeWithArray1:(NSData*)array1 array2:(NSData*)array2;
+ (bool)sequencesAreEqualConstantTimeWithArray1:(NSData*)array1 offset1:(int)offset1 array2:(NSData*)array2 offset2:(int)offset2 length:(int)length;
+ (NSMutableData*)subArray:(NSData*)array offset:(int)offset;
+ (NSMutableData*)subArray:(NSData*)array offset:(int)offset count:(int)count;
+ (NSString*)getHexStringWithArray:(NSData*)array offset:(int)offset length:(int)length;
+ (NSString*)getHexStringWithArray:(NSData*)array;
+ (NSMutableData*)getHexBytesWithS:(NSString*)s;
+ (NSString*)getBinaryStringWithArray:(NSData*)array offset:(int)offset length:(int)length;
+ (NSString*)getBinaryStringWithArray:(NSData*)array;
+ (NSMutableData*)getBinaryBytesWithS:(NSString*)s;
+ (double)convertBytesToDoubleWithBytes:(NSMutableData*)bytes index:(int)index littleEndian:(bool)littleEndian;
+ (float) convertBytesToSingleWithBytes:(NSMutableData*)bytes index:(int)index littleEndian:(bool)littleEndian;
+ (NSMutableData*) convertDoubleToBytes:(double)dbl littleEndian:(bool)littleEndian;
+ (NSMutableData*) convertSingleToBytes:(float)single littleEndian:(bool)littleEndian;

+ (void) reverseWithArray:(NSMutableData*)array;
+ (void) copyWithSource:(NSData*)source sourceIndex:(int)sourceIndex destination:(NSMutableData*)destination destinationIndex:(int)destinationIndex length:(int)length;
+ (void) copyFloatsWithSource:(NSArray*)source sourceIndex:(int)sourceIndex destination:(NSMutableArray*)destination destinationIndex:(int)destinationIndex length:(int)length;
+ (void) setWithArray:(NSMutableData*)array index:(int)index length:(int)length value:(char)value;

@end


@interface FMLiveSwitchByteCollection : NSObject 

- (int)count;
/* static init */ + (instancetype)byteCollection;
- (instancetype)init;
/* static init */ + (instancetype)byteCollectionWithBuffer:(NSData *)buffer;
- (instancetype)initWithBuffer:(NSData *)buffer;
- (void)addWithB:(char)b;
- (void)addRangeWithBuffer:(NSData *)buffer;
- (void)addRangeWithCollection:(FMLiveSwitchByteCollection *)collection;
- (void)removeRangeWithIndex:(int)index count:(int)count;
- (void)insertRangeWithIndex:(int)index buffer:(NSData *)buffer;
- (void)insertRangeWithIndex:(int)index collection:(FMLiveSwitchByteCollection *)collection;
- (NSMutableData *)getRangeWithIndex:(int)index count:(int)count;
- (char)getWithIndex:(int)index;
- (NSMutableData *)toArray;

@end


@interface FMLiveSwitchConvert : NSObject 

+ (int) toInt32: (NSString*) value fromBase: (int) fromBase;

@end



@interface FMLiveSwitchRsaCrypto : NSObject 

+ (int)defaultKeySize;
+ (void)setDefaultKeySize:(int)defaultKeySize;
+ (FMLiveSwitchRsaKey *)createKey;
+ (FMLiveSwitchRsaKey *)createKeyWithKeySize:(int)keySize;
+ (NSMutableData *)signMd5Sha1:(NSMutableData *)md5Sha1 privateKey:(FMLiveSwitchRsaKey *)privateKey;
+ (bool)verifyMd5Sha1:(NSMutableData *)md5Sha1 signature:(NSData *)signature publicKey:(FMLiveSwitchRsaKey *)publicKey;
+ (NSMutableData *)signSha1:(NSMutableData *)sha1 privateKey:(FMLiveSwitchRsaKey *)privateKey;
+ (bool)verifySha1:(NSMutableData *)sha1 signature:(NSData *)signature publicKey:(FMLiveSwitchRsaKey *)publicKey;
+ (NSMutableData *)signSha256:(NSMutableData *)sha256 privateKey:(FMLiveSwitchRsaKey *)privateKey;
+ (bool)verifySha256:(NSMutableData *)sha256 signature:(NSData *)signature publicKey:(FMLiveSwitchRsaKey *)publicKey;
+ (NSMutableData *)encryptWithData:(NSData *)data publicKey:(FMLiveSwitchRsaKey *)publicKey;
+ (NSMutableData *)decryptWithData:(NSData *)data privateKey:(FMLiveSwitchRsaKey *)privateKey;

@end



@interface FMLiveSwitchDateTimeFormatInfo : FMLiveSwitchIFormatProvider 

+ (FMLiveSwitchDateTimeFormatInfo*) invariantInfo;

@end


typedef NS_ENUM(NSInteger, DateTimeStyles) {
    FMLiveSwitchDateTimeStylesNone = 0,
    FMLiveSwitchDateTimeStylesAllowLeadingWhite = 1,
    FMLiveSwitchDateTimeStylesAllowTrailingWhite = 2,
    FMLiveSwitchDateTimeStylesAllowInnerWhite = 4,
    FMLiveSwitchDateTimeStylesAllowWhiteSpaces = 7,
    FMLiveSwitchDateTimeStylesNoCurrentDateDefault = 8,
    FMLiveSwitchDateTimeStylesAdjustToUniversal = 16,
    FMLiveSwitchDateTimeStylesAssumeLocal = 32,
    FMLiveSwitchDateTimeStylesAssumeUniversal = 64,
    FMLiveSwitchDateTimeStylesRoundtripKind = 128
};



@interface FMLiveSwitchEncoding : NSObject 

+ (FMLiveSwitchEncoding*)ascii;
+ (FMLiveSwitchEncoding*)utf8;
- (NSString*)getStringWithBytes:(NSMutableData*)bytes index:(int)index count:(int)count;
- (NSString*)getStringWithBytes:(NSMutableData*)bytes;
- (NSMutableData*)getBytesWithS:(NSString*)s;
- (int)getByteCountWithS:(NSString*)s;

@end


@interface FMLiveSwitchEnvironment : NSObject 

+ (int) tickCount;

@end




@interface FMLiveSwitchGlobal : NSObject 

+ (id) tryCast: (id) obj toClass: (id) cls;
+ (id) tryCast: (id) obj toInterface: (Protocol *) interface;
+ (id) createEmptyArray: (NSArray*) dimensions;
+ (id) createEmptyData: (NSArray*) dimensions;

+ (FMLiveSwitchAction0 *)findAction0WithSelector:(SEL)selector target:(id)target callbacks:(NSArray<FMLiveSwitchAction0 *> *)callbacks;
+ (FMLiveSwitchAction1 *)findAction1WithSelector:(SEL)selector target:(id)target callbacks:(NSArray<FMLiveSwitchAction1 *> *)callbacks;
+ (FMLiveSwitchAction2 *)findAction2WithSelector:(SEL)selector target:(id)target callbacks:(NSArray<FMLiveSwitchAction2 *> *)callbacks;
+ (FMLiveSwitchAction3 *)findAction3WithSelector:(SEL)selector target:(id)target callbacks:(NSArray<FMLiveSwitchAction3 *> *)callbacks;
+ (FMLiveSwitchAction4 *)findAction4WithSelector:(SEL)selector target:(id)target callbacks:(NSArray<FMLiveSwitchAction4 *> *)callbacks;
+ (FMLiveSwitchAction5 *)findAction5WithSelector:(SEL)selector target:(id)target callbacks:(NSArray<FMLiveSwitchAction5 *> *)callbacks;
+ (FMLiveSwitchAction6 *)findAction6WithSelector:(SEL)selector target:(id)target callbacks:(NSArray<FMLiveSwitchAction6 *> *)callbacks;

+ (FMLiveSwitchFunction0 *)findFunction0WithSelector:(SEL)selector target:(id)target callbacks:(NSArray<FMLiveSwitchFunction0 *> *)callbacks;
+ (FMLiveSwitchFunction1 *)findFunction1WithSelector:(SEL)selector target:(id)target callbacks:(NSArray<FMLiveSwitchFunction1 *> *)callbacks;
+ (FMLiveSwitchFunction2 *)findFunction2WithSelector:(SEL)selector target:(id)target callbacks:(NSArray<FMLiveSwitchFunction2 *> *)callbacks;
+ (FMLiveSwitchFunction3 *)findFunction3WithSelector:(SEL)selector target:(id)target callbacks:(NSArray<FMLiveSwitchFunction3 *> *)callbacks;
+ (FMLiveSwitchFunction4 *)findFunction4WithSelector:(SEL)selector target:(id)target callbacks:(NSArray<FMLiveSwitchFunction4 *> *)callbacks;
+ (FMLiveSwitchFunction5 *)findFunction5WithSelector:(SEL)selector target:(id)target callbacks:(NSArray<FMLiveSwitchFunction5 *> *)callbacks;
+ (FMLiveSwitchFunction6 *)findFunction6WithSelector:(SEL)selector target:(id)target callbacks:(NSArray<FMLiveSwitchFunction6 *> *)callbacks;

+ (uint8_t)decrementByteWithTarget:(id)target value:(uint8_t)value setter:(FMLiveSwitchAction2 *)setter prefix:(bool)prefix;
+ (uint8_t)incrementByteWithTarget:(id)target value:(uint8_t)value setter:(FMLiveSwitchAction2 *)setter prefix:(bool)prefix;
+ (short)decrementInt16WithTarget:(id)target value:(short)value setter:(FMLiveSwitchAction2 *)setter prefix:(bool)prefix;
+ (short)incrementInt16WithTarget:(id)target value:(short)value setter:(FMLiveSwitchAction2 *)setter prefix:(bool)prefix;
+ (int)decrementInt32WithTarget:(id)target value:(int)value setter:(FMLiveSwitchAction2 *)setter prefix:(bool)prefix;
+ (int)incrementInt32WithTarget:(id)target value:(int)value setter:(FMLiveSwitchAction2 *)setter prefix:(bool)prefix;
+ (long long)decrementInt64WithTarget:(id)target value:(long long)value setter:(FMLiveSwitchAction2 *)setter prefix:(bool)prefix;
+ (long long)incrementInt64WithTarget:(id)target value:(long long)value setter:(FMLiveSwitchAction2 *)setter prefix:(bool)prefix;

@end


@interface FMLiveSwitchGuid : NSObject 

+ (instancetype) empty;
+ (instancetype) generate;
+ (NSString*) descriptionWithG: (FMLiveSwitchGuid*) g;
/* static init */ + (instancetype)guidWithB: (NSData *) b;
- (instancetype)initWithB: (NSData *) b;
/* static init */ + (instancetype)guidWithG: (NSString*) g;
- (instancetype)initWithG: (NSString*) g;
- (NSString*) description;
- (NSMutableData*) toByteArray;
- (int)compareTo:(FMLiveSwitchGuid*)value;

@end



@interface FMLiveSwitchJsonChecker : NSObject 

- (bool) checkStringWithStr: (NSString*) str;

@end

/*!
 * @header FMLiveSwitchRecursiveCondition Class
 * Created by Bradley Snyder on 2/12/14.
 * @copyright
 *   Copyright 2014 Bradley J. Snyder <snyder.bradleyj@gmail.com>
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */


/*!
 * @class NSRecursiveCondition
 * Class with identical functionality to NSCondition, but with a recursive mutex for locking,
 * effectively combining the functionality of NSCondition with NSRecursiveLock.
 */
@interface FMLiveSwitchRecursiveCondition : NSObject<NSLocking>

- (void)lock;
- (void)unlock;
- (void)signal;
- (void)broadcast;
- (void)wait;
- (BOOL)waitUntilDate:(NSDate*)limit;

@end


@interface FMLiveSwitchManagedLock : NSObject

- (void)lock;
- (void)unlock;

@end



@interface FMLiveSwitchManagedCondition : NSObject

- (FMLiveSwitchRecursiveCondition *)condition;
- (void)halt;
- (bool)haltWithMillisecondsTimeout:(int)millisecondsTimeout;
- (void)pulse;
- (void)pulseAll;

@end


@interface FMLiveSwitchManagedStopwatch : NSObject

+ (long long)timestampFromAbsoluteTime:(long long)absoluteTime; // mach_absolute_time

+ (long long)getTimestamp;
+ (long long)getTimestampMillis;
- (long long)elapsedTicks;
- (long long)elapsedMilliseconds;
- (void)start;
- (void)stop;
- (void)restart;

@end




@interface FMLiveSwitchManagedThread : NSObject 

/* static init */ + (instancetype)managedThreadWithLoop:(FMLiveSwitchAction1<FMLiveSwitchManagedThread*> *)callback;
- (instancetype)initWithLoop:(FMLiveSwitchAction1<FMLiveSwitchManagedThread*> *)callback;
- (void)start;
- (void)loopBegin;
- (void)loopEnd;
+ (void)sleepWithMillisecondsTimeout:(int)millisecondsTimeout;
+ (void)dispatchWithAction:(FMLiveSwitchAction0 *)action;
+ (void)dispatchWithAction:(FMLiveSwitchAction0 *)action sender:(id)sender;
+ (long long)currentThreadId;
+ (FMLiveSwitchFuture *)delayWithMillis:(long)millis;

@end


@interface FMLiveSwitchMathAssistant : NSObject 

+ (double)pi;
+ (double)e;
+ (int)absWithIntValue:(int)intValue;
+ (long long)absWithLongValue:(long long)longValue;
+ (float)absWithFloatValue:(float)floatValue;
+ (double)absWithDoubleValue:(double)doubleValue;
+ (double)acos:(double)value;
+ (double)asin:(double)value;
+ (double)atan:(double)value;
+ (double)atan2WithY:(double)y x:(double)x;
+ (double)ceil:(double)value;
+ (double)cos:(double)value;
+ (double)cosh:(double)value;
+ (double)exp:(double)value;
+ (double)floor:(double)value;
+ (double)log:(double)value;
+ (double)log10:(double)value;
+ (int)maxWithIntValue1:(int)intValue1 intValue2:(int)intValue2;
+ (long long)maxWithLongValue1:(long long)longValue1 longValue2:(long long)longValue2;
+ (float)maxWithFloatValue1:(float)floatValue1 floatValue2:(float)floatValue2;
+ (double)maxWithDoubleValue1:(double)doubleValue1 doubleValue2:(double)doubleValue2;
+ (int)minWithIntValue1:(int)intValue1 intValue2:(int)intValue2;
+ (long long)minWithLongValue1:(long long)longValue1 longValue2:(long long)longValue2;
+ (float)minWithFloatValue1:(float)floatValue1 floatValue2:(float)floatValue2;
+ (double)minWithDoubleValue1:(double)doubleValue1 doubleValue2:(double)doubleValue2;
+ (double)powWithX:(double)x y:(double)y;
+ (double)round:(double)value;
+ (double)sin:(double)value;
+ (double)sinh:(double)value;
+ (double)sqrt:(double)value;
+ (double)tan:(double)value;
+ (double)tanh:(double)value;

@end


@interface FMLiveSwitchNameValueCollection : NSObject 

/* static init */ + (instancetype)nameValueCollection;
- (instancetype)init;
/* static init */ + (instancetype)nameValueCollectionWithCapacity:(int)capacity;
- (instancetype)initWithCapacity:(int)capacity;
/* static init */ + (instancetype)nameValueCollectionWithCollection:(FMLiveSwitchNameValueCollection*)collection;
- (instancetype)initWithCollection:(FMLiveSwitchNameValueCollection*)collection;
- (NSMutableDictionary*)item;
- (NSArray*)allKeys;
- (NSString*)objectForKey:(NSString*)key;
- (void)setObject:(NSString*)object forKey:(NSString*)key;
- (void)setWithName:(NSString*)name value:(NSString*)val;

@end


@interface FMLiveSwitchNullableBool : NSObject 

+ (FMLiveSwitchNullableBool*) fromValue: (bool) value;
+ (FMLiveSwitchNullableBool*) null;
/* static init */ + (instancetype)nullableBoolWithValue: (bool) value;
- (instancetype)initWithValue: (bool) value;
- (bool) hasValue;
- (bool) value;
- (void) setValue: (bool) value;
- (bool) getValueOrDefault;
- (NSString*) description;

@end


@interface FMLiveSwitchNullableChar : NSObject 

+ (FMLiveSwitchNullableChar*) fromValue: (char) value;
+ (FMLiveSwitchNullableChar*) null;
/* static init */ + (instancetype)nullableCharWithValue: (char) value;
- (instancetype)initWithValue: (char) value;
- (bool) hasValue;
- (char) value;
- (void) setValue: (char) value;
- (char) getValueOrDefault;
- (NSString*) description;

@end


@interface FMLiveSwitchNullableDate : NSObject 

+ (FMLiveSwitchNullableDate*) fromValue: (NSDate*) value;
+ (FMLiveSwitchNullableDate*) null;
/* static init */ + (instancetype)nullableDateWithValue: (NSDate*) value;
- (instancetype)initWithValue: (NSDate*) value;
- (bool) hasValue;
- (NSDate*) value;
- (void) setValue: (NSDate*) value;
- (NSDate*) getValueOrDefault;

@end



@interface FMLiveSwitchNullableDecimal : NSObject 

+ (FMLiveSwitchNullableDecimal*) fromValue: (NSDecimal) value;
+ (FMLiveSwitchNullableDecimal*) null;
/* static init */ + (instancetype)nullableDecimalWithValue: (NSDecimal) value;
- (instancetype)initWithValue: (NSDecimal) value;
- (bool) hasValue;
- (NSDecimal) value;
- (void) setValue: (NSDecimal) value;
- (NSDecimal) getValueOrDefault;
- (NSString*) description;
- (NSString*) descriptionWithProvider: (FMLiveSwitchIFormatProvider*) provider;

@end



@interface FMLiveSwitchNullableDouble : NSObject 

+ (FMLiveSwitchNullableDouble*) fromValue: (double) value;
+ (FMLiveSwitchNullableDouble*) null;
/* static init */ + (instancetype)nullableDoubleWithValue: (double) value;
- (instancetype)initWithValue: (double) value;
- (bool) hasValue;
- (double) value;
- (void) setValue: (double) value;
- (double) getValueOrDefault;
- (NSString*) description;
- (NSString*) descriptionWithProvider: (FMLiveSwitchIFormatProvider*) provider;

@end



@interface FMLiveSwitchNullableFloat : NSObject 

+ (FMLiveSwitchNullableFloat*) fromValue: (float) value;
+ (FMLiveSwitchNullableFloat*) null;
/* static init */ + (instancetype)nullableFloatWithValue: (float) value;
- (instancetype)initWithValue: (float) value;
- (bool) hasValue;
- (float) value;
- (void) setValue: (float) value;
- (float) getValueOrDefault;
- (NSString*) description;
- (NSString*) descriptionWithProvider: (FMLiveSwitchIFormatProvider*) provider;
- (NSString*) descriptionWithFormat: (NSString*) format;

@end



@interface FMLiveSwitchNullableGuid : NSObject 

+ (FMLiveSwitchNullableGuid*) fromValue: (FMLiveSwitchGuid*) value;
+ (FMLiveSwitchNullableGuid*) null;
/* static init */ + (instancetype)nullableGuidWithValue: (FMLiveSwitchGuid*) value;
- (instancetype)initWithValue: (FMLiveSwitchGuid*) value;
- (bool) hasValue;
- (FMLiveSwitchGuid*) value;
- (void) setValue: (FMLiveSwitchGuid*) value;
- (FMLiveSwitchGuid*) getValueOrDefault;
- (NSString*) description;

@end



@interface FMLiveSwitchNullableInt : NSObject 

+ (FMLiveSwitchNullableInt*) fromValue: (int) value;
+ (FMLiveSwitchNullableInt*) null;
/* static init */ + (instancetype)nullableIntWithValue: (int) value;
- (instancetype)initWithValue: (int) value;
- (bool) hasValue;
- (int) value;
- (void) setValue: (int) value;
- (int) getValueOrDefault;
- (NSString*) description;
- (NSString*) descriptionWithProvider: (FMLiveSwitchIFormatProvider*) provider;

@end



@interface FMLiveSwitchNullableLong : NSObject 

+ (FMLiveSwitchNullableLong*) fromValue: (long long) value;
+ (FMLiveSwitchNullableLong*) null;
/* static init */ + (instancetype)nullableLongWithValue: (long long) value;
- (instancetype)initWithValue: (long long) value;
- (bool) hasValue;
- (long long) value;
- (void) setValue: (long long) value;
- (long long) getValueOrDefault;
- (NSString*) description;
- (NSString*) descriptionWithProvider: (FMLiveSwitchIFormatProvider*) provider;
- (NSString*) descriptionWithFormat: (NSString*) format;

@end



@interface FMLiveSwitchNullableShort : NSObject 

+ (FMLiveSwitchNullableShort*) fromValue: (short) value;
+ (FMLiveSwitchNullableShort*) null;
/* static init */ + (instancetype)nullableShortWithValue: (short) value;
- (instancetype)initWithValue: (short) value;
- (bool) hasValue;
- (short) value;
- (void) setValue: (short) value;
- (short) getValueOrDefault;
- (NSString*) description;
- (NSString*) descriptionWithProvider: (FMLiveSwitchIFormatProvider*) provider;

@end


@interface FMLiveSwitchNullableUnichar : NSObject 

+ (FMLiveSwitchNullableUnichar*) fromValue: (unichar) value;
+ (FMLiveSwitchNullableUnichar*) null;
/* static init */ + (instancetype)nullableUnicharWithValue: (unichar) value;
- (instancetype)initWithValue: (unichar) value;
- (bool) hasValue;
- (unichar) value;
- (void) setValue: (unichar) value;
- (unichar) getValueOrDefault;
- (NSString*) description;

@end



@interface FMLiveSwitchNumberFormatInfo : FMLiveSwitchIFormatProvider 

+ (FMLiveSwitchNumberFormatInfo*) currentInfo;
+ (FMLiveSwitchNumberFormatInfo*) invariantInfo;

@end



@interface FMLiveSwitchParseAssistant : NSObject 

+ (char) parseByteValueWithS: (NSString*) s;
+ (short) parseShortValueWithS: (NSString*) s;
+ (int) parseIntegerValueWithS: (NSString*) s;
+ (long long) parseLongValueWithS: (NSString*) s;
+ (float) parseFloatValueWithS: (NSString*) s;
+ (double) parseDoubleValueWithS: (NSString*) s;
+ (NSDecimal) parseDecimalValueWithS: (NSString*) s;
+ (bool) parseBooleanValueWithS: (NSString*) s;
+ (FMLiveSwitchGuid*) parseGuidValueWithS: (NSString*) s;

+ (bool) tryParseByteValueWithS: (NSString*) s byteResult: (char*) byteResult;
+ (bool) tryParseShortValueWithS: (NSString*) s shortResult: (short*) shortResult;
+ (bool) tryParseIntegerValueWithS: (NSString*) s intResult: (int*) intResult;
+ (bool) tryParseLongValueWithS: (NSString*) s longResult: (long long*) longResult;
+ (bool) tryParseFloatValueWithS: (NSString*) s floatResult: (float*) floatResult;
+ (bool) tryParseDoubleValueWithS: (NSString*) s doubleResult: (double*) doubleResult;
+ (bool) tryParseDecimalValueWithS: (NSString*) s decimalResult: (NSDecimal*) decimalResult;
+ (bool) tryParseBooleanValueWithS: (NSString*) s boolResult: (bool*) boolResult;
+ (bool) tryParseGuidValueWithS: (NSString*) s guidResult: (FMLiveSwitchGuid**) guidResult;

@end



@interface FMLiveSwitchRandom : NSObject 

- (void)nextBytesWithBuffer:(NSMutableData*)buffer;

@end





@interface FMLiveSwitchTimeoutTimer : NSObject 

/* static init */ + (instancetype)timeoutTimerWithCallback: (FMLiveSwitchAction1<NSObject*> *) callback state: (id) state;
- (instancetype)initWithCallback: (FMLiveSwitchAction1<NSObject*> *) callback state: (id) state;
- (void) startWithTimeout: (int) timeout;
- (bool) stop;

@end


@interface FMLiveSwitchTimeSpan : NSObject 

/* static init */ + (instancetype)timeSpanWithTicks:(long long)ticks;
- (instancetype)initWithTicks:(long long)ticks;
/* static init */ + (instancetype)timeSpanWithHours:(int)hours minutes:(int)minutes seconds:(int)seconds;
- (instancetype)initWithHours:(int)hours minutes:(int)minutes seconds:(int)seconds;
- (double)totalSeconds;
- (double)totalMilliseconds;

@end


@interface FMLiveSwitchRandomizer : NSObject 

/// <summary>
/// Returns a nonnegative random number.
/// </summary>
/// <returns></returns>
- (int)next;

/// <summary>
/// Returns a nonnegative random number less than the specified maximum.
/// </summary>
/// <param name="maxValue">The maximum value (exclusive).</param>
/// <returns></returns>
- (int)nextWithMaxValue:(int)maxValue;

/// <summary>
/// Returns a random number within a specified range.
/// </summary>
/// <param name="minValue">The minimum value (inclusive).</param>
/// <param name="maxValue">The maximum value (exclusive).</param>
/// <returns></returns>
- (int)nextWithMinValue:(int)minValue maxValue:(int)maxValue;

/// <summary>
/// Fills the elements of a specified array of bytes with random numbers.
/// </summary>
/// <param name="buffer">The array of bytes to fill.</param>
- (void)nextBytesWithBuffer:(NSMutableData*)buffer;

/// <summary>
/// Returns a random number between 0.0 and 1.0.
/// </summary>
/// <returns></returns>
- (double)nextDouble;

/// <summary>
/// Generates a random string of a specified size.
/// </summary>
/// <param name="size">The size of the output string.</param>
/// <returns></returns>
- (NSString*)randomStringWithSize:(int)size;

@end



@interface FMLiveSwitchDnsRequest : NSObject 

/* static init */ + (instancetype)dnsRequestWithName:(NSString *)name callback:(FMLiveSwitchAction2<NSMutableArray<NSString*>*,NSObject*> *)callback state:(NSObject *)state;
- (instancetype)initWithName:(NSString *)name callback:(FMLiveSwitchAction2<NSMutableArray<NSString*>*,NSObject*> *)callback state:(NSObject *)state;
- (void)resolveWithBypassProxyCheck:(bool)bypassProxyCheck;

@end



@interface FMLiveSwitchWebSocketMockRequest : NSMutableURLRequest 

- (FMLiveSwitchNameValueCollection*)headers;
- (void)setRequestUri:(NSURL*)requestUri;
- (void)setMethod:(NSString*)method;
- (NSString*)method;

@end



@interface FMLiveSwitchWebSocketMockResponse : NSURLResponse 

- (FMLiveSwitchNameValueCollection*)headers;
- (void)setResponseUri:(NSURL*)responseUri;
- (int)statusCode;
- (void)setStatusCode:(int)statusCode;
- (void)setContentType:(NSString*)contentType;
- (void)setContentLength:(long long)contentLength;

@end


@interface FMLiveSwitchPathUtility : NSObject
+ (NSString *)getTempPath;
+ (NSString *)getAbsolutePath:(NSString *)path;
+ (NSString *)combinePathsWithPath1:(NSString *)path1 path2:(NSString *)path2;
+ (NSString *)combinePaths:(NSArray *)paths;
+ (void)deleteWithPath:(NSString *)path;
+ (void)createSymlinkWithDestinationPath:(NSString *)destinationPath linkPath:(NSString *)linkPath;
@end





@interface FMLiveSwitchAesCounterContext : NSObject

/* static init */ + (instancetype)aesCounterContextWithKey:(FMLiveSwitchDataBuffer *)key;
- (instancetype)initWithKey:(FMLiveSwitchDataBuffer *)key;
- (void)clear;
- (bool)generateKeystreamWithOutput:(FMLiveSwitchDataBuffer *)output length:(int)length counter:(NSMutableData *)counter;

@end


@interface FMLiveSwitchNative : NSObject

@end

/**

    A crypto library.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchCryptoLibrary) {
    /**

        Indicates that the OpenSSL library should be used.

    */
    FMLiveSwitchCryptoLibraryOpenSsl = 2
};

/**

    A platform specifc type

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchPlatformType) {
    /**

        Indicates an unknown or default platform type.

    */
    FMLiveSwitchPlatformTypeUnknown = 1,
    /**

        Indicates a Windows platform type.

    */
    FMLiveSwitchPlatformTypeWindows = 2,
    /**

        Indicates an Android platform type.

    */
    FMLiveSwitchPlatformTypeAndroid = 3,
    /**

        Indicates a macOS platform type.

    */
    FMLiveSwitchPlatformTypeMacOS = 4,
    /**

        Indicates a iOS platform type.

    */
    FMLiveSwitchPlatformTypeIOs = 5,
    /**

        Indicates a Linux platform type.

    */
    FMLiveSwitchPlatformTypeLinux = 6,
    /**

        Indicates a Maui platform type.

    */
    FMLiveSwitchPlatformTypeMaui = 7,
    /**

        Indicates a Unity platform type.

    */
    FMLiveSwitchPlatformTypeUnity = 8,
    /**

        Indicates a Browser - Chrome platform type.

    */
    FMLiveSwitchPlatformTypeChrome = 9,
    /**

        Indicates a Browser - Safari platform type.

    */
    FMLiveSwitchPlatformTypeSafari = 10,
    /**

        Indicates a Browser - Firefox platform type.

    */
    FMLiveSwitchPlatformTypeFirefox = 11,
    /**

        Indicates a Browser - Edge platform type.

    */
    FMLiveSwitchPlatformTypeEdge = 12,
    /**

        Indicates a Browser - Opera platform type.

    */
    FMLiveSwitchPlatformTypeOpera = 13,
    /**

        Indicates a Browser - Internet Explorer platform type.

    */
    FMLiveSwitchPlatformTypeIe = 14
};

/**

    Address types.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchAddressType) {
    /**

        Indicates an IP version 4 address.

    */
    FMLiveSwitchAddressTypeIPv4 = 1,
    /**

        Indicates an IP version 6 address.

    */
    FMLiveSwitchAddressTypeIPv6 = 2,
    /**

        Indicates an unknown address type.

    */
    FMLiveSwitchAddressTypeUnknown = 3
};

/**

    Asymmetric key types.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchAsymmetricKeyType) {
    /**

        Indicates an RSA key.

    */
    FMLiveSwitchAsymmetricKeyTypeRsa = 1,
    /**

        Indicates an ECDSA key.

    */
    FMLiveSwitchAsymmetricKeyTypeEcdsa = 2
};

/**

    A named elliptic curve.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchEcdsaNamedCurve) {
    /**

        The P256 named curve.

    */
    FMLiveSwitchEcdsaNamedCurveP256 = 1,
    /**

        The P384 named curve.

    */
    FMLiveSwitchEcdsaNamedCurveP384 = 2,
    /**

        The P521 named curve.

    */
    FMLiveSwitchEcdsaNamedCurveP521 = 3
};

/**

    A network type.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchNetworkType) {
    /**

        Indicates an unknown network type.

    */
    FMLiveSwitchNetworkTypeUnknown = 1,
    /**

        Indicates a wired network type.

    */
    FMLiveSwitchNetworkTypeWired = 2,
    /**

        Indicates a wireless network type.

    */
    FMLiveSwitchNetworkTypeWireless = 3,
    /**

        Indicates a cellular network type.

    */
    FMLiveSwitchNetworkTypeCellular = 4,
    /**

        Indicates a VPN network type.

    */
    FMLiveSwitchNetworkTypeVpn = 5
};

/**

    An operating system.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchOperatingSystem) {
    /**

        Indicates an unknown or default OS.

    */
    FMLiveSwitchOperatingSystemUnknown = 1,
    /**

        Indicates a Windows operating system.

    */
    FMLiveSwitchOperatingSystemWindows = 2,
    /**

        Indicates a Android operating system.

    */
    FMLiveSwitchOperatingSystemAndroid = 3,
    /**

        Indicates a macOS operating system.

    */
    FMLiveSwitchOperatingSystemMacOS = 4,
    /**

        Indicates a iOS operating system.

    */
    FMLiveSwitchOperatingSystemIOS = 5,
    /**

        Indicates a Linux operating system.

    */
    FMLiveSwitchOperatingSystemLinux = 6,
    /**

        Indicates a tvOS operating system.

    */
    FMLiveSwitchOperatingSystemTvOS = 7,
    /**

        Indicates a watchOS operating system.

    */
    FMLiveSwitchOperatingSystemWatchOS = 8
};

/**

    A CPU architecture.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchArchitecture) {
    /**

        Indicates an unknown or default CPU architecture.

    */
    FMLiveSwitchArchitectureUnknown = 1,
    /**

        Indicates an Intel-based 32-bit CPU architecture.

    */
    FMLiveSwitchArchitectureX86 = 2,
    /**

        Indicates an Intel-based 64-bit CPU architecture.

    */
    FMLiveSwitchArchitectureX64 = 3,
    /**

        Indicates an ARMv7-based 32-bit CPU architecture.

    */
    FMLiveSwitchArchitectureArmv7 = 4,
    /**

        Indicates an ARMv8-based 32-bit CPU architecture.

    */
    FMLiveSwitchArchitectureArmv8 = 5,
    /**

        Indicates an ARM-based 64-bit CPU architecture.

    */
    FMLiveSwitchArchitectureArm64 = 6,
    /**

        Indicates a MIPS-based 32-bit CPU architecture.

    */
    FMLiveSwitchArchitectureMips = 7,
    /**

        Indicates a MIPS-based 64-bit CPU architecture.

    */
    FMLiveSwitchArchitectureMips64 = 8
};

/**

    A protocol type.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchProtocolType) {
    /**

        Indicates the UDP protocol.

    */
    FMLiveSwitchProtocolTypeUdp = 1,
    /**

        Indicates the TCP protocol.

    */
    FMLiveSwitchProtocolTypeTcp = 2,
    /**

        Indicates the TLS protocol.

    */
    FMLiveSwitchProtocolTypeTls = 3,
    /**

        Indicates an unknown protocol.

    */
    FMLiveSwitchProtocolTypeUnknown = 4
};

/**

    A source language.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchSourceLanguage) {
    /**

        Indicates that the source language is C#.

    */
    FMLiveSwitchSourceLanguageCSharp = 1,
    /**

        Indicates that the source language is Java.

    */
    FMLiveSwitchSourceLanguageJava = 2,
    /**

        Indicates that the source language is Objective-C.

    */
    FMLiveSwitchSourceLanguageObjectiveC = 3,
    /**

        Indicates that the source language is TypeScript.

    */
    FMLiveSwitchSourceLanguageTypeScript = 4
};

/**

    The compare result in a sort operation.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchCompareResult) {
    /**

        Indicates that the two elements are equal.

    */
    FMLiveSwitchCompareResultEqual = 1,
    /**

        Indicates that the first element belongs before the second.

    */
    FMLiveSwitchCompareResultNegative = 2,
    /**

        Indicates that ths second element belongs before the first.

    */
    FMLiveSwitchCompareResultPositive = 3
};

/**

    A hash algorithm.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchHashType) {
    /**

        Indciates MD5.

    */
    FMLiveSwitchHashTypeMd5 = 1,
    /**

        Indicates SHA1.

    */
    FMLiveSwitchHashTypeSha1 = 2,
    /**

        Indicates SHA256.

    */
    FMLiveSwitchHashTypeSha256 = 3
};

/**

    A message authentication code (MAC) algorithm.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchMacType) {
    /**

        Indicates HMAC-MD5.

    */
    FMLiveSwitchMacTypeHmacMd5 = 1,
    /**

        Indicates HMAC-SHA1

    */
    FMLiveSwitchMacTypeHmacSha1 = 2,
    /**

        Indicates HMAC-SHA256

    */
    FMLiveSwitchMacTypeHmacSha256 = 3
};

/**

    Error codes are six digit values, where the first three digits indicate component, while the remaining three digits particular problem with the component.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchErrorCode) {
    /**

        Indicates that the socket encountered an error while sending.

    */
    FMLiveSwitchErrorCodeSocketSendError = 100000,
    /**

        Indicates that the socket encountered an error while receiving.

    */
    FMLiveSwitchErrorCodeSocketReceiveError = 100001,
    /**

        Indicates that the socket is closed.

    */
    FMLiveSwitchErrorCodeSocketClosed = 100002,
    /**

        Indicates that the socket's send buffer is full.

    */
    FMLiveSwitchErrorCodeSocketSendBufferFull = 100003,
    /**

        Indicates the IP Protocol mismatch has occurred.

    */
    FMLiveSwitchErrorCodeIPProtocolMismatch = 100004,
    /**

        Indicates the supplied Turn relay server is invalid or not resolved.

    */
    FMLiveSwitchErrorCodePacketTooLarge = 100005,
    /**

        Indicates the network is unreachable.

    */
    FMLiveSwitchErrorCodeNetworkUnreachable = 100006,
    /**

        300 Try Alternate. RFC5389. Indicates that a server using this extension redirects a client to another server by
        replying to a request message with an error response message with an error code of 300 (Try Alternate).
        The server MUST include an ALTERNATE-SERVER attribute in the error response.  The error response
        message MAY be authenticated; however, there are uses cases for
        ALTERNATE-SERVER where authentication of the response is not possible
        or practical.

    */
    FMLiveSwitchErrorCodeStunTryAlternate = 114000,
    /**

        400 Bad Request. RFC5389. Idicates that the original request was malformed.  The client SHOULD NOT retry the
        request without modification from the previous attempt.  The server may not be able
        to generate a valid MESSAGE-INTEGRITY for this error, so the client MUST NOT expect
        a valid MESSAGE-INTEGRITY attribute on this response.

    */
    FMLiveSwitchErrorCodeStunBadRequest = 114001,
    /**

        401  Unauthorized. RFC5389. Indicates that the request did not contain the correct
        credentials to proceed.  The client should retry the request with proper credentials.

    */
    FMLiveSwitchErrorCodeStunUnauthorized = 114002,
    /**

        403 Forbidden. RFC 5766. Indicates that the request is valid, but the server is refusing
        to perform it, likely due to administrative restrictions. The client considers the current
        transaction as having failed. The client MAY notify the user or operator and SHOULD NOT retry the
        same request with this server until it believes the problem has been fixed.

    */
    FMLiveSwitchErrorCodeStunTurnForbidden = 114003,
    /**

        405 Mobility Forbidden. RFC 8016. Indicates that the request is valid, but the server is refusing to perform it,
        likely due to administrative restrictions. The client considers the current transaction as having failed.
        The client can notify the user or operator.  The client SHOULD NOT retry sending the Allocate request
        containing the MOBILITY-TICKET with this server until it believes the problem has been fixed.

    */
    FMLiveSwitchErrorCodeStunTurnMobilityForbidden = 114004,
    /**

        420  Unknown Attribute. RFC5389. Indicates that the server received a STUN packet containing a comprehension-required
        attribute that it did not understand. The server MUST put this unknown attribute in the UNKNOWN-ATTRIBUTE
        attribute of its error response.

    */
    FMLiveSwitchErrorCodeStunUnknownAttribute = 114005,
    /**

        430 Stale credentials; the shared secret sent in the request is expired; the client should obtain a new shared secret.

    */
    FMLiveSwitchErrorCodeStunStaleCredentials = 114006,
    /**

        431 Integrity Check Failure.

    */
    FMLiveSwitchErrorCodeStunIntegrityCheckFailure = 114007,
    /**

        432 Missing Username; the username attribute is not present in the request.

    */
    FMLiveSwitchErrorCodeStunMissingUsername = 114008,
    /**

        437 Allocation Mismatch. RFC 5766. This indicates that the client has picked a 5-tuple that the server sees as already in use.
        One way this could happen is if an intervening NAT assigned a mapped transport address that was used by another client that recently
        crashed.  The client considers the current transaction as having failed. The client SHOULD pick another client transport address
        and retry the Allocate request (using a different transaction id).
        The client SHOULD try three different client transport addresses before giving up on this server.Once the client gives up on the
        server, it SHOULD NOT try to create another allocation on the server for 2 minutes.

    */
    FMLiveSwitchErrorCodeStunTurnAllocationMismatch = 114009,
    /**

        438 Stale Nonce. RFC5389. Indicates that the NONCE used by the client was no longer valid. The client should retry, using the
        NONCE provided in the response.

    */
    FMLiveSwitchErrorCodeStunStaleNonce = 114010,
    /**

        440 Address Family Not Supported. RFC 6156. Indicates that the server does not support the address family requested by the client.

    */
    FMLiveSwitchErrorCodeStunAddressFamilyNotSupported = 114011,
    /**

        441 Wrong Credentials. RFC 5766. Indicates that wrong credential were used by the client. The client should not receive this error
        in response to an Allocate request.  The client MAY notify the user or operator and SHOULD NOT retry the same request with this server
        until it believes the problem has been fixed.

    */
    FMLiveSwitchErrorCodeStunTurnWrongCredentials = 114012,
    /**

        442 Unsupported Transport Protocol. The client should not receive this error in response to a request for a UDP allocation. The
        client MAY notify the user or operator and SHOULD NOT reattempt the request with this server until it believes the problem has
        been fixed.

    */
    FMLiveSwitchErrorCodeStunTurnUnsupportedTransportProtocol = 114013,
    /**

        443 Peer Address Family Mismatch. A peer address was of a different address family than that of the relayed transport address of the allocation.

    */
    FMLiveSwitchErrorCodeStunTurnPeerAddressFamilyMismatch = 114014,
    /**

        446 Connection Already exists. This indicates that either 1) the server is currently processing a Connect request for this allocation with
        the same XOR-PEER-ADDRESS; OR 2) the server has already successfully processed a Connect request for this allocation with the same XOR-PEER-ADDRESS,
        and the resulting client and peer data connections are either pending or active

    */
    FMLiveSwitchErrorCodeStunTurnConnectionAlreadyExists = 114015,
    /**

        447 Connection Timeout or Failure. This indicates that the TURN server was unable to connect to the peer. The client MAY retry with the same
        XOR-PEER-ADDRESS attribute, but MUST wait at least 10 seconds.

    */
    FMLiveSwitchErrorCodeStunTurnConnectionTimeoutOrFailure = 114016,
    /**

        486 Allocation Quota Reached. The server is currently unable to create any more allocations with this username.  The client considers the current
        transaction as having failed. The client SHOULD wait at least 1 minute before trying to create any more allocations on the server.

    */
    FMLiveSwitchErrorCodeStunTurnAllocationQuotaReached = 114017,
    /**

        487 Role Conflict. The Binding request contained either the ICE-CONTROLLING or ICE-CONTROLLED attribute, indicating a role that conflicted with the server.
        The server ran a tie-breaker based on the tie-breaker value in the request and determined that the client needs to switch roles.

    */
    FMLiveSwitchErrorCodeStunIceRoleConflict = 114018,
    /**

        500 Server Error. RFC5389. Indicates that the server has suffered a temporary error. The client should try again.

    */
    FMLiveSwitchErrorCodeStunServerError = 114019,
    /**

        508 Insufficient Capacity. The server has no more relayed transport addresses available, or has none with the requested properties, or the one that was
        reserved is no longer available. The client considers the current operation as having failed. If the client is using either the EVEN-PORT or the
        RESERVATION-TOKEN attribute, then the client MAY choose to remove or modify this attribute and try again immediately.  Otherwise, the client SHOULD
        wait at least 1 minute before trying to create any more allocations on this server.

    */
    FMLiveSwitchErrorCodeStunTurnInsufficientCapacity = 114020,
    /**

        Indicates Invalid Response Type, where message type obtained in reponse to a request is of unexpected type.

    */
    FMLiveSwitchErrorCodeStunInvalidResponseType = 114021,
    /**

        Indicates that a failed response does not contain an error code or when the error code is inconsistent with
        the contents of the response.

    */
    FMLiveSwitchErrorCodeStunInvalidErrorCode = 114022,
    /**

        Indicates Invalid Stun Transaction Id

    */
    FMLiveSwitchErrorCodeStunInvalidTransactionId = 114023,
    /**

        Indicates Unknown Stun Error Code

    */
    FMLiveSwitchErrorCodeStunUnknownStunErrorCode = 114024,
    /**

        Indicates Invalid Stun Message Integrity

    */
    FMLiveSwitchErrorCodeStunInvalidMessageIntegrity = 114025,
    /**

        Indicates that the stream socket ip is invalid, remote server ip is invalid or there is a mimatch in the the ip of the socket and the remote server ip version

    */
    FMLiveSwitchErrorCodeSocketIPError = 115001,
    /**

        Indicates the local relayed candidate could not be processed.

    */
    FMLiveSwitchErrorCodeIceLocalRelayedDatagramCandidateError = 101000,
    /**

        Indicates the local server reflexive could not be processed.

    */
    FMLiveSwitchErrorCodeIceLocalServerReflexiveCandidateError = 101001,
    /**

        Indicates that an operation was attempted in an invalid state.

    */
    FMLiveSwitchErrorCodeSocketManagerInvalidState = 101002,
    /**

        Indicates that the ICE gatherer could not be started.

    */
    FMLiveSwitchErrorCodeIceStartError = 102000,
    /**

        Indicates that RTCP datagram sockets were assigned incorrectly after the gatherer was started.

    */
    FMLiveSwitchErrorCodeIceUnsuitableSocketAssignment = 102001,
    /**

        Indicates that all ports are in use.

    */
    FMLiveSwitchErrorCodeIceAllPortsInUse = 102002,
    /**

        Indicates that no local addresses were found.

    */
    FMLiveSwitchErrorCodeIceLocalAddressUnavailable = 102003,
    /**

        Indicates that an Ice Gatherer error occurred.

    */
    FMLiveSwitchErrorCodeIceGenericGathererError = 102004,
    /**

        Indicates that the relayed candidate refresh request timed out.

    */
    FMLiveSwitchErrorCodeIceRefreshTimeout = 103000,
    /**

        Indicates that the relayed candidate refresh request failed.

    */
    FMLiveSwitchErrorCodeIceRefreshError = 103001,
    /**

        Indicates that the candidate pair create-permission request timed out.

    */
    FMLiveSwitchErrorCodeIceCreatePermissionTimeout = 104000,
    /**

        Indicates that the candidate pair create-permission request failed.

    */
    FMLiveSwitchErrorCodeIceCreatePermissionError = 104001,
    /**

        Indicates that connectivity checks failed on the candidate pair.

    */
    FMLiveSwitchErrorCodeIceConnectivityCheckFailed = 104002,
    /**

        Indicates that the ICE transport encountered an error while sending.

    */
    FMLiveSwitchErrorCodeIceSendError = 105000,
    /**

        Indicates that the ICE transport encountered a problem creating a peer reflexive candidate.

    */
    FMLiveSwitchErrorCodeIcePeerReflexiveError = 105001,
    /**

        Indicates that the IcePolicy requirements are not supported by the remote client.

    */
    FMLiveSwitchErrorCodeIncompatibleIceSetup = 105002,
    /**

        Indicates that an internal DTLS error occurred.

    */
    FMLiveSwitchErrorCodeDtlsInternalError = 106000,
    /**

        Indicates that the DTLS key exchange failed.

    */
    FMLiveSwitchErrorCodeDtlsKeyExchangeFailed = 106001,
    /**

        Indicates that a DTLS message was received before the DTLS endpoint was ready.

    */
    FMLiveSwitchErrorCodeDtlsNotReady = 106002,
    /**

        Indicates that an SCTP message had no payload data.

    */
    FMLiveSwitchErrorCodeSctpNoPayloadData = 107000,
    /**

        Indicates that an attempt was made to send data on an unsupported stream.

    */
    FMLiveSwitchErrorCodeSctpUnsupportedStream = 107001,
    /**

        Indicates that an operation was attempted while in a state that doesn't allow it.

    */
    FMLiveSwitchErrorCodeSctpInvalidState = 107002,
    /**

        Indicates that an internal SCTP error occurred.

    */
    FMLiveSwitchErrorCodeSctpInternalError = 107003,
    /**

        Indicates the media transport failed.

    */
    FMLiveSwitchErrorCodeMediaTransportFailed = 108000,
    /**

        Indicates that the reliable data channel encountered an error while opening.

    */
    FMLiveSwitchErrorCodeReliableDataChannelOpenError = 109000,
    /**

        Indicates that the reliable data channel encountered an error while sending.

    */
    FMLiveSwitchErrorCodeReliableDataChannelSendError = 109001,
    /**

        Indicates that the connection architecture is invalid.

    */
    FMLiveSwitchErrorCodeConnectionInvalidArchitecture = 110000,
    /**

        Indicates that an internal connection error occurred.

    */
    FMLiveSwitchErrorCodeConnectionInternalError = 110001,
    /**

        Indicates that the connection's inner transport could not be started.

    */
    FMLiveSwitchErrorCodeConnectionTransportStartError = 110002,
    /**

        Indicates that the connection's inner transport is closed.

    */
    FMLiveSwitchErrorCodeConnectionTransportClosed = 110003,
    /**

        Indicates that a connection has failed connectivity checks for an extended period.

    */
    FMLiveSwitchErrorCodeConnectionDeadStream = 110004,
    /**

        Indicates that a connection has not been established within allocated timeframe.

    */
    FMLiveSwitchErrorCodeConnectionNotEstablished = 110005,
    /**

        Indicates that the remote end of the connection signalled failure.

    */
    FMLiveSwitchErrorCodeConnectionRemoteFailure = 110006,
    /**

        Indicates that simulcast is not supported.

    */
    FMLiveSwitchErrorCodeConnectionSimulcastNotSupported = 110007,
    /**

        Indicates that the stream was disabled.

    */
    FMLiveSwitchErrorCodeStreamDisabled = 111000,
    /**

        Indicates that the local and remote stream encryption modes are not compatible.

    */
    FMLiveSwitchErrorCodeStreamEncryptionMismatch = 111001,
    /**

        Indicates that the local and remote stream directions are not compatible.

    */
    FMLiveSwitchErrorCodeStreamDirectionMismatch = 111002,
    /**

        Indicates that an attempt was made to modify Data Stream direction; however, this is not allowed.

    */
    FMLiveSwitchErrorCodeDataStreamDirectionCannotBeChanged = 111003,
    /**

        Indicates that a Media Stream direction change attempt was made; however, new direction setting is not supported by the existing stream capabilities (inputs or outpus are missing).

    */
    FMLiveSwitchErrorCodeInvalidStreamDirectionChange = 111004,
    /**

        Indicates that an error was encountered while processing the local description.

    */
    FMLiveSwitchErrorCodeLocalDescriptionError = 112000,
    /**

        Indicates that an error was encountered while processing the remote description.

    */
    FMLiveSwitchErrorCodeRemoteDescriptionError = 112001,
    /**

        Indicates the local relayed candidate could not be processed.

    */
    FMLiveSwitchErrorCodeIceLocalRelayedStreamCandidateError = 113000,
    /**

        Indicates the supplied Turn relay server is invalid or not resolved

    */
    FMLiveSwitchErrorCodeIceInvalidServerAssignmentError = 113001,
    /**

        Indicates that the WebSocket Media Connections are not allowed or not available for this application or deployment.

    */
    FMLiveSwitchErrorCodeWebSocketMediaConnectionsNotAllowed = 116000,
    /**

        Indicates that the WebSocket Media Server encountered a problem connecting to a Media Server over a WebRTC-based connection.

    */
    FMLiveSwitchErrorCodeWebSocketMediaServerToMediaServerError = 116001,
    /**

        Indicates that an error occurred while communicating with a WebSocket Media Server over a service connection.

    */
    FMLiveSwitchErrorCodeWebSocketMediaClientFailure = 116002,
    /**

        Indicates that the WebSocket Media Server rejected connection terminally. Client should not retry.

    */
    FMLiveSwitchErrorCodeWebSocketMediaServerRejectedConnectionTerminally = 116003,
    /**

        Indicates that the WebSocket Media Server rejected connection due to a capacity policy. Client should retry when capacity becomes available.

    */
    FMLiveSwitchErrorCodeWebSocketMediaServerChannelVideoStreamCapacityReached = 116004
};

/**

    A file stream access type.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchFileStreamAccess) {
    /**

        Indicates read access.

    */
    FMLiveSwitchFileStreamAccessRead = 1,
    /**

        Indicates write access.

    */
    FMLiveSwitchFileStreamAccessWrite = 2
};

/**

    The method used by an HTTP request.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchHttpMethod) {
    /**

        Indicates a GET request.

    */
    FMLiveSwitchHttpMethodGet = 1,
    /**

        Indicates a HEAD request.

    */
    FMLiveSwitchHttpMethodHead = 2,
    /**

        Indicates a POST request.

    */
    FMLiveSwitchHttpMethodPost = 3,
    /**

        Indicates a PUT request.

    */
    FMLiveSwitchHttpMethodPut = 4,
    /**

        Indicates a PATCH request.

    */
    FMLiveSwitchHttpMethodPatch = 5,
    /**

        Indicates a DELETE request.

    */
    FMLiveSwitchHttpMethodDelete = 6
};

/**

    The level at which to log.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchLogLevel) {
    /**

        Logs extensive messages detailing the program's state for troubleshooting.

    */
    FMLiveSwitchLogLevelVerbose = 1,
    /**

        Logs messages relevant to development and troubleshooting.

    */
    FMLiveSwitchLogLevelDebug = 2,
    /**

        Logs messages relevant to expected use.

    */
    FMLiveSwitchLogLevelInfo = 3,
    /**

        Logs messages relevant to potential pit-falls.

    */
    FMLiveSwitchLogLevelWarn = 4,
    /**

        Logs messages relevant to errors that allow program execution to continue.

    */
    FMLiveSwitchLogLevelError = 5,
    /**

        Logs messages relevant to errors that require the program to terminate.

    */
    FMLiveSwitchLogLevelFatal = 6,
    /**

        Logs nothing.

    */
    FMLiveSwitchLogLevelNone = 7
};

/**

    The state of a future.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchFutureState) {
    /**

        Indicates that the promise has not been resolved or rejected.

    */
    FMLiveSwitchFutureStatePending = 1,
    /**

        Indicates that the promise has been resolved.

    */
    FMLiveSwitchFutureStateResolved = 2,
    /**

        Indicates that the promise has been rejected.

    */
    FMLiveSwitchFutureStateRejected = 3
};

/**

    An enumeration of potential WebSocket status codes.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchWebSocketStatusCode) {
    /**

        Indicates normal closure, meaning that the purpose for which
        the connection was established has been fulfilled.

    */
    FMLiveSwitchWebSocketStatusCodeNormal = 1000,
    /**

        Indicates that an endpoint is "going away", such as a server
        going down or a browser having navigated away from a page.

    */
    FMLiveSwitchWebSocketStatusCodeGoingAway = 1001,
    /**

        Indicates that an endpoint is terminating the connection
        due to a protocol error.

    */
    FMLiveSwitchWebSocketStatusCodeProtocolError = 1002,
    /**

        Indicates that an endpoint is terminating the connection
        because it has received a type of data that it cannot accept.

    */
    FMLiveSwitchWebSocketStatusCodeInvalidType = 1003,
    /**

        Indicates that no status code was present in the Close frame.
        Reserved for use outside Close frames.

    */
    FMLiveSwitchWebSocketStatusCodeNoStatus = 1005,
    /**

        Indicates that the connection was closed abnormally, without
        sending a Close frame. Reserved for use outside Close frames.

    */
    FMLiveSwitchWebSocketStatusCodeAbnormal = 1006,
    /**

        Indicates that an endpoint is terminating the connection
        because it has received data within a message that was not
        consistent with the type of message.

    */
    FMLiveSwitchWebSocketStatusCodeInvalidData = 1007,
    /**

        Indicates that an endpoint is terminating the connection
        because it has received a message that violates its policy.

    */
    FMLiveSwitchWebSocketStatusCodePolicyViolation = 1008,
    /**

        Indicates that an endpoint is terminating the connection
        because it has received a message that is too big for it
        to process.

    */
    FMLiveSwitchWebSocketStatusCodeMessageTooLarge = 1009,
    /**

        Indicates that the client is terminating the connection
        because it has expected the server to negotiate one or
        more extensions, but the server didn't return them in the
        response message of the WebSocket handshake.

    */
    FMLiveSwitchWebSocketStatusCodeUnsupportedExtension = 1010,
    /**

        Indicates that the server is terminating the connection
        because it encountered an unexpected condition that
        prevented it from fulfilling the request.

    */
    FMLiveSwitchWebSocketStatusCodeUnexpectedCondition = 1011,
    /**

        Indicates that the connection was closed due to a failure
        to perform a TLS handshake. Reserved for use outside Close
        frames.

    */
    FMLiveSwitchWebSocketStatusCodeSecureHandshakeFailure = 1015,
    /**

        Indicates the connection was closed by the client due to
        a timeout in the keep alive mechanism.

    */
    FMLiveSwitchWebSocketStatusCodeClientKeepAliveTimeout = 4000
};

/**

    RTP packet header Extension support policies.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchBandwidthAdaptationPolicy) {
    /**

        Indicates a policy where stream bandwidth adaptation of encoder bitrates is disabled.

    */
    FMLiveSwitchBandwidthAdaptationPolicyDisabled = 1,
    /**

        Indicates a policy where stream bandwidth adaptation of encoder bitrates is enabled.

    */
    FMLiveSwitchBandwidthAdaptationPolicyEnabled = 2
};

/**

    The state of a candidate pair.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchCandidatePairState) {
    /**

        Indicates that the candidate pair has been formed,
        but connectivity checks have not yet started.

    */
    FMLiveSwitchCandidatePairStateNew = 1,
    /**

        Indicates that the connectivity check is ready for
        connectivity checks, but checks have not yet started.

    */
    FMLiveSwitchCandidatePairStateWaiting = 2,
    /**

        Indicates that connectivity checks are in progress.

    */
    FMLiveSwitchCandidatePairStateInProgress = 3,
    /**

        Indicates that a connectivity check was successful.

    */
    FMLiveSwitchCandidatePairStateSucceeded = 4,
    /**

        Indicates that all connectivity checks have timed
        out or produced a failure response.

    */
    FMLiveSwitchCandidatePairStateFailed = 5,
    /**

        Indicates that connectivity checks have been stopped
        intentionally due to transport closure.

    */
    FMLiveSwitchCandidatePairStateClosed = 6,
    /**

        Indicates that connectivity checks have succeeded in
        the past, but are currently not responding.

    */
    FMLiveSwitchCandidatePairStateConnectivityLost = 7
};

/**

    The type of a candidate.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchCandidateType) {
    /**

        Indicates a 'host' candidate, discovered by
        querying a local network interface adapter.
        The candidate should contain a private IP
        address of this client.

    */
    FMLiveSwitchCandidateTypeHost = 1,
    /**

        Indicates a 'srflx' candidate, discovered by
        using a STUN server to echo back the source
        IP address it sees in a UDP binding request.
        When the STUN server is properly configured,
        the candidate should contain a public IP
        address of this client.

    */
    FMLiveSwitchCandidateTypeServerReflexive = 2,
    /**

        Indicates a 'relay' candidate, discovered by
        using a TURN server to set up a public port
        in response to a UDP or TCP allocate request.
        When the TURN server is properly configured,
        the candidate should contain a public IP
        address of the TURN server.

    */
    FMLiveSwitchCandidateTypeRelayed = 3,
    /**

        Indicates a 'prflx' candidate, discovered by
        sending STUN connectivity checks between peers
        residing behind more restrictive firewalls.
        The candidate should contain a public IP
        address of this client.

    */
    FMLiveSwitchCandidateTypePeerReflexive = 4,
    /**

        Indicates an unknown candidate type.

    */
    FMLiveSwitchCandidateTypeUnknown = 5
};

/**

    A value used to indicate whether this codec is used to encode or decode.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchCodecType) {
    /**

        The attached RTCCodecStats represents a media format that is being encoded, or that the implementation is prepared to encode.

    */
    FMLiveSwitchCodecTypeEncode = 1,
    /**

        The attached RTCCodecStats represents a media format that the implementation is prepared to decode.

    */
    FMLiveSwitchCodecTypeDecode = 2
};

/**

    The state of a connection.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchConnectionState) {
    /**

        Indicates that the connection is new and has not been started.

    */
    FMLiveSwitchConnectionStateNew = 1,
    /**

        Indicates that the connection is being initialized but no connecting attempts have been made.

    */
    FMLiveSwitchConnectionStateInitializing = 2,
    /**

        Indicates that the connection is currently connecting.

    */
    FMLiveSwitchConnectionStateConnecting = 3,
    /**

        Indicates that the connection is currently connected.

    */
    FMLiveSwitchConnectionStateConnected = 4,
    /**

        Indicates that the connection has encountered an error and is cleaning up.

    */
    FMLiveSwitchConnectionStateFailing = 5,
    /**

        Indicates that the connection has encountered an error and has cleaned up.

    */
    FMLiveSwitchConnectionStateFailed = 6,
    /**

        Indicates that the connection has been instructed to close and is cleaning up.

    */
    FMLiveSwitchConnectionStateClosing = 7,
    /**

        Indicates that the connection has been instructed to close and has cleaned up.

    */
    FMLiveSwitchConnectionStateClosed = 8
};

/**

    A data channel state.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchDataChannelState) {
    /**

        Indicates the data channel has been created and has not started negotiating yet.

    */
    FMLiveSwitchDataChannelStateNew = 1,
    /**

        Indicates the data channel is in the process of negotiating a secure connection.

    */
    FMLiveSwitchDataChannelStateConnecting = 2,
    /**

        Indicates the data channel has completed negotiation of a secure connection.

    */
    FMLiveSwitchDataChannelStateConnected = 3,
    /**

        Indicates the data channel is in the process of closing due to an intentional request.

    */
    FMLiveSwitchDataChannelStateClosing = 4,
    /**

        Indicates the data channel has been closed due to an intentional request.

    */
    FMLiveSwitchDataChannelStateClosed = 5,
    /**

        Indicates the data channel has been closed as the result of an error.

    */
    FMLiveSwitchDataChannelStateFailed = 6
};

/**

    A simulcast stream state.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchSimulcastStreamState) {
    /**

        Indicates a stream state that is underutilized.

    */
    FMLiveSwitchSimulcastStreamStateUnderutilized = 1,
    /**

        Indicates a stream state that is normal.

    */
    FMLiveSwitchSimulcastStreamStateNormal = 2,
    /**

        Indicates a stream state that is overutilized.

    */
    FMLiveSwitchSimulcastStreamStateOverutilized = 3
};

/**

    A video degradation preference.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchVideoDegradationPreference) {
    /**

        Indicates a preference to automate
        the degradation preference based on
        the video type.
        A video type of FMLiveSwitchVideoTypeScreen
        will prefer to degrade FMLiveSwitchVideoDegradationPreferenceFrameRate.
        A video type of FMLiveSwitchVideoTypeCamera
        will prefer to degrade FMLiveSwitchVideoDegradationPreferenceResolution.
        A video type of FMLiveSwitchVideoTypeUnknown
        will prefer a FMLiveSwitchVideoDegradationPreferenceBalanced approach.

    */
    FMLiveSwitchVideoDegradationPreferenceAutomatic = 1,
    /**

        Indicates a preference to degrade
        both frame-rate and resolution
        together in smaller increments.

    */
    FMLiveSwitchVideoDegradationPreferenceBalanced = 2,
    /**

        Indicates a preference to degrade
        frame-rate instead of resolution.

    */
    FMLiveSwitchVideoDegradationPreferenceFrameRate = 3,
    /**

        Indicates a preference to degrade
        resolution instead of frame-rate.

    */
    FMLiveSwitchVideoDegradationPreferenceResolution = 4
};

/**

    The encryption mode for the stream.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchEncryptionMode) {
    /**

        No encryption and no integrity checking.

    */
    FMLiveSwitchEncryptionModeNull = 1,
    /**

        AES 128-bit encryption with strong HMAC-SHA1 integrity checking (80-bit).

    */
    FMLiveSwitchEncryptionModeAes128Strong = 2,
    /**

        AES 128-bit encryption with weak HMAC-SHA1 integrity checking (32-bit).

    */
    FMLiveSwitchEncryptionModeAes128Weak = 3,
    /**

        Null encryption with strong HMAC-SHA1 integrity checking (80-bit).

    */
    FMLiveSwitchEncryptionModeNullStrong = 4,
    /**

        Null encryption with weak HMAC-SHA1 integrity checking (32-bit).

    */
    FMLiveSwitchEncryptionModeNullWeak = 5
};

/**

    Specifies how an element should be scaled within a layout.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchLayoutScale) {
    /**

        Indicates that the element should be uniformly scaled
        (maintaining aspect ratio) to the largest size such
        that both its width and its height can fit inside its
        bounding box.

    */
    FMLiveSwitchLayoutScaleContain = 1,
    /**

        Indicates that the element should be uniformly scaled
        (maintaining aspect ratio) to be as large as possible
        so that the bounding box is completely covered. Some
        parts of the element may not be in view (cropped).

    */
    FMLiveSwitchLayoutScaleCover = 2,
    /**

        Indicates that the element should be non-uniformly
        scaled (not maintaining aspect ratio) so that the
        bounding box is completely covered, but all parts
        of the element are in view (no cropping).

    */
    FMLiveSwitchLayoutScaleStretch = 3
};

/**

    Specified Multiplexing category of SDP Attribute.
    Rules governing SDP Attribute multiplexing are as per
    draft-ietf-mmusic-sdp-mux-attributes

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchSdpAttributeCategory) {
    /**

        The attributes in the NORMAL category can be independently specified
        when multiplexed and they retain their original semantics.

    */
    FMLiveSwitchSdpAttributeCategoryNormal = 1,
    /**

        The attributes in the CAUTION category are advised against
        multiplexing since their usage under multiplexing might lead to
        incorrect behaviour.

    */
    FMLiveSwitchSdpAttributeCategoryCaution = 2,
    /**

        The attributes and their associated values (if any) in the IDENTICAL
        category MUST be repeated across all the media descriptions under
        multiplexing.

    */
    FMLiveSwitchSdpAttributeCategoryIdentical = 3,
    /**

        The attributes in the SUM category can be set as they are normally
        used but software using them in the multiplexing scenario MUST apply
        the sum of all the attributes being multiplexed instead of trying to
        use them independently.This is typically used for bandwidth or
        other rate limiting attributes to the underlying transport.

    */
    FMLiveSwitchSdpAttributeCategorySum = 4,
    /**

        The attributes in the TRANSPORT category can be set normally for
        multiple items in a multiplexed group but the software MUST pick the
        one that's associated with the "m=" line whose information is used
        for setting up the underlying transport.

    */
    FMLiveSwitchSdpAttributeCategoryTransport = 5,
    /**

        The attributes in the INHERIT category encapsulate other SDP
        attributes or parameters.  These attributes inherit their
        multiplexing characteristics from the attributes or parameters they
        encapsulate.  Such attributes are defined in [RFC3407], [RFC5939] and
        [RFC6871] as part of a generic framework for indicating and
        negotiating transport, media, and media format related capabilities
        in the SDP.
    
        The inheritance manifests itself when the encapsulated attribute or
        parameter is being leveraged.  In the case of SDP Capability
        Negotiation [RFC5939] for example, this occurs when a capability
        (encapsulating attribute) is used as part of a configuration; the
        configuration inherits the multiplexing category of each of its
        constituent (encapsulated) attributes and parameters.  The inherited
        attributes MUST be coherent in order to form a valid configuration
        from a multiplexing point of view (see Section 14 for further
        details).

    */
    FMLiveSwitchSdpAttributeCategoryInherit = 6,
    /**

        The attributes in the IDENTICAL-PER-PT category define the RTP
        payload configuration on per Payload Type basis and MUST have
        identical values across all the media descriptions for a given RTP
        Payload Type when repeated.  These Payload Types identify the same
        codec configuration as defined in the Section 10.1.2 of
        [I-D.ietf-mmusic-sdp-bundle-negotiation] under this context.

    */
    FMLiveSwitchSdpAttributeCategoryIdenticalPerPT = 7,
    /**

        For the attributes in the SPECIAL category, the text in the
        specification defining the attribute MUST be consulted for further
        handling when multiplexed.

    */
    FMLiveSwitchSdpAttributeCategorySpecial = 8
};

/**

    SDP Attribute types

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchSdpAttributeType) {
    /**

        Unknown SDP Attribute

    */
    FMLiveSwitchSdpAttributeTypeUnknownAttribute = 999666,
    /**

        SDP Direction Attribute

    */
    FMLiveSwitchSdpAttributeTypeDirectionAttribute = 1,
    /**

        SDP Category Attribute

    */
    FMLiveSwitchSdpAttributeTypeCategoryAttribute = 2,
    /**

        SDP Character Set Attribute

    */
    FMLiveSwitchSdpAttributeTypeCharacterSetAttribute = 3,
    /**

        SDP Conference Type Attribute

    */
    FMLiveSwitchSdpAttributeTypeConferenceTypeAttribute = 4,
    /**

        SDP Crypto Attribute

    */
    FMLiveSwitchSdpAttributeTypeCryptoAttribute = 5,
    /**

        SDP Format Parameters Attribute

    */
    FMLiveSwitchSdpAttributeTypeFormatParametersAttribute = 6,
    /**

        SDP Frame Rate Attribute

    */
    FMLiveSwitchSdpAttributeTypeFrameRateAttribute = 7,
    /**

        SDP Keywords Attribute

    */
    FMLiveSwitchSdpAttributeTypeKeywordsAttribute = 8,
    /**

        SDP Language Attribute

    */
    FMLiveSwitchSdpAttributeTypeLanguageAttribute = 9,
    /**

        SDP Max Packet Time Attribute

    */
    FMLiveSwitchSdpAttributeTypeMaxPacketTimeAttribute = 10,
    /**

        SDP Orientiation Attribute

    */
    FMLiveSwitchSdpAttributeTypeOrientationAttribute = 11,
    /**

        SDP Packet Time Attribute

    */
    FMLiveSwitchSdpAttributeTypePacketTimeAttribute = 12,
    /**

        SDP Quality Attribute

    */
    FMLiveSwitchSdpAttributeTypeQualityAttribute = 13,
    /**

        SDP Sdp Language Attribute

    */
    FMLiveSwitchSdpAttributeTypeSdpLanguageAttribute = 14,
    /**

        SDP Setup Attribute

    */
    FMLiveSwitchSdpAttributeTypeSetupAttribute = 15,
    /**

        SDP Tool  Attribute

    */
    FMLiveSwitchSdpAttributeTypeToolAttribute = 16,
    /**

        SDP Media Stream Id Semantic Attribute

    */
    FMLiveSwitchSdpAttributeTypeMediaStreamIdSemanticAttribute = 17,
    /**

        SDP Stream Id Attribute

    */
    FMLiveSwitchSdpAttributeTypeMediaStreamIdAttribute = 18,
    /**

        SDP Bundle-only Attribute

    */
    FMLiveSwitchSdpAttributeTypeBundleOnlyAttribute = 40,
    /**

        SDP Ice Candidate Attribute

    */
    FMLiveSwitchSdpAttributeTypeIceCandidateAttribute = 19,
    /**

        SDP Ice Fingerprint Attribute

    */
    FMLiveSwitchSdpAttributeTypeIceFingerprintAttribute = 20,
    /**

        SDP Ice Lite Attribute

    */
    FMLiveSwitchSdpAttributeTypeIceLiteAttribute = 21,
    /**

        SDP Ice Mismatch Attribute

    */
    FMLiveSwitchSdpAttributeTypeIceMismatchAttribute = 22,
    /**

        SDP Ice Options Attribute

    */
    FMLiveSwitchSdpAttributeTypeIceOptionsAttribute = 23,
    /**

        SDP Ice Password Attribute

    */
    FMLiveSwitchSdpAttributeTypeIcePasswordAttribute = 24,
    /**

        SDP Ice Ufrag Attribute

    */
    FMLiveSwitchSdpAttributeTypeIceUfragAttribute = 25,
    /**

        SDP Ice Remote Candidates Attribute

    */
    FMLiveSwitchSdpAttributeTypeIceRemoteCandidatesAttribute = 26,
    /**

        SDP RTP Map Attribute

    */
    FMLiveSwitchSdpAttributeTypeRtpMapAttribute = 27,
    /**

        SDP RTP SSRC Attribute

    */
    FMLiveSwitchSdpAttributeTypeRtpSsrcAttribute = 28,
    /**

        SDP RTP Extension Map Attribute (https://tools.ietf.org/html/rfc5285#section-5)

    */
    FMLiveSwitchSdpAttributeTypeRtpExtMapAttribute = 29,
    /**

        SDP RTCP Attribute

    */
    FMLiveSwitchSdpAttributeTypeRtcpAttribute = 30,
    /**

        SDP RTCP Feedback Attribute

    */
    FMLiveSwitchSdpAttributeTypeRtcpFeedbackAttribute = 31,
    /**

        SDP RTCP Mux Attribute

    */
    FMLiveSwitchSdpAttributeTypeRtcpMuxAttribute = 32,
    /**

        SDP SCTP Port Attribute

    */
    FMLiveSwitchSdpAttributeTypeSctpPortAttribute = 33,
    /**

        SDP SCTP Map Attribute

    */
    FMLiveSwitchSdpAttributeTypeSctpMapAttribute = 34,
    /**

        SDP SCTP Max Message Size Attribute

    */
    FMLiveSwitchSdpAttributeTypeSctpMaxMessageSizeAttribute = 35,
    /**

        SDP Group Attribute

    */
    FMLiveSwitchSdpAttributeTypeGroupAttribute = 36,
    /**

        SDP RTP RID Attribute

    */
    FMLiveSwitchSdpAttributeTypeRtpRidAttribute = 37,
    /**

        SDP Simulcast Attribute

    */
    FMLiveSwitchSdpAttributeTypeSimulcastAttribute = 38,
    /**

        SDP RTP SSRC Group Attribute

    */
    FMLiveSwitchSdpAttributeTypeRtpSsrcGroupAttribute = 39,
    /**

        SDP Muted Attribute

    */
    FMLiveSwitchSdpAttributeTypeMutedAttribute = 41,
    /**

        SDP Content Attribute

    */
    FMLiveSwitchSdpAttributeTypeContentAttribute = 42
};

/**

    SDP Group Semantics

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchSdpGroupSemanticsType) {
    /**

        An application that receives a session description that contains "m"
        lines that are grouped together using LS semantics MUST synchronize
        the playout of the corresponding media streams.Note that LS
        semantics not only apply to a video stream that has to be
        synchronized with an audio stream.The playout of two streams of the
        same type can be synchronized as well.

    */
    FMLiveSwitchSdpGroupSemanticsTypeLipSynchronization = 1,
    /**

        An "m" line in an SDP session description defines a media stream.
        However, SDP does not define what a media stream is.  This definition
        can be found in the RTSP specification.The RTSP RFC[5] defines a
        media stream as "a single media instance, e.g., an audio stream or a
        video stream as well as a single whiteboard or shared application
        group. When using RTP, a stream consists of all RTP and RTCP packets
        created by a source within an RTP session".

    */
    FMLiveSwitchSdpGroupSemanticsTypeFlowIdentification = 2,
    /**

        The extension can be used with the Session Description Protocol(SDP)
        Offer/Answer mechanism[RFC3264] to negotiate which "m=" sections will
        become part of a BUNDLE group.

    */
    FMLiveSwitchSdpGroupSemanticsTypeBundling = 3,
    /**

        Unknown Group semantics type.

    */
    FMLiveSwitchSdpGroupSemanticsTypeUnknown = 4
};

/**

    A list of known types for FMLiveSwitchSdpIceOptionTag.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchSdpIceOptionTagType) {
    /**

        Indicates an unknown option tag.

    */
    FMLiveSwitchSdpIceOptionTagTypeUnknown = 1,
    /**

        Indicates the trickle-ice option tag.

    */
    FMLiveSwitchSdpIceOptionTagTypeTrickle = 2
};

/**

    Media Stream Id Semantic Tokens

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchSdpMediaStreamIdSemanticToken) {
    /**

        WebRTC Media Stream Semantic

    */
    FMLiveSwitchSdpMediaStreamIdSemanticTokenWms = 1
};

/**

    A session description type.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchSessionDescriptionType) {
    /**

        Indicates an offer.

    */
    FMLiveSwitchSessionDescriptionTypeOffer = 1,
    /**

        Indicates an answer.

    */
    FMLiveSwitchSessionDescriptionTypeAnswer = 2
};

/**

    A stream direction.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchStreamDirection) {
    /**

        Indicates a stream that can send and can receive.

    */
    FMLiveSwitchStreamDirectionSendReceive = 1,
    /**

        Indicates a stream that can send.

    */
    FMLiveSwitchStreamDirectionSendOnly = 2,
    /**

        Indicates a stream that can receive.

    */
    FMLiveSwitchStreamDirectionReceiveOnly = 3,
    /**

        Indicates a stream that cannot send or receive.

    */
    FMLiveSwitchStreamDirectionInactive = 4,
    /**

        Indicates that a stream direction has not been set.

    */
    FMLiveSwitchStreamDirectionUnset = 5
};

/**

    The state of a stream.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchStreamState) {
    /**

        Indicates that the stream is new and has not been started.

    */
    FMLiveSwitchStreamStateNew = 1,
    /**

        Indicates that the stream is being initialized but no connecting attempts have been made.

    */
    FMLiveSwitchStreamStateInitializing = 2,
    /**

        Indicates that the stream is currently connecting.

    */
    FMLiveSwitchStreamStateConnecting = 3,
    /**

        Indicates that the stream is currently connected.

    */
    FMLiveSwitchStreamStateConnected = 4,
    /**

        Indicates that the stream has encountered an error and is cleaning up.

    */
    FMLiveSwitchStreamStateFailing = 5,
    /**

        Indicates that the stream has encountered an error and has cleaned up.

    */
    FMLiveSwitchStreamStateFailed = 6,
    /**

        Indicates that the stream has been instructed to close and is cleaning up.

    */
    FMLiveSwitchStreamStateClosing = 7,
    /**

        Indicates that the stream has been instructed to close and has cleaned up.

    */
    FMLiveSwitchStreamStateClosed = 8
};

/**

    A stream type.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchStreamType) {
    /**

        Indicates an audio stream.

    */
    FMLiveSwitchStreamTypeAudio = 1,
    /**

        Indicates a video stream.

    */
    FMLiveSwitchStreamTypeVideo = 2,
    /**

        Indicates an application stream.

    */
    FMLiveSwitchStreamTypeApplication = 3,
    /**

        Indicates a message stream.

    */
    FMLiveSwitchStreamTypeMessage = 4,
    /**

        Indicates a text stream.

    */
    FMLiveSwitchStreamTypeText = 5
};

/**

    A video type.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchVideoType) {
    /**

        Indicates an unknown type.

    */
    FMLiveSwitchVideoTypeUnknown = 1,
    /**

        Indicates camera-based video.

    */
    FMLiveSwitchVideoTypeCamera = 2,
    /**

        Indicates screen-based video.

    */
    FMLiveSwitchVideoTypeScreen = 3
};

/**

    The CCM TMMBN policy.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchCcmTmmbnPolicy) {
    /**

        The usage of CCM TMMBN is disabled.

    */
    FMLiveSwitchCcmTmmbnPolicyDisabled = 1,
    /**

        The usage of CCM TMMBN is negotiated with the peer.

    */
    FMLiveSwitchCcmTmmbnPolicyNegotiated = 2
};

/**

    The CCM TMMBR policy.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchCcmTmmbrPolicy) {
    /**

        The usage of CCM TMMBR is disabled.

    */
    FMLiveSwitchCcmTmmbrPolicyDisabled = 1,
    /**

        The usage of CCM TMMBR is negotiated with the peer.

    */
    FMLiveSwitchCcmTmmbrPolicyNegotiated = 2
};

/**

    Scheduler types for connections.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchSchedulerType) {
    /**

        One scheduler per connection.

    */
    FMLiveSwitchSchedulerTypeScheduler = 1,
    /**

        Shared scheduler across all connections.

    */
    FMLiveSwitchSchedulerTypeSchedulerMulti = 2
};

/**

    The protocol used to carry media on a connection.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchMediaProtocol) {
    /**

        WebRTC Media Protocol

    */
    FMLiveSwitchMediaProtocolWebRTC = 1,
    /**

        WebSockets Media Protcol

    */
    FMLiveSwitchMediaProtocolWebSockets = 2
};

/**

    The local policy for how we will handle video retention on poor connections.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchVideoRetentionPolicy) {
    /**

        Video will always be retained regardless of connection viability

    */
    FMLiveSwitchVideoRetentionPolicyAlwaysRetain = 1,
    /**

        Video will be dynamically disabled or enabled dependant on the connections restraints

    */
    FMLiveSwitchVideoRetentionPolicyDynamicRetention = 2,
    /**

        Video will be disabled and stay disabled on first indication of failure

    */
    FMLiveSwitchVideoRetentionPolicyNeverRetain = 3
};

/**

    The DTMF mode.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchDtmfMode) {
    /**

        Indicates that DTMF packets will be sent along
        with the audio packets that trigger them.

    */
    FMLiveSwitchDtmfModeAugment = 1,
    /**

        Indicates that DTMF packets will be sent instead
        of the audio packets that trigger them.

    */
    FMLiveSwitchDtmfModeReplace = 2
};

/**

    An RTCP transport-wide congestion control (transport-cc) packet status symbol.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchTransportCCPacketStatusSymbol) {
    /**

        Indicates the packet was not received.

    */
    FMLiveSwitchTransportCCPacketStatusSymbolPacketNotReceived = 1,
    /**

        Indicates the packet was received with a small delta.

    */
    FMLiveSwitchTransportCCPacketStatusSymbolPacketReceivedSmallDelta = 2,
    /**

        Indicates the packet was received with a large or negative delta.

    */
    FMLiveSwitchTransportCCPacketStatusSymbolPacketReceivedLargeOrNegativeDelta = 3
};

/**

    The CCM LRR policy.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchCcmLrrPolicy) {
    /**

        The usage of CCM LRR is disabled.

    */
    FMLiveSwitchCcmLrrPolicyDisabled = 1,
    /**

        The usage of CCM LRR is negotiated with the peer.

    */
    FMLiveSwitchCcmLrrPolicyNegotiated = 2
};

/**

    The CCM FIR policy.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchCcmFirPolicy) {
    /**

        The usage of CCM FIR is disabled.

    */
    FMLiveSwitchCcmFirPolicyDisabled = 1,
    /**

        The usage of CCM FIR is negotiated with the peer.

    */
    FMLiveSwitchCcmFirPolicyNegotiated = 2
};

/**

    The NACK PLI policy.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchNackPliPolicy) {
    /**

        The usage of NACK PLI is disabled.

    */
    FMLiveSwitchNackPliPolicyDisabled = 1,
    /**

        The usage of NACK PLI is negotiated with the peer.

    */
    FMLiveSwitchNackPliPolicyNegotiated = 2
};

/**

    The simulcast mode.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchSimulcastMode) {
    /**

        Simulcast will not be signalled.

    */
    FMLiveSwitchSimulcastModeDisabled = 1,
    /**

        Simulcast will be signalled using synchronization sources
        and the "SIM" synchronization source group.

    */
    FMLiveSwitchSimulcastModeSynchronizationSource = 2,
    /**

        Simulcast will be signalled using RTP stream identifiers
        and the "simulcast" media attribute.

    */
    FMLiveSwitchSimulcastModeRtpStreamId = 3
};

/**

    The local bundle negotiation policy. Denotes the policy this peer uses when negotiating resulting connection bundling policy.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchBundlePolicy) {
    /**

        Indicates that the first media section of each type will contain transport parameters.
        The second and any subsequent media sections of each type will be marked as "bundle only".

    */
    FMLiveSwitchBundlePolicyBalanced = 1,
    /**

        Indicates that all media sections will contain transport parameters.
        No media sections will be marked as "bundle only".

    */
    FMLiveSwitchBundlePolicyMaxCompatibility = 2,
    /**

        Indicates that only the first media section will contain transport parameters.
        All other media sections will be marked as "bundle only".

    */
    FMLiveSwitchBundlePolicyMaxBundle = 3,
    /**

        Indicates that all media sections will contain transport parameters.
        No support for bundling.

    */
    FMLiveSwitchBundlePolicyDisabled = 4
};

/**

    A cipher suite.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchDtlsCipherSuite) {
    /**

        Indicates TLS_RSA_WITH_AES_128_CBC_SHA.

    */
    FMLiveSwitchDtlsCipherSuiteRsaAes128Sha = 1,
    /**

        Indicates TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA.

    */
    FMLiveSwitchDtlsCipherSuiteEcdheRsaAes128Sha = 2,
    /**

        Indicates TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA.

    */
    FMLiveSwitchDtlsCipherSuiteEcdheEcdsaAes128Sha = 3,
    /**

        Indicates TLS_RSA_WITH_AES_128_GCM_SHA256.

    */
    FMLiveSwitchDtlsCipherSuiteRsaAes128GcmSha256 = 4,
    /**

        Indicates TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256.

    */
    FMLiveSwitchDtlsCipherSuiteEcdheRsaAes128GcmSha256 = 5,
    /**

        Indicates TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256.

    */
    FMLiveSwitchDtlsCipherSuiteEcdheEcdsaAes128GcmSha256 = 6,
    /**

        Indicates TLS_RSA_WITH_AES_128_CBC_SHA256.

    */
    FMLiveSwitchDtlsCipherSuiteRsaAes128CbcSha256 = 7,
    /**

        Indicates TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256.

    */
    FMLiveSwitchDtlsCipherSuiteEcdheRsaAes128CbcSha256 = 8,
    /**

        Indicates TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256.

    */
    FMLiveSwitchDtlsCipherSuiteEcdheEcdsaAes128CbcSha256 = 9
};

/**

    DTLS protocol versions.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchDtlsProtocolVersion) {
    /**

        Indicates DTLS 1.0.

    */
    FMLiveSwitchDtlsProtocolVersionDtls10 = 1,
    /**

        Indicates DTLS 1.2.

    */
    FMLiveSwitchDtlsProtocolVersionDtls12 = 2,
    /**

        Indicates DTLS 1.3.

    */
    FMLiveSwitchDtlsProtocolVersionDtls13 = 3
};

/**

    A DTLS role.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchDtlsRole) {
    /**

        Indicates a negotiated role.

    */
    FMLiveSwitchDtlsRoleAuto = 1,
    /**

        Indicates a client role.

    */
    FMLiveSwitchDtlsRoleClient = 2,
    /**

        Indicates a server role.

    */
    FMLiveSwitchDtlsRoleServer = 3
};

/**

    Indicates encryption policy for a connection.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchEncryptionPolicy) {
    /**

        Encryption is required. If encryption is not supported by peer, connection must fail.

    */
    FMLiveSwitchEncryptionPolicyRequired = 1,
    /**

        Encryption is preferred but not required. If the other peer does not support encryption, connection will be established without encryption.

    */
    FMLiveSwitchEncryptionPolicyNegotiated = 2,
    /**

        Encryption will not be available for the given connection.

    */
    FMLiveSwitchEncryptionPolicyDisabled = 3
};

/**

    Forward error correction mask types.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchFecMaskType) {
    /**

        Indicates a random FEC mask type.

    */
    FMLiveSwitchFecMaskTypeRandom = 1,
    /**

        Indicates a bursty FEC mask type.

    */
    FMLiveSwitchFecMaskTypeBursty = 2
};

/**

    The state of an ICE gatherer.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchIceConnectionState) {
    /**

        Indicates that the ICE agent(s) is(are) gathering addresses or is(are) waiting to be given remote candidates (or both)..

    */
    FMLiveSwitchIceConnectionStateNew = 1,
    /**

        Indicates that the ICE agent(s) has(ve) been given one or more remote candidates and is(are) checking pairs of local and remote candidates against one another to try to find a compatible match, but has(ve) not yet found a pair which will allow the peer connection to be made. It's possible that gathering of candidates is also still underway.

    */
    FMLiveSwitchIceConnectionStateChecking = 2,
    /**

        Indicates that a usable pairing of local and remote candidates has been found for all components of the connection, and the connection has been established. It's possible that gathering is still underway, and it's also possible that the ICE agent is still checking candidates against one another looking for a better connection to use.

    */
    FMLiveSwitchIceConnectionStateConnected = 3,
    /**

        Indicates that the ICE agent has finished gathering candidates, has checked all pairs against one another, and has found a connection for all components.

    */
    FMLiveSwitchIceConnectionStateCompleted = 4,
    /**

        Indicates that the ICE candidate has checked all candidates pairs against one another and has failed to find compatible matches for all components of the connection. It is, however, possible that the ICE agent did find compatible connections for some components.

    */
    FMLiveSwitchIceConnectionStateFailed = 5,
    /**

        Indicates that checks to ensure that components are still connected failed for at least one component of the RTCPeerConnection. This is a less stringent test than "failed" and may trigger intermittently and resolve just as spontaneously on less reliable networks, or during temporary disconnections. When the problem resolves, the connection may return to the "Connected" state.

    */
    FMLiveSwitchIceConnectionStateDisconnected = 6,
    /**

        The ICE agent(s) for this RTCPeerConnection has shut down and is no longer handling requests

    */
    FMLiveSwitchIceConnectionStateClosed = 7
};

/**

    The state of an ICE gatherer.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchIceGatheringState) {
    /**

        Indicates that the gatherer has been created and no gathering has occurred yet.

    */
    FMLiveSwitchIceGatheringStateNew = 1,
    /**

        Indicates that the gatherer is in the process of gathering candidates.

    */
    FMLiveSwitchIceGatheringStateGathering = 2,
    /**

        Indicates that the gatherer has completed gathering candidates.

    */
    FMLiveSwitchIceGatheringStateComplete = 3,
    /**

        Indicates that the gatherer has started closing intentionally via a call to stop.

    */
    FMLiveSwitchIceGatheringStateClosing = 4,
    /**

        Indicates that the gatherer has been closed intentionally via a call to stop.

    */
    FMLiveSwitchIceGatheringStateClosed = 5,
    /**

        Indicates that the gatherer failed due to an error.

    */
    FMLiveSwitchIceGatheringStateFailed = 6
};

/**

    The local policy for gathering candidates.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchIceGatherPolicy) {
    /**

        All candidates (host, reflexive, and relay) will be gathered.

    */
    FMLiveSwitchIceGatherPolicyAll = 1,
    /**

        Only reflexive and relay candidates will be gathered.

    */
    FMLiveSwitchIceGatherPolicyNoHost = 2,
    /**

        Only relay candidates will be gathered.

    */
    FMLiveSwitchIceGatherPolicyRelay = 3
};

/**

    Policy indicating whether ICE connectivity checks are required (and enabled) or disabled (and not required for a Connection)

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchIcePolicy) {
    /**

        Indicates that ICE connectivity checks are enabled and required on a Connection.

    */
    FMLiveSwitchIcePolicyRequired = 1,
    /**

        Indicates that ICE is disabled on a Connection.

    */
    FMLiveSwitchIcePolicyDisabled = 2,
    /**

        Indicates that ICE connectivity checks will be conducted only if supported by the other party.

    */
    FMLiveSwitchIcePolicyNegotiated = 3
};

/**

    An ICE role.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchIceRole) {
    /**

        Indicates a controlling role.

    */
    FMLiveSwitchIceRoleControlling = 1,
    /**

        Indicates a controlled role.

    */
    FMLiveSwitchIceRoleControlled = 2
};

/**

    A layout alignment definition.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchLayoutAlignment) {
    /**

        Indicates a top-left alignment.

    */
    FMLiveSwitchLayoutAlignmentTopLeft = 1,
    /**

        Indicates a top-center alignment.

    */
    FMLiveSwitchLayoutAlignmentTop = 2,
    /**

        Indicates a top-right alignment.

    */
    FMLiveSwitchLayoutAlignmentTopRight = 3,
    /**

        Indicates a center-left alignment.

    */
    FMLiveSwitchLayoutAlignmentLeft = 4,
    /**

        Indicates a center-center alignment.

    */
    FMLiveSwitchLayoutAlignmentCenter = 5,
    /**

        Indicates a center-right alignment.

    */
    FMLiveSwitchLayoutAlignmentRight = 6,
    /**

        Indicates a bottom-left alignment.

    */
    FMLiveSwitchLayoutAlignmentBottomLeft = 7,
    /**

        Indicates a bottom-center alignment.

    */
    FMLiveSwitchLayoutAlignmentBottom = 8,
    /**

        Indicates a bottom-right alignment.

    */
    FMLiveSwitchLayoutAlignmentBottomRight = 9
};

/**

    Specifies the direction of the layout flow.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchLayoutDirection) {
    /**

        Indicates that the layout should flow
        horizontally, filling rows as needed.

    */
    FMLiveSwitchLayoutDirectionHorizontal = 1,
    /**

        Indicates that the layout should flow
        vertically, filling columns as needed.

    */
    FMLiveSwitchLayoutDirectionVertical = 2
};

/**

    Specifies the layout mode that should be used.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchLayoutMode) {
    /**

        Indicates that the local video feed should be displayed as
        a floating element above the remote video feeds.

    */
    FMLiveSwitchLayoutModeFloatLocal = 1,
    /**

        Indicates that the remote video feeds should be displayed as
        floating elements above the local video feed.

    */
    FMLiveSwitchLayoutModeFloatRemote = 2,
    /**

        Indicates that the video feed should be displayed as a block
        element on its own row/column, separate from other video feeds.

    */
    FMLiveSwitchLayoutModeBlock = 3,
    /**

        Indicates that the video feed should be displayed as an inline
        element that shares a row/column with other video feeds.

    */
    FMLiveSwitchLayoutModeInline = 4,
    /**

        Indicates that the video feed should be displayed as an inline
        element that shares a row/column with other video feeds,
        allowing container overflow as needed.

    */
    FMLiveSwitchLayoutModeInlineOverflow = 5
};

/**

    A layout origin definition.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchLayoutOrigin) {
    /**

        Indicates an origin where 0,0 is in the top-left corner.

    */
    FMLiveSwitchLayoutOriginTopLeft = 1,
    /**

        Indicates an origin where 0,0 is in the top-right corner.

    */
    FMLiveSwitchLayoutOriginTopRight = 2,
    /**

        Indicates an origin where 0,0 is in the bottom-right corner.

    */
    FMLiveSwitchLayoutOriginBottomRight = 3,
    /**

        Indicates an origin where 0,0 is in the bottom-left corner.

    */
    FMLiveSwitchLayoutOriginBottomLeft = 4
};

/**

    The state of local media.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchLocalMediaState) {
    /**

        Indicates that the local media has not been started yet.

    */
    FMLiveSwitchLocalMediaStateNew = 1,
    /**

        Indicates that the local media is starting.

    */
    FMLiveSwitchLocalMediaStateStarting = 2,
    /**

        Indicates that the local media has started.

    */
    FMLiveSwitchLocalMediaStateStarted = 3,
    /**

        Indicates that the local media is stopping.

    */
    FMLiveSwitchLocalMediaStateStopping = 4,
    /**

        Indicates that the local media has stopped.

    */
    FMLiveSwitchLocalMediaStateStopped = 5,
    /**

        Indicates that the local media is being destroyed.

    */
    FMLiveSwitchLocalMediaStateDestroying = 6,
    /**

        Indicates that the local media has been destroyed.

    */
    FMLiveSwitchLocalMediaStateDestroyed = 7
};

/**

    The policy on how a media input should process the frame.
    
    ProcessFramePolicy affects how media packets move from one processing element to the next in a media track.
    The default behaviour is synchronous, which is recommended for almost all applications.
    There are a few niche use cases (generally server-side) where a media track includes a branch with hundreds or thousands of leaves,
    in which case processing asynchronously (with accompanying thread-pool tuning)
    can eliminate the effects of favoritism in processing time towards the first leaves.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchProcessFramePolicy) {
    /**

        The media input will process the frame synchronously.

    */
    FMLiveSwitchProcessFramePolicySynchronous = 1,
    /**

        The media input will process the frame asynchronously.

    */
    FMLiveSwitchProcessFramePolicyAsynchronous = 2
};

/**

    The state of a media pipe.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchMediaPipeState) {
    /**

        Indicates that the media sink has been initialized.

    */
    FMLiveSwitchMediaPipeStateInitialized = 1,
    /**

        Indicates that the media pipe is being destroyed.

    */
    FMLiveSwitchMediaPipeStateDestroying = 2,
    /**

        Indicates that the media pipe has been destroyed.

    */
    FMLiveSwitchMediaPipeStateDestroyed = 3
};

/**

    The state of a media sink.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchMediaSinkState) {
    /**

        Indicates that the media sink has been initialized.

    */
    FMLiveSwitchMediaSinkStateInitialized = 1,
    /**

        Indicates that the media sink is being destroyed.

    */
    FMLiveSwitchMediaSinkStateDestroying = 2,
    /**

        Indicates that the media sink has been destroyed.

    */
    FMLiveSwitchMediaSinkStateDestroyed = 3
};

/**

    The state of a media source.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchMediaSourceState) {
    /**

        Indicates that the media source has not been started yet.

    */
    FMLiveSwitchMediaSourceStateNew = 1,
    /**

        Indicates that the media source is starting.

    */
    FMLiveSwitchMediaSourceStateStarting = 2,
    /**

        Indicates that the media source has started.

    */
    FMLiveSwitchMediaSourceStateStarted = 3,
    /**

        Indicates that the media source is stopping.

    */
    FMLiveSwitchMediaSourceStateStopping = 4,
    /**

        Indicates that the media source has stopped.

    */
    FMLiveSwitchMediaSourceStateStopped = 5,
    /**

        Indicates that the media source is being destroyed.

    */
    FMLiveSwitchMediaSourceStateDestroying = 6,
    /**

        Indicates that the media source has been destroyed.

    */
    FMLiveSwitchMediaSourceStateDestroyed = 7
};

/**

    The local policy for RTP/RTCP multiplex negotation.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchMultiplexPolicy) {
    /**

        Indicates that multiplexing will be used only if the remote end supports it.

    */
    FMLiveSwitchMultiplexPolicyNegotiated = 1,
    /**

        Indicates that multiplexing will be required. The connection will fail if the remote end does not support multiplexing.

    */
    FMLiveSwitchMultiplexPolicyRequired = 2,
    /**

        Indicates that multiplexing will be disabled. The connection will fail if the remote end requires multiplexing.

    */
    FMLiveSwitchMultiplexPolicyDisabled = 3
};

/**

    The local policy for the use of generic RTP Negative Acknowledgements (NACK).
    Cf. https://tools.ietf.org/html/draft-ietf-rtcweb-rtp-usage-26
    
    NackPolicy is for enabling/configuring negative acknowledgement.
    Negative acknowledgements are used by media receivers to request that a media sender retransmit a packet.
    It is highly effective for video in low-latency networks since video is stateful and the cost of losing a packet is high.
    It is far less effective for audio, where any delay is especially harmful and the cost of losing a packet is not significant. Because of this,
    it is enabled by default for video and disabled by default for audio. You can modify the buffer size using NackConfig, but generally,
    it should be left with default values. The option to set these values will most likely be removed in a future release as our adaptive algorithms improve.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchNackPolicy) {
    /**

        The usage of generic NACKs is disabled.

    */
    FMLiveSwitchNackPolicyDisabled = 1,
    /**

        The usage of generic NACKs is negotiated with the peer.

    */
    FMLiveSwitchNackPolicyNegotiated = 2
};

/**

    The local policy for the RED Forward Error Correction support.
    Cf. https://tools.ietf.org/html/draft-ietf-rtcweb-fec-04
    
    RedFecPolicy is for enabling/configuring forward error correction.
    Forward error correction adds redundancy to the media stream (increased bandwidth)
    with the intention that media receivers can recover from packet loss without requiring the media server to retransmit anything.
    It is a last resort for high latency networks.
    It is disabled by default and not currently supported as it does not have sufficient test coverage.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchRedFecPolicy) {
    /**

        The usage of RED FEC is disabled.

    */
    FMLiveSwitchRedFecPolicyDisabled = 1,
    /**

        The usage of RED FEC is negotiated with the peer.

    */
    FMLiveSwitchRedFecPolicyNegotiated = 2
};

/**

    The local policy for the use of Receiver Estimated Maximum Bitrates (goog-remb).
    Cf. https://tools.ietf.org/html/draft-alvestrand-rmcat-remb-03

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchRembPolicy) {
    /**

        The usage of goog-rembs is disabled.

    */
    FMLiveSwitchRembPolicyDisabled = 1,
    /**

        The usage of goog-rembs is negotiated with the peer.

    */
    FMLiveSwitchRembPolicyNegotiated = 2
};

/**

    Indicates Sdes policy for stream.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchSdesPolicy) {
    /**

        Sdes is preferred but not required. If stream type is compatible (i.e. not a DataStream) Crypto attributes will be included in the session description.

    */
    FMLiveSwitchSdesPolicyNegotiated = 2,
    /**

        Sdes is disabled. Crypto attributes will not be included in the session description.

    */
    FMLiveSwitchSdesPolicyDisabled = 3
};

/**

    The signalling state of a connection.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchSignallingState) {
    /**

        Indicates that no offer/answer exchange ever occurred.

    */
    FMLiveSwitchSignallingStateNew = 1,
    /**

        Indicates that the connection has a local offer and remote answer is outstanding.

    */
    FMLiveSwitchSignallingStateHaveLocalOffer = 2,
    /**

        Indicates that the connection has a remote offer and local answer is outstanding.

    */
    FMLiveSwitchSignallingStateHaveRemoteOffer = 3,
    /**

        Indicates that for each offer there is a matching answer.

    */
    FMLiveSwitchSignallingStateStable = 4
};

/**

    The local policy for TrickleIce support.
    Cf. https://tools.ietf.org/html/draft-ietf-ice-trickle-04

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchTrickleIcePolicy) {
    /**

        A Trickle ICE mode of operation where the offerer
        gathers all of the possible candidates strictly before
        creating and sending the offer.

    */
    FMLiveSwitchTrickleIcePolicyNotSupported = 1,
    /**

        The regular mode of operation for Trickle ICE agents,
        in which an initial offer can include any number of candidates
        (even zero candidates) and does not need to include the entire
        first generation of candidates as in half trickle.

    */
    FMLiveSwitchTrickleIcePolicyFullTrickle = 2,
    /**

        A Trickle ICE mode of operation where the offerer
        gathers its first generation of candidates strictly before
        creating and sending the offer. Once sent, that offer can be
        processed by Vanilla ICE agents and does not require support for
        this specification. It also allows Trickle ICE capable answerers
        to still gather candidates and perform connectivity checks in a
        non-blocking way, thus roughly offering "half" the advantages of
        Trickle ICE. The mechanism is mostly meant for use in cases where
        support for Trickle ICE cannot be confirmed prior to sending an
        initial offer.

    */
    FMLiveSwitchTrickleIcePolicyHalfTrickle = 3
};

/**

    An authenticated TURN operation.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchTurnAuthOperation) {
    /**

        Indicates a socket allocation request.

    */
    FMLiveSwitchTurnAuthOperationAllocate = 1,
    /**

        Indicates a create-permission request.

    */
    FMLiveSwitchTurnAuthOperationCreatePermission = 2,
    /**

        Indicates an allocation refresh request.

    */
    FMLiveSwitchTurnAuthOperationRefresh = 3,
    /**

        Indicates a channel-bind request.

    */
    FMLiveSwitchTurnAuthOperationChannelBind = 4
};

/**

    The list of valid message types.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchStunMessageType) {
    /**

        Specifies that the message is a request.

    */
    FMLiveSwitchStunMessageTypeRequest = 1,
    /**

        Specifies that the message is an indication (no response).

    */
    FMLiveSwitchStunMessageTypeIndication = 2,
    /**

        Specifies that the message is a response indicating success.

    */
    FMLiveSwitchStunMessageTypeSuccessResponse = 3,
    /**

        Specifies that the message is a response indicating failure.

    */
    FMLiveSwitchStunMessageTypeErrorResponse = 4
};

/**

    A peer role.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchPeerRole) {
    /**

        The offering role.

    */
    FMLiveSwitchPeerRoleOfferer = 1,
    /**

        The answering role.

    */
    FMLiveSwitchPeerRoleAnswerer = 2
};

/**

    Metric monitor states.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchMetricMonitorState) {
    /**

        The Metric is Stable.

    */
    FMLiveSwitchMetricMonitorStateStable = 1,
    /**

        The Metric is Unstable.

    */
    FMLiveSwitchMetricMonitorStateUnstable = 2
};

/**

    The state of a client.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchClientState) {
    /**

        Indicates that the client is new and has not yet registered with the gateway.

    */
    FMLiveSwitchClientStateNew = 1,
    /**

        Indicates that the client is registering with the gateway.

    */
    FMLiveSwitchClientStateRegistering = 2,
    /**

        Indicates that the client is registered with the gateway.

    */
    FMLiveSwitchClientStateRegistered = 3,
    /**

        Indicates that the client is unregistering with the gateway.

    */
    FMLiveSwitchClientStateUnregistering = 4,
    /**

        Indicates that the client is unregistered with the gateway.

    */
    FMLiveSwitchClientStateUnregistered = 5
};

/**

    The invite feedback states.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchInvitationState) {
    /**

        Gets the unknown state.

    */
    FMLiveSwitchInvitationStateUnknown = 1,
    /**

        Gets the state for "pending".
        This state is for when no feedback has been received yet.

    */
    FMLiveSwitchInvitationStatePending = 2,
    /**

        Gets the state for "proceeding".
        This state is for when we are waiting for the invited party to respond.

    */
    FMLiveSwitchInvitationStateProceeding = 3,
    /**

        Gets the state for "sent".
        This state is for when the invite is sent in a way that does not allow feedback to be returned.

    */
    FMLiveSwitchInvitationStateSent = 4,
    /**

        Gets the state for "canceled".
        This state is for when the invite has been canceled.

    */
    FMLiveSwitchInvitationStateCancelled = 5,
    /**

        Gets the state for "cancelling".
        This state is for when the invite is in the process of being cancelled. May fail due to timing.

    */
    FMLiveSwitchInvitationStateCancelling = 6,
    /**

        Gets the state for "rejected".
        This state is for when the invitation was explicitly rejected.

    */
    FMLiveSwitchInvitationStateRejected = 7,
    /**

        Gets the state for "accepted".
        This state is for when the invitation was accepted.

    */
    FMLiveSwitchInvitationStateAccepted = 8,
    /**

        Gets the state for "notFound".
        This state is for when the invited user id cannot be found.

    */
    FMLiveSwitchInvitationStateNotFound = 9,
    /**

        Gets the state for "busy".
        This state is for when the invited user signals they are busy.

    */
    FMLiveSwitchInvitationStateBusy = 10,
    /**

        Gets the state for "noResponse".
        This state is for when the invitation did not receive a response.

    */
    FMLiveSwitchInvitationStateNoResponse = 11,
    /**

        Gets the state for "invalid".
        This state is when the invitation cannot be processed.

    */
    FMLiveSwitchInvitationStateInvalid = 12,
    /**

        Gets the state for "alreadyInvited".
        This state is when another invite for the same user id, protocol, and channel already exists.

    */
    FMLiveSwitchInvitationStateAlreadyInvited = 13
};

/**

    The internet connection state of a client.

*/
typedef NS_ENUM(NSInteger, FMLiveSwitchNetworkConnectionState) {
    /**

        Indicates that the client is new.

    */
    FMLiveSwitchNetworkConnectionStateNew = 1,
    /**

        Indicates that the client has internet connection.

    */
    FMLiveSwitchNetworkConnectionStateConnected = 2,
    /**

        Indicates that the client has disconnected from the internet.

    */
    FMLiveSwitchNetworkConnectionStateDisconnected = 3
};

/**

    A data buffer pool interface.

*/
@protocol FMLiveSwitchIDataBufferPool

/**

    Gets the total bytes available in the pool.

*/
- (long long) pooledBytesAvailable;
/**

    Release the pools.

*/
- (void) releasePools;
/**

    Takes a buffer from the pool.

    @param size The number of bytes needed.
*/
- (FMLiveSwitchDataBuffer*) takeWithSize:(int)size;
/**

    Takes a buffer from the pool.

    @param size The number of bytes needed.
    @param littleEndian Whether the data buffer should be little-endian.
*/
- (FMLiveSwitchDataBuffer*) takeWithSize:(int)size littleEndian:(bool)littleEndian;
/**

    Takes a buffer from the pool.

    @param size The number of bytes needed.
    @param littleEndian Whether the data buffer should be little-endian.
    @param clearBytes Whether to clear the data buffer.
*/
- (FMLiveSwitchDataBuffer*) takeWithSize:(int)size littleEndian:(bool)littleEndian clearBytes:(bool)clearBytes;

@end

/**

    A dispatch queue interface.

*/
@protocol FMLiveSwitchIDispatchQueue

/**

    Destroys the queue.

*/
- (void) destroy;
/**

    Enqueues an item for processing.

    @param item The item.
*/
- (void) enqueueWithItem:(id)item;
/**

    Gets the number of items in the queue.

*/
- (long long) queueCount;

@end

/**

    A system clock interface.

*/
@protocol FMLiveSwitchISystemClock

/**

    Gets the current system timestamp in ticks.
    10,000 ticks is equal to 1 millisecond.

    @return The current system timestamp in ticks.
*/
- (long long) getTimestamp;

@end

/**

    ILog interface for loggers.

*/
@protocol FMLiveSwitchILog

/**

    Writes a debug message to the log.

    @param message The log message.
    @param context the logigng context.
*/
- (void) debugWithContext:(FMLiveSwitchLogContext*)context message:(NSString*)message;
/**

    Writes a debug message with exception to the log.

    @param message The log message.
    @param ex The exception.
    @param context the logigng context.
*/
- (void) debugWithContext:(FMLiveSwitchLogContext*)context message:(NSString*)message ex:(NSException*)ex;
/**

    Writes a debug message to the log.

    @param message The log message.
*/
- (void) debugWithMessage:(NSString*)message;
/**

    Writes a debug message with exception to the log.

    @param message The log message.
    @param ex The exception.
*/
- (void) debugWithMessage:(NSString*)message ex:(NSException*)ex;
/**

    Writes a debug message to the log.

    @param scope The scope of this log message.
    @param message The log message.
    @param context the logigng context.
*/
- (void) debugWithScope:(NSString*)scope context:(FMLiveSwitchLogContext*)context message:(NSString*)message;
/**

    Writes a debug message with exception to the log.

    @param scope The scope of this log message.
    @param message The log message.
    @param ex The exception.
    @param context the logigng context.
*/
- (void) debugWithScope:(NSString*)scope context:(FMLiveSwitchLogContext*)context message:(NSString*)message ex:(NSException*)ex;
/**

    Writes a debug message to the log.

    @param scope The scope of this log message.
    @param message The log message.
*/
- (void) debugWithScope:(NSString*)scope message:(NSString*)message;
/**

    Writes a debug message with exception to the log.

    @param scope The scope of this log message.
    @param message The log message.
    @param ex The exception.
*/
- (void) debugWithScope:(NSString*)scope message:(NSString*)message ex:(NSException*)ex;
/**

    Writes a error message to the log.

    @param message The log message.
    @param context the logigng context.
*/
- (void) errorWithContext:(FMLiveSwitchLogContext*)context message:(NSString*)message;
/**

    Writes a error message with exception to the log.

    @param message The log message.
    @param ex The exception.
    @param context the logigng context.
*/
- (void) errorWithContext:(FMLiveSwitchLogContext*)context message:(NSString*)message ex:(NSException*)ex;
/**

    Writes a error message to the log.

    @param message The log message.
*/
- (void) errorWithMessage:(NSString*)message;
/**

    Writes a error message with exception to the log.

    @param message The log message.
    @param ex The exception.
*/
- (void) errorWithMessage:(NSString*)message ex:(NSException*)ex;
/**

    Writes a error message to the log.

    @param scope The scope of this log message.
    @param message The log message.
    @param context the logigng context.
*/
- (void) errorWithScope:(NSString*)scope context:(FMLiveSwitchLogContext*)context message:(NSString*)message;
/**

    Writes a error message with exception to the log.

    @param scope The scope of this log message.
    @param message The log message.
    @param ex The exception.
    @param context the logigng context.
*/
- (void) errorWithScope:(NSString*)scope context:(FMLiveSwitchLogContext*)context message:(NSString*)message ex:(NSException*)ex;
/**

    Writes a error message to the log.

    @param scope The scope of this log message.
    @param message The log message.
*/
- (void) errorWithScope:(NSString*)scope message:(NSString*)message;
/**

    Writes a error message with exception to the log.

    @param scope The scope of this log message.
    @param message The log message.
    @param ex The exception.
*/
- (void) errorWithScope:(NSString*)scope message:(NSString*)message ex:(NSException*)ex;
/**

    Writes a fatal message to the log.

    @param message The log message.
    @param context the logigng context.
*/
- (void) fatalWithContext:(FMLiveSwitchLogContext*)context message:(NSString*)message;
/**

    Writes a fatal message with exception to the log.

    @param message The log message.
    @param ex The exception.
    @param context the logigng context.
*/
- (void) fatalWithContext:(FMLiveSwitchLogContext*)context message:(NSString*)message ex:(NSException*)ex;
/**

    Writes a fatal message to the log.

    @param message The log message.
*/
- (void) fatalWithMessage:(NSString*)message;
/**

    Writes a fatal message with exception to the log.

    @param message The log message.
    @param ex The exception.
*/
- (void) fatalWithMessage:(NSString*)message ex:(NSException*)ex;
/**

    Writes a fatal message to the log.

    @param scope The scope of this log message.
    @param message The log message.
    @param context the logigng context.
*/
- (void) fatalWithScope:(NSString*)scope context:(FMLiveSwitchLogContext*)context message:(NSString*)message;
/**

    Writes a fatal message with exception to the log.

    @param scope The scope of this log message.
    @param message The log message.
    @param ex The exception.
    @param context the logigng context.
*/
- (void) fatalWithScope:(NSString*)scope context:(FMLiveSwitchLogContext*)context message:(NSString*)message ex:(NSException*)ex;
/**

    Writes a fatal message to the log.

    @param scope The scope of this log message.
    @param message The log message.
*/
- (void) fatalWithScope:(NSString*)scope message:(NSString*)message;
/**

    Writes a fatal message with exception to the log.

    @param scope The scope of this log message.
    @param message The log message.
    @param ex The exception.
*/
- (void) fatalWithScope:(NSString*)scope message:(NSString*)message ex:(NSException*)ex;
/**

    Ensures that all logs are written out.

*/
- (void) flush;
/**

    Writes a info message to the log.

    @param message The log message.
    @param context the logigng context.
*/
- (void) infoWithContext:(FMLiveSwitchLogContext*)context message:(NSString*)message;
/**

    Writes an info message with exception to the log.

    @param message The log message.
    @param ex The exception.
    @param context the logigng context.
*/
- (void) infoWithContext:(FMLiveSwitchLogContext*)context message:(NSString*)message ex:(NSException*)ex;
/**

    Writes a info message to the log.

    @param message The log message.
*/
- (void) infoWithMessage:(NSString*)message;
/**

    Writes an info message with exception to the log.

    @param message The log message.
    @param ex The exception.
*/
- (void) infoWithMessage:(NSString*)message ex:(NSException*)ex;
/**

    Writes a info message to the log.

    @param scope The scope of this log message.
    @param message The log message.
    @param context the logigng context.
*/
- (void) infoWithScope:(NSString*)scope context:(FMLiveSwitchLogContext*)context message:(NSString*)message;
/**

    Writes an info message with exception to the log.

    @param scope The scope of this log message.
    @param message The log message.
    @param ex The exception.
    @param context the logigng context.
*/
- (void) infoWithScope:(NSString*)scope context:(FMLiveSwitchLogContext*)context message:(NSString*)message ex:(NSException*)ex;
/**

    Writes a info message to the log.

    @param scope The scope of this log message.
    @param message The log message.
*/
- (void) infoWithScope:(NSString*)scope message:(NSString*)message;
/**

    Writes an info message with exception to the log.

    @param scope The scope of this log message.
    @param message The log message.
    @param ex The exception.
*/
- (void) infoWithScope:(NSString*)scope message:(NSString*)message ex:(NSException*)ex;
/**

    Gets if the debug log level is enabled.

*/
- (bool) isDebugEnabled;
/**

    Gets if the error log level is enabled.

*/
- (bool) isErrorEnabled;
/**

    Gets if the fatal log level is enabled.

*/
- (bool) isFatalEnabled;
/**

    Gets if the info log level is enabled.

*/
- (bool) isInfoEnabled;
/**

    Returns true if the passed log level is enabled on this logger.

    @param level Log level to check.
*/
- (bool) isLogEnabledWithLevel:(FMLiveSwitchLogLevel)level;
/**

    Gets if the verbose log level is enabled.

*/
- (bool) isVerboseEnabled;
/**

    Gets if the warn log level is enabled.

*/
- (bool) isWarnEnabled;
/**

    Writes a generic message to the log.

    @param message The log message.
    @param context the logigng context.
*/
- (void) logWithContext:(FMLiveSwitchLogContext*)context message:(NSString*)message;
/**

    Writes a log event to the log.

    @param logEvent The log event.
*/
- (void) logWithLogEvent:(FMLiveSwitchLogEvent*)logEvent;
/**

    Writes a generic message to the log.

    @param message The log message.
*/
- (void) logWithMessage:(NSString*)message;
/**

    Writes a generic message to the log.

    @param scope The scope of this log message.
    @param message The log message.
    @param context the logigng context.
*/
- (void) logWithScope:(NSString*)scope context:(FMLiveSwitchLogContext*)context message:(NSString*)message;
/**

    Writes a generic message to the log.

    @param scope The scope of this log message.
    @param message The log message.
*/
- (void) logWithScope:(NSString*)scope message:(NSString*)message;
/**

    Gets the tag of the logger.

*/
- (NSString*) tag;
/**

    Writes a verbose message to the log.

    @param message The log message.
    @param context the logigng context.
*/
- (void) verboseWithContext:(FMLiveSwitchLogContext*)context message:(NSString*)message;
/**

    Writes a verbose message with exception to the log.

    @param message The log message.
    @param context the logigng context.
    @param ex The exception.
*/
- (void) verboseWithContext:(FMLiveSwitchLogContext*)context message:(NSString*)message ex:(NSException*)ex;
/**

    Writes a verbose message to the log.

    @param message The log message.
*/
- (void) verboseWithMessage:(NSString*)message;
/**

    Writes a verbose message with exception to the log.

    @param message The log message.
    @param ex The exception.
*/
- (void) verboseWithMessage:(NSString*)message ex:(NSException*)ex;
/**

    Writes a verbose message to the log.

    @param scope The scope of this log message.
    @param message The log message.
    @param context the logigng context.
*/
- (void) verboseWithScope:(NSString*)scope context:(FMLiveSwitchLogContext*)context message:(NSString*)message;
/**

    Writes a verbose message with exception to the log.

    @param scope The scope of this log message.
    @param message The log message.
    @param ex The exception.
    @param context the logigng context.
*/
- (void) verboseWithScope:(NSString*)scope context:(FMLiveSwitchLogContext*)context message:(NSString*)message ex:(NSException*)ex;
/**

    Writes a verbose message to the log.

    @param scope The scope of this log message.
    @param message The log message.
*/
- (void) verboseWithScope:(NSString*)scope message:(NSString*)message;
/**

    Writes a verbose message with exception to the log.

    @param scope The scope of this log message.
    @param message The log message.
    @param ex The exception.
*/
- (void) verboseWithScope:(NSString*)scope message:(NSString*)message ex:(NSException*)ex;
/**

    Writes a warn message to the log.

    @param message The log message.
    @param context the logigng context.
*/
- (void) warnWithContext:(FMLiveSwitchLogContext*)context message:(NSString*)message;
/**

    Writes a warn message with exception to the log.

    @param message The log message.
    @param ex The exception.
    @param context the logigng context.
*/
- (void) warnWithContext:(FMLiveSwitchLogContext*)context message:(NSString*)message ex:(NSException*)ex;
/**

    Writes a warn message to the log.

    @param message The log message.
*/
- (void) warnWithMessage:(NSString*)message;
/**

    Writes a warn message with exception to the log.

    @param message The log message.
    @param ex The exception.
*/
- (void) warnWithMessage:(NSString*)message ex:(NSException*)ex;
/**

    Writes a warn message to the log.

    @param scope The scope of this log message.
    @param message The log message.
    @param context the logigng context.
*/
- (void) warnWithScope:(NSString*)scope context:(FMLiveSwitchLogContext*)context message:(NSString*)message;
/**

    Writes a warn message with exception to the log.

    @param scope The scope of this log message.
    @param message The log message.
    @param ex The exception.
    @param context the logigng context.
*/
- (void) warnWithScope:(NSString*)scope context:(FMLiveSwitchLogContext*)context message:(NSString*)message ex:(NSException*)ex;
/**

    Writes a warn message to the log.

    @param scope The scope of this log message.
    @param message The log message.
*/
- (void) warnWithScope:(NSString*)scope message:(NSString*)message;
/**

    Writes a warn message with exception to the log.

    @param scope The scope of this log message.
    @param message The log message.
    @param ex The exception.
*/
- (void) warnWithScope:(NSString*)scope message:(NSString*)message ex:(NSException*)ex;

@end

/**

    An interface for detecting equivalency.

*/
@protocol FMLiveSwitchIEquivalent

/**

    Checks if an instance is equivalent to this one.

    @param instance The instance.
*/
- (bool) isEquivalentWithInstance:(id)instance;

@end

/**

    A file stream.

*/
@protocol FMLiveSwitchIFileStream

/**

    Closes the file stream.

*/
- (void) close;
/**

    Returns a boolean value indicating whether the file exists.

*/
- (bool) exists;
/**

    Flushes the file stream.

*/
- (bool) flush;
/**

    Gets the file stream length (must be opened first).

*/
- (long long) length;
/**

    Opens the file stream.

    @param access The access requirement.
*/
- (void) openWithAccess:(FMLiveSwitchFileStreamAccess)access;
/**

    Gets the path.

*/
- (NSString*) path;
/**

    Gets the position in the file stream.

*/
- (long long) position;
/**

    Reads data from the file stream.

    @param data The buffer to fill with data from the file.
    @param index The index at which to start writing.
    @param length The maximum number of bytes to read.
    @return The number of bytes read from the file.
*/
- (int) readWithData:(NSMutableData*)data index:(int)index length:(int)length;
/**

    Sets the position in the file stream.

*/
- (void) setPosition:(long long)value;
/**

    Writes data to the file stream.

    @param location The location to write to.
    @param data The data to write to the file.
    @param index The index at which to start reading.
    @param length The number of bytes to write.
    @return `true` if the data was written; otherwise, `false`.
*/
- (bool) writeToWithLocation:(int)location data:(NSMutableData*)data index:(int)index length:(int)length;
/**

    Writes data to the file stream.

    @param data The data to write.
    @param index The index at which to start reading.
    @param length The number of bytes to write.
    @return `true` if the data was written; otherwise, `false`.
*/
- (bool) writeWithData:(NSMutableData*)data index:(int)index length:(int)length;

@end

/**

    Platform-specific methods.

*/
@protocol FMLiveSwitchIPlatform

/**

    Gets the current CPU architecture.

*/
- (FMLiveSwitchArchitecture) architecture;
/**

    Gets the current CPU core count.

*/
- (int) coreCount;
/**

    Gets the cryptography library to use.

*/
- (FMLiveSwitchCryptoLibrary) cryptoLibrary;
/**

    Gets the string representation of the FMLiveSwitchPlatformType and Platform type version, if isVerbose
    is true then the OS and OS version are included.

*/
- (NSString*) descriptionWithIsVerbose:(bool)isVerbose;
/**

    Gets the character used to separate directories.

*/
- (NSString*) directorySeparator;
/**

    Gets a value indicating whether this is little-endian platform.

*/
- (bool) isLittleEndian;
/**

    Gets a value indicating whether this is a mobile platform.

*/
- (bool) isMobile;
/**

    Gets the current machine name.

*/
- (NSString*) machineName;
/**

    Gets the current operating system.

*/
- (FMLiveSwitchOperatingSystem) operatingSystem;
/**

    Gets the current operating system version.

*/
- (NSString*) operatingSystemVersion;
/**

    Gets the current physical memory in bytes.

*/
- (long long) physicalMemory;
/**

    Gets the current version of the FMLiveSwitchPlatformType being used.

*/
- (NSString*) platformTypeVersion;
/**

    Gets the id of the current process.

*/
- (int) processId;
/**

    Sets the cryptography library to use.

*/
- (void) setCryptoLibrary:(FMLiveSwitchCryptoLibrary)value;
/**

    Sets a value indicating whether this is a mobile platform.

*/
- (void) setIsMobile:(bool)value;
/**

    Sets a value that indicates whether FIPS algorithms should be used.
    Note that not all platforms or third-party libraries are FIPS-compliant, so
    this should not be used as a guarantee of FIPS compliance.

*/
- (void) setUseFipsAlgorithms:(bool)value;
/**

    Gets the current programming language for the source code.

*/
- (FMLiveSwitchSourceLanguage) sourceLanguage;
/**

    Gets the current FMLiveSwitchPlatformType being used.

*/
- (FMLiveSwitchPlatformType) type;
/**

    Gets a value that indicates whether FIPS algorithms should be used.
    Note that not all platforms or third-party libraries are FIPS-compliant, so
    this should not be used as a guarantee of FIPS compliance.

*/
- (bool) useFipsAlgorithms;

@end

/**

    A thread-safe class for running timeouts on asynchronous methods.

*/
@protocol FMLiveSwitchITimeoutTimer

/**

    Starts the timer.

    @param timeout The timeout length, in milliseconds.
*/
- (void) startWithTimeout:(int)timeout;
/**

    Stops the timer, notifying the calling code if the timeout has already elapsed.

    @return `true` if the timer was successfully stopped in time; `false`
            if the timeout elapsed and the timeout callback has been invoked.
*/
- (bool) stop;

@end

/**

    Interface for a promise that can be rejected.

*/
@protocol FMLiveSwitchIPromise

/**

    Casts the result and resolves the promise.
    Will throw an exception if the cast fails.

    @param result The result.
*/
- (bool) castAndResolveWithResult:(id)result;
/**

    Rejects the promise.

    @param exception The exception.
*/
- (bool) rejectWithException:(NSException*)exception;

@end

/**

    Contract for an implementation of the WebSocket protocol v8.

*/
@protocol FMLiveSwitchIWebSocket

/**

    Adds a handler that is raised when the latest round trip time is calculated.

*/
- (void) addOnLatestRoundTripTime:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised when the latest round trip time is calculated.

*/
- (void (^)(void(^)(int))) addOnLatestRoundTripTimeWithBlock;
/**

    Adds a handler that is raised when the latest round trip time is calculated.

*/
- (void) addOnLatestRoundTripTimeWithBlock:(void(^)(int))valueBlock;
/**

    Gets the number of bytes buffered in the send queue.

*/
- (int) bufferedAmount;
/**

    Closes the WebSocket connection.

*/
- (void) close;
/**

    Closes the WebSocket connection.

    @param closeArgs The close arguments
*/
- (void) closeWithCloseArgs:(FMLiveSwitchWebSocketCloseArgs*)closeArgs;
/**

    Gets a value indicating whether the WebSocket is connected.

*/
- (bool) isOpen;
/**

    Gets the last round trip time.

*/
- (int) lastRoundTripTime;
/**

    Opens the WebSocket connection.

    @param openArgs The open arguments.
*/
- (void) openWithOpenArgs:(FMLiveSwitchWebSocketOpenArgs*)openArgs;
/**

    Removes a handler that is raised when the latest round trip time is calculated.

*/
- (void) removeOnLatestRoundTripTime:(FMLiveSwitchAction1*)value;
/**

    Gets a value indicating whether the WebSocket is secure.

*/
- (bool) secure;
/**

    Sends a message to the WebSocket server.

    @param sendArgs The send arguments.
*/
- (void) sendWithSendArgs:(FMLiveSwitchWebSocketSendArgs*)sendArgs;

@end

/**

    An element.

*/
@protocol FMLiveSwitchIElement

/**

    Gets the external identifier.

*/
- (NSString*) externalId;
/**

    Gets the identifier.

*/
- (NSString*) id;
/**

    Gets the pipeline JSON with this as the central point.

*/
- (NSString*) pipelineJson;
/**

    Sets the external identifier.

*/
- (void) setExternalId:(NSString*)value;

@end

/**

    An output.

*/
@protocol FMLiveSwitchIOutput<FMLiveSwitchIElement>

/**

    Adds an output.

    @param output The output.
*/
- (void) addOutput:(NSObject<FMLiveSwitchIInput>*)output;
/**

    Adds some outputs.

    @param outputs The outputs.
*/
- (void) addOutputs:(NSMutableArray*)outputs;
/**

    Gets the output.

*/
- (NSObject<FMLiveSwitchIInput>*) output;
/**

    Gets the output format.

*/
- (FMLiveSwitchMediaFormat*) outputFormat;
/**

    Gets the outputs.

*/
- (NSMutableArray*) outputs;
/**

    Gets the pipeline JSON from an output.

*/
- (NSString*) pipelineJsonFromOutput;
/**

    Removes an output.

    @param output The output.
*/
- (bool) removeOutput:(NSObject<FMLiveSwitchIInput>*)output;
/**

    Removes all outputs.

*/
- (void) removeOutputs;
/**

    Removes some outputs.

    @param outputs The outputs.
*/
- (void) removeOutputs:(NSMutableArray*)outputs;

@end

/**

    A media element.

*/
@protocol FMLiveSwitchIMediaElement<FMLiveSwitchIElement>

/**

    Gets a value indicating whether this instance is deactivated.

*/
- (bool) deactivated;
/**

    Destroys this instance.

*/
- (bool) destroy;
/**

    Gets a value indicating whether this instance is disabled.

*/
- (bool) disabled;
/**

    Gets a label that identifies this instance.

*/
- (NSString*) label;
/**

    Gets a value indicating whether this instance is muted.

*/
- (bool) muted;
/**

    Gets a value indicating whether this instance is paused.

*/
- (bool) paused;
/**

    Gets a value indicating whether this instance is persistent.
    If `true`, this element will not be destroyed unless
    FMLiveSwitchIMediaElement#destroy is called explicitly on this instance.
    It will survive destruction of any parent elements that are
    being destroyed.

*/
- (bool) persistent;
/**

    Sets a value indicating whether this instance is deactivated.

*/
- (void) setDeactivated:(bool)value;
/**

    Sets a value indicating whether this instance is muted.

*/
- (void) setMuted:(bool)value;

@end

/**

    A media output.

*/
@protocol FMLiveSwitchIMediaOutput<FMLiveSwitchIOutput, FMLiveSwitchIMediaElement, FMLiveSwitchIElement>

/**

    Adds a handler that is raised when the Disabled property changes state.

*/
- (void) addOnDisabledChange:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the Disabled property changes state.

*/
- (void) addOnDisabledChangeWithCaller:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised when the Disabled property changes state.

*/
- (void (^)(void(^)(id))) addOnDisabledChangeWithCallerWithBlock;
/**

    Adds a handler that is raised when the Disabled property changes state.

*/
- (void) addOnDisabledChangeWithCallerWithBlock:(void(^)(id))valueBlock;
/**

    Adds a handler that is raised when the Paused property changes state.

*/
- (void) addOnPausedChange:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when control frames are processed.

*/
- (void) addOnProcessControlFrames:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised when control frames are processed.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnProcessControlFramesWithBlock;
/**

    Adds a handler that is raised when control frames are processed.

*/
- (void) addOnProcessControlFramesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Adds a handler that is raised when a control frame response is raised.

*/
- (void) addOnRaiseControlFrameResponses:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised when a control frame response is raised.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnRaiseControlFrameResponsesWithBlock;
/**

    Adds a handler that is raised when a control frame response is raised.

*/
- (void) addOnRaiseControlFrameResponsesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Adds a handler that is raised when a frame is raised.

*/
- (void) addOnRaiseFrame:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised when a frame is raised.

*/
- (void (^)(void(^)(FMLiveSwitchMediaFrame*))) addOnRaiseFrameWithBlock;
/**

    Adds a handler that is raised when a frame is raised.

*/
- (void) addOnRaiseFrameWithBlock:(void(^)(FMLiveSwitchMediaFrame*))valueBlock;
/**

    Gets the content descriptor.

*/
- (NSString*) content;
/**

    Gets the CCM sequence number.

*/
- (int) getCcmSequenceNumber;
/**

    Gets the total pipeline system delay in ticks for a given media format.

    @param outputFormat The output format.
    @return The total pipeline system delay in ticks.
*/
- (long long) getPipelineSystemDelayWithOutputFormat:(FMLiveSwitchMediaFormat*)outputFormat;
/**

    Increments the CCM sequence number.

*/
- (void) incrementCcmSequenceNumber;
/**

    Gets the maximum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

*/
- (int) maxOutputBitrate;
/**

    Gets the maximum allowed output encoding.

*/
- (FMLiveSwitchEncodingInfo*) maxOutputEncoding;
/**

    Gets the minimum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

*/
- (int) minOutputBitrate;
/**

    Gets the minimum allowed output encoding.

*/
- (FMLiveSwitchEncodingInfo*) minOutputEncoding;
/**

    Gets whether output is deactivated.

*/
- (bool) outputDeactivated;
/**

    Gets whether output is muted.

*/
- (bool) outputMuted;
/**

    Gets the output RTP stream identifier.

*/
- (NSString*) outputRtpStreamId;
/**

    Gets whether output is synchronizable.

*/
- (bool) outputSynchronizable;
/**

    Gets the output synchronization source.

*/
- (long long) outputSynchronizationSource;
/**

    Processes control frames.

    @param controlFrames The control frames.
*/
- (void) processControlFrames:(NSMutableArray*)controlFrames;
/**

    Processes a local SDP media description from an output.

    @param mediaDescription The media description.
    @param isOffer if set to `true` [is offer].
    @param isLocalDescription if set to `true` [is local description].
*/
- (FMLiveSwitchError*) processSdpMediaDescriptionFromOutputWithMediaDescription:(FMLiveSwitchSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription;
/**

    Processes source stats from an output.

    @param sourceStats The source stats.
*/
- (void) processSourceStatsFromOutputWithSourceStats:(FMLiveSwitchMediaSourceStats*)sourceStats;
/**

    Processes track stats from an output.

    @param trackStats The track stats.
*/
- (void) processTrackStatsFromOutputWithTrackStats:(FMLiveSwitchMediaTrackStats*)trackStats;
/**

    Removes a handler that is raised when the Disabled property changes state.

*/
- (void) removeOnDisabledChange:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the Disabled property changes state.

*/
- (void) removeOnDisabledChangeWithCaller:(FMLiveSwitchAction1*)value;
/**

    Removes a handler that is raised when the Paused property changes state.

*/
- (void) removeOnPausedChange:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when control frames are processed.

*/
- (void) removeOnProcessControlFrames:(FMLiveSwitchAction1*)value;
/**

    Removes a handler that is raised when a control frame response is raised.

*/
- (void) removeOnRaiseControlFrameResponses:(FMLiveSwitchAction1*)value;
/**

    Removes a handler that is raised when a frame is raised.

*/
- (void) removeOnRaiseFrame:(FMLiveSwitchAction1*)value;
/**

    Gets the system delay in ticks.

*/
- (long long) systemDelay;
/**

    Gets the target output bitrate, in kbps.
    A value of -1 indicates unset (no target).

*/
- (int) targetOutputBitrate;
/**

    Gets the target output encoding.

*/
- (FMLiveSwitchEncodingInfo*) targetOutputEncoding;

@end

/**

    An input.

*/
@protocol FMLiveSwitchIInput<FMLiveSwitchIElement>

/**

    Adds an input.

    @param input The input.
*/
- (void) addInput:(NSObject<FMLiveSwitchIOutput>*)input;
/**

    Adds some inputs.

    @param inputs The inputs.
*/
- (void) addInputs:(NSMutableArray*)inputs;
/**

    Gets the input.

*/
- (NSObject<FMLiveSwitchIOutput>*) input;
/**

    Gets the input format.

*/
- (FMLiveSwitchMediaFormat*) inputFormat;
/**

    Gets the inputs.

*/
- (NSMutableArray*) inputs;
/**

    Gets the pipeline JSON from an input.

*/
- (NSString*) pipelineJsonFromInput;
/**

    Removes an input.

    @param input The input.
*/
- (bool) removeInput:(NSObject<FMLiveSwitchIOutput>*)input;
/**

    Removes all inputs.

*/
- (void) removeInputs;
/**

    Removes some inputs.

    @param inputs The inputs.
*/
- (void) removeInputs:(NSMutableArray*)inputs;

@end

/**

    A media input.

*/
@protocol FMLiveSwitchIMediaInput<FMLiveSwitchIInput, FMLiveSwitchIMediaElement, FMLiveSwitchIElement>

/**

    Adds a handler that is raised when the Disabled property changes state.

*/
- (void) addOnDisabledChange:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the Paused property changes state.

*/
- (void) addOnPausedChange:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when control frame responses are processed.

*/
- (void) addOnProcessControlFrameResponses:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised when control frame responses are processed.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnProcessControlFrameResponsesWithBlock;
/**

    Adds a handler that is raised when control frame responses are processed.

*/
- (void) addOnProcessControlFrameResponsesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Adds a handler that is raised when a frame is processed.

*/
- (void) addOnProcessFrame:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised when a frame is processed.

*/
- (void (^)(void(^)(FMLiveSwitchMediaFrame*))) addOnProcessFrameWithBlock;
/**

    Adds a handler that is raised when a frame is processed.

*/
- (void) addOnProcessFrameWithBlock:(void(^)(FMLiveSwitchMediaFrame*))valueBlock;
/**

    Adds a handler that is raised when control frames are raised.

*/
- (void) addOnRaiseControlFrames:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised when control frames are raised.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnRaiseControlFramesWithBlock;
/**

    Adds a handler that is raised when control frames are raised.

*/
- (void) addOnRaiseControlFramesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Gets the total pipeline system delay in ticks for a given media format.

    @param outputFormat The output format.
    @return The total pipeline system delay in ticks.
*/
- (long long) getPipelineSystemDelayWithOutputFormat:(FMLiveSwitchMediaFormat*)outputFormat;
/**

    Gets whether input is deactivated.

*/
- (bool) inputDeactivated;
/**

    Gets whether input is muted.

*/
- (bool) inputMuted;
/**

    Gets the input RTP stream identifier.

*/
- (NSString*) inputRtpStreamId;
/**

    Gets the input synchronization source.

*/
- (long long) inputSynchronizationSource;
/**

    Gets the maximum allowed input bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

*/
- (int) maxInputBitrate;
/**

    Gets the maximum allowed input encoding.

*/
- (FMLiveSwitchEncodingInfo*) maxInputEncoding;
/**

    Gets the minimum allowed input bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

*/
- (int) minInputBitrate;
/**

    Gets the minimum allowed input encoding.

*/
- (FMLiveSwitchEncodingInfo*) minInputEncoding;
/**

    Processes control frame responses.

    @param controlFrameResponses The control frame responses.
*/
- (void) processControlFrameResponses:(NSMutableArray*)controlFrameResponses;
/**

    Processes a frame.

    @param frame The frame.
*/
- (bool) processFrame:(FMLiveSwitchMediaFrame*)frame;
/**

    Gets the ProcessFramePolicy for this media input.

*/
- (FMLiveSwitchProcessFramePolicy) processFramePolicy;
/**

    Processes a local SDP media description from an input.

    @param mediaDescription The media description.
    @param isOffer if set to `true` [is offer].
    @param isLocalDescription if set to `true` [is local description].
*/
- (FMLiveSwitchError*) processSdpMediaDescriptionFromInputWithMediaDescription:(FMLiveSwitchSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription;
/**

    Processes sink stats from an input.

    @param sinkStats The stats.
*/
- (void) processSinkStatsFromInputWithSinkStats:(FMLiveSwitchMediaSinkStats*)sinkStats;
/**

    Processes track stats from an input.

    @param trackStats The stats.
*/
- (void) processTrackStatsFromInputWithTrackStats:(FMLiveSwitchMediaTrackStats*)trackStats;
/**

    Removes a handler that is raised when the Disabled property changes state.

*/
- (void) removeOnDisabledChange:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the Paused property changes state.

*/
- (void) removeOnPausedChange:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when control frame responses are processed.

*/
- (void) removeOnProcessControlFrameResponses:(FMLiveSwitchAction1*)value;
/**

    Removes a handler that is raised when a frame is processed.

*/
- (void) removeOnProcessFrame:(FMLiveSwitchAction1*)value;
/**

    Removes a handler that is raised when control frames are raised.

*/
- (void) removeOnRaiseControlFrames:(FMLiveSwitchAction1*)value;
/**

    Sets the input RTP stream identifier.

*/
- (void) setInputRtpStreamId:(NSString*)value;
/**

    Sets the input synchronization source.

*/
- (void) setInputSynchronizationSource:(long long)value;
/**

    Sets the ProcessFramePolicy for this media input.

*/
- (void) setProcessFramePolicy:(FMLiveSwitchProcessFramePolicy)value;
/**

    Gets the system delay in ticks.

*/
- (long long) systemDelay;

@end

/**

    An audio element.

*/
@protocol FMLiveSwitchIAudioElement<FMLiveSwitchIMediaElement, FMLiveSwitchIElement>

@end

/**

    An audio input.

*/
@protocol FMLiveSwitchIAudioInput<FMLiveSwitchIMediaInput, FMLiveSwitchIInput, FMLiveSwitchIAudioElement, FMLiveSwitchIMediaElement, FMLiveSwitchIElement>

/**

    Gets the configuration.

*/
- (FMLiveSwitchAudioConfig*) config;
/**

    Gets a value indicating the gain
    (input amplification) of this sink.
    Any value greater than or equal to 0.0
    is acceptable.

*/
- (double) gain;
/**

    Sets a value indicating the gain
    (input amplification) of this sink.
    Any value greater than or equal to 0.0
    is acceptable.

*/
- (void) setGain:(double)value;

@end

/**

    An audio output.

*/
@protocol FMLiveSwitchIAudioOutput<FMLiveSwitchIMediaOutput, FMLiveSwitchIOutput, FMLiveSwitchIAudioElement, FMLiveSwitchIMediaElement, FMLiveSwitchIElement>

/**

    Gets the configuration.

*/
- (FMLiveSwitchAudioConfig*) config;
/**

    Sets a value indicating the volume
    (output resistance) of this source.
    Valid value range is 0.0 to 1.0, inclusive.

*/
- (void) setVolume:(double)value;
/**

    Gets a value indicating the volume
    (output resistance) of this source.
    Valid value range is 0.0 to 1.0, inclusive.

*/
- (double) volume;

@end

/**

    Stream interface.

*/
@protocol FMLiveSwitchIStream

/**

    Adds a handler that is raised when the signalling state changes.

*/
- (void) addOnDirectionChange:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the stream state changes.

*/
- (void) addOnStateChange:(FMLiveSwitchAction0*)value;
/**

    Changes this stream's direction.

*/
- (FMLiveSwitchError*) changeDirectionWithNewDirection:(FMLiveSwitchStreamDirection)newDirection;
/**

    Gets the current direction.

*/
- (FMLiveSwitchStreamDirection) direction;
/**

    Gets the external identifier.

*/
- (NSString*) externalId;
/**

    Gets the identifier.

*/
- (NSString*) id;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets current direction indicated by the local description.

*/
- (FMLiveSwitchStreamDirection) localDirection;
/**

    Gets a value indicating whether receiving media is supported by the local peer on this stream.

*/
- (bool) localReceive;
/**

    Gets a value indicating whether sending media is supported by the local peer on this stream.

*/
- (bool) localSend;
/**

    Gets the media description identifier.

*/
- (NSString*) mediaDescriptionId;
/**

    Gets the current direction indicated by the remote description.

*/
- (FMLiveSwitchStreamDirection) remoteDirection;
/**

    Gets a value indicating whether receiving media is supported by the local peer on this stream. Returns false if the remote stream direction has not been received.

*/
- (bool) remoteReceive;
/**

    Gets a value indicating whether sending media is supported by the remote peer on this stream. Returns false if the remote stream direction has not been received.

*/
- (bool) remoteSend;
/**

    Removes a handler that is raised when the signalling state changes.

*/
- (void) removeOnDirectionChange:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the stream state changes.

*/
- (void) removeOnStateChange:(FMLiveSwitchAction0*)value;
/**

    Sets the external identifier.

*/
- (void) setExternalId:(NSString*)value;
/**

    Sets current direction indicated by the local description.

*/
- (void) setLocalDirection:(FMLiveSwitchStreamDirection)value;
/**

    Sets a value indicating whether receiving media is supported by the local peer on this stream.

*/
- (void) setLocalReceive:(bool)value;
/**

    Sets a value indicating whether sending media is supported by the local peer on this stream.

*/
- (void) setLocalSend:(bool)value;
/**

    Sets optional data to associate with this instance.

*/
- (void) setTag:(NSString*)value;
/**

    Gets the current state.

*/
- (FMLiveSwitchStreamState) state;
/**

    Gets optional data to associate with this instance.

*/
- (NSString*) tag;
/**

    Gets the stream transport info.

*/
- (FMLiveSwitchTransportInfo*) transportInfo;
/**

    Gets the type.

*/
- (FMLiveSwitchStreamType) type;

@end

/**

    Media stream interface.

*/
@protocol FMLiveSwitchIMediaStream<FMLiveSwitchIStream>

/**

    Adds a handler that is raised when a bitrate notification is discarded due to policy
    restrictions or lack of support by the remote endpoint.

*/
- (void) addOnDiscardBitrateNotification:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised when a bitrate notification is discarded due to policy
    restrictions or lack of support by the remote endpoint.

*/
- (void (^)(void(^)(FMLiveSwitchBitrateNotification*))) addOnDiscardBitrateNotificationWithBlock;
/**

    Adds a handler that is raised when a bitrate notification is discarded due to policy
    restrictions or lack of support by the remote endpoint.

*/
- (void) addOnDiscardBitrateNotificationWithBlock:(void(^)(FMLiveSwitchBitrateNotification*))valueBlock;
/**

    Adds a handler that is raised when a bitrate request is discarded due to policy
    restrictions or lack of support by the remote endpoint.

*/
- (void) addOnDiscardBitrateRequest:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised when a bitrate request is discarded due to policy
    restrictions or lack of support by the remote endpoint.

*/
- (void (^)(void(^)(FMLiveSwitchBitrateRequest*))) addOnDiscardBitrateRequestWithBlock;
/**

    Adds a handler that is raised when a bitrate request is discarded due to policy
    restrictions or lack of support by the remote endpoint.

*/
- (void) addOnDiscardBitrateRequestWithBlock:(void(^)(FMLiveSwitchBitrateRequest*))valueBlock;
/**

    Adds a handler that is raised when a local encoding is disabled.

*/
- (void) addOnLocalEncodingDisabled:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised when a local encoding is disabled.

*/
- (void (^)(void(^)(FMLiveSwitchEncodingInfo*))) addOnLocalEncodingDisabledWithBlock;
/**

    Adds a handler that is raised when a local encoding is disabled.

*/
- (void) addOnLocalEncodingDisabledWithBlock:(void(^)(FMLiveSwitchEncodingInfo*))valueBlock;
/**

    Adds a handler that is raised when a local encoding is enabled.

*/
- (void) addOnLocalEncodingEnabled:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised when a local encoding is enabled.

*/
- (void (^)(void(^)(FMLiveSwitchEncodingInfo*))) addOnLocalEncodingEnabledWithBlock;
/**

    Adds a handler that is raised when a local encoding is enabled.

*/
- (void) addOnLocalEncodingEnabledWithBlock:(void(^)(FMLiveSwitchEncodingInfo*))valueBlock;
/**

    Gets Cached Local Direction for this Media Stream. Internal use.

*/
- (FMLiveSwitchStreamDirection) cachedLocalDirection;
/**

    Gets the media stream control transport info.

*/
- (FMLiveSwitchTransportInfo*) controlTransportInfo;
/**

    Gets whether a codec is disabled.

    @param name The codec name.
    @return Whether the codec is disabled.
*/
- (bool) getCodecDisabledWithName:(NSString*)name;
/**

    Gets the media stream info.

*/
- (FMLiveSwitchMediaStreamInfo*) info;
/**

    Gets whether the input track is muted.

*/
- (bool) inputMuted;
/**

    Gets the local bandwidth, in kbps.
    This value is signalled in the local session description sent
    to the remote endpoint so it can limit its outbound media bitrate.
    Use FMLiveSwitchIMediaStream#maxReceiveBitrate to control inbound media
    bitrate once the session has been negotiated.

*/
- (int) localBandwidth;
/**

    Gets the local canonical name.

*/
- (NSString*) localCanonicalName;
/**

    Gets the maximum desired receive bitrate, in kbps.
    This value must be less than or equal to FMLiveSwitchIMediaStream#localBandwidth.

*/
- (int) maxReceiveBitrate;
/**

    Gets the maximum desired send bitrate, in kbps.
    This value must be less than or equal to FMLiveSwitchIMediaStream#remoteBandwidth.

*/
- (int) maxSendBitrate;
/**

    Gets whether the output track is muted.

*/
- (bool) outputMuted;
/**

    Gets any preferred codecs, in order of preference.

*/
- (NSMutableArray*) preferredCodecs;
/**

    Raises a bitrate notification to the remote track.

    @param bitrateNotification The bitrate notification.
*/
- (bool) raiseBitrateNotification:(FMLiveSwitchBitrateNotification*)bitrateNotification;
/**

    Raises a bitrate request to the local track.

    @param bitrateRequest The bitrate request.
*/
- (bool) raiseBitrateRequest:(FMLiveSwitchBitrateRequest*)bitrateRequest;
/**

    Gets the remote bandwidth, in kbps.
    This value is signalled in the remote session description received
    from the remote endpoint so we can limit our outbound media bitrate.
    Use FMLiveSwitchIMediaStream#maxSendBitrate to control outbound media
    bitrate once the session has been negotiated.

*/
- (int) remoteBandwidth;
/**

    Gets the remote canonical name.

*/
- (NSString*) remoteCanonicalName;
/**

    Gets the remote encoding.

*/
- (FMLiveSwitchEncodingInfo*) remoteEncoding;
/**

    Gets a value that indicates if remote is muted.

*/
- (bool) remoteMuted;
/**

    Gets Boolean value set when the server is currently requesting a 0 bitrate. This is to highlight the difference between when a stream is deactivated locally or by a control mechanism on the server. Internal Use

*/
- (bool) remoteRequestedDeactivation;
/**

    Removes a handler that is raised when a bitrate notification is discarded due to policy
    restrictions or lack of support by the remote endpoint.

*/
- (void) removeOnDiscardBitrateNotification:(FMLiveSwitchAction1*)value;
/**

    Removes a handler that is raised when a bitrate request is discarded due to policy
    restrictions or lack of support by the remote endpoint.

*/
- (void) removeOnDiscardBitrateRequest:(FMLiveSwitchAction1*)value;
/**

    Removes a handler that is raised when a local encoding is disabled.

*/
- (void) removeOnLocalEncodingDisabled:(FMLiveSwitchAction1*)value;
/**

    Removes a handler that is raised when a local encoding is enabled.

*/
- (void) removeOnLocalEncodingEnabled:(FMLiveSwitchAction1*)value;
/**

    Sets whether a codec is disabled.

    @param name The codec name.
    @param disabled Whether to disable the codec.
*/
- (void) setCodecDisabledWithName:(NSString*)name disabled:(bool)disabled;
/**

    Sets whether the input track is muted.

*/
- (void) setInputMuted:(bool)value;
/**

    Sets the local bandwidth, in kbps.
    This value is signalled in the local session description sent
    to the remote endpoint so it can limit its outbound media bitrate.
    Use FMLiveSwitchIMediaStream#maxReceiveBitrate to control inbound media
    bitrate once the session has been negotiated.

*/
- (void) setLocalBandwidth:(int)value;
/**

    Sets the maximum desired receive bitrate, in kbps.
    This value must be less than or equal to FMLiveSwitchIMediaStream#localBandwidth.

*/
- (void) setMaxReceiveBitrate:(int)value;
/**

    Sets the maximum desired send bitrate, in kbps.
    This value must be less than or equal to FMLiveSwitchIMediaStream#remoteBandwidth.

*/
- (void) setMaxSendBitrate:(int)value;
/**

    Sets whether the output track is muted.

*/
- (void) setOutputMuted:(bool)value;
/**

    Sets any preferred codecs, in order of preference.

*/
- (void) setPreferredCodecs:(NSMutableArray*)value;
/**

    Sets the remote encoding.

*/
- (void) setRemoteEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Sets a value that indicates if remote is muted.

*/
- (void) setRemoteMuted:(bool)value;
/**

    Sets the simulcast mode.

*/
- (void) setSimulcastMode:(FMLiveSwitchSimulcastMode)value;
/**

    Gets the simulcast mode.

*/
- (FMLiveSwitchSimulcastMode) simulcastMode;

@end

/**

    A synchronizable stream.

*/
@protocol FMLiveSwitchISynchronizableStream

/**

    Adds a handler that is raised by master streams when the synchronize context is ready.

*/
- (void) addOnMasterSynchronizeContextReady:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised by master streams when the synchronize context is ready.

*/
- (void (^)(void(^)(FMLiveSwitchSynchronizeContext*))) addOnMasterSynchronizeContextReadyWithBlock;
/**

    Adds a handler that is raised by master streams when the synchronize context is ready.

*/
- (void) addOnMasterSynchronizeContextReadyWithBlock:(void(^)(FMLiveSwitchSynchronizeContext*))valueBlock;
/**

    Gets the stream identifier.

*/
- (NSString*) id;
/**

    Gets whether output synchronization is disabled.

*/
- (bool) outputSynchronizationDisabled;
/**

    Gets the remote description media identifier.

*/
- (NSString*) remoteDescriptionMediaId;
/**

    Removes a handler that is raised by master streams when the synchronize context is ready.

*/
- (void) removeOnMasterSynchronizeContextReady:(FMLiveSwitchAction1*)value;
/**

    Sets whether output synchronization is disabled.

*/
- (void) setOutputSynchronizationDisabled:(bool)value;
/**

    Sets the synchronize context.

*/
- (void) setSynchronizeContext:(FMLiveSwitchSynchronizeContext*)value;
/**

    Gets the synchronize context.

*/
- (FMLiveSwitchSynchronizeContext*) synchronizeContext;
/**

    Gets all synchronizers in the stream output tracks.

*/
- (NSMutableArray*) synchronizers;
/**

    Initializes synchronization.

    @param master Whether this is a master stream.
*/
- (void) synchronizeWithMaster:(bool)master;
/**

    Gets the stream type.

*/
- (FMLiveSwitchStreamType) type;

@end

/**

    Audio stream interface.

*/
@protocol FMLiveSwitchIAudioStream<FMLiveSwitchIMediaStream, FMLiveSwitchIStream>

/**

    Adds a handler that is raised when a DTMF tone is received.

*/
- (void) addOnReceiveDtmfTone:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised when the received DTMF tone changes.

*/
- (void) addOnReceiveDtmfToneChange:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised when the received DTMF tone changes.

*/
- (void (^)(void(^)(FMLiveSwitchDtmfTone*))) addOnReceiveDtmfToneChangeWithBlock;
/**

    Adds a handler that is raised when the received DTMF tone changes.

*/
- (void) addOnReceiveDtmfToneChangeWithBlock:(void(^)(FMLiveSwitchDtmfTone*))valueBlock;
/**

    Adds a handler that is raised when a DTMF tone is received.

*/
- (void (^)(void(^)(FMLiveSwitchDtmfTone*))) addOnReceiveDtmfToneWithBlock;
/**

    Adds a handler that is raised when a DTMF tone is received.

*/
- (void) addOnReceiveDtmfToneWithBlock:(void(^)(FMLiveSwitchDtmfTone*))valueBlock;
/**

    Adds a handler that is raised when a DTMF tone is sent.

*/
- (void) addOnSendDtmfTone:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised when the sent DTMF tone changes.

*/
- (void) addOnSendDtmfToneChange:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised when the sent DTMF tone changes.

*/
- (void (^)(void(^)(FMLiveSwitchDtmfTone*))) addOnSendDtmfToneChangeWithBlock;
/**

    Adds a handler that is raised when the sent DTMF tone changes.

*/
- (void) addOnSendDtmfToneChangeWithBlock:(void(^)(FMLiveSwitchDtmfTone*))valueBlock;
/**

    Adds a handler that is raised when a DTMF tone is sent.

*/
- (void (^)(void(^)(FMLiveSwitchDtmfTone*))) addOnSendDtmfToneWithBlock;
/**

    Adds a handler that is raised when a DTMF tone is sent.

*/
- (void) addOnSendDtmfToneWithBlock:(void(^)(FMLiveSwitchDtmfTone*))valueBlock;
/**

    Gets whether G.722 is disabled.

*/
- (bool) g722Disabled;
/**

    Inserts a DTMF tone.

    @param dtmfTone The DTMF tone.
*/
- (bool) insertDtmfTone:(FMLiveSwitchDtmfTone*)dtmfTone;
/**

    Inserts DTMF tones.

    @param dtmfTones The DTMF tones.
*/
- (bool) insertDtmfTones:(NSMutableArray*)dtmfTones;
/**

    Gets whether Opus is disabled.

*/
- (bool) opusDisabled;
/**

    Gets whether PCMA is disabled.

*/
- (bool) pcmaDisabled;
/**

    Gets whether PCMU is disabled.

*/
- (bool) pcmuDisabled;
/**

    Removes a handler that is raised when a DTMF tone is received.

*/
- (void) removeOnReceiveDtmfTone:(FMLiveSwitchAction1*)value;
/**

    Removes a handler that is raised when the received DTMF tone changes.

*/
- (void) removeOnReceiveDtmfToneChange:(FMLiveSwitchAction1*)value;
/**

    Removes a handler that is raised when a DTMF tone is sent.

*/
- (void) removeOnSendDtmfTone:(FMLiveSwitchAction1*)value;
/**

    Removes a handler that is raised when the sent DTMF tone changes.

*/
- (void) removeOnSendDtmfToneChange:(FMLiveSwitchAction1*)value;
/**

    Sets whether G.722 is disabled.

*/
- (void) setG722Disabled:(bool)value;
/**

    Sets whether Opus is disabled.

*/
- (void) setOpusDisabled:(bool)value;
/**

    Sets whether PCMA is disabled.

*/
- (void) setPcmaDisabled:(bool)value;
/**

    Sets whether PCMU is disabled.

*/
- (void) setPcmuDisabled:(bool)value;

@end

/**

    A media rendering synchronizer.

*/
@protocol FMLiveSwitchISynchronizer

/**

    Activates synchronizing.

    @param master Whether this is a master.
    @param slaves The slaves, if this is a master.
*/
- (void) activateWithMaster:(bool)master slaves:(NSMutableArray*)slaves;
/**

    Gets whether synchronization is active.

*/
- (bool) active;
/**

    Gets whether this is the master.

*/
- (bool) master;
/**

    Gets the master system timestamp.

*/
- (long long) masterSystemTimestamp;
/**

    Sets the master system timestamp.

*/
- (void) setMasterSystemTimestamp:(long long)value;
/**

    Gets the slaves.

*/
- (NSMutableArray*) slaves;

@end

/**

    Interface for all metric provider implementations.

*/
@protocol FMLiveSwitchMetricsIMetricProvider

/**

    Log a value to a gauge metric.

    @param eventName The name of this metric.
    @param value The current value of the guage.
    @param tags Tags to apply to the event if the provider supports it.
*/
- (void) gaugeWithEventName:(NSString*)eventName value:(double)value tags:(NSMutableArray*)tags;
/**

    Log a value to a histogram metric.

    @param eventName 
    @param value 
    @param tags 
*/
- (void) histogramWithEventName:(NSString*)eventName value:(double)value tags:(NSMutableArray*)tags;
/**

    Increment the count of a metric by 1.

    @param eventName The name of this metric.
    @param tags Tags to apply to the event.
*/
- (void) incrementWithEventName:(NSString*)eventName tags:(NSMutableArray*)tags;
/**

    Increment the count of a metric.

    @param eventName The name of this metric.
    @param value The amount to increment the count by.
    @param tags Tags to apply to the event if the provider supports it.
*/
- (void) incrementWithEventName:(NSString*)eventName value:(long long)value tags:(NSMutableArray*)tags;

@end

/**

    A video element.

*/
@protocol FMLiveSwitchIVideoElement<FMLiveSwitchIMediaElement, FMLiveSwitchIElement>

@end

/**

    A video input.

*/
@protocol FMLiveSwitchIVideoInput<FMLiveSwitchIMediaInput, FMLiveSwitchIInput, FMLiveSwitchIVideoElement, FMLiveSwitchIMediaElement, FMLiveSwitchIElement>

/**

    Gets the maximum allowed input frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxInputFrameRate;
/**

    Gets the maximum allowed input height.
    A value of -1 indicates unset (no maximum).

*/
- (int) maxInputHeight;
/**

    Gets the maximum allowed input scale.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxInputScale;
/**

    Gets the maximum allowed input size.
    A value of null indicates unset (no maximum).

*/
- (FMLiveSwitchSize*) maxInputSize;
/**

    Gets the maximum allowed input width.
    A value of -1 indicates unset (no maximum).

*/
- (int) maxInputWidth;
/**

    Gets the minimum allowed input frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (double) minInputFrameRate;
/**

    Gets the minimum allowed input height.
    A value of -1 indicates unset (no minimum).

*/
- (int) minInputHeight;
/**

    Gets the minimum allowed input scale.
    A value of -1 indicates unset (no minimum).

*/
- (double) minInputScale;
/**

    Gets the minimum allowed input size.
    A value of null indicates unset (no minimum).

*/
- (FMLiveSwitchSize*) minInputSize;
/**

    Gets the minimum allowed input width.
    A value of -1 indicates unset (no minimum).

*/
- (int) minInputWidth;

@end

/**

    A video output.

*/
@protocol FMLiveSwitchIVideoOutput<FMLiveSwitchIMediaOutput, FMLiveSwitchIOutput, FMLiveSwitchIVideoElement, FMLiveSwitchIMediaElement, FMLiveSwitchIElement>

/**

    Gets the maximum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxOutputFrameRate;
/**

    Gets the maximum allowed output height.
    A value of -1 indicates unset (no maximum).

*/
- (int) maxOutputHeight;
/**

    Gets the maximum allowed output scale.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxOutputScale;
/**

    Gets the maximum allowed output size.
    A value of -1 indicates unset (no maximum).

*/
- (FMLiveSwitchSize*) maxOutputSize;
/**

    Gets the maximum allowed output width.
    A value of -1 indicates unset (no maximum).

*/
- (int) maxOutputWidth;
/**

    Gets the minimum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (double) minOutputFrameRate;
/**

    Gets the minimum allowed output height.
    A value of -1 indicates unset (no minimum).

*/
- (int) minOutputHeight;
/**

    Gets the minimum allowed output scale.
    A value of -1 indicates unset (no minimum).

*/
- (double) minOutputScale;
/**

    Gets the minimum allowed output size.
    A value of -1 indicates unset (no minimum).

*/
- (FMLiveSwitchSize*) minOutputSize;
/**

    Gets the minimum allowed output width.
    A value of -1 indicates unset (no minimum).

*/
- (int) minOutputWidth;
/**

    Gets the target output frame-rate, in fps.
    A value of -1 indicates unset (no target).

*/
- (double) targetOutputFrameRate;
/**

    Gets the target output height.
    A value of -1 indicates unset (no target).

*/
- (int) targetOutputHeight;
/**

    Gets the target output scale.
    A value of -1 indicates unset (no target).

*/
- (double) targetOutputScale;
/**

    Gets the target output size.
    A value of -1 indicates unset (no target).

*/
- (FMLiveSwitchSize*) targetOutputSize;
/**

    Gets the target output width.
    A value of -1 indicates unset (no target).

*/
- (int) targetOutputWidth;
/**

    Gets the video type.

*/
- (FMLiveSwitchVideoType) videoType;

@end

/**

    Interface for a component that provides diagnostic information.

*/
@protocol FMLiveSwitchDiagnosticsIDiagnosticsProvider

/**

    Gets the Component Name of the Provider.

*/
- (NSString*) componentName;
/**

    Gets the diagnostic data for this component.

    @return A FMLiveSwitchDiagnosticsDiagnosticsData object containing the component's diagnostic information.
*/
- (FMLiveSwitchDiagnosticsDiagnosticsData*) getDiagnostics;

@end

/**

    Media track interface.

*/
@protocol FMLiveSwitchIMediaTrack

/**

    Adds a handler that is raised when the track is destroyed.

*/
- (void) addOnDestroyed:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the track is muted.
    Only applicable for local media tracks.

*/
- (void) addOnMuted:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the track is started.
    Only applicable for local media tracks.

*/
- (void) addOnStarted:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the track is stopped.
    Only applicable for local media tracks.

*/
- (void) addOnStopped:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the track is unmuted.
    Only applicable for local media tracks.

*/
- (void) addOnUnmuted:(FMLiveSwitchAction0*)value;
/**

    Changes the sink output while the media track is active.

    @param sinkOutput The sink output.
*/
- (FMLiveSwitchFuture*) changeSinkOutput:(FMLiveSwitchSinkOutput*)sinkOutput;
/**

    Changes the source input while the media track is active.

    @param sourceInput The source input.
*/
- (FMLiveSwitchFuture*) changeSourceInput:(FMLiveSwitchSourceInput*)sourceInput;
/**

    Destroys this media track.

*/
- (bool) destroy;
/**

    Gets the available sink outputs.

    @return 
            A future with an array of sink outputs.
            
*/
- (FMLiveSwitchFuture*) getSinkOutputs;
/**

    Gets the available source inputs.

    @return 
            A future with an array of source inputs.
            
*/
- (FMLiveSwitchFuture*) getSourceInputs;
/**

    Gets a value indicating whether this
    track is muted.

*/
- (bool) muted;
/**

    Removes a handler that is raised when the track is destroyed.

*/
- (void) removeOnDestroyed:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the track is muted.
    Only applicable for local media tracks.

*/
- (void) removeOnMuted:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the track is started.
    Only applicable for local media tracks.

*/
- (void) removeOnStarted:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the track is stopped.
    Only applicable for local media tracks.

*/
- (void) removeOnStopped:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the track is unmuted.
    Only applicable for local media tracks.

*/
- (void) removeOnUnmuted:(FMLiveSwitchAction0*)value;
/**

    Sets a value indicating whether this
    track is muted.

*/
- (void) setMuted:(bool)value;
/**

    Sets the current sink output.

*/
- (void) setSinkOutput:(FMLiveSwitchSinkOutput*)value;
/**

    Sets the current source input.

*/
- (void) setSourceInput:(FMLiveSwitchSourceInput*)value;
/**

    Gets the current sink output.

*/
- (FMLiveSwitchSinkOutput*) sinkOutput;
/**

    Gets the current source input.

*/
- (FMLiveSwitchSourceInput*) sourceInput;

@end

/**

    Audio track interface.

*/
@protocol FMLiveSwitchIAudioTrack<FMLiveSwitchIMediaTrack>

/**

    Adds a handler that is raised periodically when the audio's level is calculated.

*/
- (void) addOnLevel:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised periodically when the audio's level is calculated.

*/
- (void (^)(void(^)(double))) addOnLevelWithBlock;
/**

    Adds a handler that is raised periodically when the audio's level is calculated.

*/
- (void) addOnLevelWithBlock:(void(^)(double))valueBlock;
/**

    Gets a value indicating the gain
    (input amplification) of this track.
    Any value greater than or equal to 0.0
    is acceptable.

*/
- (double) gain;
/**

    Gets the interval in milliseconds between FMLiveSwitchIAudioTrack#addOnLevel: events.

*/
- (int) levelInterval;
/**

    Removes a handler that is raised periodically when the audio's level is calculated.

*/
- (void) removeOnLevel:(FMLiveSwitchAction1*)value;
/**

    Sets a value indicating the gain
    (input amplification) of this track.
    Any value greater than or equal to 0.0
    is acceptable.

*/
- (void) setGain:(double)value;
/**

    Sets the interval in milliseconds between FMLiveSwitchIAudioTrack#addOnLevel: events.

*/
- (void) setLevelInterval:(int)value;
/**

    Sets a value indicating the volume
    (output resistance) of this track.
    Valid value range is 0.0 to 1.0, inclusive.

*/
- (void) setVolume:(double)value;
/**

    Gets a value indicating the volume
    (output resistance) of this track.
    Valid value range is 0.0 to 1.0, inclusive.

*/
- (double) volume;

@end

/**

    Connection interface.

*/
@protocol FMLiveSwitchIConnection

/**

    Adds an ICE server.

*/
- (void) addIceServer:(FMLiveSwitchIceServer*)iceServer;
/**

    Adds some ICE servers.

*/
- (void) addIceServers:(NSMutableArray*)iceServers;
/**

    Adds a handler that is raised when external connection Id changes.

*/
- (void) addOnExternalIdChange:(FMLiveSwitchAction2*)value;
/**

    Adds a handler that is raised when external connection Id changes.

*/
- (void (^)(void(^)(NSString*, NSString*))) addOnExternalIdChangeWithBlock;
/**

    Adds a handler that is raised when external connection Id changes.

*/
- (void) addOnExternalIdChangeWithBlock:(void(^)(NSString*, NSString*))valueBlock;
/**

    Adds a handler that is raised when the gathering state changes.

*/
- (void) addOnGatheringStateChange:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised when the gathering state changes.

*/
- (void (^)(void(^)(id))) addOnGatheringStateChangeWithBlock;
/**

    Adds a handler that is raised when the gathering state changes.

*/
- (void) addOnGatheringStateChangeWithBlock:(void(^)(id))valueBlock;
/**

    Adds a handler that is raised when the Ice connection state changes.

*/
- (void) addOnIceConnectionStateChange:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised when the Ice connection state changes.

*/
- (void (^)(void(^)(id))) addOnIceConnectionStateChangeWithBlock;
/**

    Adds a handler that is raised when the Ice connection state changes.

*/
- (void) addOnIceConnectionStateChangeWithBlock:(void(^)(id))valueBlock;
/**

    Adds a handler that is raised when a local candidate is added.

*/
- (void) addOnLocalCandidate:(FMLiveSwitchAction2*)value;
/**

    Adds a handler that is raised when a local candidate is added.

*/
- (void (^)(void(^)(id, FMLiveSwitchCandidate*))) addOnLocalCandidateWithBlock;
/**

    Adds a handler that is raised when a local candidate is added.

*/
- (void) addOnLocalCandidateWithBlock:(void(^)(id, FMLiveSwitchCandidate*))valueBlock;
/**

    Adds a handler that is raised when a local description is set.

*/
- (void) addOnLocalDescription:(FMLiveSwitchAction2*)value;
/**

    Adds a handler that is raised when a local description is set.

*/
- (void (^)(void(^)(id, FMLiveSwitchSessionDescription*))) addOnLocalDescriptionWithBlock;
/**

    Adds a handler that is raised when a local description is set.

*/
- (void) addOnLocalDescriptionWithBlock:(void(^)(id, FMLiveSwitchSessionDescription*))valueBlock;
/**

    Adds a handler that is raised when a remote candidate is added.

*/
- (void) addOnRemoteCandidate:(FMLiveSwitchAction2*)value;
/**

    Adds a handler that is raised when a remote candidate is added.

*/
- (void (^)(void(^)(id, FMLiveSwitchCandidate*))) addOnRemoteCandidateWithBlock;
/**

    Adds a handler that is raised when a remote candidate is added.

*/
- (void) addOnRemoteCandidateWithBlock:(void(^)(id, FMLiveSwitchCandidate*))valueBlock;
/**

    Adds a handler that is raised when a remote description is set.

*/
- (void) addOnRemoteDescription:(FMLiveSwitchAction2*)value;
/**

    Adds a handler that is raised when a remote description is set.

*/
- (void (^)(void(^)(id, FMLiveSwitchSessionDescription*))) addOnRemoteDescriptionWithBlock;
/**

    Adds a handler that is raised when a remote description is set.

*/
- (void) addOnRemoteDescriptionWithBlock:(void(^)(id, FMLiveSwitchSessionDescription*))valueBlock;
/**

    Adds a handler that is raised when the signalling state changes.

*/
- (void) addOnSignallingStateChange:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised when the signalling state changes.

*/
- (void (^)(void(^)(id))) addOnSignallingStateChangeWithBlock;
/**

    Adds a handler that is raised when the signalling state changes.

*/
- (void) addOnSignallingStateChangeWithBlock:(void(^)(id))valueBlock;
/**

    Adds a handler that is raised when the connection state changes.

*/
- (void) addOnStateChange:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised when the connection state changes.

*/
- (void (^)(void(^)(id))) addOnStateChangeWithBlock;
/**

    Adds a handler that is raised when the connection state changes.

*/
- (void) addOnStateChangeWithBlock:(void(^)(id))valueBlock;
/**

    Adds the remote candidate.

*/
- (FMLiveSwitchFuture*) addRemoteCandidate:(FMLiveSwitchCandidate*)remoteCandidate;
/**

    Gets the first audio stream.

*/
- (id) audioStream;
/**

    Gets the audio streams.

*/
- (NSMutableArray*) audioStreams;
/**

    Gets the bundle policy for this connection.

*/
- (FMLiveSwitchBundlePolicy) bundlePolicy;
/**

    Gets the canonical name.

*/
- (NSString*) canonicalName;
/**

    Closes this instance.

*/
- (bool) close;
/**

    Creates an answer.

*/
- (FMLiveSwitchFuture*) createAnswer;
/**

    Creates an offer.

*/
- (FMLiveSwitchFuture*) createOffer;
/**

    Gets the first data stream.

*/
- (id) dataStream;
/**

    Gets the data streams.

*/
- (NSMutableArray*) dataStreams;
/**

    Gets the amount of time (in milliseconds)
    to wait for connectivity checks to re-establish
    after they start to fail on a live connection.
    Defaults to 10,000.

*/
- (int) deadStreamTimeout;
/**

    Gets the error.

*/
- (FMLiveSwitchError*) error;
/**

    Gets the external identifier.

*/
- (NSString*) externalId;
/**

    Gets the ICE gathering state.

*/
- (FMLiveSwitchIceGatheringState) gatheringState;
/**

    Gets connection stats.

*/
- (FMLiveSwitchFuture*) getStats;
/**

    Gets whether this connection has an audio stream.

*/
- (bool) hasAudio;
/**

    Gets whether this connection has a data stream.

*/
- (bool) hasData;
/**

    Gets whether this connection has a video stream.

*/
- (bool) hasVideo;
/**

    Gets the ICE connection state.

*/
- (FMLiveSwitchIceConnectionState) iceConnectionState;
/**

    Gets the ICE gather policy.

*/
- (FMLiveSwitchIceGatherPolicy) iceGatherPolicy;
/**

    Gets the ICE server.

*/
- (FMLiveSwitchIceServer*) iceServer;
/**

    Gets the ICE servers.

*/
- (NSMutableArray*) iceServers;
/**

    Gets the identifier.

*/
- (NSString*) id;
/**

    Gets a value indicating whether legacy Connection.Timeout should be used.
    When disabled, Connection.Timeout only accounts for the time spent trying to establish
    connectivity (i.e. time it takes to transition from the Connecting to the Connected state;
    from the time point when both offer and answer had been set to the connection
    being fully established).
    When enabled, Connection.Timeout accounts for the time spent from receiving an offer (or creating an
    offer) to establishing connectivity (i.e. time it takes to transition from Initializing to Connected
    state).
    By default, LegacyTimeout is set to true, so that existing behavior is preserved. However, in the future
    default will be updated to false. This means that IL will not account for any signalling delays that may
    occur while establishing connectivity. This option will be later deprecated.

*/
- (bool) legacyTimeout;
/**

    Gets the local description.

*/
- (FMLiveSwitchSessionDescription*) localDescription;
/**

    Gets the media protocol in use on this connection.

*/
- (FMLiveSwitchMediaProtocol) mediaProtocol;
/**

    Gets the remote description.

*/
- (FMLiveSwitchSessionDescription*) remoteDescription;
/**

    Removes an ICE server.

*/
- (void) removeIceServer:(FMLiveSwitchIceServer*)iceServer;
/**

    Removes some ICE servers.

*/
- (void) removeIceServers:(NSMutableArray*)iceServers;
/**

    Removes a handler that is raised when external connection Id changes.

*/
- (void) removeOnExternalIdChange:(FMLiveSwitchAction2*)value;
/**

    Removes a handler that is raised when the gathering state changes.

*/
- (void) removeOnGatheringStateChange:(FMLiveSwitchAction1*)value;
/**

    Removes a handler that is raised when the Ice connection state changes.

*/
- (void) removeOnIceConnectionStateChange:(FMLiveSwitchAction1*)value;
/**

    Removes a handler that is raised when a local candidate is added.

*/
- (void) removeOnLocalCandidate:(FMLiveSwitchAction2*)value;
/**

    Removes a handler that is raised when a local description is set.

*/
- (void) removeOnLocalDescription:(FMLiveSwitchAction2*)value;
/**

    Removes a handler that is raised when a remote candidate is added.

*/
- (void) removeOnRemoteCandidate:(FMLiveSwitchAction2*)value;
/**

    Removes a handler that is raised when a remote description is set.

*/
- (void) removeOnRemoteDescription:(FMLiveSwitchAction2*)value;
/**

    Removes a handler that is raised when the signalling state changes.

*/
- (void) removeOnSignallingStateChange:(FMLiveSwitchAction1*)value;
/**

    Removes a handler that is raised when the connection state changes.

*/
- (void) removeOnStateChange:(FMLiveSwitchAction1*)value;
/**

    Sets the bundle policy for this connection.

*/
- (void) setBundlePolicy:(FMLiveSwitchBundlePolicy)value;
/**

    Sets the amount of time (in milliseconds)
    to wait for connectivity checks to re-establish
    after they start to fail on a live connection.
    Defaults to 10,000.

*/
- (void) setDeadStreamTimeout:(int)value;
/**

    Sets the error.

*/
- (void) setError:(FMLiveSwitchError*)value;
/**

    Sets the external identifier.

*/
- (void) setExternalId:(NSString*)value;
/**

    Sets the ICE gather policy.

*/
- (void) setIceGatherPolicy:(FMLiveSwitchIceGatherPolicy)value;
/**

    Sets the ICE server.

*/
- (void) setIceServer:(FMLiveSwitchIceServer*)value;
/**

    Sets the ICE servers.

*/
- (void) setIceServers:(NSMutableArray*)value;
/**

    Sets a value indicating whether legacy Connection.Timeout should be used.
    When disabled, Connection.Timeout only accounts for the time spent trying to establish
    connectivity (i.e. time it takes to transition from the Connecting to the Connected state;
    from the time point when both offer and answer had been set to the connection
    being fully established).
    When enabled, Connection.Timeout accounts for the time spent from receiving an offer (or creating an
    offer) to establishing connectivity (i.e. time it takes to transition from Initializing to Connected
    state).
    By default, LegacyTimeout is set to true, so that existing behavior is preserved. However, in the future
    default will be updated to false. This means that IL will not account for any signalling delays that may
    occur while establishing connectivity. This option will be later deprecated.

*/
- (void) setLegacyTimeout:(bool)value;
/**

    Sets the local description.

*/
- (FMLiveSwitchFuture*) setLocalDescription:(FMLiveSwitchSessionDescription*)localDescription;
/**

    Sets the remote description.

*/
- (FMLiveSwitchFuture*) setRemoteDescription:(FMLiveSwitchSessionDescription*)remoteDescription;
/**

    Sets the tie breaker.

*/
- (void) setTieBreaker:(NSString*)value;
/**

    Sets the amount of time (in milliseconds)
    to wait for a connection to establish before
    giving up and closing it. Defaults to 30,000.

*/
- (void) setTimeout:(int)value;
/**

    Sets the trickle ICE policy.

*/
- (void) setTrickleIcePolicy:(FMLiveSwitchTrickleIcePolicy)value;
/**

    Gets the current signalling state.

*/
- (FMLiveSwitchSignallingState) signallingState;
/**

    Gets the current state.

*/
- (FMLiveSwitchConnectionState) state;
/**

    Gets the streams.

*/
- (NSMutableArray*) streams;
/**

    Gets the tie breaker.

*/
- (NSString*) tieBreaker;
/**

    Gets the amount of time (in milliseconds)
    to wait for a connection to establish before
    giving up and closing it. Defaults to 30,000.

*/
- (int) timeout;
/**

    Gets the trickle ICE policy.

*/
- (FMLiveSwitchTrickleIcePolicy) trickleIcePolicy;
/**

    Gets the first video stream.

*/
- (id) videoStream;
/**

    Gets the video streams.

*/
- (NSMutableArray*) videoStreams;

@end

/**

    View sink interface.

*/
@protocol FMLiveSwitchIViewSink

/**

    Sets a value indicating whether the view is mirrored.

*/
- (void) setViewMirror:(bool)value;
/**

    Sets the view scale.

*/
- (void) setViewScale:(FMLiveSwitchLayoutScale)value;
/**

    Gets the view.

*/
- (id) view;
/**

    Gets a value indicating whether the view is mirrored.

*/
- (bool) viewMirror;
/**

    Gets the view scale.

*/
- (FMLiveSwitchLayoutScale) viewScale;

@end

/**

    Data channel interface.

*/
@protocol FMLiveSwitchIDataChannel

/**

    Adds a handler that is raised when the state changes.

*/
- (void) addOnStateChange:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised when the state changes.

*/
- (void (^)(void(^)(id))) addOnStateChangeWithBlock;
/**

    Adds a handler that is raised when the state changes.

*/
- (void) addOnStateChangeWithBlock:(void(^)(id))valueBlock;
/**

    Gets the data channel identifier.

*/
- (NSString*) id;
/**

    Gets the data channel info.

*/
- (FMLiveSwitchDataChannelInfo*) info;
/**

    Gets a value indicating if this is an internal data channel.

*/
- (bool) isInternal;
/**

    Gets the label.

*/
- (NSString*) label;
/**

    Gets the callback to execute when a message is received.

*/
- (FMLiveSwitchAction1*) onReceive;
/**

    Gets a value indicating whether messages will be delivered in the order they are sent.

*/
- (bool) ordered;
/**

    Removes a handler that is raised when the state changes.

*/
- (void) removeOnStateChange:(FMLiveSwitchAction1*)value;
/**

    Sends a byte array.

*/
- (FMLiveSwitchFuture*) sendDataBytes:(FMLiveSwitchDataBuffer*)dataBytes;
/**

    Sends a string.

*/
- (FMLiveSwitchFuture*) sendDataString:(NSString*)dataString;
/**

    Sets the callback to execute when a message is received.

*/
- (void) setOnReceive:(FMLiveSwitchAction1*)value;
/**

    Sets the callback to execute when a message is received.

*/
- (void (^)(void(^)(FMLiveSwitchDataChannelReceiveArgs*))) setOnReceiveBlock;
/**

    Sets the callback to execute when a message is received.

*/
- (void) setOnReceiveBlock:(void(^)(FMLiveSwitchDataChannelReceiveArgs*))valueBlock;
/**

    Gets the state.

*/
- (FMLiveSwitchDataChannelState) state;
/**

    Gets the subprotocol.

*/
- (NSString*) subprotocol;

@end

/**

    Data stream interface.

*/
@protocol FMLiveSwitchIDataStream<FMLiveSwitchIStream>

/**

    Gets the channels.

*/
- (NSMutableArray*) channels;
/**

    Gets the data stream info.

*/
- (FMLiveSwitchDataStreamInfo*) info;

@end

/**

    Media interface.

*/
@protocol FMLiveSwitchIMedia

/**

    Adds a handler that is raised when the audio track is destroyed.
    If there are multiple audio tracks in a custom media stack,
    this event is only triggered by the first audio track.

*/
- (void) addOnAudioDestroyed:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised periodically when the audio's level is calculated.
    If there are multiple audio tracks in a custom media stack,
    this event is only triggered by the first audio track.

*/
- (void) addOnAudioLevel:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised periodically when the audio's level is calculated.
    If there are multiple audio tracks in a custom media stack,
    this event is only triggered by the first audio track.

*/
- (void (^)(void(^)(double))) addOnAudioLevelWithBlock;
/**

    Adds a handler that is raised periodically when the audio's level is calculated.
    If there are multiple audio tracks in a custom media stack,
    this event is only triggered by the first audio track.

*/
- (void) addOnAudioLevelWithBlock:(void(^)(double))valueBlock;
/**

    Adds a handler that is raised when the video track is destroyed.
    If there are multiple video tracks in a custom media stack,
    this event is only triggered by the first video track.

*/
- (void) addOnVideoDestroyed:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised whenever the video's frame size is known, once per frame.
    If there are multiple video tracks in a custom media stack,
    this event is only triggered by the first video track.

*/
- (void) addOnVideoSize:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised whenever the video's frame size changes.
    If there are multiple video tracks in a custom media stack,
    this event is only triggered by the first video track.

*/
- (void) addOnVideoSizeChange:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised whenever the video's frame size changes.
    If there are multiple video tracks in a custom media stack,
    this event is only triggered by the first video track.

*/
- (void (^)(void(^)(FMLiveSwitchSize*))) addOnVideoSizeChangeWithBlock;
/**

    Adds a handler that is raised whenever the video's frame size changes.
    If there are multiple video tracks in a custom media stack,
    this event is only triggered by the first video track.

*/
- (void) addOnVideoSizeChangeWithBlock:(void(^)(FMLiveSwitchSize*))valueBlock;
/**

    Adds a handler that is raised whenever the video's frame size is known, once per frame.
    If there are multiple video tracks in a custom media stack,
    this event is only triggered by the first video track.

*/
- (void (^)(void(^)(FMLiveSwitchSize*))) addOnVideoSizeWithBlock;
/**

    Adds a handler that is raised whenever the video's frame size is known, once per frame.
    If there are multiple video tracks in a custom media stack,
    this event is only triggered by the first video track.

*/
- (void) addOnVideoSizeWithBlock:(void(^)(FMLiveSwitchSize*))valueBlock;
/**

    Gets a value indicating the audio gain (input amplification).
    If there are multiple audio tracks in a custom media stack,
    this property is bound to the first audio track.

*/
- (double) audioGain;
/**

    Gets the interval in milliseconds between FMLiveSwitchIMedia`2#addOnAudioLevel: events.

*/
- (int) audioLevelInterval;
/**

    Gets a value indicating whether the audio is muted.
    If there are multiple audio tracks in a custom media stack,
    this property is bound to the first audio track.

*/
- (bool) audioMuted;
/**

    Gets the audio track.
    If there are multiple audio tracks in a custom media stack,
    this property is bound to the first audio track.

*/
- (NSObject<FMLiveSwitchIAudioTrack>*) audioTrack;
/**

    Gets the audio tracks.

*/
- (NSMutableArray*) audioTracks;
/**

    Gets a value indicating the audio volume (output resistance).
    If there are multiple audio tracks in a custom media stack,
    this property is bound to the first audio track.

*/
- (double) audioVolume;
/**

    Destroys this media stack.

*/
- (void) destroy;
/**

    Gets the next raw video frame.
    If there are multiple video tracks in a custom media stack,
    this method calls into the first video track.

    @return A future video buffer.
*/
- (FMLiveSwitchFuture*) grabVideoFrame;
/**

    Gets the identifier.

*/
- (NSString*) id;
/**

    Removes a handler that is raised when the audio track is destroyed.
    If there are multiple audio tracks in a custom media stack,
    this event is only triggered by the first audio track.

*/
- (void) removeOnAudioDestroyed:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised periodically when the audio's level is calculated.
    If there are multiple audio tracks in a custom media stack,
    this event is only triggered by the first audio track.

*/
- (void) removeOnAudioLevel:(FMLiveSwitchAction1*)value;
/**

    Removes a handler that is raised when the video track is destroyed.
    If there are multiple video tracks in a custom media stack,
    this event is only triggered by the first video track.

*/
- (void) removeOnVideoDestroyed:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised whenever the video's frame size is known, once per frame.
    If there are multiple video tracks in a custom media stack,
    this event is only triggered by the first video track.

*/
- (void) removeOnVideoSize:(FMLiveSwitchAction1*)value;
/**

    Removes a handler that is raised whenever the video's frame size changes.
    If there are multiple video tracks in a custom media stack,
    this event is only triggered by the first video track.

*/
- (void) removeOnVideoSizeChange:(FMLiveSwitchAction1*)value;
/**

    Sets a value indicating the audio gain (input amplification).
    If there are multiple audio tracks in a custom media stack,
    this property is bound to the first audio track.

*/
- (void) setAudioGain:(double)value;
/**

    Sets the interval in milliseconds between FMLiveSwitchIMedia`2#addOnAudioLevel: events.

*/
- (void) setAudioLevelInterval:(int)value;
/**

    Sets a value indicating whether the audio is muted.
    If there are multiple audio tracks in a custom media stack,
    this property is bound to the first audio track.

*/
- (void) setAudioMuted:(bool)value;
/**

    Sets a value indicating the audio volume (output resistance).
    If there are multiple audio tracks in a custom media stack,
    this property is bound to the first audio track.

*/
- (void) setAudioVolume:(double)value;
/**

    Sets the identifier.

*/
- (void) setId:(NSString*)value;
/**

    Sets a value indicating whether the video is muted.
    If there are multiple video tracks in a custom media stack,
    this property is bound to the first video track.

*/
- (void) setVideoMuted:(bool)value;
/**

    Gets a value indicating whether the video is muted.
    If there are multiple video tracks in a custom media stack,
    this property is bound to the first video track.

*/
- (bool) videoMuted;
/**

    Gets the size of the last processed video frame, if known.
    If there are multiple video tracks in a custom media stack,
    this property is bound to the first video track.

*/
- (FMLiveSwitchSize*) videoSize;
/**

    Gets the video track.
    If there are multiple video tracks in a custom media stack,
    this property is bound to the first video track.

*/
- (NSObject<FMLiveSwitchIVideoTrack>*) videoTrack;
/**

    Gets the video tracks.

*/
- (NSMutableArray*) videoTracks;

@end

/**

    Local media interface.

*/
@protocol FMLiveSwitchILocalMedia<FMLiveSwitchIMedia>

/**

    Adds a handler that is raised when the audio track is muted.

*/
- (void) addOnAudioMuted:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the audio track is started.

*/
- (void) addOnAudioStarted:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the audio track is stopped.

*/
- (void) addOnAudioStopped:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the audio track is unmuted.

*/
- (void) addOnAudioUnmuted:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the video track is muted.

*/
- (void) addOnVideoMuted:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the video track is started.

*/
- (void) addOnVideoStarted:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the video track is stopped.

*/
- (void) addOnVideoStopped:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the video track is unmuted.

*/
- (void) addOnVideoUnmuted:(FMLiveSwitchAction0*)value;
/**

    Gets the first (primary) local audio encoding.

*/
- (FMLiveSwitchAudioEncodingConfig*) audioEncoding;
/**

    Gets the local audio encodings.

*/
- (NSMutableArray*) audioEncodings;
/**

    Gets whether audio simulcast is disabled.

*/
- (bool) audioSimulcastDisabled;
/**

    Gets the number of audio simulcast encodings.

*/
- (int) audioSimulcastEncodingCount;
/**

    Gets the preferred audio simulcast bitrate, in kbps.

*/
- (int) audioSimulcastPreferredBitrate;
/**

    Gets the current audio source input
    of the first audio track.

*/
- (FMLiveSwitchSourceInput*) audioSourceInput;
/**

    Changes the audio source input of the first
    audio track while the media is active.

    @param audioSourceInput The audio source input.
*/
- (FMLiveSwitchFuture*) changeAudioSourceInput:(FMLiveSwitchSourceInput*)audioSourceInput;
/**

    Changes the video source input of the first
    video track while the media is active.

    @param videoSourceInput The video source input.
*/
- (FMLiveSwitchFuture*) changeVideoSourceInput:(FMLiveSwitchSourceInput*)videoSourceInput;
/**

    Gets the available audio source inputs
    of the first audio track.

    @return A future with an array of audio source inputs.
*/
- (FMLiveSwitchFuture*) getAudioSourceInputs;
/**

    Gets the available video source inputs
    of the first video track.

    @return A future with an array of video source inputs.
*/
- (FMLiveSwitchFuture*) getVideoSourceInputs;
/**

    Removes a handler that is raised when the audio track is muted.

*/
- (void) removeOnAudioMuted:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the audio track is started.

*/
- (void) removeOnAudioStarted:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the audio track is stopped.

*/
- (void) removeOnAudioStopped:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the audio track is unmuted.

*/
- (void) removeOnAudioUnmuted:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the video track is muted.

*/
- (void) removeOnVideoMuted:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the video track is started.

*/
- (void) removeOnVideoStarted:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the video track is stopped.

*/
- (void) removeOnVideoStopped:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the video track is unmuted.

*/
- (void) removeOnVideoUnmuted:(FMLiveSwitchAction0*)value;
/**

    Sets the local audio encodings.

*/
- (void) setAudioEncodings:(NSMutableArray*)value;
/**

    Sets whether audio simulcast is disabled.

*/
- (void) setAudioSimulcastDisabled:(bool)value;
/**

    Sets the number of audio simulcast encodings.

*/
- (void) setAudioSimulcastEncodingCount:(int)value;
/**

    Sets the preferred audio simulcast bitrate, in kbps.

*/
- (void) setAudioSimulcastPreferredBitrate:(int)value;
/**

    Sets the current audio source input
    of the first audio track.

*/
- (void) setAudioSourceInput:(FMLiveSwitchSourceInput*)value;
/**

    Sets the local video encodings.

*/
- (void) setVideoEncodings:(NSMutableArray*)value;
/**

    Sets the desired video simulcast bits-per-pixel (bpp).

*/
- (void) setVideoSimulcastBitsPerPixel:(double)value;
/**

    Sets the video simulcast degradation preference.

*/
- (void) setVideoSimulcastDegradationPreference:(FMLiveSwitchVideoDegradationPreference)value;
/**

    Sets whether video simulcast is disabled.

*/
- (void) setVideoSimulcastDisabled:(bool)value;
/**

    Sets the number of video simulcast encodings.

*/
- (void) setVideoSimulcastEncodingCount:(int)value;
/**

    Sets the preferred video simulcast bitrate, in kbps.

*/
- (void) setVideoSimulcastPreferredBitrate:(int)value;
/**

    Sets the current video source input
    of the first video track.

*/
- (void) setVideoSourceInput:(FMLiveSwitchSourceInput*)value;
/**

    Starts the media track sources.

*/
- (FMLiveSwitchFuture*) start;
/**

    Gets the current state.

*/
- (FMLiveSwitchLocalMediaState) state;
/**

    Stops the media track sources.

*/
- (FMLiveSwitchFuture*) stop;
/**

    Gets the first (primary) local video encoding.

*/
- (FMLiveSwitchVideoEncodingConfig*) videoEncoding;
/**

    Gets the local video encodings.

*/
- (NSMutableArray*) videoEncodings;
/**

    Gets the desired video simulcast bits-per-pixel (bpp).

*/
- (double) videoSimulcastBitsPerPixel;
/**

    Gets the video simulcast degradation preference.

*/
- (FMLiveSwitchVideoDegradationPreference) videoSimulcastDegradationPreference;
/**

    Gets whether video simulcast is disabled.

*/
- (bool) videoSimulcastDisabled;
/**

    Gets the number of video simulcast encodings.

*/
- (int) videoSimulcastEncodingCount;
/**

    Gets the preferred video simulcast bitrate, in kbps.

*/
- (int) videoSimulcastPreferredBitrate;
/**

    Gets the current video source input
    of the first video track.

*/
- (FMLiveSwitchSourceInput*) videoSourceInput;

@end

/**

    Viewable media interface.

*/
@protocol FMLiveSwitchIViewableMedia

/**

    Gets the identifier.

*/
- (NSString*) id;
/**

    Gets the view.

*/
- (id) view;

@end

/**

    Viewable media interface with a view sink.

*/
@protocol FMLiveSwitchIViewSinkableMedia<FMLiveSwitchIViewableMedia>

/**

    Gets the view sink.

*/
- (NSObject<FMLiveSwitchIViewSink>*) viewSink;

@end

/**

    Remote media interface.

*/
@protocol FMLiveSwitchIRemoteMedia<FMLiveSwitchIMedia>

/**

    Gets the current audio sink output
    of the first audio track.

*/
- (FMLiveSwitchSinkOutput*) audioSinkOutput;
/**

    Changes the audio sink output of the first
    audio track while the media is active.

    @param audioSinkOutput The audio sink output.
*/
- (FMLiveSwitchFuture*) changeAudioSinkOutput:(FMLiveSwitchSinkOutput*)audioSinkOutput;
/**

    Changes the video sink output of the first
    video track while the media is active.

    @param videoSinkOutput The video sink output.
*/
- (FMLiveSwitchFuture*) changeVideoSinkOutput:(FMLiveSwitchSinkOutput*)videoSinkOutput;
/**

    Gets the available audio sink outputs
    of the first audio track.

    @return A future with an array of audio sink outputs.
*/
- (FMLiveSwitchFuture*) getAudioSinkOutputs;
/**

    Gets the available video sink outputs
    of the first video track.

    @return A future with an array of video sink outputs.
*/
- (FMLiveSwitchFuture*) getVideoSinkOutputs;
/**

    Sets the current audio sink output
    of the first audio track.

*/
- (void) setAudioSinkOutput:(FMLiveSwitchSinkOutput*)value;
/**

    Sets the current video sink output
    of the first video track.

*/
- (void) setVideoSinkOutput:(FMLiveSwitchSinkOutput*)value;
/**

    Gets the current video sink output
    of the first video track.

*/
- (FMLiveSwitchSinkOutput*) videoSinkOutput;

@end

/**

    Video stream interface.

*/
@protocol FMLiveSwitchIVideoStream<FMLiveSwitchIMediaStream, FMLiveSwitchIStream>

/**

    Adds a handler that is raised when a keyframe request is discarded due to policy
    restrictions or lack of support by the remote endpoint.

*/
- (void) addOnDiscardKeyFrameRequest:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised when a keyframe request is discarded due to policy
    restrictions or lack of support by the remote endpoint.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnDiscardKeyFrameRequestWithBlock;
/**

    Adds a handler that is raised when a keyframe request is discarded due to policy
    restrictions or lack of support by the remote endpoint.

*/
- (void) addOnDiscardKeyFrameRequestWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Gets whether H.264 is disabled.

*/
- (bool) h264Disabled;
/**

    Gets whether H.265 is disabled.

*/
- (bool) h265Disabled;
/**

    Raises a keyframe request to the local track.

    @param synchronizationSources The synchronization sources.
*/
- (void) raiseKeyFrameRequestWithSynchronizationSources:(NSMutableArray*)synchronizationSources;
/**

    Removes a handler that is raised when a keyframe request is discarded due to policy
    restrictions or lack of support by the remote endpoint.

*/
- (void) removeOnDiscardKeyFrameRequest:(FMLiveSwitchAction1*)value;
/**

    Sets whether H.264 is disabled.

*/
- (void) setH264Disabled:(bool)value;
/**

    Sets whether H.265 is disabled.

*/
- (void) setH265Disabled:(bool)value;
/**

    Sets whether VP8 is disabled.

*/
- (void) setVp8Disabled:(bool)value;
/**

    Sets whether VP9 is disabled.

*/
- (void) setVp9Disabled:(bool)value;
/**

    Gets whether VP8 is disabled.

*/
- (bool) vp8Disabled;
/**

    Gets whether VP9 is disabled.

*/
- (bool) vp9Disabled;

@end

/**

    Video track interface.

*/
@protocol FMLiveSwitchIVideoTrack<FMLiveSwitchIMediaTrack>

/**

    Adds a handler that is raised whenever the video's frame size is known, once per frame.

*/
- (void) addOnSize:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised whenever the video's frame size changes.

*/
- (void) addOnSizeChange:(FMLiveSwitchAction1*)value;
/**

    Adds a handler that is raised whenever the video's frame size changes.

*/
- (void (^)(void(^)(FMLiveSwitchSize*))) addOnSizeChangeWithBlock;
/**

    Adds a handler that is raised whenever the video's frame size changes.

*/
- (void) addOnSizeChangeWithBlock:(void(^)(FMLiveSwitchSize*))valueBlock;
/**

    Adds a handler that is raised whenever the video's frame size is known, once per frame.

*/
- (void (^)(void(^)(FMLiveSwitchSize*))) addOnSizeWithBlock;
/**

    Adds a handler that is raised whenever the video's frame size is known, once per frame.

*/
- (void) addOnSizeWithBlock:(void(^)(FMLiveSwitchSize*))valueBlock;
/**

    Grabs the next raw video frame.

*/
- (FMLiveSwitchFuture*) grabFrame;
/**

    Removes a handler that is raised whenever the video's frame size is known, once per frame.

*/
- (void) removeOnSize:(FMLiveSwitchAction1*)value;
/**

    Removes a handler that is raised whenever the video's frame size changes.

*/
- (void) removeOnSizeChange:(FMLiveSwitchAction1*)value;
/**

    Gets the size of the last processed video frame, if known.

*/
- (FMLiveSwitchSize*) size;

@end

/**

    The interface that all rtp header extensions must implement.

*/
@protocol FMLiveSwitchIRtpHeaderExtension

/**

    Serialize the header extension to a buffer.

    @param buffer The buffer.
    @param offset The offset to start writing at.
*/
- (void) fillBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Gets the header extension ID.

*/
- (NSMutableData*) id;
/**

    Gets the length of the header extension in 32-bit words.

*/
- (int) length;

@end

/**

    A bitrate monitor.

*/
@interface FMLiveSwitchBitrateMonitor : NSObject

/**

    Gets the bitrate, in kbps.

*/
- (double) bitrate;
/**

    Initializes a new instance of the FMLiveSwitchBitrateMonitor class.

    @param systemClock The system clock.
*/
+ (FMLiveSwitchBitrateMonitor*) bitrateMonitorWithSystemClock:(NSObject<FMLiveSwitchISystemClock>*)systemClock;
/**

    Initializes a new instance of the FMLiveSwitchBitrateMonitor class.

    @param systemClock The system clock.
*/
- (instancetype) initWithSystemClock:(NSObject<FMLiveSwitchISystemClock>*)systemClock;
/**

    Resets this instance.

*/
- (void) reset;
/**

    Gets the smoothed bitrate, in kbps.

*/
- (double) smoothedBitrate;
/**

    Gets the system clock.

*/
- (NSObject<FMLiveSwitchISystemClock>*) systemClock;
/**

    Returns the new bitrate if a new sample is added.

    @param bitCount The new bit count.
*/
- (double) testBitrateWithBitCount:(long long)bitCount;
/**

    Returns the new bitrate if a new sample is added.

    @param bitCount The new bit count.
*/
- (double) testSmoothedBitrateWithBitCount:(long long)bitCount;
/**

    Adds a sample. This sample should be the total
    bits sent (or received) over the lifetime of the
    owning class. A sample should be added every time
    a packet is sent (or received).

    @param bitCount The new bit count.
*/
- (void) updateWithBitCount:(long long)bitCount;

@end

/**

    Common constants.

*/
@interface FMLiveSwitchCommonConstants : NSObject

/**

    Obtains a string representing an Application Stream.

*/
+ (NSString*) obtainApplicationString;
/**

    Obtains a capitalized string representing an Application Stream.

*/
+ (NSString*) obtainApplicationStringCapitalized;
/**

    Obtains a string representing an Audio Stream.

*/
+ (NSString*) obtainAudioString;
/**

    Obtains a capitalized string representing an Audio Stream.

*/
+ (NSString*) obtainAudioStringCapitalized;
/**

    Obtains a string representing a Data Stream.

*/
+ (NSString*) obtainDataString;
/**

    Obtains a capitalized string representing a Data Stream.

*/
+ (NSString*) obtainDataStringCapitalized;
/**

    Obtains a string representing a Message Stream.

*/
+ (NSString*) obtainMessageString;
/**

    Obtains a capitalized string representing a Message Stream.

*/
+ (NSString*) obtainMessageStringCapitalized;
/**

    Obtains a string representing an FM Ping.

*/
+ (NSString*) obtainPingString;
/**

    Obtains a string representing an FM Pong.

*/
+ (NSString*) obtainPongString;
/**

    Obtains a string representing a Text Stream.

*/
+ (NSString*) obtainTextString;
/**

    Obtains a capitalized string representing a Text Stream.

*/
+ (NSString*) obtainTextStringCapitalized;
/**

    Obtains a string representing a Video Stream.

*/
+ (NSString*) obtainVideoString;
/**

    Obtains a capitalized string representing a Video Stream.

*/
+ (NSString*) obtainVideoStringCapitalized;

@end

@interface FMLiveSwitchCryptoLibraryWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchCryptoLibrary)value;

@end

/**

    A data buffer pool tracer.

*/
@interface FMLiveSwitchDataBufferPoolTracer : NSObject<FMLiveSwitchIDataBufferPool>

/**

    Initializes a new instance of the FMLiveSwitchDataBufferPoolTracer class.

*/
+ (FMLiveSwitchDataBufferPoolTracer*) dataBufferPoolTracerWithTag:(NSString*)tag pool:(FMLiveSwitchDataBufferPool*)pool;
/**

    Initializes a new instance of the FMLiveSwitchDataBufferPoolTracer class.

*/
- (instancetype) initWithTag:(NSString*)tag pool:(FMLiveSwitchDataBufferPool*)pool;
/**

    Gets the underlying pool.

*/
- (FMLiveSwitchDataBufferPool*) pool;
/**

    Gets the total bytes available in the pool.

*/
- (long long) pooledBytesAvailable;
/**

    Release the pools.

*/
- (void) releasePools;
/**

    Gets the traced usage statistics.

*/
- (FMLiveSwitchPoolStatistics*) statistics;
/**

    Gets the tag that identifies requests to the underlying pool.

*/
- (NSString*) tag;
/**

    Takes a buffer from the pool.

    @param size The number of bytes needed.
*/
- (FMLiveSwitchDataBuffer*) takeWithSize:(int)size;
/**

    Takes a buffer from the pool.

    @param size The number of bytes needed.
    @param littleEndian Whether the data buffer should be little-endian.
*/
- (FMLiveSwitchDataBuffer*) takeWithSize:(int)size littleEndian:(bool)littleEndian;
/**

    Takes a buffer from the pool.

    @param size The number of bytes needed.
    @param littleEndian Whether the data buffer should be little-endian.
    @param clearBytes Whether to clear the data buffer.
*/
- (FMLiveSwitchDataBuffer*) takeWithSize:(int)size littleEndian:(bool)littleEndian clearBytes:(bool)clearBytes;

@end

/**

    An IP network.

*/
@interface FMLiveSwitchIPNetwork : NSObject

/**

    Gets the address.

*/
- (NSString*) address;
/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Gets the mask.

*/
- (NSString*) mask;
/**

    Checks if an address exists in this network.

    @param address The address.
    @return `true` if the address exists in this network; otherwise, `false`.
*/
- (bool) matchesWithAddress:(NSString*)address;
/**

    Parses a CIDR.

    @param cidr The CIDR.
    @return The IP network.
*/
+ (FMLiveSwitchIPNetwork*) parseWithCidr:(NSString*)cidr;
/**

    Gets the prefix length.

*/
- (int) prefixLength;
/**

    Tries to parse a CIDR.

    @param cidr The CIDR.
    @param network The IP network.
    @return `true` if successful; otherwise, `false`.
*/
+ (bool) tryParseWithCidr:(NSString*)cidr network:(FMLiveSwitchIPNetwork**)network;

@end

/**

    LogContext structure to hold ambient properties that can be attached to log events.

*/
@interface FMLiveSwitchLogContext : NSObject

/**

    Gets the application Id.

*/
- (NSString*) applicationId;
/**

    Gets the bundle transport Id.

*/
- (NSString*) bundleTransportId;
/**

    Gets the candidate Id.

*/
- (NSString*) candidateId;
/**

    Gets the candidate pair Id.

*/
- (NSString*) candidatePairId;
/**

    Gets the channel Id.

*/
- (NSString*) channelId;
/**

    Gets the client Id.

*/
- (NSString*) clientId;
/**

    Clones this object, creating a new instance with the same property values.

    @return A new LogContext instance with the same properties as this instance.
*/
- (FMLiveSwitchLogContext*) clone;
/**

    Gets cluster connection Id.

*/
- (NSString*) clusterConnectionId;
/**

    Gets the cluster socket id.

*/
- (NSString*) clusterSocketId;
/**

    Gets the connection Id.

*/
- (NSString*) connectionId;
/**

    Gets the device Id.

*/
- (NSString*) deviceId;
/**

    Gets DTLS Transport Id.

*/
- (NSString*) dtlsTransportId;
/**

    Gets the external connection Id.

*/
- (NSString*) externalConnectionId;
/**

    Deserializes json into a LogContext object.

    @param valueJson Value to deserialize
    @return Logcontext
*/
+ (FMLiveSwitchLogContext*) fromJsonWithValueJson:(NSString*)valueJson;
/**

    Gets the gateway Id.

*/
- (NSString*) gatewayId;
/**

    Gets the gatherer Id.

*/
- (NSString*) gathererId;
/**

    Gets the Ice transport Id.

*/
- (NSString*) iceTransportId;
- (instancetype) init;
/**

    Gets the Label.

*/
- (NSString*) label;
+ (FMLiveSwitchLogContext*) logContext;
/**

    Gets the media description manager Id.

*/
- (NSString*) mediaDescriptionManagerId;
/**

    Gets the Media Pipe Id.

*/
- (NSString*) mediaPipeId;
/**

    Gets the media server Id.

*/
- (NSString*) mediaServerId;
/**

    Gets the media source Id.

*/
- (NSString*) mediaSourceId;
/**

    Gets the remote connection Id.

*/
- (NSString*) remoteConnectionId;
/**

    Gets the remote media server Id.

*/
- (NSString*) remoteMediaServerId;
/**

    Gets RTP packet Id.

*/
- (NSString*) rtpPacketId;
/**

    Gets RTP Receiver Id.

*/
- (NSString*) rtpReceiverId;
/**

    Gets RTP Sender Id.

*/
- (NSString*) rtpSenderId;
/**

    Gets RTP Transport Id.

*/
- (NSString*) rtpTransportId;
/**

    Gets the Sctp transport Id.

*/
- (NSString*) sctpTrasnportId;
/**

    Sets the application Id.

*/
- (void) setApplicationId:(NSString*)value;
/**

    Sets the bundle transport Id.

*/
- (void) setBundleTransportId:(NSString*)value;
/**

    Sets the candidate Id.

*/
- (void) setCandidateId:(NSString*)value;
/**

    Sets the candidate pair Id.

*/
- (void) setCandidatePairId:(NSString*)value;
/**

    Sets the channel Id.

*/
- (void) setChannelId:(NSString*)value;
/**

    Sets the client Id.

*/
- (void) setClientId:(NSString*)value;
/**

    Sets cluster connection Id.

*/
- (void) setClusterConnectionId:(NSString*)value;
/**

    Sets the cluster socket id.

*/
- (void) setClusterSocketId:(NSString*)value;
/**

    Sets the connection Id.

*/
- (void) setConnectionId:(NSString*)value;
/**

    Sets the device Id.

*/
- (void) setDeviceId:(NSString*)value;
/**

    Sets DTLS Transport Id.

*/
- (void) setDtlsTransportId:(NSString*)value;
/**

    Sets the external connection Id.

*/
- (void) setExternalConnectionId:(NSString*)value;
/**

    Sets the gateway Id.

*/
- (void) setGatewayId:(NSString*)value;
/**

    Sets the gatherer Id.

*/
- (void) setGathererId:(NSString*)value;
/**

    Sets the Ice transport Id.

*/
- (void) setIceTransportId:(NSString*)value;
/**

    Sets the Label.

*/
- (void) setLabel:(NSString*)value;
/**

    Sets the media description manager Id.

*/
- (void) setMediaDescriptionManagerId:(NSString*)value;
/**

    Sets the Media Pipe Id.

*/
- (void) setMediaPipeId:(NSString*)value;
/**

    Sets the media server Id.

*/
- (void) setMediaServerId:(NSString*)value;
/**

    Sets the media source Id.

*/
- (void) setMediaSourceId:(NSString*)value;
/**

    Sets the remote connection Id.

*/
- (void) setRemoteConnectionId:(NSString*)value;
/**

    Sets the remote media server Id.

*/
- (void) setRemoteMediaServerId:(NSString*)value;
/**

    Sets RTP packet Id.

*/
- (void) setRtpPacketId:(NSString*)value;
/**

    Sets RTP Receiver Id.

*/
- (void) setRtpReceiverId:(NSString*)value;
/**

    Sets RTP Sender Id.

*/
- (void) setRtpSenderId:(NSString*)value;
/**

    Sets RTP Transport Id.

*/
- (void) setRtpTransportId:(NSString*)value;
/**

    Sets the Sctp transport Id.

*/
- (void) setSctpTrasnportId:(NSString*)value;
/**

    Sets the site Id.

*/
- (void) setSiteId:(NSString*)value;
/**

    Sets the socket manager Id.

*/
- (void) setSocketManagerId:(NSString*)value;
/**

    Sets the stream Id.

*/
- (void) setStreamId:(NSString*)value;
/**

    Sets the user Id.

*/
- (void) setUserId:(NSString*)value;
/**

    Sets the Webhook URL.

*/
- (void) setWebhookUrl:(NSString*)value;
/**

    Sets the WSMS Connection ID.

*/
- (void) setWebSocketMediaServerConnectionId:(NSString*)value;
/**

    Sets the websocket media server Id.

*/
- (void) setWebSocketMediaServerId:(NSString*)value;
/**

    Gets the site Id.

*/
- (NSString*) siteId;
/**

    Gets the socket manager Id.

*/
- (NSString*) socketManagerId;
/**

    Gets the stream Id.

*/
- (NSString*) streamId;
/**

    Returns a paired array rerpresentation of this log context.

*/
- (NSMutableArray*) toPairArray;
/**

    Gets the user Id.

*/
- (NSString*) userId;
/**

    Gets the Webhook URL.

*/
- (NSString*) webhookUrl;
/**

    Gets the WSMS Connection ID.

*/
- (NSString*) webSocketMediaServerConnectionId;
/**

    Gets the websocket media server Id.

*/
- (NSString*) webSocketMediaServerId;

@end

/**

    Synchronized Hash for inserts/removes. Unsynchronized for reads. Optimized for frequent reads relative to writes.

*/
@interface FMLiveSwitchFrequentReadSynchronizedHash<__covariant TKey, __covariant TValue> : NSObject

/**

    Clears the synchronized hash.

*/
- (void) clear;
/**

    Return a value indicating whether ther Hash contains a value for a given key.

    @param key The key
*/
- (bool) containsKey:(TKey)key;
/**

    Gets the count of items in this hash.

*/
- (long long) count;
/**

    Creates an instance of a FMLiveSwitchFrequentReadSynchronizedList`1.

*/
+ (FMLiveSwitchFrequentReadSynchronizedHash*) frequentReadSynchronizedHash;
/**

    Creates an instance of a FMLiveSwitchFrequentReadSynchronizedList`1.

    @param lockObject Synchronization object.
*/
+ (FMLiveSwitchFrequentReadSynchronizedHash*) frequentReadSynchronizedHashWithLockObject:(id)lockObject;
/**

    Gets an array of a given type of a given length.

    @param count 
*/
- (NSMutableArray*) getArrayWithCount:(int)count;
/**

    Creates an instance of a FMLiveSwitchFrequentReadSynchronizedList`1.

*/
- (instancetype) init;
/**

    Creates an instance of a FMLiveSwitchFrequentReadSynchronizedList`1.

    @param lockObject Synchronization object.
*/
- (instancetype) initWithLockObject:(id)lockObject;
/**

    Synchronized insert into collection.

    @param value Value
    @param key Key
*/
- (void) insertWithKey:(TKey)key value:(TValue)value;
/**

    Synchronized remove into collection.

    @param key Key
*/
- (void) removeWithKey:(TKey)key;
/**

    Tries to get a value for a given key.

    @param key The key
    @param value The value
*/
- (bool) tryGetValueWithKey:(TKey)key value:(TValue*)value;
/**

    Gets the values in the collection not subject to synchronization and Concurrent Modification/Access issues.
    May be missing newly added or removed values.

*/
- (NSMutableArray*) values;

@end

/**

    Synchronized List for inserts/removes. Unsynchronized for reads. Optimized for frequent reads relative to writes.

*/
@interface FMLiveSwitchFrequentReadSynchronizedList<__covariant T> : NSObject

/**

    Synchronized insert into collection at the end of the list.

    @param value Value
*/
- (void) add:(T)value;
/**

    Clears the list.

*/
- (void) clear;
/**

    Gets the count of items in the list.

*/
- (long long) count;
/**

    Creates an instance of a FMLiveSwitchFrequentReadSynchronizedList`1.

*/
+ (FMLiveSwitchFrequentReadSynchronizedList*) frequentReadSynchronizedList;
/**

    Creates an instance of a FMLiveSwitchFrequentReadSynchronizedList`1.

    @param lockObject Synchronization object.
*/
+ (FMLiveSwitchFrequentReadSynchronizedList*) frequentReadSynchronizedListWithLockObject:(id)lockObject;
/**

    Gets an array of a given type of a given length.

    @param count The count.
*/
- (NSMutableArray*) getArrayWithCount:(int)count;
/**

    Creates an instance of a FMLiveSwitchFrequentReadSynchronizedList`1.

*/
- (instancetype) init;
/**

    Creates an instance of a FMLiveSwitchFrequentReadSynchronizedList`1.

    @param lockObject Synchronization object.
*/
- (instancetype) initWithLockObject:(id)lockObject;
/**

    Synchronized insert into collection at a given index.

    @param value Value
    @param index Index
*/
- (void) insertWithIndex:(int)index value:(T)value;
/**

    Synchronized remove from collection.

    @param value Value
*/
- (void) remove:(T)value;
/**

    Synchronized remove from collection at a specified index.

    @param index Index
*/
- (void) removeAtWithIndex:(int)index;
/**

    Gets the values in the collection not subject to synchronization and Concurrent Modification/Access issues.
    May be missing newly added or removed values.

*/
- (NSMutableArray*) values;

@end

@interface FMLiveSwitchPlatformTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchPlatformType)value;

@end

/**

    A MessagePort

*/
@interface FMLiveSwitchRelayPort : NSObject

/**

    Add an event listener.

    @param listener 
*/
- (void) addEventListener:(FMLiveSwitchAction1<FMLiveSwitchWebSocketReceiveArgs*>*)listener;
/**

    Add an event listener.

    @inlineparam listenerBlock 
*/
- (void (^)(void(^)(FMLiveSwitchWebSocketReceiveArgs*))) addEventListenerWithListenerBlock;
/**

    Add an event listener.

    @param listenerBlock 
*/
- (void) addEventListenerWithListenerBlock:(void(^)(FMLiveSwitchWebSocketReceiveArgs*))listenerBlock;
/**

    Create a MessagePort

    @param messageChannel 
*/
- (instancetype) initWithMessageChannel:(FMLiveSwitchWebSocketReceiverRelay*)messageChannel;
/**

    Post a message.

    @param args 
*/
- (void) postMessageWithArgs:(FMLiveSwitchWebSocketReceiveArgs*)args;
/**

    Create a MessagePort

    @param messageChannel 
*/
+ (FMLiveSwitchRelayPort*) relayPortWithMessageChannel:(FMLiveSwitchWebSocketReceiverRelay*)messageChannel;
/**

    Remove an event listener.

    @param listener 
*/
- (void) removeEventListener:(FMLiveSwitchAction1<FMLiveSwitchWebSocketReceiveArgs*>*)listener;
/**

    Remove an event listener.

    @inlineparam listenerBlock 
*/
- (void (^)(void(^)(FMLiveSwitchWebSocketReceiveArgs*))) removeEventListenerWithListenerBlock;
/**

    Remove an event listener.

    @param listenerBlock 
*/
- (void) removeEventListenerWithListenerBlock:(void(^)(FMLiveSwitchWebSocketReceiveArgs*))listenerBlock;

@end

/**

    A system clock.

*/
@interface FMLiveSwitchSystemClock : NSObject<FMLiveSwitchISystemClock>

/**

    Gets the current system timestamp in ticks.
    10,000 ticks is equal to 1 millisecond.

    @return The current system timestamp in ticks.
*/
- (long long) getTimestamp;
- (instancetype) init;
+ (FMLiveSwitchSystemClock*) systemClock;

@end

/**

    A single-thread dispatch queue.

*/
@interface FMLiveSwitchThreadDispatchQueue<__covariant T> : NSObject<FMLiveSwitchIDispatchQueue>

/**

    Destroys the queue.

*/
- (void) destroy;
/**

    Enqueues an item for processing.

    @param item The item.
*/
- (void) enqueueWithItem:(T)item;
/**

    Initializes a new instance of the FMLiveSwitchThreadDispatchQueue`1 class.

    @param action The processing action.
*/
- (instancetype) initWithAction:(FMLiveSwitchAction1<T>*)action;
/**

    Initializes a new instance of the FMLiveSwitchThreadDispatchQueue`1 class.

    @param actionBlock The processing action.
*/
- (instancetype) initWithActionBlock:(void(^)(T))actionBlock;
/**

    Gets the number of items in the queue.

*/
- (long long) queueCount;
/**

    Initializes a new instance of the FMLiveSwitchThreadDispatchQueue`1 class.

    @param action The processing action.
*/
+ (FMLiveSwitchThreadDispatchQueue*) threadDispatchQueueWithAction:(FMLiveSwitchAction1<T>*)action;
/**

    Initializes a new instance of the FMLiveSwitchThreadDispatchQueue`1 class.

    @param actionBlock The processing action.
*/
+ (FMLiveSwitchThreadDispatchQueue*) threadDispatchQueueWithActionBlock:(void(^)(T))actionBlock;
/**

    Blocks until the queue is empty.

*/
- (void) waitForCompletion;

@end

/**

    Proxy credentials cache.

*/
@interface FMLiveSwitchProxyCredentialsCache : NSObject

/**

    Gets the underlying cache.

*/
- (FMLiveSwitchManagedConcurrentDictionary<NSString*,FMLiveSwitchProxyCredentials*>*) cache;
/**

    Gets the default credentials.

*/
- (FMLiveSwitchProxyCredentials*) defaultCredentials;
/**

    Deserializes an instance from JSON.

    @param instanceJson The serialized JSON.
    @return The instance.
*/
+ (FMLiveSwitchProxyCredentialsCache*) fromJsonWithInstanceJson:(NSString*)instanceJson;
/**

    Gets the proxy credentials for the given proxy IP address.

    @param proxyIPAddress The proxy IP address.
    @return The proxy credentials, if they exist, or `null`.
*/
- (FMLiveSwitchProxyCredentials*) getCredentialsWithProxyIPAddress:(NSString*)proxyIPAddress;
/**

    Initializes a new instance of the FMLiveSwitchProxyCredentialsCache class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchProxyCredentialsCache class.

*/
+ (FMLiveSwitchProxyCredentialsCache*) proxyCredentialsCache;
/**

    Sets the proxy credentials for the given proxy IP address.

    @param proxyIPAddress The proxy IP address.
    @param proxyCredentials The proxy credentials.
*/
- (void) setCredentialsWithProxyIPAddress:(NSString*)proxyIPAddress proxyCredentials:(FMLiveSwitchProxyCredentials*)proxyCredentials;
/**

    Sets the proxy credentials for the given proxy IP addresss.

    @param proxyIPAddresses The proxy IP addresses.
    @param proxyCredentials The proxy credentials.
*/
- (void) setCredentialsWithProxyIPAddresses:(NSMutableArray*)proxyIPAddresses proxyCredentials:(FMLiveSwitchProxyCredentials*)proxyCredentials;
/**

    Sets the default credentials.

*/
- (void) setDefaultCredentials:(FMLiveSwitchProxyCredentials*)value;
/**

    Serializes this instance to JSON.

    @return The serialized JSON.
*/
- (NSString*) toJson;
/**

    Serializes an instance to JSON.

    @param instance The instance.
    @return The serialized JSON.
*/
+ (NSString*) toJsonWithInstance:(FMLiveSwitchProxyCredentialsCache*)instance;

@end

/**

    Proxy credentials.

*/
@interface FMLiveSwitchProxyCredentials : NSObject

/**

    Deserializes an instance from JSON.

    @param instanceJson The serialized JSON.
    @return The instance.
*/
+ (FMLiveSwitchProxyCredentials*) fromJsonWithInstanceJson:(NSString*)instanceJson;
/**

    Initializes a new instance of the FMLiveSwitchProxyCredentials class.

    @param username The username.
    @param password The password.
*/
- (instancetype) initWithUsername:(NSString*)username password:(NSString*)password;
/**

    Gets the password.

*/
- (NSString*) password;
/**

    Initializes a new instance of the FMLiveSwitchProxyCredentials class.

    @param username The username.
    @param password The password.
*/
+ (FMLiveSwitchProxyCredentials*) proxyCredentialsWithUsername:(NSString*)username password:(NSString*)password;
/**

    Sets the password.

*/
- (void) setPassword:(NSString*)value;
/**

    Sets the username.

*/
- (void) setUsername:(NSString*)value;
/**

    Serializes this instance to JSON.

    @return The serialized JSON.
*/
- (NSString*) toJson;
/**

    Serializes an instance to JSON.

    @param instance The instance.
    @return The serialized JSON.
*/
+ (NSString*) toJsonWithInstance:(FMLiveSwitchProxyCredentials*)instance;
/**

    Gets the username.

*/
- (NSString*) username;

@end

/**

    Proxy authentication check result.

*/
@interface FMLiveSwitchProxyAuthCheckResult : NSObject

/**

    Initializes a new instance of the FMLiveSwitchProxyAuthCheckResult class.

    @param needsAuthentication Whether the proxy needs authentication.
    @param proxyIPAddresses The proxy IP addresses.
*/
- (instancetype) initWithNeedsAuthentication:(bool)needsAuthentication proxyIPAddresses:(NSMutableArray*)proxyIPAddresses;
/**

    Gets whether the proxy needs authentication.

*/
- (bool) needsAuthentication;
/**

    Initializes a new instance of the FMLiveSwitchProxyAuthCheckResult class.

    @param needsAuthentication Whether the proxy needs authentication.
    @param proxyIPAddresses The proxy IP addresses.
*/
+ (FMLiveSwitchProxyAuthCheckResult*) proxyAuthCheckResultWithNeedsAuthentication:(bool)needsAuthentication proxyIPAddresses:(NSMutableArray*)proxyIPAddresses;
/**

    Gets the first proxy IP address.

*/
- (NSString*) proxyIPAddress;
/**

    Gets the proxy IP addresses.

*/
- (NSMutableArray*) proxyIPAddresses;
/**

    Sets whether the proxy needs authentication.

*/
- (void) setNeedsAuthentication:(bool)value;
/**

    Sets the proxy IP addresses.

*/
- (void) setProxyIPAddresses:(NSMutableArray*)value;

@end

/**

    Proxy utility methods.

*/
@interface FMLiveSwitchProxy : NSObject

/**

    Checks if proxy authentication is required to access a given URL.

    @param url The URL.
*/
+ (FMLiveSwitchFuture<FMLiveSwitchProxyAuthCheckResult*>*) authCheckWithUrl:(NSString*)url;
/**

    Exports the credentials to JSON.

    @return The credentials in JSON format.
*/
+ (NSString*) exportCredentials;
/**

    Gets the proxy credentials for the given proxy IP address.

    @param proxyIPAddress The proxy IP address.
    @return The proxy credentials, if they exist, or `null`.
*/
+ (FMLiveSwitchProxyCredentials*) getCredentialsWithProxyIPAddress:(NSString*)proxyIPAddress;
/**

    Imports credentials from JSON.

    @param credentialsJson The credentials in JSON format.
*/
+ (void) importCredentialsWithCredentialsJson:(NSString*)credentialsJson;
- (instancetype) init;
+ (FMLiveSwitchProxy*) proxy;
/**

    Sets the proxy credentials for the given proxy IP address.

    @param proxyIPAddress The proxy IP address.
    @param proxyCredentials The proxy credentials.
*/
+ (void) setCredentialsWithProxyIPAddress:(NSString*)proxyIPAddress proxyCredentials:(FMLiveSwitchProxyCredentials*)proxyCredentials;
/**

    Sets the proxy credentials for the given proxy IP addresss.

    @param proxyIPAddresses The proxy IP addresses.
    @param proxyCredentials The proxy credentials.
*/
+ (void) setCredentialsWithProxyIPAddresses:(NSMutableArray*)proxyIPAddresses proxyCredentials:(FMLiveSwitchProxyCredentials*)proxyCredentials;

@end

@interface FMLiveSwitchAddressTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchAddressType)value;

@end

/**

    ASCII encoding/decoding utility.

*/
@interface FMLiveSwitchAscii : NSObject

+ (FMLiveSwitchAscii*) ascii;
/**

    Decodes a UTF-8 byte array to a string.

    @param input The input byte array.
*/
+ (NSString*) decodeWithInput:(NSMutableData*)input;
/**

    Decodes a UTF-8 byte array to a string.

    @param input The input byte array.
    @param index The index to start reading.
    @param length The length.
*/
+ (NSString*) decodeWithInput:(NSMutableData*)input index:(int)index length:(int)length;
/**

    Encodes a string to a UTF-8 byte array.

    @param input The input string.
*/
+ (NSMutableData*) encodeWithInput:(NSString*)input;
/**

    Gets the number of bytes that would be returned by
    a call to encode.

    @param input The input string.
*/
+ (int) getByteCountWithInput:(NSString*)input;
- (instancetype) init;

@end

/**

    An asymmetric key.

*/
@interface FMLiveSwitchAsymmetricKey : NSObject

+ (FMLiveSwitchAsymmetricKey*) asymmetricKey;
/**

    Creates a key.

    @param keyType The key type.
*/
+ (FMLiveSwitchAsymmetricKey*) createKeyWithKeyType:(FMLiveSwitchAsymmetricKeyType)keyType;
/**

    Returns `true` if the key contains
    private information.

*/
- (bool) hasPrivate;
/**

    Returns `true` if the key contains
    public information.

*/
- (bool) hasPublic;
- (instancetype) init;
/**

    Gets the key type.

*/
- (FMLiveSwitchAsymmetricKeyType) type;

@end

@interface FMLiveSwitchAsymmetricKeyTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchAsymmetricKeyType)value;

@end

/**

    A managed mutex.

*/
@interface FMLiveSwitchAtomicMutex : NSObject

/**

    Creates a new instance of an AtomicMutex.

*/
+ (FMLiveSwitchAtomicMutex*) atomicMutex;
/**

    Creates a new instance of an AtomicMutex.

*/
- (instancetype) init;
/**

    Gets if the mutex is locked or not.

*/
- (bool) isLocked;
/**

    Releases the lock.

*/
- (void) release;
/**

    Tries to obtain a lock with this thread.

*/
- (bool) tryLock;

@end

/**

    Common binary methods.

*/
@interface FMLiveSwitchBinary : NSObject

+ (FMLiveSwitchBinary*) binary;
/**

    Converts a bit-string to bytes.

    @param bitString The bit-string.
*/
+ (NSMutableData*) bitStringToBytesWithBitString:(NSString*)bitString;
/**

    Converts a bit-string to bytes.

    @param bitString The bit-string.
    @param numberOfUnusedBits The number of unused bits.
*/
+ (NSMutableData*) bitStringToBytesWithBitString:(NSString*)bitString numberOfUnusedBits:(int*)numberOfUnusedBits;
/**

    Converts a bit-string to bytes.

    @param bitString The bit-string.
    @param padLeft Whether to pad extra zero-bits to the left.
*/
+ (NSMutableData*) bitStringToBytesWithBitString:(NSString*)bitString padLeft:(bool)padLeft;
/**

    Converts a bit-string to bytes.

    @param bitString The bit-string.
    @param padLeft Whether to pad extra zero-bits to the left.
    @param numberOfUnusedBits The number of unused bits.
*/
+ (NSMutableData*) bitStringToBytesWithBitString:(NSString*)bitString padLeft:(bool)padLeft numberOfUnusedBits:(int*)numberOfUnusedBits;
/**

    Converts bytes to a bit-string.

    @param bytes The bytes.
*/
+ (NSString*) bytesToBitStringWithBytes:(NSMutableData*)bytes;
/**

    Converts bytes to a bit-string.

    @param bytes The bytes.
    @param offset The offset.
    @param length The length.
*/
+ (NSString*) bytesToBitStringWithBytes:(NSMutableData*)bytes offset:(int)offset length:(int)length;
/**

    Converts bytes to a bit-string.

    @param bytes The bytes.
    @param offset The offset.
    @param length The length.
    @param numberOfUnusedBits The number of unused bits.
*/
+ (NSString*) bytesToBitStringWithBytes:(NSMutableData*)bytes offset:(int)offset length:(int)length numberOfUnusedBits:(int)numberOfUnusedBits;
/**

    Converts bytes to a bit-string.

    @param bytes The bytes.
    @param offset The offset.
    @param length The length.
    @param numberOfUnusedBits The number of unused bits.
    @param trimLeft Whether to trim unused bits from the left.
*/
+ (NSString*) bytesToBitStringWithBytes:(NSMutableData*)bytes offset:(int)offset length:(int)length numberOfUnusedBits:(int)numberOfUnusedBits trimLeft:(bool)trimLeft;
/**

    Deinterleave and transform (rotate) a byte array containing two planes

    @param inputFrame The inputFrame.
    @param outputFrame The outputFrame.
    @param width The width.
    @param height The height.
    @param stride The stride.
    @param rotation Values 0, 90, 180, 270.
*/
+ (void) deinterleaveTransformWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame width:(int)width height:(int)height stride:(int)stride rotation:(int)rotation;
/**

    Deinterleave and transform (rotate) a byte array containing two planes

    @param inputFrame The inputFrame.
    @param outputFrame The outputFrame.
    @param width The width.
    @param height The height.
    @param stride The stride.
    @param rotation Values 0, 90, 180, 270.
    @param start The start.
*/
+ (void) deinterleaveTransformWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame width:(int)width height:(int)height stride:(int)stride rotation:(int)rotation start:(int)start;
/**

    Deinterleave and transform (rotate) a byte array containing two planes

    @param inputFrame The inputFrame.
    @param outputFrame The outputFrame.
    @param width The width.
    @param height The height.
    @param stride The stride.
    @param start The start.
    @param rotation Values 0, 90, 180, 270.
    @param reversePlanes Reverse output plane order.
*/
+ (void) deinterleaveTransformWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame width:(int)width height:(int)height stride:(int)stride rotation:(int)rotation start:(int)start reversePlanes:(bool)reversePlanes;
/**

    Deinterleaves a byte array i.e.
    XYXYXYXY to XXXXYYYY

    @param inputFrame The inputFrame.
    @param outputFrame The outputFrame.
*/
+ (void) deinterleaveWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame;
/**

    Deinterleaves a byte array i.e.
    XYXYXYXY to XXXXYYYY

    @param inputFrame The inputFrame.
    @param outputFrame The outputFrame.
    @param start The start.
    @param length The length.
*/
+ (void) deinterleaveWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame start:(int)start length:(int)length;
/**

    Deinterleaves a byte array

    @param inputFrame The inputFrame.
    @param outputFrame The outputFrame.
    @param start The start.
    @param length The length.
    @param reversePlanes The reversePlanes.
*/
+ (void) deinterleaveWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame start:(int)start length:(int)length reversePlanes:(bool)reversePlanes;
/**

    Reads a 10-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @return The value.
*/
+ (int) fromBytes10WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/**

    Reads a 11-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @return The value.
*/
+ (int) fromBytes11WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/**

    Reads a 12-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @return The value.
*/
+ (int) fromBytes12WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/**

    Reads a 13-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @return The value.
*/
+ (int) fromBytes13WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/**

    Reads a 14-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @return The value.
*/
+ (int) fromBytes14WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/**

    Reads a 15-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @return The value.
*/
+ (int) fromBytes15WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/**

    Reads a 16-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param littleEndian Whether to use little-endian format.
    @return The value.
*/
+ (int) fromBytes16WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian;
/**

    Reads an 17-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @return The value.
*/
+ (int) fromBytes17WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/**

    Reads an 18-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @return The value.
*/
+ (int) fromBytes18WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/**

    Reads an 19-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @return The value.
*/
+ (int) fromBytes19WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/**

    Reads a 1-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @return The value.
*/
+ (bool) fromBytes1WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/**

    Reads an 20-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @return The value.
*/
+ (int) fromBytes20WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/**

    Reads an 21-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @return The value.
*/
+ (int) fromBytes21WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/**

    Reads an 22-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @return The value.
*/
+ (int) fromBytes22WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/**

    Reads an 23-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @return The value.
*/
+ (int) fromBytes23WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/**

    Reads a 24-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param littleEndian Whether to use little-endian format.
    @return The value.
*/
+ (int) fromBytes24WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian;
/**

    Reads a 2-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @return The value.
*/
+ (int) fromBytes2WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/**

    Reads a 32-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param littleEndian Whether to use little-endian format.
    @return The value.
*/
+ (long long) fromBytes32WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian;
/**

    Reads a 3-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @return The value.
*/
+ (int) fromBytes3WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/**

    Reads a 40-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param littleEndian Whether to use little-endian format.
    @return The value.
*/
+ (long long) fromBytes40WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian;
/**

    Reads a 48-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param littleEndian Whether to use little-endian format.
    @return The value.
*/
+ (long long) fromBytes48WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian;
/**

    Reads a 4-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @return The value.
*/
+ (int) fromBytes4WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/**

    Reads a 56-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param littleEndian Whether to use little-endian format.
    @return The value.
*/
+ (long long) fromBytes56WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian;
/**

    Reads a 5-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @return The value.
*/
+ (int) fromBytes5WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/**

    Reads a 64-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param littleEndian Whether to use little-endian format.
    @return The value.
*/
+ (long long) fromBytes64WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian;
/**

    Reads a 6-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @return The value.
*/
+ (int) fromBytes6WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/**

    Reads a 7-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @return The value.
*/
+ (int) fromBytes7WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/**

    Reads an 8-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @return The value.
*/
+ (int) fromBytes8WithInput:(NSMutableData*)input inputIndex:(int)inputIndex;
/**

    Reads a 9-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @return The value.
*/
+ (int) fromBytes9WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
- (instancetype) init;
/**

    Interleave and transform (rotate) a byte array containing two planes

    @param inputFrame The inputFrame.
    @param outputFrame The outputFrame.
    @param width The width.
    @param height The height.
    @param stride The stride.
    @param rotation Values 0, 90, 180, 270.
*/
+ (void) interleaveTransformWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame width:(int)width height:(int)height stride:(int)stride rotation:(int)rotation;
/**

    Interleave and transform (rotate) a byte array containing two planes

    @param inputFrame The inputFrame.
    @param outputFrame The outputFrame.
    @param width The width.
    @param height The height.
    @param stride The stride.
    @param rotation Values 0, 90, 180, 270.
    @param start The start.
*/
+ (void) interleaveTransformWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame width:(int)width height:(int)height stride:(int)stride rotation:(int)rotation start:(int)start;
/**

    Interleave and transform (rotate) a byte array containing two planes

    @param inputFrame The inputFrame.
    @param outputFrame The outputFrame.
    @param width The width.
    @param height The height.
    @param stride The stride.
    @param start The start.
    @param rotation Values 0, 90, 180, 270.
    @param reversePlanes Reverse output plane order.
*/
+ (void) interleaveTransformWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame width:(int)width height:(int)height stride:(int)stride rotation:(int)rotation start:(int)start reversePlanes:(bool)reversePlanes;
/**

    Interleaves a byte array i.e.
    XXXXYYYY to XYXYXYXY

    @param inputFrame The inputFrame.
    @param outputFrame The outputFrame.
*/
+ (void) interleaveWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame;
/**

    Interleaves a byte array i.e.
    XXXXYYYY to XYXYXYXY

    @param inputFrame The inputFrame.
    @param outputFrame The outputFrame.
    @param start The start.
    @param length The length.
*/
+ (void) interleaveWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame start:(int)start length:(int)length;
/**

    Interleaves a byte array  i.e.
    XXXXYYYY to XYXYXYXY

    @param inputFrame The inputFrame.
    @param outputFrame The outputFrame.
    @param start The start.
    @param length The length.
    @param reversePlanes XXXXYYYY to YXYXYXYX
*/
+ (void) interleaveWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame start:(int)start length:(int)length reversePlanes:(bool)reversePlanes;
/**

    Converts a 1-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes1:(bool)value bitOffset:(int)bitOffset;
/**

    Writes a 1-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes1:(bool)value bitOffset:(int)bitOffset output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 10-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes10:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/**

    Writes a 10-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes10:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 11-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes11:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/**

    Writes a 11-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes11:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 12-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes12:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/**

    Writes a 12-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes12:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 13-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes13:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/**

    Writes a 13-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes13:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 14-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes14:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/**

    Writes a 14-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes14:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 15-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes15:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/**

    Writes a 15-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes15:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 16-bit value to a byte array.

    @param value The value to write.
    @param littleEndian Whether to use little-endian format.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes16:(int)value littleEndian:(bool)littleEndian;
/**

    Writes a 16-bit value to a byte array.

    @param value The value to write.
    @param littleEndian Whether to use little-endian format.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes16:(int)value littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 17-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes17:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/**

    Writes a 17-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes17:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts an 18-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes18:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/**

    Writes an 18-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes18:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 19-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes19:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/**

    Writes a 19-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes19:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 2-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes2:(int)value bitOffset:(int)bitOffset;
/**

    Writes a 2-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes2:(int)value bitOffset:(int)bitOffset output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 20-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes20:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/**

    Writes a 20-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes20:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 21-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes21:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/**

    Writes a 21-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes21:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 22-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes22:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/**

    Writes a 22-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes22:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 23-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes23:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/**

    Writes a 23-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes23:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 24-bit value to a byte array.

    @param value The value to write.
    @param littleEndian Whether to use little-endian format.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes24:(int)value littleEndian:(bool)littleEndian;
/**

    Writes a 24-bit value to a byte array.

    @param value The value to write.
    @param littleEndian Whether to use little-endian format.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes24:(int)value littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 3-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes3:(int)value bitOffset:(int)bitOffset;
/**

    Writes a 3-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes3:(int)value bitOffset:(int)bitOffset output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 32-bit value to a byte array.

    @param value The value to write.
    @param littleEndian Whether to use little-endian format.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes32:(long long)value littleEndian:(bool)littleEndian;
/**

    Writes a 32-bit value to a byte array.

    @param value The value to write.
    @param littleEndian Whether to use little-endian format.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes32:(long long)value littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 4-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes4:(int)value bitOffset:(int)bitOffset;
/**

    Writes a 4-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes4:(int)value bitOffset:(int)bitOffset output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 40-bit value to a byte array.

    @param value The value to write.
    @param littleEndian Whether to use little-endian format.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes40:(long long)value littleEndian:(bool)littleEndian;
/**

    Writes a 40-bit value to a byte array.

    @param value The value to write.
    @param littleEndian Whether to use little-endian format.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes40:(long long)value littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 48-bit value to a byte array.

    @param value The value to write.
    @param littleEndian Whether to use little-endian format.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes48:(long long)value littleEndian:(bool)littleEndian;
/**

    Writes a 48-bit value to a byte array.

    @param value The value to write.
    @param littleEndian Whether to use little-endian format.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes48:(long long)value littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 5-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes5:(int)value bitOffset:(int)bitOffset;
/**

    Writes a 5-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes5:(int)value bitOffset:(int)bitOffset output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 56-bit value to a byte array.

    @param value The value to write.
    @param littleEndian Whether to use little-endian format.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes56:(long long)value littleEndian:(bool)littleEndian;
/**

    Writes a 56-bit value to a byte array.

    @param value The value to write.
    @param littleEndian Whether to use little-endian format.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes56:(long long)value littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 6-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes6:(int)value bitOffset:(int)bitOffset;
/**

    Writes a 6-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes6:(int)value bitOffset:(int)bitOffset output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 64-bit value to a byte array.

    @param value The value to write.
    @param littleEndian Whether to use little-endian format.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes64:(long long)value littleEndian:(bool)littleEndian;
/**

    Writes a 64-bit value to a byte array.

    @param value The value to write.
    @param littleEndian Whether to use little-endian format.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes64:(long long)value littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 7-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes7:(int)value bitOffset:(int)bitOffset;
/**

    Writes a 7-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes7:(int)value bitOffset:(int)bitOffset output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts an 8-bit value to a byte array.

    @param value The value to write.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes8:(int)value;
/**

    Writes an 8-bit value to a byte array.

    @param value The value to write.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes8:(int)value output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Converts a 9-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes9:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/**

    Writes a 9-bit value to a byte array.

    @param value The value to write.
    @param bitOffset The offset of the value within the byte.
    @param littleEndian Whether to use little-endian format.
    @param output The output byte array.
    @param outputIndex The index to start writing.
    @return The output byte array.
*/
+ (NSMutableData*) toBytes9:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/**

    Transforms a byte containing a 2D plane (rotates 90, 180, 270)

    @param inputFrame The inputFrame.
    @param outputFrame The outputFrame.
    @param rotation The rotation.
    @param width The width.
    @param height The height.
    @param stride The stride.
*/
+ (void) transformWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame width:(int)width height:(int)height stride:(int)stride rotation:(int)rotation;
/**

    Transforms a byte containing a 2D plane (rotates 90, 180, 270)

    @param inputFrame The inputFrame.
    @param outputFrame The outputFrame.
    @param rotation The rotation.
    @param width The width.
    @param height The height.
    @param stride The stride.
    @param inputStart The inputStart.
    @param outputStart The outputStart.
*/
+ (void) transformWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame width:(int)width height:(int)height stride:(int)stride rotation:(int)rotation inputStart:(int)inputStart outputStart:(int)outputStart;
/**

    Transforms a byte containing a 2D plane (rotates 90, 180, 270).
    When transforming interleaved planes. Set the chunkLength to
    the number of planes.

    @param inputFrame The inputFrame.
    @param outputFrame The outputFrame.
    @param rotation The rotation.
    @param width The width.
    @param height The height.
    @param stride The stride.
    @param inputStart The inputStart.
    @param outputStart The outputStart.
    @param chunkLength The chunkLength.
*/
+ (void) transformWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame width:(int)width height:(int)height stride:(int)stride rotation:(int)rotation inputStart:(int)inputStart outputStart:(int)outputStart chunkLength:(int)chunkLength;
/**

    Transforms a byte containing a 2D plane (rotates 90, 180, 270)

    @param inputFrame The inputFrame.
    @param outputFrame The outputFrame.
    @param rotation The rotation.
    @param width The width.
    @param height The height.
    @param stride The stride.
    @param start Start position for both input and output frame
*/
+ (void) transformWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame width:(int)width height:(int)height stride:(int)stride rotation:(int)rotation start:(int)start;
/**

    Tries to read a 10-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes10WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 11-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes11WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 12-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes12WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 13-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes13WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 14-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes14WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 15-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes15WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 16-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param littleEndian Whether to use little-endian format.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes16WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian value:(int*)value;
/**

    Tries to read a 17-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes17WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 18-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes18WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 19-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes19WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 1-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes1WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(bool*)value;
/**

    Tries to read a 20-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes20WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 21-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes21WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 22-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes22WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 23-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes23WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 24-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param littleEndian Whether to use little-endian format.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes24WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian value:(int*)value;
/**

    Tries to read a 2-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes2WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 32-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param littleEndian Whether to use little-endian format.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes32WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian value:(long long*)value;
/**

    Tries to read a 3-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes3WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 40-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param littleEndian Whether to use little-endian format.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes40WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian value:(long long*)value;
/**

    Tries to read a 48-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param littleEndian Whether to use little-endian format.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes48WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian value:(long long*)value;
/**

    Tries to read a 4-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes4WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 56-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param littleEndian Whether to use little-endian format.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes56WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian value:(long long*)value;
/**

    Tries to read a 5-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes5WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 64-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param littleEndian Whether to use little-endian format.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes64WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian value:(long long*)value;
/**

    Tries to read a 6-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes6WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 7-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes7WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read an 8-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes8WithInput:(NSMutableData*)input inputIndex:(int)inputIndex value:(int*)value;
/**

    Tries to read a 9-bit value from a byte array.

    @param input The input byte array.
    @param inputIndex The index to start reading.
    @param bitOffset The offset of the value within the byte.
    @param value The value.
    @return `true` if the index is valid and the value was read; otherwise, `false`
*/
+ (bool) tryFromBytes9WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;

@end

/**

    Class to hold a boolean value passed by reference.

*/
@interface FMLiveSwitchBooleanHolder : NSObject

/**

    Initializes a new instance of the FMLiveSwitchBooleanHolder class.

*/
+ (FMLiveSwitchBooleanHolder*) booleanHolder;
/**

    Initializes a new instance of the FMLiveSwitchBooleanHolder class.

    @param value The value.
*/
+ (FMLiveSwitchBooleanHolder*) booleanHolder:(bool)value;
/**

    Initializes a new instance of the FMLiveSwitchBooleanHolder class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchBooleanHolder class.

    @param value The value.
*/
- (instancetype) initWithValue:(bool)value;
/**

    Sets the value.

*/
- (void) setValue:(bool)value;
/**

    Gets the value.

*/
- (bool) value;

@end

/**

    Details about the current build.

*/
FOUNDATION_EXPORT NSString* const FMLiveSwitchBuildVersionConstant;

@interface FMLiveSwitchBuild : NSObject

+ (FMLiveSwitchBuild*) build;
/**

    Gets the build date.

*/
+ (NSDate*) date;
/**

    Gets the build day.

*/
+ (int) day;
- (instancetype) init;
/**

    Gets the build major version.

*/
+ (int) majorVersion;
/**

    Gets the build minor version.

*/
+ (int) minorVersion;
/**

    Gets the build month.

*/
+ (int) month;
/**

    Gets the build patch version.

*/
+ (int) patchVersion;
/**

    Gets the build revision version.

*/
+ (int) revisionVersion;
/**

    Gets the full build version.

*/
+ (NSString*) version;
/**

    Gets the build year.

*/
+ (int) year;

@end

/**

    Class to hold a byte value passed by reference.

*/
@interface FMLiveSwitchByteHolder : NSObject

/**

    Initializes a new instance of the FMLiveSwitchByteHolder class.

*/
+ (FMLiveSwitchByteHolder*) byteHolder;
/**

    Initializes a new instance of the FMLiveSwitchByteHolder class.

    @param value The value.
*/
+ (FMLiveSwitchByteHolder*) byteHolder:(uint8_t)value;
/**

    Initializes a new instance of the FMLiveSwitchByteHolder class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchByteHolder class.

    @param value The value.
*/
- (instancetype) initWithValue:(uint8_t)value;
/**

    Sets the value.

*/
- (void) setValue:(uint8_t)value;
/**

    Gets the value.

*/
- (uint8_t) value;

@end

/**

    An buffer of bytes that can be read sequentially.

*/
@interface FMLiveSwitchByteInputStream : NSObject

/**

    Gets the number of available bytes for reading.

*/
- (int) available;
/**

    Initializes a new instance of the FMLiveSwitchByteInputStream class.

    @param bytes The bytes.
*/
+ (FMLiveSwitchByteInputStream*) byteInputStreamWithBytes:(NSMutableData*)bytes;
/**

    Initializes a new instance of the FMLiveSwitchByteInputStream class.

    @param bytes The bytes.
    @param offset The offset.
*/
+ (FMLiveSwitchByteInputStream*) byteInputStreamWithBytes:(NSMutableData*)bytes offset:(int)offset;
/**

    Initializes a new instance of the FMLiveSwitchByteInputStream class.

    @param bytes The bytes.
*/
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/**

    Initializes a new instance of the FMLiveSwitchByteInputStream class.

    @param bytes The bytes.
    @param offset The offset.
*/
- (instancetype) initWithBytes:(NSMutableData*)bytes offset:(int)offset;
/**

    Marks the current position for a later reset.

*/
- (void) mark;
/**

    Reads a value from the byte array.

    @return The byte, or -1 if no more bytes are available for reading.
*/
- (int) read;
/**

    Reads a segment from the byte array.

    @return The number of bytes read.
*/
- (int) readWithBuffer:(NSMutableData*)buffer offset:(int)offset length:(int)length;
/**

    Resets the stream to the marked position.

*/
- (void) reset;
/**

    Advances the stream position by the amount specified.

    @param n The number of bytes to skip.
    @return The number of bytes skipped.
*/
- (int) skipWithN:(int)n;

@end

/**

    An buffer of bytes that can be written sequentially.

*/
@interface FMLiveSwitchByteOutputStream : NSObject

+ (FMLiveSwitchByteOutputStream*) byteOutputStream;
- (instancetype) init;
/**

    Empties this stream and resets it.

*/
- (void) reset;
/**

    Gets the number of bytes written to the stream.

*/
- (int) size;
/**

    Converts the stream to a byte array.

*/
- (NSMutableData*) toArray;
/**

    Writes a value to the stream.

    @param value The value.
*/
- (void) write:(uint8_t)value;
/**

    Writes a buffer to the stream.

    @param buffer The buffer.
*/
- (void) writeBuffer:(NSMutableData*)buffer;
/**

    Writes a buffer to the stream.

    @param buffer The buffer.
    @param offset The offset.
    @param length The length.
*/
- (void) writeBuffer:(NSMutableData*)buffer offset:(int)offset length:(int)length;
/**

    Writes the contents of this stream to another stream.

    @param stream The stream.
*/
- (void) writeToWithStream:(FMLiveSwitchByteOutputStream*)stream;

@end

/**

    A bzip2 decompressor.

*/
@interface FMLiveSwitchBZip2Decompressor : NSObject

/**

    Initializes a new instance of the FMLiveSwitchBZip2Decompressor class.

    @param input The input.
*/
+ (FMLiveSwitchBZip2Decompressor*) decompressorWithInput:(FMLiveSwitchDataBuffer*)input;
/**

    Initializes a new instance of the FMLiveSwitchBZip2Decompressor class.

    @param input The input.
*/
- (instancetype) initWithInput:(FMLiveSwitchDataBuffer*)input;
/**

    Read a single byte from the stream.

    @return the byte read from the stream, or -1 if EOF
*/
- (int) readByte;
/**

    Read data from the stream.



                 To decompress a BZip2 data stream, create a {0},
                 providing a stream that reads compressed data.  Then call Read() on
                 that {1}, and the data read will be decompressed
                 as you read.
               


                 A {2} can be used only for {3}, not for {4}.
               

    @param buffer The buffer into which the read data should be placed.
    @param offset the offset within that data array to put the first byte read.
    @param count the number of bytes to read.
    @return the number of bytes actually read
*/
- (int) readWithBuffer:(NSMutableData*)buffer offset:(int)offset count:(int)count;

@end

/**

    A certificate to be used for secure communication.

*/
@interface FMLiveSwitchCertificate<__covariant TCertificate, __covariant TFingerprint> : NSObject

/**

    Gets whether the certificate's cryptography
    data should be automatically regenerated when
    it is about to expire. Defaults to <code>true</code>.

*/
- (bool) autoRegenerate;
/**

    Calculates a fingerprint for this certificate.

    @param algorithm The algorithm.
*/
- (TFingerprint) calculateFingerprintWithAlgorithm:(NSString*)algorithm;
/**

    Initializes a new instance of the FMLiveSwitchCertificate`2 class.

*/
+ (FMLiveSwitchCertificate*) certificate;
/**

    Clones this instance.

*/
- (TCertificate) clone;
/**

    Creates a certificate.

*/
- (TCertificate) createCertificate;
/**

    Creates a fingerprint.

    @param algorithm The algorithm.
    @param value The value.
*/
- (TFingerprint) createFingerprintWithAlgorithm:(NSString*)algorithm value:(NSString*)value;
/**

    Gets the effective date.

*/
- (NSDate*) effectiveDate;
/**

    Gets the expiration date.

*/
- (NSDate*) expirationDate;
/**

    Serializes this certificate to binary.

*/
- (FMLiveSwitchDataBuffer*) getBuffer;
/**

    Serializes this certificate to binary.

*/
- (NSMutableData*) getBytes;
/**

    Gets the identifier.

*/
- (NSString*) id;
/**

    Initializes a new instance of the FMLiveSwitchCertificate`2 class.

*/
- (instancetype) init;
/**

    Gets whether the certificate is expired.

*/
- (bool) isExpired;
/**

    Gets whether the certificate is expiring within 24 hours.

*/
- (bool) isExpiring;
/**

    Gets a value indicating whether this certificate is
    sealed and can no longer be modified.

*/
- (bool) isSealed;
/**

    Gets the name of the issuer.

*/
- (NSString*) issuerName;
/**

    Gets the asymmetric key.

*/
- (FMLiveSwitchAsymmetricKey*) key;
/**

    Regenerates the certificate's cryptography data using an
    expiration date of 10 days from now.

*/
- (void) regenerate;
/**

    Regenerates the certificate's cryptography data using the
    given expiration date.

    @param expirationDate The expiration date.
*/
- (void) regenerateWithExpirationDate:(NSDate*)expirationDate;
/**

    Sets whether the certificate's cryptography
    data should be automatically regenerated when
    it is about to expire. Defaults to <code>true</code>.

*/
- (void) setAutoRegenerate:(bool)value;
/**

    Sets the identifier.

*/
- (void) setId:(NSString*)value;
/**

    Sets the asymmetric key.

*/
- (void) setKey:(FMLiveSwitchAsymmetricKey*)value;
/**

    Gets the name of the subject.

*/
- (NSString*) subjectName;

@end

/**

    Class to hold a character value passed by reference.

*/
@interface FMLiveSwitchCharacterHolder : NSObject

/**

    Initializes a new instance of the FMLiveSwitchCharacterHolder class.

*/
+ (FMLiveSwitchCharacterHolder*) characterHolder;
/**

    Initializes a new instance of the FMLiveSwitchCharacterHolder class.

    @param value The value.
*/
+ (FMLiveSwitchCharacterHolder*) characterHolder:(unichar)value;
/**

    Initializes a new instance of the FMLiveSwitchCharacterHolder class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchCharacterHolder class.

    @param value The value.
*/
- (instancetype) initWithValue:(unichar)value;
/**

    Sets the value.

*/
- (void) setValue:(unichar)value;
/**

    Gets the value.

*/
- (unichar) value;

@end

/**

    A circular buffer.

*/
@interface FMLiveSwitchCircularBuffer : NSObject

/**

    Gets the number of bytes available for reading.

*/
- (int) available;
/**

    Initializes a new instance of the FMLiveSwitchCircularBuffer class.

    @param length The length.
    @param latency The latency.
*/
+ (FMLiveSwitchCircularBuffer*) circularBufferWithLength:(int)length latency:(int)latency;
/**

    Initializes a new instance of the FMLiveSwitchCircularBuffer class.

    @param length The length.
    @param latency The latency.
    @param littleEndian Whether the data is little-endian.
*/
+ (FMLiveSwitchCircularBuffer*) circularBufferWithLength:(int)length latency:(int)latency littleEndian:(bool)littleEndian;
/**

    Initializes a new instance of the FMLiveSwitchCircularBuffer class.

    @param length The length.
    @param latency The latency.
*/
- (instancetype) initWithLength:(int)length latency:(int)latency;
/**

    Initializes a new instance of the FMLiveSwitchCircularBuffer class.

    @param length The length.
    @param latency The latency.
    @param littleEndian Whether the data is little-endian.
*/
- (instancetype) initWithLength:(int)length latency:(int)latency littleEndian:(bool)littleEndian;
/**

    Gets the latency.

*/
- (int) latency;
/**

    Gets the length.

*/
- (int) length;
/**

    Gets whether the data is little-endian.

*/
- (bool) littleEndian;
/**

    Gets the read offset.

*/
- (int) readOffset;
/**

    Reads data from the buffer.

    @param length The number of bytes to read.
*/
- (FMLiveSwitchDataBuffer*) readWithLength:(int)length;
/**

    Gets the read offset.

*/
- (int) writeOffset;
/**

    Writes data to the buffer.

    @param buffer The data to write.
*/
- (void) writeWithBuffer:(FMLiveSwitchDataBuffer*)buffer;

@end

/**

    A collection of values.

*/
@interface FMLiveSwitchCollection<__covariant T, __covariant TCollection> : NSObject

/**

    Adds a value.

    @param value The value.
*/
- (bool) add:(T)value;
/**

    Adds some values.

    @param values The values.
*/
- (void) addMany:(NSMutableArray*)values;
/**

    Invoked when an element is added to the collection.

    @param value The value.
*/
- (void) addSuccess:(T)value;
/**

    Invoked after an element is added to the collection.

    @param value The value.
*/
- (void) addSuccessNoLock:(T)value;
/**

    Determined whether the collection contains at least one value.

*/
- (bool) any;
/**

    Determined whether the collection contains at least one value
    that matches the specified predicate.

    @param predicate The predicate.
*/
- (bool) anyWithPredicate:(FMLiveSwitchFunction1<T,id>*)predicate;
/**

    Determined whether the collection contains at least one value
    that matches the specified predicate.

    @inlineparam predicateBlock The predicate.
*/
- (bool (^)(bool(^)(T))) anyWithPredicateBlock;
/**

    Determined whether the collection contains at least one value
    that matches the specified predicate.

    @param predicateBlock The predicate.
*/
- (bool) anyWithPredicateBlock:(bool(^)(T))predicateBlock;
/**

    Creates an array from a list.

    @param list The list.
*/
- (NSMutableArray*) arrayFromList:(NSMutableArray<T>*)list;
/**

    Initializes a new instance of the FMLiveSwitchCollection`2 class.

*/
+ (FMLiveSwitchCollection*) collection;
/**

    Determines whether the collection contains a value.

    @param value The value.
*/
- (bool) contains:(T)value;
/**

    Gets the count.

*/
- (int) count;
/**

    Creates a collection.

*/
- (TCollection) createCollection;
/**

    Gets the first value.
    Throws an exception if there are
    no values in the collection.

*/
- (T) first;
/**

    Gets the first value.
    Returns a default value if there are
    no values in the collection.

*/
- (T) firstOrDefault;
/**

    Gets the first value that matches
    the specified predicate.
    Returns a default value if there are
    no such values in the collection.

    @param predicate The predicate.
*/
- (T) firstOrDefaultWithPredicate:(FMLiveSwitchFunction1<T,id>*)predicate;
/**

    Gets the first value that matches
    the specified predicate.
    Returns a default value if there are
    no such values in the collection.

    @inlineparam predicateBlock The predicate.
*/
- (T (^)(bool(^)(T))) firstOrDefaultWithPredicateBlock;
/**

    Gets the first value that matches
    the specified predicate.
    Returns a default value if there are
    no such values in the collection.

    @param predicateBlock The predicate.
*/
- (T) firstOrDefaultWithPredicateBlock:(bool(^)(T))predicateBlock;
/**

    Gets the first value that matches
    the specified predicate.
    Throws an exception if there are
    no such values in the collection.

    @param predicate The predicate.
*/
- (T) firstWithPredicate:(FMLiveSwitchFunction1<T,id>*)predicate;
/**

    Gets the first value that matches
    the specified predicate.
    Throws an exception if there are
    no such values in the collection.

    @inlineparam predicateBlock The predicate.
*/
- (T (^)(bool(^)(T))) firstWithPredicateBlock;
/**

    Gets the first value that matches
    the specified predicate.
    Throws an exception if there are
    no such values in the collection.

    @param predicateBlock The predicate.
*/
- (T) firstWithPredicateBlock:(bool(^)(T))predicateBlock;
/**

    Executes a callback function once per value.

    @param callback The callback to execute.
*/
- (void) forEachWithCallback:(FMLiveSwitchAction2<T,id>*)callback;
/**

    Executes a callback function once per value.

    @inlineparam callbackBlock The callback to execute.
*/
- (void (^)(void(^)(T, int))) forEachWithCallbackBlock;
/**

    Executes a callback function once per value.

    @param callbackBlock The callback to execute.
*/
- (void) forEachWithCallbackBlock:(void(^)(T, int))callbackBlock;
/**

    Initializes a new instance of the FMLiveSwitchCollection`2 class.

*/
- (instancetype) init;
/**

    Gets the last value.
    Throws an exception if there are
    no values in the collection.

*/
- (T) last;
/**

    Gets the last value.
    Returns a default value if there are
    no values in the collection.

*/
- (T) lastOrDefault;
/**

    Gets the last value that matches
    the specified predicate.
    Returns a default value if there are
    no such values in the collection.

    @param predicate The predicate.
*/
- (T) lastOrDefaultWithPredicate:(FMLiveSwitchFunction1<T,id>*)predicate;
/**

    Gets the last value that matches
    the specified predicate.
    Returns a default value if there are
    no such values in the collection.

    @inlineparam predicateBlock The predicate.
*/
- (T (^)(bool(^)(T))) lastOrDefaultWithPredicateBlock;
/**

    Gets the last value that matches
    the specified predicate.
    Returns a default value if there are
    no such values in the collection.

    @param predicateBlock The predicate.
*/
- (T) lastOrDefaultWithPredicateBlock:(bool(^)(T))predicateBlock;
/**

    Gets the last value that matches
    the specified predicate.
    Throws an exception if there are
    no such values in the collection.

    @param predicate The predicate.
*/
- (T) lastWithPredicate:(FMLiveSwitchFunction1<T,id>*)predicate;
/**

    Gets the last value that matches
    the specified predicate.
    Throws an exception if there are
    no such values in the collection.

    @inlineparam predicateBlock The predicate.
*/
- (T (^)(bool(^)(T))) lastWithPredicateBlock;
/**

    Gets the last value that matches
    the specified predicate.
    Throws an exception if there are
    no such values in the collection.

    @param predicateBlock The predicate.
*/
- (T) lastWithPredicateBlock:(bool(^)(T))predicateBlock;
/**

    Removes a value.

    @param value The value.
*/
- (bool) remove:(T)value;
/**

    Removes all values.

*/
- (void) removeAll;
/**

    Removes the first value.

*/
- (T) removeFirst;
/**

    Removes the first value that matches a given condition.

*/
- (T) removeFirstWithCondition:(FMLiveSwitchFunction1<T,id>*)condition;
/**

    Removes the first value that matches a given condition.

*/
- (T (^)(bool(^)(T))) removeFirstWithConditionBlock;
/**

    Removes the first value that matches a given condition.

*/
- (T) removeFirstWithConditionBlock:(bool(^)(T))conditionBlock;
/**

    Removes the last value.

*/
- (T) removeLast;
/**

    Removes the last value that matches a given condition.

*/
- (T) removeLastWithCondition:(FMLiveSwitchFunction1<T,id>*)condition;
/**

    Removes the last value that matches a given condition.

*/
- (T (^)(bool(^)(T))) removeLastWithConditionBlock;
/**

    Removes the last value that matches a given condition.

*/
- (T) removeLastWithConditionBlock:(bool(^)(T))conditionBlock;
/**

    Removes some values.

    @param values The values.
*/
- (void) removeMany:(NSMutableArray*)values;
/**

    Invoked when an element is removed from the collection.

    @param value The value.
*/
- (void) removeSuccess:(T)value;
/**

    Invoked after an element is removed from the collection.

    @param value The value.
*/
- (void) removeSuccessNoLock:(T)value;
/**

    Replaces the collection with a new set of values.

    @param values The values.
*/
- (void) replace:(NSMutableArray*)values;
/**

    Sets the value.

*/
- (void) setValue:(T)value;
/**

    Sets the values.

*/
- (void) setValues:(NSMutableArray*)value;
/**

    Gets the only value.
    Throws an exception if there are
    no values or more than one value
    in the collection.

*/
- (T) single;
/**

    Gets the only value.
    Returns a default value if there are
    no values or more than one value
    in the collection.

*/
- (T) singleOrDefault;
/**

    Gets the only value that matches
    the specified predicate.
    Returns a default value if there are
    no values or more than one value
    in the collection.

*/
- (T) singleOrDefaultWithPredicate:(FMLiveSwitchFunction1<T,id>*)predicate;
/**

    Gets the only value that matches
    the specified predicate.
    Returns a default value if there are
    no values or more than one value
    in the collection.

*/
- (T (^)(bool(^)(T))) singleOrDefaultWithPredicateBlock;
/**

    Gets the only value that matches
    the specified predicate.
    Returns a default value if there are
    no values or more than one value
    in the collection.

*/
- (T) singleOrDefaultWithPredicateBlock:(bool(^)(T))predicateBlock;
/**

    Gets the only value that matches
    the specified predicate.
    Throws an exception if there are
    no values or more than one value
    in the collection.

*/
- (T) singleWithPredicate:(FMLiveSwitchFunction1<T,id>*)predicate;
/**

    Gets the only value that matches
    the specified predicate.
    Throws an exception if there are
    no values or more than one value
    in the collection.

*/
- (T (^)(bool(^)(T))) singleWithPredicateBlock;
/**

    Gets the only value that matches
    the specified predicate.
    Throws an exception if there are
    no values or more than one value
    in the collection.

*/
- (T) singleWithPredicateBlock:(bool(^)(T))predicateBlock;
/**

    Clones the values into a new array.

*/
- (NSMutableArray*) toArray;
/**

    Gets the value.

*/
- (T) value;
/**

    Gets the value at the specified index.
    Returns a default value if a value does
    not exist at that index.

    @param index The index.
*/
- (T) valueAtOrDefaultWithIndex:(int)index;
/**

    Gets the value at the specified index.
    Throws an exception if a value does
    not exist at that index.

    @param index The index.
*/
- (T) valueAtWithIndex:(int)index;
/**

    Gets the values.

*/
- (NSMutableArray*) values;
/**

    Creates a new collection with values
    that match the specified predicate.

    @param predicate The predicate.
*/
- (TCollection) whereWithPredicate:(FMLiveSwitchFunction2<T,id,id>*)predicate;
/**

    Creates a new collection with values
    that match the specified predicate.

    @inlineparam predicateBlock The predicate.
*/
- (TCollection (^)(bool(^)(T, int))) whereWithPredicateBlock;
/**

    Creates a new collection with values
    that match the specified predicate.

    @param predicateBlock The predicate.
*/
- (TCollection) whereWithPredicateBlock:(bool(^)(T, int))predicateBlock;

@end

/**

    Base class for all logging provider implementations.

*/
@interface FMLiveSwitchLogProvider : NSObject

/**

    Logs a message at the specified log level.

    @param logEvent The log event details.
*/
- (void) doLogWithLogEvent:(FMLiveSwitchLogEvent*)logEvent;
/**

    Gets a filter on the log provider.
    Returning `true` will log the event,
    while returning `false` will skip it.

*/
- (FMLiveSwitchFunction1<FMLiveSwitchLogEvent*,id>*) filter;
/**

    Generates a default log line.

    @param logEvent The log event details.
*/
- (NSString*) generateLogLineWithLogEvent:(FMLiveSwitchLogEvent*)logEvent;
/**

    Converts a log-level to a 5-character string for
    consistently-spaced character sequences.

    @param level The log level.
    @return The log level as an upper-case string
            with right-side whitespace padding to ensure
            a 5-character sequence.
*/
+ (NSString*) getLogLevelStringWithLevel:(FMLiveSwitchLogLevel)level;
/**

    Converts a timestamp to an ISO-8601-formatted string
    for rendering in a log message (YYYY-MM-DDThh:mm:ss.sssZ).

    @param timestamp The timestamp.
    @return The timestamp as a formatted string.
*/
+ (NSString*) getPrefixTimestamp:(NSDate*)timestamp;
/**

    Converts a log-level to a 5-character string for
    consistently-spaced character sequences.

    @param level The log level.
    @param includeTimestamp Whether to include a timestamp in the prefix.
    @return The log level as an upper-case string
            with right-side whitespace padding to ensure
            a 5-character sequence.
*/
- (NSString*) getPrefixWithLevel:(FMLiveSwitchLogLevel)level includeTimestamp:(bool)includeTimestamp;
/**

    Returns the name of the current product.

*/
+ (NSString*) getProduct;
/**

    Initializes a new instance of the FMLiveSwitchLogProvider class
    using FMLiveSwitchLog#defaultLogLevel as the log level.

*/
- (instancetype) init;
/**

    Gets the log level.

*/
- (FMLiveSwitchLogLevel) level;
/**

    Initializes a new instance of the FMLiveSwitchLogProvider class
    using FMLiveSwitchLog#defaultLogLevel as the log level.

*/
+ (FMLiveSwitchLogProvider*) logProvider;
/**

    Log a message.

    @param logEvent The log event details.
*/
- (void) logWithLogEvent:(FMLiveSwitchLogEvent*)logEvent;
/**

    Gets the current process id.

*/
- (int) processId;
/**

    Sets a filter on the log provider.
    Returning `true` will log the event,
    while returning `false` will skip it.

*/
- (void) setFilter:(FMLiveSwitchFunction1<FMLiveSwitchLogEvent*,id>*)value;
/**

    Sets a filter on the log provider.
    Returning `true` will log the event,
    while returning `false` will skip it.

*/
- (void (^)(bool(^)(FMLiveSwitchLogEvent*))) setFilterBlock;
/**

    Sets a filter on the log provider.
    Returning `true` will log the event,
    while returning `false` will skip it.

*/
- (void) setFilterBlock:(bool(^)(FMLiveSwitchLogEvent*))valueBlock;
/**

    Sets the log level.

*/
- (void) setLevel:(FMLiveSwitchLogLevel)value;

@end

/**

    A utility class that allows a continuous stream
    of data to be written to it with properly framed
    messages being read out of it. This class is
    not thread-safe for concurrent reads/writes.

*/
@interface FMLiveSwitchDataBufferFramer : NSObject

/**

    Gets the available data.

*/
- (FMLiveSwitchDataBuffer*) availableDataBuffer;
/**

    Gets the available length.

*/
- (int) availableLength;
/**

    Initializes a new instance of the FMLiveSwitchDataBufferFramer class.

*/
+ (FMLiveSwitchDataBufferFramer*) dataBufferFramer;
/**

    Destroys this instance.

*/
- (void) destroy;
/**

    Gets the size of the internal data buffer, in bytes.

*/
- (int) footprint;
/**

    Gets the hexadecimal string representing the current contents of the data buffer.

*/
- (NSString*) getHexString;
/**

    Initializes a new instance of the FMLiveSwitchDataBufferFramer class.

*/
- (instancetype) init;
/**

    Reads a data buffer from the internal data buffer.

    @param getFrameLength A callback that returns the next frame length.
*/
- (FMLiveSwitchDataBuffer*) readWithGetFrameLength:(FMLiveSwitchFunction1<FMLiveSwitchDataBuffer*,id>*)getFrameLength;
/**

    Reads a data buffer from the internal data buffer.

    @inlineparam getFrameLengthBlock A callback that returns the next frame length.
*/
- (FMLiveSwitchDataBuffer* (^)(int(^)(FMLiveSwitchDataBuffer*))) readWithGetFrameLengthBlock;
/**

    Reads a data buffer from the internal data buffer.

    @param getFrameLengthBlock A callback that returns the next frame length.
*/
- (FMLiveSwitchDataBuffer*) readWithGetFrameLengthBlock:(int(^)(FMLiveSwitchDataBuffer*))getFrameLengthBlock;
/**

    Writes a data buffer to the internal data buffer.

    @param dataBuffer The data buffer.
*/
- (void) writeWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;

@end

/**

    A record that calculates the min, max, and average from integer samples.

*/
@interface FMLiveSwitchDiagnosticSampler : NSObject

/**

    Adds a new sample to the calculation.

    @param longSample The sample to add.
*/
- (void) addSampleWithLongSample:(long long)longSample;
/**

    Gets the average of all samples.

*/
- (double) average;
/**

    Gets how many samples this record has used.

*/
- (long long) count;
/**

    Creates a new instance of the DiagnosticRecord.

*/
+ (FMLiveSwitchDiagnosticSampler*) diagnosticSampler;
/**

    Creates a new instance of the DiagnosticRecord.

    @param averageSampleCount How many samples to include in the average.
*/
+ (FMLiveSwitchDiagnosticSampler*) diagnosticSamplerWithAverageSampleCount:(int)averageSampleCount;
/**

    Creates a new instance of the DiagnosticRecord.

    @param averageSampleCount How many samples to include in the average.
    @param label The label for this sampler.
*/
+ (FMLiveSwitchDiagnosticSampler*) diagnosticSamplerWithAverageSampleCount:(int)averageSampleCount label:(NSString*)label;
/**

    Creates a new instance of the DiagnosticRecord.

    @param label The label for this sampler.
*/
+ (FMLiveSwitchDiagnosticSampler*) diagnosticSamplerWithLabel:(NSString*)label;
/**

    Creates a new instance of the DiagnosticRecord.

*/
- (instancetype) init;
/**

    Creates a new instance of the DiagnosticRecord.

    @param averageSampleCount How many samples to include in the average.
*/
- (instancetype) initWithAverageSampleCount:(int)averageSampleCount;
/**

    Creates a new instance of the DiagnosticRecord.

    @param averageSampleCount How many samples to include in the average.
    @param label The label for this sampler.
*/
- (instancetype) initWithAverageSampleCount:(int)averageSampleCount label:(NSString*)label;
/**

    Creates a new instance of the DiagnosticRecord.

    @param label The label for this sampler.
*/
- (instancetype) initWithLabel:(NSString*)label;
/**

    Gets the label for this sampler.

*/
- (NSString*) label;
/**

    Gets the value of the last sample recorded.

*/
- (long long) lastValue;
/**

    Gets the maximum sample ever recorded.

*/
- (long long) max;
/**

    Gets the minimum sample ever recorded.

*/
- (long long) min;
/**

    Gets how many samples are included in the average.

*/
- (int) samplesInAverage;
/**

    Gets the sum of all values.

*/
- (long long) sum;

@end

/**

    A dispatch queue.

*/
@interface FMLiveSwitchDispatchQueue<__covariant T> : NSObject<FMLiveSwitchIDispatchQueue>

/**

    Destroys the queue.

*/
- (void) destroy;
/**

    Initializes a new instance of the FMLiveSwitchDispatchQueue`1 class.

    @param action The processing action.
*/
+ (FMLiveSwitchDispatchQueue*) dispatchQueueWithAction:(FMLiveSwitchAction1<T>*)action;
/**

    Initializes a new instance of the FMLiveSwitchDispatchQueue`1 class.

    @param actionBlock The processing action.
*/
+ (FMLiveSwitchDispatchQueue*) dispatchQueueWithActionBlock:(void(^)(T))actionBlock;
/**

    Initializes a new instance of the FMLiveSwitchDispatchQueue`1 class.

    @param func The processing function.
*/
+ (FMLiveSwitchDispatchQueue*) dispatchQueueWithFunc:(FMLiveSwitchFunction1<T,FMLiveSwitchFuture<id>*>*)func;
/**

    Initializes a new instance of the FMLiveSwitchDispatchQueue`1 class.

    @param funcBlock The processing function.
*/
+ (FMLiveSwitchDispatchQueue*) dispatchQueueWithFuncBlock:(FMLiveSwitchFuture<id>*(^)(T))funcBlock;
/**

    Enqueues an item for processing.

    @param item The item.
*/
- (void) enqueueWithItem:(T)item;
/**

    Initializes a new instance of the FMLiveSwitchDispatchQueue`1 class.

    @param action The processing action.
*/
- (instancetype) initWithAction:(FMLiveSwitchAction1<T>*)action;
/**

    Initializes a new instance of the FMLiveSwitchDispatchQueue`1 class.

    @param actionBlock The processing action.
*/
- (instancetype) initWithActionBlock:(void(^)(T))actionBlock;
/**

    Initializes a new instance of the FMLiveSwitchDispatchQueue`1 class.

    @param func The processing function.
*/
- (instancetype) initWithFunc:(FMLiveSwitchFunction1<T,FMLiveSwitchFuture<id>*>*)func;
/**

    Initializes a new instance of the FMLiveSwitchDispatchQueue`1 class.

    @param funcBlock The processing function.
*/
- (instancetype) initWithFuncBlock:(FMLiveSwitchFuture<id>*(^)(T))funcBlock;
/**

    Gets the number of items in the queue.

*/
- (long long) queueCount;
/**

    Blocks until the queue is empty.

*/
- (void) waitForDrain;

@end

/**

    A certificate to be used for DTLS communication.

*/
@interface FMLiveSwitchDtlsCertificate : FMLiveSwitchCertificate<FMLiveSwitchDtlsCertificate*,FMLiveSwitchDtlsFingerprint*>

/**

    Creates the certificate.

*/
- (FMLiveSwitchDtlsCertificate*) createCertificate;
/**

    Creates a fingerprint.

    @param algorithm The algorithm.
    @param value The value.
*/
- (FMLiveSwitchDtlsFingerprint*) createFingerprintWithAlgorithm:(NSString*)algorithm value:(NSString*)value;
/**

    Gets the default asymmetric key type (ECDSA).

*/
+ (FMLiveSwitchAsymmetricKeyType) defaultKeyType;
+ (FMLiveSwitchDtlsCertificate*) dtlsCertificate;
/**

    Generates a certificate with a default issuer/subject name and
    an expiration date of 10 days from now.

*/
+ (FMLiveSwitchDtlsCertificate*) generateCertificate;
/**

    Generates a certificate using the issuer/subject name from an
    old certificate and an expiration date of 10 days from now.

    @param oldCertificate The old certificate.
*/
+ (FMLiveSwitchDtlsCertificate*) generateCertificateFromOldCertificate:(FMLiveSwitchDtlsCertificate*)oldCertificate;
/**

    Generates a certificate using the issuer/subject name from an
    old certificate and the given expiration date.

    @param oldCertificate The old certificate.
    @param expirationDate The expiration date.
*/
+ (FMLiveSwitchDtlsCertificate*) generateCertificateFromOldCertificate:(FMLiveSwitchDtlsCertificate*)oldCertificate expirationDate:(NSDate*)expirationDate;
/**

    Generates a certificate with the given issuer name, subject name, and
    an expiration date of 10 days from now.

    @param issuerName The name of the issuer.
    @param subjectName The name of the subject.
*/
+ (FMLiveSwitchDtlsCertificate*) generateCertificateWithIssuerName:(NSString*)issuerName subjectName:(NSString*)subjectName;
/**

    Generates a certificate with the given issuer name, subject name, and expiration date.

    @param issuerName The name of the issuer.
    @param subjectName The name of the subject.
    @param expirationDate The expiration date.
*/
+ (FMLiveSwitchDtlsCertificate*) generateCertificateWithIssuerName:(NSString*)issuerName subjectName:(NSString*)subjectName expirationDate:(NSDate*)expirationDate;
/**

    Generates a certificate with the given issuer name, subject name, expiration date, and asymmetric key.

    @param issuerName The name of the issuer.
    @param subjectName The name of the subject.
    @param expirationDate The expiration date.
    @param key The asymmetric key (with public and private details).
*/
+ (FMLiveSwitchDtlsCertificate*) generateCertificateWithIssuerName:(NSString*)issuerName subjectName:(NSString*)subjectName expirationDate:(NSDate*)expirationDate key:(FMLiveSwitchAsymmetricKey*)key;
/**

    Generates a certificate with the given issuer name, subject name, expiration date, and asymmetric key.

    @param issuerName The name of the issuer.
    @param subjectName The name of the subject.
    @param expirationDate The expiration date.
    @param keyType The asymmetric key type.
*/
+ (FMLiveSwitchDtlsCertificate*) generateCertificateWithIssuerName:(NSString*)issuerName subjectName:(NSString*)subjectName expirationDate:(NSDate*)expirationDate keyType:(FMLiveSwitchAsymmetricKeyType)keyType;
/**

    Generates a certificate with the given issuer name, subject name, and
    an expiration date of 10 days from now.

    @param issuerName The name of the issuer.
    @param subjectName The name of the subject.
    @param key The asymmetric key (with public and private details).
*/
+ (FMLiveSwitchDtlsCertificate*) generateCertificateWithIssuerName:(NSString*)issuerName subjectName:(NSString*)subjectName key:(FMLiveSwitchAsymmetricKey*)key;
/**

    Generates a certificate with the given issuer name, subject name, and
    an expiration date of 10 days from now.

    @param issuerName The name of the issuer.
    @param subjectName The name of the subject.
    @param keyType The asymmetric key type.
*/
+ (FMLiveSwitchDtlsCertificate*) generateCertificateWithIssuerName:(NSString*)issuerName subjectName:(NSString*)subjectName keyType:(FMLiveSwitchAsymmetricKeyType)keyType;
/**

    Generates a certificate with a default issuer/subject name and
    an expiration date of 10 days from now.

    @param key The asymmetric key (with public and private details).
*/
+ (FMLiveSwitchDtlsCertificate*) generateCertificateWithKey:(FMLiveSwitchAsymmetricKey*)key;
/**

    Generates a certificate with a default issuer/subject name and
    an expiration date of 10 days from now.

    @param keyType The asymmetric key type.
*/
+ (FMLiveSwitchDtlsCertificate*) generateCertificateWithKeyType:(FMLiveSwitchAsymmetricKeyType)keyType;
/**

    Generates a certificate with the given issuer/subject name and an
    expiration date of 10 days from now.

    @param name The name of the issuer/subject.
*/
+ (FMLiveSwitchDtlsCertificate*) generateCertificateWithName:(NSString*)name;
/**

    Generates a certificate with the given issuer/subject name and an
    expiration date of 10 days from now.

    @param name The name of the issuer/subject.
    @param key The asymmetric key (with public and private details).
*/
+ (FMLiveSwitchDtlsCertificate*) generateCertificateWithName:(NSString*)name key:(FMLiveSwitchAsymmetricKey*)key;
/**

    Generates a certificate with the given issuer/subject name and an
    expiration date of 10 days from now.

    @param name The name of the issuer/subject.
    @param keyType The asymmetric key type.
*/
+ (FMLiveSwitchDtlsCertificate*) generateCertificateWithName:(NSString*)name keyType:(FMLiveSwitchAsymmetricKeyType)keyType;
- (instancetype) init;
/**

    Deserializes a certificate from binary.

    @param bytes The bytes.
*/
+ (FMLiveSwitchDtlsCertificate*) parseBytes:(NSMutableData*)bytes;
/**

    Sets the default asymmetric key type (ECDSA).

*/
+ (void) setDefaultKeyType:(FMLiveSwitchAsymmetricKeyType)value;

@end

/**

    A fingerprint.

*/
@interface FMLiveSwitchFingerprint : NSObject

/**

    Gets the algorithm.

*/
- (NSString*) algorithm;
/**

    Initializes a new instance of the FMLiveSwitchFingerprint class.

    @param algorithm The algorithm.
    @param value The value.
*/
+ (FMLiveSwitchFingerprint*) fingerprintWithAlgorithm:(NSString*)algorithm value:(NSString*)value;
/**

    Initializes a new instance of the FMLiveSwitchFingerprint class.

    @param algorithm The algorithm.
    @param value The value.
*/
- (instancetype) initWithAlgorithm:(NSString*)algorithm value:(NSString*)value;
/**

    Gets the MD2 algorithm.

*/
+ (NSString*) md2Algorithm;
/**

    Gets the MD5 algorithm.

*/
+ (NSString*) md5Algorithm;
/**

    Gets the SHA-1 algorithm.

*/
+ (NSString*) sha1Algorithm;
/**

    Gets the SHA-224 algorithm.

*/
+ (NSString*) sha224Algorithm;
/**

    Gets the SHA-256 algorithm.

*/
+ (NSString*) sha256Algorithm;
/**

    Gets the SHA-384 algorithm.

*/
+ (NSString*) sha384Algorithm;
/**

    Gets the SHA-512 algorithm.

*/
+ (NSString*) sha512Algorithm;
/**

    Gets the value.

*/
- (NSString*) value;

@end

/**

    A DTLS fingerprint.

*/
@interface FMLiveSwitchDtlsFingerprint : FMLiveSwitchFingerprint

/**

    Initializes a new instance of the FMLiveSwitchDtlsFingerprint class.

    @param algorithm The algorithm.
    @param value The value.
*/
+ (FMLiveSwitchDtlsFingerprint*) dtlsFingerprintWithAlgorithm:(NSString*)algorithm value:(NSString*)value;
/**

    Initializes a new instance of the FMLiveSwitchDtlsFingerprint class.

    @param algorithm The algorithm.
    @param value The value.
*/
- (instancetype) initWithAlgorithm:(NSString*)algorithm value:(NSString*)value;

@end

@interface FMLiveSwitchEcdsaNamedCurveWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchEcdsaNamedCurve)value;

@end

/**

    Utility class to assist with ISO-8601 timestamp conversions.

*/
@interface FMLiveSwitchIso8601Timestamp : NSObject

/**

    Converts a date to a ISO-8601 timestamp.

    @param dateTime The date to convert.
    @return The equivalent ISO-8601 timestamp.
*/
+ (NSString*) dateTimeToIso8601WithDateTime:(NSDate*)dateTime;
- (instancetype) init;
+ (FMLiveSwitchIso8601Timestamp*) iso8601Timestamp;
/**

    Converts a ISO-8601 timestamp to a date.

    @param iso8601 The ISO-8601 timestamp to convert.
    @return The equivalent date.
*/
+ (NSDate*) iso8601ToDateTimeWithIso8601:(NSString*)iso8601;
/**

    Gets the current UTC time in ISO-8601 format.

*/
+ (NSString*) utcNow;

@end

@interface FMLiveSwitchNetworkTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchNetworkType)value;

@end

/**

    A log provider that sends logs to LogStash.

*/
@interface FMLiveSwitchLogStashLogProvider : FMLiveSwitchLogProvider

/**

    Gets the LogStash server address.

*/
- (NSString*) address;
/**

    Logs a message at the specified log level.

    @param logEvent The log event details.
*/
- (void) doLogWithLogEvent:(FMLiveSwitchLogEvent*)logEvent;
/**

    Creates a new instance of a LogStash log provider using FMLiveSwitchLog#defaultLogLevel as log level.

    @param address The LogStash server address.
    @param port The LogStash server port.
    @param useSSL Whether to use SSL/TLS when connecting to the LogStash server.
*/
- (instancetype) initWithAddress:(NSString*)address port:(int)port useSSL:(bool)useSSL;
/**

    Creates a new instance of a LogStash log provider.

    @param address The address of LogStash.
    @param port The port of LogStash.
    @param useSSL Whether to use SSL/TLS when connecting to the LogStash server.
    @param level The initial log level.
*/
- (instancetype) initWithAddress:(NSString*)address port:(int)port useSSL:(bool)useSSL level:(FMLiveSwitchLogLevel)level;
/**

    Creates a new instance of a LogStash log provider using FMLiveSwitchLog#defaultLogLevel as log level.

    @param address The LogStash server address.
    @param port The LogStash server port.
    @param useSSL Whether to use SSL/TLS when connecting to the LogStash server.
*/
+ (FMLiveSwitchLogStashLogProvider*) logStashLogProviderWithAddress:(NSString*)address port:(int)port useSSL:(bool)useSSL;
/**

    Creates a new instance of a LogStash log provider.

    @param address The address of LogStash.
    @param port The port of LogStash.
    @param useSSL Whether to use SSL/TLS when connecting to the LogStash server.
    @param level The initial log level.
*/
+ (FMLiveSwitchLogStashLogProvider*) logStashLogProviderWithAddress:(NSString*)address port:(int)port useSSL:(bool)useSSL level:(FMLiveSwitchLogLevel)level;
/**

    Gets the LogStash server port.

*/
- (int) port;

@end

/**

    A countdown latch that will signal when the counter reaches zero.

*/
@interface FMLiveSwitchManagedCountdownLatch : NSObject

/**

    Gets the current count on the latch.

*/
- (int) count;
/**

    Decrements the counter by one and signals if it reaches zero.

*/
- (void) decrement;
/**

    Generates a string description of this instance.

*/
- (NSString*) description;
/**

    Creates a new instance of the latch with an unknown count.
    This will cause the latch to count into the negatives until SetCount is called.

*/
- (instancetype) init;
/**

    Creates a new instance of the latch with a count.

    @param initialCount The initial counter value.
*/
- (instancetype) initWithInitialCount:(int)initialCount;
/**

    Creates a new instance of the latch with an unknown count.
    This will cause the latch to count into the negatives until SetCount is called.

*/
+ (FMLiveSwitchManagedCountdownLatch*) managedCountdownLatch;
/**

    Creates a new instance of the latch with a count.

    @param initialCount The initial counter value.
*/
+ (FMLiveSwitchManagedCountdownLatch*) managedCountdownLatchWithInitialCount:(int)initialCount;
/**

    Resets the latch with an unknown count.
    This will cause the latch to count into the negatives until SetCount is called.

*/
- (void) reset;
/**

    Resets the latch with a count.

    @param initialCount The initial counter value.
*/
- (void) resetWithInitialCount:(int)initialCount;
/**

    Sets the counter for the latch.
    This brings the count back up into positive numbers.

*/
- (void) setCount:(int)count;
/**

    Returns a promise that resolves once the counter reaches zero.

*/
- (FMLiveSwitchFuture<id>*) waitAsync;
/**

    Blocks until the counter reaches zero.

*/
- (void) waitSync;

@end

@interface FMLiveSwitchOperatingSystemWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchOperatingSystem)value;

@end

@interface FMLiveSwitchArchitectureWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchArchitecture)value;

@end

/**

    A pool of objects.

*/
@interface FMLiveSwitchPool<__covariant T> : NSObject

/**

    Gets the number of available objects.

*/
- (int) available;
/**

    Removes all items from the pool and calls a callback for each one.

    @param destroyCallback 
*/
- (bool) destroyWithDestroyCallback:(FMLiveSwitchAction1<T>*)destroyCallback;
/**

    Removes all items from the pool and calls a callback for each one.

    @inlineparam destroyCallbackBlock 
*/
- (bool (^)(void(^)(T))) destroyWithDestroyCallbackBlock;
/**

    Removes all items from the pool and calls a callback for each one.

    @param destroyCallbackBlock 
*/
- (bool) destroyWithDestroyCallbackBlock:(void(^)(T))destroyCallbackBlock;
/**

    Gets an object.

*/
- (T) get;
/**

    Initializes a new instance of the FMLiveSwitchPool`1 class
    with a minimum size of 0 and a maximum size of 2,147,483,647.

    @param createObject A function that creates an object.
*/
- (instancetype) initWithCreateObject:(FMLiveSwitchFunction0<T>*)createObject;
/**

    Initializes a new instance of the FMLiveSwitchPool`1 class
    with a specified minimum size and a maximum size of 2,147,483,647.

    @param createObject A function that creates an object.
    @param minSize The minimum size.
*/
- (instancetype) initWithCreateObject:(FMLiveSwitchFunction0<T>*)createObject minSize:(int)minSize;
/**

    Initializes a new instance of the FMLiveSwitchPool`1 class.
    with a specified minimum size and a specified maximum size.

    @param createObject A function that creates an object.
    @param minSize The minimum size.
    @param maxSize The maximum size.
*/
- (instancetype) initWithCreateObject:(FMLiveSwitchFunction0<T>*)createObject minSize:(int)minSize maxSize:(int)maxSize;
/**

    Initializes a new instance of the FMLiveSwitchPool`1 class
    with a minimum size of 0 and a maximum size of 2,147,483,647.

    @param createObjectBlock A function that creates an object.
*/
- (instancetype) initWithCreateObjectBlock:(T(^)(void))createObjectBlock;
/**

    Initializes a new instance of the FMLiveSwitchPool`1 class
    with a specified minimum size and a maximum size of 2,147,483,647.

    @param createObjectBlock A function that creates an object.
    @param minSize The minimum size.
*/
- (instancetype) initWithCreateObjectBlock:(T(^)(void))createObjectBlock minSize:(int)minSize;
/**

    Initializes a new instance of the FMLiveSwitchPool`1 class.
    with a specified minimum size and a specified maximum size.

    @param createObjectBlock A function that creates an object.
    @param minSize The minimum size.
    @param maxSize The maximum size.
*/
- (instancetype) initWithCreateObjectBlock:(T(^)(void))createObjectBlock minSize:(int)minSize maxSize:(int)maxSize;
/**

    Gets the maximum size. Value must be &gt;= 0.
    A value of 0 indicates no maximum.

*/
- (int) maxSize;
/**

    Gets the minimum size. Value must be &gt;= 0.

*/
- (int) minSize;
/**

    Initializes a new instance of the FMLiveSwitchPool`1 class
    with a minimum size of 0 and a maximum size of 2,147,483,647.

    @param createObject A function that creates an object.
*/
+ (FMLiveSwitchPool*) poolWithCreateObject:(FMLiveSwitchFunction0<T>*)createObject;
/**

    Initializes a new instance of the FMLiveSwitchPool`1 class
    with a specified minimum size and a maximum size of 2,147,483,647.

    @param createObject A function that creates an object.
    @param minSize The minimum size.
*/
+ (FMLiveSwitchPool*) poolWithCreateObject:(FMLiveSwitchFunction0<T>*)createObject minSize:(int)minSize;
/**

    Initializes a new instance of the FMLiveSwitchPool`1 class.
    with a specified minimum size and a specified maximum size.

    @param createObject A function that creates an object.
    @param minSize The minimum size.
    @param maxSize The maximum size.
*/
+ (FMLiveSwitchPool*) poolWithCreateObject:(FMLiveSwitchFunction0<T>*)createObject minSize:(int)minSize maxSize:(int)maxSize;
/**

    Initializes a new instance of the FMLiveSwitchPool`1 class
    with a minimum size of 0 and a maximum size of 2,147,483,647.

    @param createObjectBlock A function that creates an object.
*/
+ (FMLiveSwitchPool*) poolWithCreateObjectBlock:(T(^)(void))createObjectBlock;
/**

    Initializes a new instance of the FMLiveSwitchPool`1 class
    with a specified minimum size and a maximum size of 2,147,483,647.

    @param createObjectBlock A function that creates an object.
    @param minSize The minimum size.
*/
+ (FMLiveSwitchPool*) poolWithCreateObjectBlock:(T(^)(void))createObjectBlock minSize:(int)minSize;
/**

    Initializes a new instance of the FMLiveSwitchPool`1 class.
    with a specified minimum size and a specified maximum size.

    @param createObjectBlock A function that creates an object.
    @param minSize The minimum size.
    @param maxSize The maximum size.
*/
+ (FMLiveSwitchPool*) poolWithCreateObjectBlock:(T(^)(void))createObjectBlock minSize:(int)minSize maxSize:(int)maxSize;
/**

    Put an object back.

    @param item 
*/
- (bool) putWithItem:(T)item;
/**

    Gets the current size of the pool.

*/
- (int) size;

@end

@interface FMLiveSwitchProtocolTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchProtocolType)value;

@end

/**

    An elliptic-curve key.

*/
@interface FMLiveSwitchEcdsaKey : FMLiveSwitchAsymmetricKey

+ (FMLiveSwitchEcdsaKey*) ecdsaKey;
/**

    Serializes this key to binary.

*/
- (NSMutableData*) getBytes;
/**

    Serializes this key to a string.

*/
- (NSString*) getString;
/**

    Returns `true` if the key contains
    private information.

*/
- (bool) hasPrivate;
/**

    Returns `true` if the key contains
    public information.

*/
- (bool) hasPublic;
- (instancetype) init;
/**

    Gets the named curve.

*/
- (FMLiveSwitchEcdsaNamedCurve) namedCurve;
/**

    Deserializes a key from binary.

    @param buffer The buffer.
    @param isPrivate Whether this is a public key.
*/
+ (FMLiveSwitchEcdsaKey*) parseBuffer:(FMLiveSwitchDataBuffer*)buffer isPrivate:(bool)isPrivate;
/**

    Deserializes a key from binary.

    @param bytes The bytes.
    @param isPrivate Whether this is a public key.
*/
+ (FMLiveSwitchEcdsaKey*) parseBytes:(NSMutableData*)bytes isPrivate:(bool)isPrivate;
/**

    Parses a signature.

    @param signature The signature.
    @param r The R value.
    @param s The S value.
*/
+ (bool) parseSignature:(NSMutableData*)signature r:(NSMutableData**)r s:(NSMutableData**)s;
/**

    Deserializes a key from a string.

    @param str The string.
*/
+ (FMLiveSwitchEcdsaKey*) parseStringWithStr:(NSString*)str;
/**

    Gets the private key.

*/
- (NSMutableData*) privateKey;
/**

    Gets the public key.

*/
- (NSMutableData*) publicKey;
/**

    Sets the named curve.

*/
- (void) setNamedCurve:(FMLiveSwitchEcdsaNamedCurve)value;
/**

    Sets the private key.

*/
- (void) setPrivateKey:(NSMutableData*)value;
/**

    Sets the public key.

*/
- (void) setPublicKey:(NSMutableData*)value;
/**

    Gets the size of the key.

*/
- (int) size;
/**

    Creates a copy of this key without the private key.

*/
- (FMLiveSwitchEcdsaKey*) toPublic;
/**

    Gets the key type.

*/
- (FMLiveSwitchAsymmetricKeyType) type;

@end

@interface FMLiveSwitchSourceLanguageWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchSourceLanguage)value;

@end

/**

    Provides methods for serializing/deserializing .NET value types to/from JSON
    as well as facilities for converting objects and arrays if appropriate callbacks
    are supplied to assist with the conversion.

*/
@interface FMLiveSwitchJsonSerializer : NSObject

/**

    Deserializes a boolean array from JSON.

    @param arrayJson A JSON-serialized boolean array.
    @return An array of boolean values.
*/
+ (NSMutableArray*) deserializeBooleanArrayWithArrayJson:(NSString*)arrayJson;
/**

    Deserializes a boolean value.

    @param valueJson The boolean JSON to deserialize.
    @return The deserialized boolean value.
*/
+ (FMLiveSwitchNullableBool*) deserializeBooleanWithValueJson:(NSString*)valueJson;
/**

    Deserializes a decimal array from JSON.

    @param arrayJson A JSON-serialized decimal array.
    @return An array of decimal values.
*/
+ (NSMutableArray*) deserializeDecimalArrayWithArrayJson:(NSString*)arrayJson;
/**

    Deserializes a decimal value.

    @param valueJson The decimal JSON to deserialize.
    @return The deserialized decimal value.
*/
+ (FMLiveSwitchNullableDecimal*) deserializeDecimalWithValueJson:(NSString*)valueJson;
/**

    Deserializes a JSON string into a dictionary.

    @param dictionaryJson The JSON-encoded dictionary.
    @param createDictionaryCallback The callback that creates a blank dictionary.
    @param deserializeValueCallback The callback that deserializes a value.
    @return 
            The deserialized dictionary.
            
*/
+ (NSMutableDictionary<NSString*,id>*) deserializeDictionaryWithDictionaryJson:(NSString*)dictionaryJson createDictionaryCallback:(FMLiveSwitchFunction0<NSMutableDictionary<NSString*,id>*>*)createDictionaryCallback deserializeValueCallback:(FMLiveSwitchFunction1<NSString*,id>*)deserializeValueCallback;
/**

    Deserializes a JSON string into a dictionary.

    @param dictionaryJson The JSON-encoded dictionary.
    @param createDictionaryCallbackBlock The callback that creates a blank dictionary.
    @param deserializeValueCallbackBlock The callback that deserializes a value.
    @return 
            The deserialized dictionary.
            
*/
+ (NSMutableDictionary<NSString*,id>*) deserializeDictionaryWithDictionaryJson:(NSString*)dictionaryJson createDictionaryCallbackBlock:(NSMutableDictionary<NSString*,id>*(^)(void))createDictionaryCallbackBlock deserializeValueCallbackBlock:(id(^)(NSString*))deserializeValueCallbackBlock;
/**

    Deserializes a JSON string into a dictionary.

    @inlineparam dictionaryJson The JSON-encoded dictionary.
    @inlineparam createDictionaryCallbackBlock The callback that creates a blank dictionary.
    @inlineparam deserializeValueCallbackBlock The callback that deserializes a value.
    @return 
            The deserialized dictionary.
            
*/
+ (NSMutableDictionary<NSString*,id>* (^)(NSString*, NSMutableDictionary<NSString*,id>*(^)(void), id(^)(NSString*))) deserializeDictionaryWithDictionaryJsonAndCreateDictionaryCallbackBlockAndDeserializeValueCallbackBlock;
/**

    Deserializes a double array from JSON.

    @param arrayJson A JSON-serialized double array.
    @return An array of double values.
*/
+ (NSMutableArray*) deserializeDoubleArrayWithArrayJson:(NSString*)arrayJson;
/**

    Deserializes a double value.

    @param valueJson The double JSON to deserialize.
    @return The deserialized double value.
*/
+ (FMLiveSwitchNullableDouble*) deserializeDoubleWithValueJson:(NSString*)valueJson;
/**

    Deserializes a float array from JSON.

    @param arrayJson A JSON-serialized float array.
    @return An array of float values.
*/
+ (NSMutableArray*) deserializeFloatArrayWithArrayJson:(NSString*)arrayJson;
/**

    Deserializes a float value.

    @param valueJson The float JSON to deserialize.
    @return The deserialized float value.
*/
+ (FMLiveSwitchNullableFloat*) deserializeFloatWithValueJson:(NSString*)valueJson;
/**

    Deserializes a GUID array from JSON.

    @param arrayJson A JSON-serialized GUID array.
    @return An array of GUID values.
*/
+ (NSMutableArray*) deserializeGuidArrayWithArrayJson:(NSString*)arrayJson;
/**

    Deserializes a globally unique identifier.

    @param valueJson The GUID JSON to deserialize.
    @return The deserialized GUID.
*/
+ (FMLiveSwitchNullableGuid*) deserializeGuidWithValueJson:(NSString*)valueJson;
/**

    Deserializes a integer array from JSON.

    @param arrayJson A JSON-serialized integer array.
    @return An array of integer values.
*/
+ (NSMutableArray*) deserializeIntegerArrayWithArrayJson:(NSString*)arrayJson;
/**

    Deserializes an integer value.

    @param valueJson The integer JSON to deserialize.
    @return The deserialized integer value.
*/
+ (FMLiveSwitchNullableInt*) deserializeIntegerWithValueJson:(NSString*)valueJson;
/**

    Deserializes a long array from JSON.

    @param arrayJson A JSON-serialized long array.
    @return An array of long values.
*/
+ (NSMutableArray*) deserializeLongArrayWithArrayJson:(NSString*)arrayJson;
/**

    Deserializes a long value.

    @param valueJson The long JSON to deserialize.
    @return The deserialized long value.
*/
+ (FMLiveSwitchNullableLong*) deserializeLongWithValueJson:(NSString*)valueJson;
/**

    Deserializes a JSON string into an array of target object types.

    @param json The JSON-encoded string.
    @param deserializer The callback used to deserialize each item in the array.
    @return An array of deserialized objects.
*/
+ (NSMutableArray<id>*) deserializeObjectArrayWithJson:(NSString*)json deserializer:(FMLiveSwitchFunction1<NSString*,id>*)deserializer;
/**

    Deserializes a JSON string into an array of target object types.

    @param json The JSON-encoded string.
    @param deserializerBlock The callback used to deserialize each item in the array.
    @return An array of deserialized objects.
*/
+ (NSMutableArray<id>*) deserializeObjectArrayWithJson:(NSString*)json deserializerBlock:(id(^)(NSString*))deserializerBlock;
/**

    Deserializes a JSON string into an array of target object types.

    @inlineparam json The JSON-encoded string.
    @inlineparam deserializerBlock The callback used to deserialize each item in the array.
    @return An array of deserialized objects.
*/
+ (NSMutableArray<id>* (^)(NSString*, id(^)(NSString*))) deserializeObjectArrayWithJsonAndDeserializerBlock;
/**

    Deserializes a JSON string into a FMLiveSwitchSerializable target object type.

    @param json The JSON-encoded string.
    @param creator The method used for creating a new object.
    @param callback The method used for deserializing a property.
    @return The deserialized object.
*/
+ (FMLiveSwitchSerializable*) deserializeObjectFastWithJson:(NSString*)json creator:(FMLiveSwitchFunction0<FMLiveSwitchSerializable*>*)creator callback:(FMLiveSwitchAction3<FMLiveSwitchSerializable*,NSString*,NSString*>*)callback;
/**

    Deserializes a JSON string into a FMLiveSwitchSerializable target object type.

    @param json The JSON-encoded string.
    @param creatorBlock The method used for creating a new object.
    @param callbackBlock The method used for deserializing a property.
    @return The deserialized object.
*/
+ (FMLiveSwitchSerializable*) deserializeObjectFastWithJson:(NSString*)json creatorBlock:(FMLiveSwitchSerializable*(^)(void))creatorBlock callbackBlock:(void(^)(FMLiveSwitchSerializable*, NSString*, NSString*))callbackBlock;
/**

    Deserializes a JSON string into a FMLiveSwitchSerializable target object type.

    @inlineparam json The JSON-encoded string.
    @inlineparam creatorBlock The method used for creating a new object.
    @inlineparam callbackBlock The method used for deserializing a property.
    @return The deserialized object.
*/
+ (FMLiveSwitchSerializable* (^)(NSString*, FMLiveSwitchSerializable*(^)(void), void(^)(FMLiveSwitchSerializable*, NSString*, NSString*))) deserializeObjectFastWithJsonAndCreatorBlockAndCallbackBlock;
/**

    Deserializes a JSON string into a target object type.

    @param json The JSON-encoded string.
    @param creator The method used for creating a new object.
    @param callback The method used for deserializing a property.
    @return The deserialized object.
*/
+ (id) deserializeObjectWithJson:(NSString*)json creator:(FMLiveSwitchFunction0<id>*)creator callback:(FMLiveSwitchAction3<id,NSString*,NSString*>*)callback;
/**

    Deserializes a JSON string into a target object type.

    @param json The JSON-encoded string.
    @param creatorBlock The method used for creating a new object.
    @param callbackBlock The method used for deserializing a property.
    @return The deserialized object.
*/
+ (id) deserializeObjectWithJson:(NSString*)json creatorBlock:(id(^)(void))creatorBlock callbackBlock:(void(^)(id, NSString*, NSString*))callbackBlock;
/**

    Deserializes a JSON string into a target object type.

    @inlineparam json The JSON-encoded string.
    @inlineparam creatorBlock The method used for creating a new object.
    @inlineparam callbackBlock The method used for deserializing a property.
    @return The deserialized object.
*/
+ (id (^)(NSString*, id(^)(void), void(^)(id, NSString*, NSString*))) deserializeObjectWithJsonAndCreatorBlockAndCallbackBlock;
/**

    Deserializes a raw array from JSON.

    @param json A JSON-serialized raw array.
    @return An array of raw values.
*/
+ (NSMutableArray<NSString*>*) deserializeRawArrayWithJson:(NSString*)json;
/**

    Deserializes a piece of raw JSON.

    @param dataJson The raw data.
    @return The deserialized data.
*/
+ (NSString*) deserializeRawWithDataJson:(NSString*)dataJson;
/**

    Deserializes a simple string array from JSON.

    @param arrayJson A JSON-serialized string array.
    @return An array of string values.
*/
+ (NSMutableArray*) deserializeStringArrayWithArrayJson:(NSString*)arrayJson;
/**

    Deserializes a string.

    @param valueJson The string to deserialize.
    @return The deserialized string value.
*/
+ (NSString*) deserializeStringWithValueJson:(NSString*)valueJson;
/**

    Escapes any special characters in a string.

    @param text The string without escaped characters.
    @return The escaped string.
*/
+ (NSString*) escapeStringWithText:(NSString*)text;
- (instancetype) init;
/**

    Determines whether the specified JSON string is valid.

    @param json The JSON string to validate.
    @return True if the JSON string is valid; false otherwise.
*/
+ (bool) isValidJson:(NSString*)json;
+ (FMLiveSwitchJsonSerializer*) jsonSerializer;
/**

    Serializes a boolean value.

    @param value The boolean to serialize.
    @return The serialized boolean value.
*/
+ (NSString*) serializeBoolean:(FMLiveSwitchNullableBool*)value;
/**

    Serializes a boolean array to JSON.

    @param array An array of boolean values.
    @return A JSON-serialized boolean array.
*/
+ (NSString*) serializeBooleanArray:(NSMutableArray*)array;
/**

    Serializes a decimal value.

    @param value The decimal to serialize.
    @return The serialized decimal value.
*/
+ (NSString*) serializeDecimal:(FMLiveSwitchNullableDecimal*)value;
/**

    Serializes a decimal array to JSON.

    @param array An array of decimal values.
    @return A JSON-serialized decimal array.
*/
+ (NSString*) serializeDecimalArray:(NSMutableArray*)array;
/**

    Serializes a dictionary into a JSON string.

    @param dictionary The dictionary being serialized.
    @param serializeValueCallback The callback that serializes a value.
    @return The dictionary as a JSON string.
*/
+ (NSString*) serializeDictionary:(NSMutableDictionary<NSString*,id>*)dictionary serializeValueCallback:(FMLiveSwitchFunction1<id,NSString*>*)serializeValueCallback;
/**

    Serializes a dictionary into a JSON string.

    @param dictionary The dictionary being serialized.
    @param serializeValueCallbackBlock The callback that serializes a value.
    @return The dictionary as a JSON string.
*/
+ (NSString*) serializeDictionary:(NSMutableDictionary<NSString*,id>*)dictionary serializeValueCallbackBlock:(NSString*(^)(id))serializeValueCallbackBlock;
/**

    Serializes a dictionary into a JSON string.

    @inlineparam dictionary The dictionary being serialized.
    @inlineparam serializeValueCallbackBlock The callback that serializes a value.
    @return The dictionary as a JSON string.
*/
+ (NSString* (^)(NSMutableDictionary<NSString*,id>*, NSString*(^)(id))) serializeDictionaryAndSerializeValueCallbackBlock;
/**

    Serializes a double value.

    @param value The double to serialize.
    @return The serialized double value.
*/
+ (NSString*) serializeDouble:(FMLiveSwitchNullableDouble*)value;
/**

    Serializes a double array to JSON.

    @param array An array of double values.
    @return A JSON-serialized double array.
*/
+ (NSString*) serializeDoubleArray:(NSMutableArray*)array;
/**

    Serializes a float value.

    @param value The float to serialize.
    @return The serialized float value.
*/
+ (NSString*) serializeFloat:(FMLiveSwitchNullableFloat*)value;
/**

    Serializes a float array to JSON.

    @param array An array of float values.
    @return A JSON-serialized float array.
*/
+ (NSString*) serializeFloatArray:(NSMutableArray*)array;
/**

    Serializes a globally unique identifier.

    @param value The GUID to serialize.
    @return The serialized GUID.
*/
+ (NSString*) serializeGuid:(FMLiveSwitchNullableGuid*)value;
/**

    Serializes a GUID array to JSON.

    @param array An array of GUID values.
    @return A JSON-serialized GUID array.
*/
+ (NSString*) serializeGuidArray:(NSMutableArray*)array;
/**

    Serializes an integer value.

    @param value The integer to serialize.
    @return The serialized integer value.
*/
+ (NSString*) serializeInteger:(FMLiveSwitchNullableInt*)value;
/**

    Serializes a integer array to JSON.

    @param array An array of integer values.
    @return A JSON-serialized integer array.
*/
+ (NSString*) serializeIntegerArray:(NSMutableArray*)array;
/**

    Serializes a long value.

    @param value The long to serialize.
    @return The serialized long value.
*/
+ (NSString*) serializeLong:(FMLiveSwitchNullableLong*)value;
/**

    Serializes a long array to JSON.

    @param array An array of long values.
    @return A JSON-serialized long array.
*/
+ (NSString*) serializeLongArray:(NSMutableArray*)array;
/**

    Serializes an object array into a JSON string.

    @param objects The object array being serialized.
    @param serializer The callback used to serialize each item in the array.
    @return The object array as a JSON string.
*/
+ (NSString*) serializeObjectArrayWithObjects:(NSMutableArray*)objects serializer:(FMLiveSwitchFunction1<id,NSString*>*)serializer;
/**

    Serializes an object array into a JSON string.

    @param objects The object array being serialized.
    @param serializerBlock The callback used to serialize each item in the array.
    @return The object array as a JSON string.
*/
+ (NSString*) serializeObjectArrayWithObjects:(NSMutableArray*)objects serializerBlock:(NSString*(^)(id))serializerBlock;
/**

    Serializes an object array into a JSON string.

    @inlineparam objects The object array being serialized.
    @inlineparam serializerBlock The callback used to serialize each item in the array.
    @return The object array as a JSON string.
*/
+ (NSString* (^)(NSMutableArray*, NSString*(^)(id))) serializeObjectArrayWithObjectsAndSerializerBlock;
/**

    Serializes a FMLiveSwitchSerializable object into a JSON string.

    @param source The object being serialized.
    @param callback The method used for serializing properties.
    @return The object as a JSON string.
*/
+ (NSString*) serializeObjectFastWithSource:(FMLiveSwitchSerializable*)source callback:(FMLiveSwitchAction2<FMLiveSwitchSerializable*,NSMutableDictionary<NSString*,NSString*>*>*)callback;
/**

    Serializes a FMLiveSwitchSerializable object into a JSON string.

    @param source The object being serialized.
    @param callbackBlock The method used for serializing properties.
    @return The object as a JSON string.
*/
+ (NSString*) serializeObjectFastWithSource:(FMLiveSwitchSerializable*)source callbackBlock:(void(^)(FMLiveSwitchSerializable*, NSMutableDictionary<NSString*,NSString*>*))callbackBlock;
/**

    Serializes a FMLiveSwitchSerializable object into a JSON string.

    @inlineparam source The object being serialized.
    @inlineparam callbackBlock The method used for serializing properties.
    @return The object as a JSON string.
*/
+ (NSString* (^)(FMLiveSwitchSerializable*, void(^)(FMLiveSwitchSerializable*, NSMutableDictionary<NSString*,NSString*>*))) serializeObjectFastWithSourceAndCallbackBlock;
/**

    Serializes an object into a JSON string.

    @param source The object being serialized.
    @param callback The method used for serializing properties.
    @return The object as a JSON string.
*/
+ (NSString*) serializeObjectWithSource:(id)source callback:(FMLiveSwitchAction2<id,NSMutableDictionary<NSString*,NSString*>*>*)callback;
/**

    Serializes an object into a JSON string.

    @param source The object being serialized.
    @param callbackBlock The method used for serializing properties.
    @return The object as a JSON string.
*/
+ (NSString*) serializeObjectWithSource:(id)source callbackBlock:(void(^)(id, NSMutableDictionary<NSString*,NSString*>*))callbackBlock;
/**

    Serializes an object into a JSON string.

    @inlineparam source The object being serialized.
    @inlineparam callbackBlock The method used for serializing properties.
    @return The object as a JSON string.
*/
+ (NSString* (^)(id, void(^)(id, NSMutableDictionary<NSString*,NSString*>*))) serializeObjectWithSourceAndCallbackBlock;
/**

    Serializes a raw array to JSON.

    @param jsons An array of raw values.
    @return A JSON-serialized raw array.
*/
+ (NSString*) serializeRawArrayWithJsons:(NSMutableArray*)jsons;
/**

    Serializes a piece of raw JSON.

    @param dataJson The raw data.
    @return The serialized data.
*/
+ (NSString*) serializeRawWithDataJson:(NSString*)dataJson;
/**

    Serializes a string.

    @param value The string to serialize.
    @return The serialized string value.
*/
+ (NSString*) serializeString:(NSString*)value;
/**

    Serializes a string array to JSON.

    @param array An array of string values.
    @return A JSON-serialized string array.
*/
+ (NSString*) serializeStringArray:(NSMutableArray*)array;
/**

    Trims the quotes from a JavaScript string value.

    @param value The JavaScript string value.
    @return The string without quotes.
*/
+ (NSString*) trimQuotes:(NSString*)value;
/**

    Unescapes any special characters from a string.

    @param text The string with escaped characters.
    @return The unescaped string.
*/
+ (NSString*) unescapeStringWithText:(NSString*)text;

@end

/**

    Provides methods for serializing/deserializing .NET value types to/from JSON
    as well as facilities for converting objects and arrays if appropriate callbacks
    are supplied to assist with the conversion.

*/
@interface FMLiveSwitchSerializer : FMLiveSwitchJsonSerializer

- (instancetype) init;
+ (FMLiveSwitchSerializer*) serializer;

@end

/**

    A simple state machine.

*/
@interface FMLiveSwitchStateMachine<__covariant T> : NSObject

/**

    Adds an allowed transition.

    @param fromState The "from" state.
    @param toState The "to" state.
*/
- (void) addTransitionWithFromState:(T)fromState toState:(T)toState;
/**

    Determines whether a transition to the specified state is allowed.

    @param toState The "to" state.
    @return `true` if a transition to the specified state is allowed; otherwise, `false`.
            
*/
- (bool) canTransitionWithToState:(T)toState;
/**

    Gets a promise, which may be resolved or rejected depending on the current state of this machine.

    @param state State, in which promise must be resolved.
    @param returnValue Return type of this promise.
    @return Promise, which may be resolved or rejected depending on the current state of this machine
*/
- (FMLiveSwitchPromise<id>*) getPromiseWithState:(T)state returnValue:(id)returnValue;
/**

    Initializes a new instance of the FMLiveSwitchStateMachine`1 class.

    @param initialState The initial state.
*/
- (instancetype) initWithInitialState:(T)initialState;
/**

    Determines whether a transition to a specified state is possible (even via intermediate hops).

    @param state The "to" state.
    @return `true` if a transition to the specified state is possible; otherwise, `false`.
            
*/
- (bool) isReachableWithState:(T)state;
/**

    Gets the length of time spent in the last state,
    in milliseconds.

*/
- (long long) lastStateMillis;
/**

    Gets the length of time spent in the last state,
    in ticks.

*/
- (long long) lastStateTicks;
/**

    Gets the state.

*/
- (T) state;
/**

    Initializes a new instance of the FMLiveSwitchStateMachine`1 class.

    @param initialState The initial state.
*/
+ (FMLiveSwitchStateMachine*) stateMachineWithInitialState:(T)initialState;
/**

    Converts a state to an integer value.

    @param state The state.
*/
- (int) stateToValueWithState:(T)state;
/**

    Gets the state value.

*/
- (int) stateValue;
/**

    Gets the system timestamp of the last
    state transition.

*/
- (long long) systemTimestamp;
/**

    Transitions to the specified state.

    @param toState The "to" state.
    @return `true` if a transition to the specified state is allowed; otherwise, `false`.
            
*/
- (bool) transitionWithToState:(T)toState;
/**

    Converts an integer value to a state.

    @param value The integer value.
*/
- (T) valueToState:(int)value;

@end

/**

    A linked list node.

*/
@interface FMLiveSwitchLinkedListNode<__covariant T> : NSObject

/**

    Initializes a new instance of the FMLiveSwitchLinkedListNode`1 class.

    @param item The item.
*/
- (instancetype) initWithItem:(T)item;
/**

    Initializes a new instance of the FMLiveSwitchLinkedListNode`1 class.

    @param item The item.
*/
+ (FMLiveSwitchLinkedListNode*) linkedListNodeWithItem:(T)item;
/**

    Gets the next node. Will be `null` if last.

*/
- (FMLiveSwitchLinkedListNode<T>*) next;
/**

    Gets the previous node. Null if first.

*/
- (FMLiveSwitchLinkedListNode<T>*) previous;
/**

    Gets the item in the linked list.

*/
- (T) value;

@end

/**

    A linked list enumerator.

*/
@interface FMLiveSwitchLinkedListEnumerator<__covariant T> : NSObject

/**

    Gets the current value.

*/
- (T) current;
/**

    Gets the current node.

*/
- (FMLiveSwitchLinkedListNode<T>*) currentNode;
/**

    Initializes a new instance of the FMLiveSwitchLinkedListEnumerator`1 class.

    @param root The root node.
*/
- (instancetype) initWithRoot:(FMLiveSwitchLinkedListNode<T>*)root;
/**

    Initializes a new instance of the FMLiveSwitchLinkedListEnumerator`1 class.

    @param root The root node.
*/
+ (FMLiveSwitchLinkedListEnumerator*) linkedListEnumeratorWithRoot:(FMLiveSwitchLinkedListNode<T>*)root;
/**

    Moves to the next node.

*/
- (bool) moveNext;
/**

    Resets this instance.

*/
- (void) reset;

@end

/**

    A ConcurrentDictonary that maps to the appropriate platform version.

*/
@interface FMLiveSwitchManagedConcurrentDictionary<__covariant TKey, __covariant TValue> : NSObject

/**

    Updates a value in the dictionary or adds it if it does not exist.

    @param key The key to use for updating for adding.
    @param addValue The value to be added for an absent key.
*/
- (TValue) addOrUpdateWithKey:(TKey)key addValue:(TValue)addValue;
/**

    Updates a value in the dictionary or adds it if it does not exist.

    @param key The key to use for updating for adding.
    @param addValue The value to be added for an absent key.
    @param updateValueFactory The function to use for generating a value based on an existing key.
*/
- (TValue) addOrUpdateWithKey:(TKey)key addValue:(TValue)addValue updateValueFactory:(FMLiveSwitchFunction2<TKey,TValue,TValue>*)updateValueFactory;
/**

    Updates a value in the dictionary or adds it if it does not exist.

    @param key The key to use for updating for adding.
    @param addValue The value to be added for an absent key.
    @param updateValueFactoryBlock The function to use for generating a value based on an existing key.
*/
- (TValue) addOrUpdateWithKey:(TKey)key addValue:(TValue)addValue updateValueFactoryBlock:(TValue(^)(TKey, TValue))updateValueFactoryBlock;
/**

    Updates a value in the dictionary or adds it if it does not exist.

    @inlineparam key The key to use for updating for adding.
    @inlineparam addValue The value to be added for an absent key.
    @inlineparam updateValueFactoryBlock The function to use for generating a value based on an existing key.
*/
- (TValue (^)(TKey, TValue, TValue(^)(TKey, TValue))) addOrUpdateWithKeyAndAddValueAndUpdateValueFactoryBlock;
/**

    Clears the dictionary of all items.

*/
- (void) clear;
/**

    True if the dictionary contains the key.

    @param key The key to check.
*/
- (bool) containsKey:(TKey)key;
/**

    Gets the number of items in the dictionary.

*/
- (int) count;
/**

    Gets the value from the dictionary or adds a new one if it does not exist.

    @param key The key to use when adding to the dictionary.
    @param valueFactory The Func that will create a value if needed.
    @return The dictionary value if exist, the value returned by the Func if not.
*/
- (TValue) getOrAddWithKey:(TKey)key valueFactory:(FMLiveSwitchFunction1<TKey,TValue>*)valueFactory;
/**

    Gets the value from the dictionary or adds a new one if it does not exist.

    @param key The key to use when adding to the dictionary.
    @param valueFactoryBlock The Func that will create a value if needed.
    @return The dictionary value if exist, the value returned by the Func if not.
*/
- (TValue) getOrAddWithKey:(TKey)key valueFactoryBlock:(TValue(^)(TKey))valueFactoryBlock;
/**

    Gets the value from the dictionary or adds a new one if it does not exist.

    @inlineparam key The key to use when adding to the dictionary.
    @inlineparam valueFactoryBlock The Func that will create a value if needed.
    @return The dictionary value if exist, the value returned by the Func if not.
*/
- (TValue (^)(TKey, TValue(^)(TKey))) getOrAddWithKeyAndValueFactoryBlock;
/**

    Creates a new instance.

*/
- (instancetype) init;
/**

    Creates a new ManagedConcurrentDictionary.

    @param hashCallback The hash function to use when the backing dictionary requires the key to be a string.
*/
- (instancetype) initWithHashCallback:(FMLiveSwitchFunction1<TKey,NSString*>*)hashCallback;
/**

    Creates a new ManagedConcurrentDictionary.

    @param hashCallbackBlock The hash function to use when the backing dictionary requires the key to be a string.
*/
- (instancetype) initWithHashCallbackBlock:(NSString*(^)(TKey))hashCallbackBlock;
/**

    Gets true if dictionary is empty.

*/
- (bool) isEmpty;
/**

    Gets an array of keys.

*/
- (NSMutableArray<TKey>*) keys;
/**

    Creates a new instance.

*/
+ (FMLiveSwitchManagedConcurrentDictionary*) managedConcurrentDictionary;
/**

    Creates a new ManagedConcurrentDictionary.

    @param hashCallback The hash function to use when the backing dictionary requires the key to be a string.
*/
+ (FMLiveSwitchManagedConcurrentDictionary*) managedConcurrentDictionaryWithHashCallback:(FMLiveSwitchFunction1<TKey,NSString*>*)hashCallback;
/**

    Creates a new ManagedConcurrentDictionary.

    @param hashCallbackBlock The hash function to use when the backing dictionary requires the key to be a string.
*/
+ (FMLiveSwitchManagedConcurrentDictionary*) managedConcurrentDictionaryWithHashCallbackBlock:(NSString*(^)(TKey))hashCallbackBlock;
/**

    Tries to add a new value to the dictionary.

    @param key The key to use when adding.
    @param value The value to be added to the dictionary.
    @return True if added, false if key already exists.
*/
- (bool) tryAddWithKey:(TKey)key value:(TValue)value;
/**

    Tries to get a value from the dictionary.

    @param key They key of the item to get form the dictionary.
    @param value The value that was just received or null if failed.
    @return True if succeeded.
*/
- (bool) tryGetValueWithKey:(TKey)key value:(TValue*)value;
/**

    Tries and removes a value from the dictionary.

    @param key The key of the item to remove.
    @return True if successful.
*/
- (bool) tryRemoveWithKey:(TKey)key;
/**

    Tries and removes a value from the dictionary.

    @param key The key of the item to remove.
    @param value The value that was just removed.
    @return True if successful.
*/
- (bool) tryRemoveWithKey:(TKey)key value:(TValue*)value;
/**

    Tries to update the value in the dictionary.

    @param key The key to use when updating.
    @param newValue The new value.
    @param comparisonValue The value to compare with the current value in the dictionary.
    @return True if succeeded.
*/
- (bool) tryUpdateWithKey:(TKey)key newValue:(TValue)newValue comparisonValue:(TValue)comparisonValue;
/**

    Gets an array of Values.

*/
- (NSMutableArray<TValue>*) values;

@end

/**

    A thread-safe queue.

*/
@interface FMLiveSwitchManagedConcurrentQueue<__covariant T> : NSObject

/**

    Gets the amount of items in this queue.

*/
- (int) count;
/**

    Add the item to the end of the queue.

    @param item The item to add.
*/
- (void) enqueueWithItem:(T)item;
/**

    Creates a new ConcurrentQueue.

*/
- (instancetype) init;
/**

    Gets true if the queue is empty.

*/
- (bool) isEmpty;
/**

    Creates a new ConcurrentQueue.

*/
+ (FMLiveSwitchManagedConcurrentQueue*) managedConcurrentQueue;
/**

    Removes and returns the item at the front of the queue.

    @param item The dequeued item.
    @return True if item received, false if no item.
*/
- (bool) tryDequeueWithItem:(T*)item;
/**

    Peeks at the first item in the queue.

    @param item The item at the front of the queue.
    @return False if queue is empty. True if first item peeked at.
*/
- (bool) tryPeekWithItem:(T*)item;

@end

/**

    A ConcurrentStack that maps to the appropriate platform version.

*/
@interface FMLiveSwitchManagedConcurrentStack<__covariant TValue> : NSObject

/**

    Clears the stack of all items.

*/
- (void) clear;
/**

    Gets the amount of items in the stack.

*/
- (int) count;
/**

    Creates a new instance of a ConcurrentStack.

*/
- (instancetype) init;
/**

    Gets true if the stack is empty.

*/
- (bool) isEmpty;
/**

    Creates a new instance of a ConcurrentStack.

*/
+ (FMLiveSwitchManagedConcurrentStack*) managedConcurrentStack;
/**

    Pushes a new item on top of the stack.

    @param item The item to push.
*/
- (void) pushWithItem:(TValue)item;
/**

    Tries to peek at the top value in stack.

    @param result The value from the stack if possible, null otherwise.
    @return True if peek succeeded, false if not.
*/
- (bool) tryPeekWithResult:(TValue*)result;
/**

    Tries to pop the top value off of the stack.

    @param result The value from the top of the stack if possible, null otherwise.
    @return True if pop suceeded, false if not.
*/
- (bool) tryPopWithResult:(TValue*)result;

@end

/**

    A linked list.

*/
@interface FMLiveSwitchLinkedList<__covariant T> : NSObject

/**

    Adds an item after a node.

    @param node The node after which to add the value.
    @param value The value.
*/
- (FMLiveSwitchLinkedListNode<T>*) addAfterNode:(FMLiveSwitchLinkedListNode<T>*)node value:(T)value;
/**

    Adds an item before a node.

    @param node The node before which to add the value.
    @param value The value.
*/
- (FMLiveSwitchLinkedListNode<T>*) addBeforeNode:(FMLiveSwitchLinkedListNode<T>*)node value:(T)value;
/**

    Adds an item to the beginning of the linked list.

    @param value The value.
*/
- (FMLiveSwitchLinkedListNode<T>*) addFirst:(T)value;
/**

    Adds an item to the end of the linked list.

    @param value The value.
*/
- (FMLiveSwitchLinkedListNode<T>*) addLast:(T)value;
/**

    Clears all nodes from the linked list.

*/
- (void) clear;
/**

    Gets the number of items in this linked list.

*/
- (int) count;
/**

    Gets the first node in the linked list.

*/
- (FMLiveSwitchLinkedListNode<T>*) first;
/**

    Gets the enumerator for this linked list.

*/
- (FMLiveSwitchLinkedListEnumerator<T>*) getEnumerator;
- (instancetype) init;
/**

    Gets the last node in the linked list.

*/
- (FMLiveSwitchLinkedListNode<T>*) last;
+ (FMLiveSwitchLinkedList*) linkedList;
/**

    Removes an item from the linked list.

    @param value The value.
*/
- (bool) remove:(T)value;
/**

    Removes the first item in the linked list.

*/
- (bool) removeFirst;
/**

    Removes the last item in the linked list.

*/
- (bool) removeLast;
/**

    Removes a specific node from the linked list.

    @param node The node.
*/
- (bool) removeNode:(FMLiveSwitchLinkedListNode<T>*)node;
/**

    Returns the linked list as a regular list.

*/
- (NSMutableArray<T>*) toList;

@end

/**

    A mutable 2-tuple.

*/
@interface FMLiveSwitchMutablePair<__covariant T1, __covariant T2> : NSObject

/**

    Initializes a new instance of the FMLiveSwitchMutablePair`2 class.

    @param item1 First item the tuple holds.
    @param item2 Second item the tuple holds.
*/
- (instancetype) initWithItem1:(T1)item1 item2:(T2)item2;
/**

    Gets the first item in the tuple.

*/
- (T1) item1;
/**

    Gets the second item in the tuple.

*/
- (T2) item2;
/**

    Initializes a new instance of the FMLiveSwitchMutablePair`2 class.

    @param item1 First item the tuple holds.
    @param item2 Second item the tuple holds.
*/
+ (FMLiveSwitchMutablePair*) mutablePairWithItem1:(T1)item1 item2:(T2)item2;
/**

    Sets the first item in the tuple.

*/
- (void) setItem1:(T1)value;
/**

    Sets the second item in the tuple.

*/
- (void) setItem2:(T2)value;

@end

/**

    A mutable 1-tuple.

*/
@interface FMLiveSwitchMutableUnit<__covariant T> : NSObject

/**

    Initializes a new instance of the FMLiveSwitchMutableUnit`1 class.

    @param item The item to hold.
*/
- (instancetype) initWithItem:(T)item;
/**

    Gets the first item in the tuple.

*/
- (T) item;
/**

    Initializes a new instance of the FMLiveSwitchMutableUnit`1 class.

    @param item The item to hold.
*/
+ (FMLiveSwitchMutableUnit*) mutableUnitWithItem:(T)item;
/**

    Sets the first item in the tuple.

*/
- (void) setItem:(T)value;

@end

/**

    A 2-tuple.

*/
@interface FMLiveSwitchPair<__covariant T1, __covariant T2> : NSObject

/**

    Calculates the hashcode for this pair.

*/
- (int) hash;
/**

    Initializes a new instance of the FMLiveSwitchPair`2 class.

    @param item1 First item the tuple holds.
    @param item2 Second item the tuple holds.
*/
- (instancetype) initWithItem1:(T1)item1 item2:(T2)item2;
/**

    Determines whether the specified System.Object is equal to the current System.Object.

    @param obj The object to compare with the current object.
    @return true if the specified System.Object is equal to the current System.Object; otherwise, false.
*/
- (bool) isEqualWithObj:(id)obj;
/**

    Gets the first item in the tuple.

*/
- (T1) item1;
/**

    Gets the second item in the tuple.

*/
- (T2) item2;
/**

    Initializes a new instance of the FMLiveSwitchPair`2 class.

    @param item1 First item the tuple holds.
    @param item2 Second item the tuple holds.
*/
+ (FMLiveSwitchPair*) pairWithItem1:(T1)item1 item2:(T2)item2;

@end

/**

    A priority queue.

*/
@interface FMLiveSwitchPriorityQueue<__covariant T> : NSObject

/**

    Gets the count.

*/
- (int) count;
/**

    Dequeues an item.

*/
- (T) dequeue;
/**

    Enqueues an item.

    @param item The item.
*/
- (void) enqueueWithItem:(T)item;
/**

    Checks if an item exists in the queue.

    @param item The item.
*/
- (bool) existsWithItem:(T)item;
/**

    Initializes a new instance of the FMLiveSwitchPriorityQueue`1 class.

    @param comparer The comparer.
*/
- (instancetype) initWithComparer:(FMLiveSwitchFunction2<T,T,id>*)comparer;
/**

    Initializes a new instance of the FMLiveSwitchPriorityQueue`1 class.

    @param comparerBlock The comparer.
*/
- (instancetype) initWithComparerBlock:(FMLiveSwitchCompareResult(^)(T, T))comparerBlock;
/**

    Determines whether the queue is consistent.

*/
- (bool) isConsistent;
/**


*/
- (T) peek;
/**

    Initializes a new instance of the FMLiveSwitchPriorityQueue`1 class.

    @param comparer The comparer.
*/
+ (FMLiveSwitchPriorityQueue*) priorityQueueWithComparer:(FMLiveSwitchFunction2<T,T,id>*)comparer;
/**

    Initializes a new instance of the FMLiveSwitchPriorityQueue`1 class.

    @param comparerBlock The comparer.
*/
+ (FMLiveSwitchPriorityQueue*) priorityQueueWithComparerBlock:(FMLiveSwitchCompareResult(^)(T, T))comparerBlock;

@end

/**

    Simple log provider that writes log events to a local array.

*/
@interface FMLiveSwitchLogEventLogProvider : FMLiveSwitchLogProvider

/**

    Clears all text from the log
    and returns the former contents.

*/
- (NSMutableArray*) clear;
/**

    Logs a message at the specified log level.

    @param logEvent The log event details.
*/
- (void) doLogWithLogEvent:(FMLiveSwitchLogEvent*)logEvent;
/**

    Gets the logged events.

*/
- (NSMutableArray*) events;
/**

    Initializes a new instance of the FMLiveSwitchLogEventLogProvider.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchLogEventLogProvider class.

    @param level The log level.
*/
- (instancetype) initWithLevel:(FMLiveSwitchLogLevel)level;
/**

    Initializes a new instance of the FMLiveSwitchLogEventLogProvider.

*/
+ (FMLiveSwitchLogEventLogProvider*) logEventLogProvider;
/**

    Initializes a new instance of the FMLiveSwitchLogEventLogProvider class.

    @param level The log level.
*/
+ (FMLiveSwitchLogEventLogProvider*) logEventLogProviderWithLevel:(FMLiveSwitchLogLevel)level;

@end

/**

    A certificate to be used for TLS communication.

*/
@interface FMLiveSwitchTlsCertificate : FMLiveSwitchCertificate<FMLiveSwitchTlsCertificate*,FMLiveSwitchTlsFingerprint*>

/**

    Creates the certificate.

*/
- (FMLiveSwitchTlsCertificate*) createCertificate;
/**

    Creates a fingerprint.

    @param algorithm The algorithm.
    @param value The value.
*/
- (FMLiveSwitchTlsFingerprint*) createFingerprintWithAlgorithm:(NSString*)algorithm value:(NSString*)value;
/**

    Gets the default asymmetric key type (RSA).

*/
+ (FMLiveSwitchAsymmetricKeyType) defaultKeyType;
/**

    Generates a certificate with a default issuer/subject name and
    an expiration date of 10 days from now.

*/
+ (FMLiveSwitchTlsCertificate*) generateCertificate;
/**

    Generates a certificate using the issuer/subject name from an
    old certificate and an expiration date of 10 days from now.

    @param oldCertificate The old certificate.
*/
+ (FMLiveSwitchTlsCertificate*) generateCertificateFromOldCertificate:(FMLiveSwitchTlsCertificate*)oldCertificate;
/**

    Generates a certificate using the issuer/subject name from an
    old certificate and the given expiration date.

    @param oldCertificate The old certificate.
    @param expirationDate The expiration date.
*/
+ (FMLiveSwitchTlsCertificate*) generateCertificateFromOldCertificate:(FMLiveSwitchTlsCertificate*)oldCertificate expirationDate:(NSDate*)expirationDate;
/**

    Generates a certificate with the given issuer name, subject name, and
    an expiration date of 10 days from now.

    @param issuerName The name of the issuer.
    @param subjectName The name of the subject.
*/
+ (FMLiveSwitchTlsCertificate*) generateCertificateWithIssuerName:(NSString*)issuerName subjectName:(NSString*)subjectName;
/**

    Generates a certificate with the given issuer name, subject name, and expiration date.

    @param issuerName The name of the issuer.
    @param subjectName The name of the subject.
    @param expirationDate The expiration date.
*/
+ (FMLiveSwitchTlsCertificate*) generateCertificateWithIssuerName:(NSString*)issuerName subjectName:(NSString*)subjectName expirationDate:(NSDate*)expirationDate;
/**

    Generates a certificate with the given issuer name, subject name, expiration date, and asymmetric key.

    @param issuerName The name of the issuer.
    @param subjectName The name of the subject.
    @param expirationDate The expiration date.
    @param key The asymmetric key (with public and private details).
*/
+ (FMLiveSwitchTlsCertificate*) generateCertificateWithIssuerName:(NSString*)issuerName subjectName:(NSString*)subjectName expirationDate:(NSDate*)expirationDate key:(FMLiveSwitchAsymmetricKey*)key;
/**

    Generates a certificate with the given issuer name, subject name, expiration date, and asymmetric key.

    @param issuerName The name of the issuer.
    @param subjectName The name of the subject.
    @param expirationDate The expiration date.
    @param keyType The asymmetric key type.
*/
+ (FMLiveSwitchTlsCertificate*) generateCertificateWithIssuerName:(NSString*)issuerName subjectName:(NSString*)subjectName expirationDate:(NSDate*)expirationDate keyType:(FMLiveSwitchAsymmetricKeyType)keyType;
/**

    Generates a certificate with the given issuer name, subject name, and
    an expiration date of 10 days from now.

    @param issuerName The name of the issuer.
    @param subjectName The name of the subject.
    @param key The asymmetric key (with public and private details).
*/
+ (FMLiveSwitchTlsCertificate*) generateCertificateWithIssuerName:(NSString*)issuerName subjectName:(NSString*)subjectName key:(FMLiveSwitchAsymmetricKey*)key;
/**

    Generates a certificate with the given issuer name, subject name, and
    an expiration date of 10 days from now.

    @param issuerName The name of the issuer.
    @param subjectName The name of the subject.
    @param keyType The asymmetric key type.
*/
+ (FMLiveSwitchTlsCertificate*) generateCertificateWithIssuerName:(NSString*)issuerName subjectName:(NSString*)subjectName keyType:(FMLiveSwitchAsymmetricKeyType)keyType;
/**

    Generates a certificate with a default issuer/subject name and
    an expiration date of 10 days from now.

    @param key The asymmetric key (with public and private details).
*/
+ (FMLiveSwitchTlsCertificate*) generateCertificateWithKey:(FMLiveSwitchAsymmetricKey*)key;
/**

    Generates a certificate with a default issuer/subject name and
    an expiration date of 10 days from now.

    @param keyType The asymmetric key type.
*/
+ (FMLiveSwitchTlsCertificate*) generateCertificateWithKeyType:(FMLiveSwitchAsymmetricKeyType)keyType;
/**

    Generates a certificate with the given issuer/subject name and an
    expiration date of 10 days from now.

    @param name The name of the issuer/subject.
*/
+ (FMLiveSwitchTlsCertificate*) generateCertificateWithName:(NSString*)name;
/**

    Generates a certificate with the given issuer/subject name and an
    expiration date of 10 days from now.

    @param name The name of the issuer/subject.
    @param key The asymmetric key (with public and private details).
*/
+ (FMLiveSwitchTlsCertificate*) generateCertificateWithName:(NSString*)name key:(FMLiveSwitchAsymmetricKey*)key;
/**

    Generates a certificate with the given issuer/subject name and an
    expiration date of 10 days from now.

    @param name The name of the issuer/subject.
    @param keyType The asymmetric key type.
*/
+ (FMLiveSwitchTlsCertificate*) generateCertificateWithName:(NSString*)name keyType:(FMLiveSwitchAsymmetricKeyType)keyType;
- (instancetype) init;
/**

    Deserializes a certificate from binary.

    @param bytes The bytes.
*/
+ (FMLiveSwitchTlsCertificate*) parseBytes:(NSMutableData*)bytes;
/**

    Sets the default asymmetric key type (RSA).

*/
+ (void) setDefaultKeyType:(FMLiveSwitchAsymmetricKeyType)value;
+ (FMLiveSwitchTlsCertificate*) tlsCertificate;

@end

/**

    A TLS fingerprint.

*/
@interface FMLiveSwitchTlsFingerprint : FMLiveSwitchFingerprint

/**

    Initializes a new instance of the FMLiveSwitchTlsFingerprint class.

    @param algorithm The algorithm.
    @param value The value.
*/
- (instancetype) initWithAlgorithm:(NSString*)algorithm value:(NSString*)value;
/**

    Initializes a new instance of the FMLiveSwitchTlsFingerprint class.

    @param algorithm The algorithm.
    @param value The value.
*/
+ (FMLiveSwitchTlsFingerprint*) tlsFingerprintWithAlgorithm:(NSString*)algorithm value:(NSString*)value;

@end

/**

    A 3-tuple.

*/
@interface FMLiveSwitchTriple<__covariant T1, __covariant T2, __covariant T3> : NSObject

/**

    Initializes a new instance of the FMLiveSwitchTriple`3 class.

    @param item1 First item the tuple holds.
    @param item2 Second item the tuple holds.
    @param item3 Third item the tuple holds.
*/
- (instancetype) initWithItem1:(T1)item1 item2:(T2)item2 item3:(T3)item3;
/**

    Gets the first item in the tuple.

*/
- (T1) item1;
/**

    Gets the second item in the tuple.

*/
- (T2) item2;
/**

    Gets the third item in the tuple.

*/
- (T3) item3;
/**

    Initializes a new instance of the FMLiveSwitchTriple`3 class.

    @param item1 First item the tuple holds.
    @param item2 Second item the tuple holds.
    @param item3 Third item the tuple holds.
*/
+ (FMLiveSwitchTriple*) tripleWithItem1:(T1)item1 item2:(T2)item2 item3:(T3)item3;

@end

/**

    A 1-tuple.

*/
@interface FMLiveSwitchUnit<__covariant T> : NSObject

/**

    Initializes a new instance of the FMLiveSwitchUnit`1 class.

    @param item The item to hold.
*/
- (instancetype) initWithItem:(T)item;
/**

    Gets the item in the tuple.

*/
- (T) item;
/**

    Initializes a new instance of the FMLiveSwitchUnit`1 class.

    @param item The item to hold.
*/
+ (FMLiveSwitchUnit*) unitWithItem:(T)item;

@end

@interface FMLiveSwitchCompareResultWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchCompareResult)value;

@end

/**

    A collection of platform-independent constant values.

*/
@interface FMLiveSwitchConstants : NSObject

+ (FMLiveSwitchConstants*) constants;
/**

    Gets the default number of milliseconds for an audio frame.

*/
+ (int) defaultMillisecondsPerAudioFrame;
/**

    Gets the number of hours in one day.

*/
+ (int) hoursPerDay;
- (instancetype) init;
/**

    Gets the number of milliseconds in one hour.

*/
+ (int) millisecondsPerDay;
/**

    Gets the number of milliseconds in one hour.

*/
+ (int) millisecondsPerHour;
/**

    Gets the number of milliseconds in one minute.

*/
+ (int) millisecondsPerMinute;
/**

    Gets the number of milliseconds in one second.

*/
+ (int) millisecondsPerSecond;
/**

    Gets the number of minutes in one day.

*/
+ (int) minutesPerDay;
/**

    Gets the number of minutes in one hour.

*/
+ (int) minutesPerHour;
/**

    Gets the number of nanoseconds in one tick.

*/
+ (int) nanosecondsPerTick;
/**

    Gets the number of seconds in one day.

*/
+ (int) secondsPerDay;
/**

    Gets the number of seconds in one hour.

*/
+ (int) secondsPerHour;
/**

    Gets the number of seconds in one minute.

*/
+ (int) secondsPerMinute;
/**

    Gets the number of ticks in one day.

*/
+ (long long) ticksPerDay;
/**

    Gets the number of ticks in one hour.

*/
+ (long long) ticksPerHour;
/**

    Gets the number of ticks in one microsecond.

*/
+ (int) ticksPerMicrosecond;
/**

    Gets the number of ticks in one millisecond.

*/
+ (int) ticksPerMillisecond;
/**

    Gets the number of ticks in one minute.

*/
+ (int) ticksPerMinute;
/**

    Gets the number of ticks in one second.

*/
+ (int) ticksPerSecond;

@end

/**

    Calculates CRC32 checksums.

*/
@interface FMLiveSwitchCrc32 : NSObject

/**

    Computes the 32-bit CRC hex string for an array of bytes.

    @param bytes The bytes.
*/
- (NSString*) computeHexWithBytes:(NSMutableData*)bytes;
/**

    Computes the 32-bit CRC hex string for an array of bytes.

    @param bytes The bytes.
    @param offset The offset.
*/
- (NSString*) computeHexWithBytes:(NSMutableData*)bytes offset:(int)offset;
/**

    Computes the 32-bit CRC hex string for an array of bytes.

    @param bytes The bytes.
    @param offset The offset.
    @param length The length.
*/
- (NSString*) computeHexWithBytes:(NSMutableData*)bytes offset:(int)offset length:(int)length;
/**

    Computes the 32-bit CRC for an array of bytes.

    @param bytes The bytes.
*/
- (long long) computeWithBytes:(NSMutableData*)bytes;
/**

    Computes the 32-bit CRC for an array of bytes.

    @param bytes The bytes.
    @param offset The offset.
*/
- (long long) computeWithBytes:(NSMutableData*)bytes offset:(int)offset;
/**

    Computes the 32-bit CRC for an array of bytes.

    @param bytes The bytes.
    @param offset The offset.
    @param length The length.
*/
- (long long) computeWithBytes:(NSMutableData*)bytes offset:(int)offset length:(int)length;
/**

    Initializes a new instance of the FMLiveSwitchCrc32 class
    using the CRC32 polynomial.

*/
+ (FMLiveSwitchCrc32*) crc32;
/**

    Gets the CRC32c polynomial.

*/
+ (long long) crc32cPolynomial;
/**

    Gets the CRC32d polynomial.

*/
+ (long long) crc32dPolynomial;
/**

    Gets the CRC32 polynomial.

*/
+ (long long) crc32Polynomial;
/**

    Initializes a new instance of the FMLiveSwitchCrc32 class
    using the specified polynomial.

    @param polynomial The polynomial.
*/
+ (FMLiveSwitchCrc32*) crc32WithPolynomial:(long long)polynomial;
/**

    Initializes a new instance of the FMLiveSwitchCrc32 class
    using the specified polynomial.

    @param polynomial The polynomial.
    @param reverseBits Whether to reverse the bits.
*/
+ (FMLiveSwitchCrc32*) crc32WithPolynomial:(long long)polynomial reverseBits:(bool)reverseBits;
/**

    Gets the value used to XOR the final result.

*/
- (long long) finalXorValue;
/**

    Initializes a new instance of the FMLiveSwitchCrc32 class
    using the CRC32 polynomial.

*/
- (instancetype) init;
/**

    Gets the initial value.

*/
- (long long) initialValue;
/**

    Initializes a new instance of the FMLiveSwitchCrc32 class
    using the specified polynomial.

    @param polynomial The polynomial.
*/
- (instancetype) initWithPolynomial:(long long)polynomial;
/**

    Initializes a new instance of the FMLiveSwitchCrc32 class
    using the specified polynomial.

    @param polynomial The polynomial.
    @param reverseBits Whether to reverse the bits.
*/
- (instancetype) initWithPolynomial:(long long)polynomial reverseBits:(bool)reverseBits;
/**

    Gets the polynomial.

*/
- (long long) polynomial;
/**

    Gets a value indicating whether to reverse the bits.

*/
- (bool) reverseBits;
/**

    Sets the value used to XOR the final result.

*/
- (void) setFinalXorValue:(long long)value;
/**

    Sets the initial value.

*/
- (void) setInitialValue:(long long)value;

@end

/**

    A data buffer stream.

*/
@interface FMLiveSwitchDataBufferStream : NSObject

/**

    Gets the available bytes to be read from the DataBuffer.

*/
- (int) available;
/**

    Gets the bit position within a byte.

*/
- (uint8_t) bitPosition;
/**

    Gets the buffer.

*/
- (FMLiveSwitchDataBuffer*) buffer;
/**

    Initializes a new instance of the FMLiveSwitchDataBufferStream class.

    @param buffer The buffer.
*/
+ (FMLiveSwitchDataBufferStream*) dataBufferStreamWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchDataBufferStream class.

    @param dataBufferSize Size of the data buffer.
*/
+ (FMLiveSwitchDataBufferStream*) dataBufferStreamWithDataBufferSize:(int)dataBufferSize;
/**

    Initializes a new instance of the FMLiveSwitchDataBufferStream class.

    @param dataBufferSize Size of the data buffer.
    @param littleEndian Whether the data is little-endian.
*/
+ (FMLiveSwitchDataBufferStream*) dataBufferStreamWithDataBufferSize:(int)dataBufferSize littleEndian:(bool)littleEndian;
/**

    Initializes a new instance of the FMLiveSwitchDataBufferStream class.

    @param buffer The buffer.
*/
- (instancetype) initWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchDataBufferStream class.

    @param dataBufferSize Size of the data buffer.
*/
- (instancetype) initWithDataBufferSize:(int)dataBufferSize;
/**

    Initializes a new instance of the FMLiveSwitchDataBufferStream class.

    @param dataBufferSize Size of the data buffer.
    @param littleEndian Whether the data is little-endian.
*/
- (instancetype) initWithDataBufferSize:(int)dataBufferSize littleEndian:(bool)littleEndian;
/**

    Gets the buffer length.

*/
- (int) length;
/**

    Resets the bit count to 0 and advances to the next byte.

*/
- (void) nextByte;
/**

    Reads an 8-bit value from the DataBuffer without advancing the Position.

*/
- (int) peek;
/**

    Gets the position within the stream.

*/
- (int) position;
/**

    Read a single bit and advance the bit position by 1.

*/
- (bool) read1;
/**

    Reads an 15-bit value from the DataBuffer and advances the Position by 1 and the BitPosition by 7.

*/
- (int) read15;
/**

    Reads an 16-bit value from the DataBuffer and advances the Position by 2.

*/
- (int) read16;
/**

    Read a 2-bit value and advance the BitPosition by 2.

*/
- (int) read2;
/**

    Reads an 24-bit value from the DataBuffer and advances the Position by 3.

*/
- (int) read24;
/**

    Read a 3-bit value and advance the BitPosition by 3.

*/
- (int) read3;
/**

    Reads an 32-bit value from the DataBuffer and advances the Position by 4.

*/
- (long long) read32;
/**

    Read a 4-bit value and advance the BitPosition by 4.

*/
- (int) read4;
/**

    Reads an 40-bit value from the DataBuffer and advances the Position by 5.

*/
- (long long) read40;
/**

    Reads an 48-bit value from the DataBuffer and advances the Position by 6.

*/
- (long long) read48;
/**

    Reads an 56-bit value from the DataBuffer and advances the Position by 7.

*/
- (long long) read56;
/**

    Reads an 64-bit value from the DataBuffer and advances the Position by 8.

*/
- (long long) read64;
/**

    Reads an 7-bit value from the DataBuffer and advances the BitPosition by 7.

*/
- (int) read7;
/**

    Reads an 8-bit value from the DataBuffer and advances the Position by 1.

*/
- (int) read8;
/**

    Reads a single byte from the stream and advances the Position by 1.

*/
- (int) readByte;
/**

    Read a specified number of bytes from the DataBuffer and advance the Position by that number.

    @param length The number of bytes to read.
*/
- (NSMutableData*) readBytesWithLength:(int)length;
/**

    Reads the specified length from the DataBuffer and advances the position by the length.

    @param length The length.
*/
- (FMLiveSwitchDataBuffer*) readWithLength:(int)length;
/**

    Sets the bit position within a byte.

*/
- (void) setBitPosition:(uint8_t)value;
/**

    Sets the position within the stream.

*/
- (void) setPosition:(int)value;
/**

    Writes an 16-bit value to the DataBuffer and advances the Position by 2.

    @param value The value.
*/
- (FMLiveSwitchDataBufferStream*) write16:(int)value;
/**

    Writes an 32-bit value to the DataBuffer and advances the Position by 4.

    @param value The value.
*/
- (FMLiveSwitchDataBufferStream*) write32:(long long)value;
/**

    Writes an 64-bit value to the DataBuffer and advances the Position by 8.

    @param value The value.
*/
- (FMLiveSwitchDataBufferStream*) write64:(long long)value;
/**

    Writes an 8-bit value to the DataBuffer and advances the Position by 1.

    @param value The value.
*/
- (FMLiveSwitchDataBufferStream*) write8:(int)value;
/**

    Writes the specified data to the DataBuffer and advances the Position by the length of the data.

    @param data The data.
*/
- (FMLiveSwitchDataBufferStream*) writeBytesWithData:(NSMutableData*)data;
/**

    Writes the specified data to the DataBuffer and advances the Position by the length.

    @param data The data.
    @param index The index.
    @param length The length.
*/
- (FMLiveSwitchDataBufferStream*) writeBytesWithData:(NSMutableData*)data index:(int)index length:(int)length;
/**

    Writes the specified buffer to the DataBuffer and advances the Position by the length of the buffer.

    @param buffer The buffer.
*/
- (FMLiveSwitchDataBufferStream*) writeWithBuffer:(FMLiveSwitchDataBuffer*)buffer;

@end

/**

    Binary data buffer implementation

*/
@interface FMLiveSwitchDataBuffer : NSObject

/**

    Allocates a new data buffer with a given size (in bytes)
    in big-endian format.

    @param count Pre-allocated data buffer size  (in bytes).
*/
+ (FMLiveSwitchDataBuffer*) allocateWithCount:(int)count;
/**

    Allocates a new data buffer with a given size (in bytes).

    @param count Pre-allocated data buffer size  (in bytes).
    @param littleEndian Whether the data is little-endian.
*/
+ (FMLiveSwitchDataBuffer*) allocateWithCount:(int)count littleEndian:(bool)littleEndian;
/**

    Performs a bitwise "and" operation on a value.

    @param value The value.
    @param offset The offset.
*/
- (bool) and:(int)value offset:(int)offset;
/**

    Appends a buffer.

    @param buffer The buffer.
*/
- (FMLiveSwitchDataBuffer*) appendWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Appends some buffers.

    @param buffers The buffers.
*/
- (FMLiveSwitchDataBuffer*) appendWithBuffers:(NSMutableArray*)buffers;
/**

    Tests if the two buffers have equal contents.

    @param buffer1 First buffer to test.
    @param buffer2 Second buffer to test.
*/
+ (bool) areEqualWithBuffer1:(FMLiveSwitchDataBuffer*)buffer1 buffer2:(FMLiveSwitchDataBuffer*)buffer2;
/**

    Gets whether this buffer can be resized to the new length.

    @param newLength The new length.
    @param offset The offset.
*/
- (bool) canResizeWithNewLength:(int)newLength offset:(int)offset;
/**

    Clones this instance.

*/
- (FMLiveSwitchDataBuffer*) clone;
/**

    Clones this instance.

    @param littleEndian Whether to clone into a little endian buffer.
*/
- (FMLiveSwitchDataBuffer*) cloneWithLittleEndian:(bool)littleEndian;
/**

    Copies this instance into new memory.

*/
- (FMLiveSwitchDataBuffer*) copy;
/**

    Copies this instance.

*/
- (FMLiveSwitchDataBuffer*) copyWithUsePool:(bool)usePool;
/**

    Gets the data.

*/
- (NSMutableData*) data;
/**

    Gets an empty data buffer.

*/
+ (FMLiveSwitchDataBuffer*) empty;
/**

    Decrements the retain count by one and returns the Buffer to the pool if zero.

*/
- (FMLiveSwitchDataBuffer*) free;
/**

    Creates an instance from an array of bytes.

*/
+ (FMLiveSwitchDataBuffer*) fromBytes:(NSMutableData*)bytes;
/**

    Creates an instance from an array of bytes.

*/
+ (FMLiveSwitchDataBuffer*) fromBytes:(NSMutableData*)bytes littleEndian:(bool)littleEndian;
/**

    Creates an instance from a hexadecimal string.

*/
+ (FMLiveSwitchDataBuffer*) fromHexString:(NSString*)hexString;
/**

    Creates an instance from a hexadecimal string.

*/
+ (FMLiveSwitchDataBuffer*) fromHexString:(NSString*)hexString littleEndian:(bool)littleEndian;
/**

    Deserializes an array of instances from JSON.

    @param dataBuffersJson The data buffers JSON.
*/
+ (NSMutableArray*) fromJsonArrayWithDataBuffersJson:(NSString*)dataBuffersJson;
/**

    Deserializes an instance from JSON.

    @param dataBufferJson The data buffer JSON.
*/
+ (FMLiveSwitchDataBuffer*) fromJsonWithDataBufferJson:(NSString*)dataBufferJson;
/**

    Gets the index.

*/
- (int) index;
/**

    Gets backing data buffer.

*/
- (NSMutableData*) innerData;
/**

    Gets whether this DataBuffer is from a pool.

*/
- (bool) isPooled;
/**

    Gets whether this DataBuffer is a subset.

*/
- (bool) isSubset;
/**

    Increment the retain count by one.

*/
- (FMLiveSwitchDataBuffer*) keep;
/**

    Gets the length.

*/
- (int) length;
/**

    Gets whether FMLiveSwitchDataBuffer#data is little-endian.

*/
- (bool) littleEndian;
/**

    Performs a bitwise "or" operation on a value.

    @param value The value.
    @param offset The offset.
*/
- (bool) or:(int)value offset:(int)offset;
/**

    Prepends a buffer.

    @param buffer The buffer.
*/
- (FMLiveSwitchDataBuffer*) prependWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Prepends some buffers.

    @param buffers The buffers.
*/
- (void) prependWithBuffers:(NSMutableArray*)buffers;
/**

    Reads a 10-bit signed value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read10SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 10-bit value.

    @param offset The offset.
    @param bitOffset The bitoffset.
*/
- (int) read10WithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 11-bit signed value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read11SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 11-bit value.

    @param offset The offset.
    @param bitOffset The bitoffset.
*/
- (int) read11WithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 12-bit signed value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read12SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 12-bit value.

    @param offset The offset.
    @param bitOffset The bitoffset.
*/
- (int) read12WithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 13-bit signed value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read13SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 13-bit value.

    @param offset The offset.
    @param bitOffset The bitoffset.
*/
- (int) read13WithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 14-bit signed value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read14SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 14-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read14WithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 15-bit signed value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read15SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 15-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read15WithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 16-bit signed value.

    @param offset The offset.
*/
- (int) read16SignedWithOffset:(int)offset;
/**

    Reads a 16-bit signed value.

    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (int) read16SignedWithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Reads a 16-bit value.

    @param offset The offset.
*/
- (int) read16WithOffset:(int)offset;
/**

    Reads a 16-bit value.

    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (int) read16WithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Reads a 17-bit signed value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read17SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 17-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read17WithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads an 18-bit signed value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read18SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads an 18-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read18WithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 19-bit signed value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read19SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 19-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read19WithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 1-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (bool) read1WithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 20-bit signed value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read20SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 20-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read20WithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 21-bit signed value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read21SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 21-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read21WithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 22-bit signed value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read22SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 22-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read22WithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 23-bit signed value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read23SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 23-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read23WithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 24-bit signed value.

    @param offset The offset.
*/
- (int) read24SignedWithOffset:(int)offset;
/**

    Reads a 24-bit signed value.

    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (int) read24SignedWithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Reads a 24-bit value.

    @param offset The offset.
*/
- (int) read24WithOffset:(int)offset;
/**

    Reads a 24-bit value.

    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (int) read24WithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Reads a 2-bit signed value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read2SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 2-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read2WithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 32-bit signed value.

    @param offset The offset.
*/
- (long long) read32SignedWithOffset:(int)offset;
/**

    Reads a 32-bit signed value.

    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (long long) read32SignedWithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Reads a 32-bit value.

    @param offset The offset.
*/
- (long long) read32WithOffset:(int)offset;
/**

    Reads a 32-bit value.

    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (long long) read32WithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Reads a 3-bit signed value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read3SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 3-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read3WithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 40-bit signed value.

    @param offset The offset.
*/
- (long long) read40SignedWithOffset:(int)offset;
/**

    Reads a 40-bit signed value.

    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (long long) read40SignedWithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Reads a 40-bit value.

    @param offset The offset.
*/
- (long long) read40WithOffset:(int)offset;
/**

    Reads a 40-bit value.

    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (long long) read40WithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Reads a 48-bit signed value.

    @param offset The offset.
*/
- (long long) read48SignedWithOffset:(int)offset;
/**

    Reads a 48-bit signed value.

    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (long long) read48SignedWithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Reads a 48-bit value.

    @param offset The offset.
*/
- (long long) read48WithOffset:(int)offset;
/**

    Reads a 48-bit value.

    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (long long) read48WithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Reads a 4-bit signed value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read4SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 4-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read4WithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 56-bit signed value.

    @param offset The offset.
*/
- (long long) read56SignedWithOffset:(int)offset;
/**

    Reads a 56-bit signed value.

    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (long long) read56SignedWithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Reads a 56-bit value.

    @param offset The offset.
*/
- (long long) read56WithOffset:(int)offset;
/**

    Reads a 56-bit value.

    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (long long) read56WithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Reads a 5-bit signed value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read5SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 5-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read5WithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 64-bit signed value.

    @param offset The offset.
*/
- (long long) read64SignedWithOffset:(int)offset;
/**

    Reads a 64-bit signed value.

    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (long long) read64SignedWithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Reads a 64-bit value.

    @param offset The offset.
*/
- (long long) read64WithOffset:(int)offset;
/**

    Reads a 64-bit value.

    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (long long) read64WithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Reads a 6-bit signed value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read6SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 6-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read6WithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 7-bit signed value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read7SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 7-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read7WithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads an 8-bit signed value.

    @param offset The offset.
*/
- (int) read8SignedWithOffset:(int)offset;
/**

    Reads an 8-bit signed value.

    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (int) read8SignedWithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Reads an 8-bit value.

    @param offset The offset.
*/
- (int) read8WithOffset:(int)offset;
/**

    Reads an 8-bit value.

    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (int) read8WithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Reads a 9-bit signed value.

    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (int) read9SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Reads a 9-bit value.

    @param offset The offset.
    @param bitOffset The bitoffset.
*/
- (int) read9WithOffset:(int)offset bitOffset:(int)bitOffset;
/**

    Read a UTF-8 string.

    @param offset The offset.
*/
- (NSString*) readUtf8StringWithOffset:(int)offset;
/**

    Reads a UTF-8 string.

    @param offset The offset.
    @param length The length.
*/
- (NSString*) readUtf8StringWithOffset:(int)offset length:(int)length;
/**

    Resizes this buffer to a new length with new data being inserted at the end.

    @param newLength The new length.
*/
- (void) resizeWithNewLength:(int)newLength;
/**

    Resizes this buffer to a new length with new data being inserted at a given offset.

    @param newLength The new length.
    @param offset The offset.
*/
- (void) resizeWithNewLength:(int)newLength offset:(int)offset;
/**

    Resizes this buffer to a new length with new data being inserted at a given offset.

    @param newLength The new length.
    @param offset The offset.
    @param setZero Sets empty space to zero.
*/
- (void) resizeWithNewLength:(int)newLength offset:(int)offset setZero:(bool)setZero;
/**

    Compares a data buffer for equality in constant time.

    @param buffer The buffer.
    @return `true` if the sequences are equal; otherwise, `false`.
            
*/
- (bool) sequenceEqualsConstantTimeWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Compares a data buffer for equality.

    @param buffer The data buffer.
    @return `true` if the sequences are equal; otherwise, `false`.
            
*/
- (bool) sequenceEqualsWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Sets the data buffer to the specified value.

    @param value The value.
*/
- (void) set:(uint8_t)value;
/**

    Sets a subset of the data buffer to the specified value.

    @param value The value.
    @param offset The offset.
*/
- (void) set:(uint8_t)value offset:(int)offset;
/**

    Sets a subset of the data buffer to the specified value.

    @param value The value.
    @param offset The offset.
    @param length The length.
*/
- (void) set:(uint8_t)value offset:(int)offset length:(int)length;
/**

    Sets backing data buffer.

*/
- (void) setInnerData:(NSMutableData*)value;
/**

    Sets whether FMLiveSwitchDataBuffer#data is little-endian.

*/
- (void) setLittleEndian:(bool)value;
/**

    Gets a subset of this instance.

    @param offset The offset.
*/
- (FMLiveSwitchDataBuffer*) subsetWithOffset:(int)offset;
/**

    Gets a subset of this instance.

    @param offset The offset.
    @param length The length.
*/
- (FMLiveSwitchDataBuffer*) subsetWithOffset:(int)offset length:(int)length;
/**

    Converts this instance to an array of bytes.

*/
- (NSMutableData*) toArray;
/**

    Converts this instance to an array of bytes.

*/
- (NSMutableData*) toBytes;
/**

    Converts this instance to a hexadecimal string.

*/
- (NSString*) toHexString;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array of instances to JSON.

    @param dataBuffers The data buffers.
*/
+ (NSString*) toJsonArrayWithDataBuffers:(NSMutableArray*)dataBuffers;
/**

    Serializes an instance to JSON.

    @param dataBuffer The data buffer.
*/
+ (NSString*) toJsonWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Attempts to increment the retain count by one.

    @return True if successful.
*/
- (bool) tryKeep;
/**

    Tries to read a 10-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
    @param value The value.
*/
- (bool) tryRead10WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read an 11-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
    @param value The value.
*/
- (bool) tryRead11WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 12-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
    @param value The value.
*/
- (bool) tryRead12WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 13-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
    @param value The value.
*/
- (bool) tryRead13WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 14-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
    @param value The value.
*/
- (bool) tryRead14WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 15-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
    @param value The value.
*/
- (bool) tryRead15WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 16-bit value.

    @param offset The offset.
    @param value The value.
*/
- (bool) tryRead16WithOffset:(int)offset value:(int*)value;
/**

    Tries to read a 17-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
    @param value The value.
*/
- (bool) tryRead17WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read an 18-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
    @param value The value.
*/
- (bool) tryRead18WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 19-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
    @param value The value.
*/
- (bool) tryRead19WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 1-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
    @param value if set to `true` [value].
*/
- (bool) tryRead1WithOffset:(int)offset bitOffset:(int)bitOffset value:(bool*)value;
/**

    Tries to read a 20-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
    @param value The value.
*/
- (bool) tryRead20WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 21-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
    @param value The value.
*/
- (bool) tryRead21WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 22-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
    @param value The value.
*/
- (bool) tryRead22WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 23-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
    @param value The value.
*/
- (bool) tryRead23WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 24-bit value.

    @param offset The offset.
    @param value The value.
*/
- (bool) tryRead24WithOffset:(int)offset value:(int*)value;
/**

    Tries to read a 2-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
    @param value The value.
*/
- (bool) tryRead2WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 32-bit value.

    @param offset The offset.
    @param value The value.
*/
- (bool) tryRead32WithOffset:(int)offset value:(long long*)value;
/**

    Tries to read a 3-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
    @param value The value.
*/
- (bool) tryRead3WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 40-bit value.

    @param offset The offset.
    @param value The value.
*/
- (bool) tryRead40WithOffset:(int)offset value:(long long*)value;
/**

    Tries to read a 48-bit value.

    @param offset The offset.
    @param value The value.
*/
- (bool) tryRead48WithOffset:(int)offset value:(long long*)value;
/**

    Tries to read a 4-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
    @param value The value.
*/
- (bool) tryRead4WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 56-bit value.

    @param offset The offset.
    @param value The value.
*/
- (bool) tryRead56WithOffset:(int)offset value:(long long*)value;
/**

    Tries to read a 5-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
    @param value The value.
*/
- (bool) tryRead5WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 64-bit value.

    @param offset The offset.
    @param value The value.
*/
- (bool) tryRead64WithOffset:(int)offset value:(long long*)value;
/**

    Tries to read a 6-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
    @param value The value.
*/
- (bool) tryRead6WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read a 7-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
    @param value The value.
*/
- (bool) tryRead7WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/**

    Tries to read an 8-bit value.

    @param offset The offset.
    @param value The value.
*/
- (bool) tryRead8WithOffset:(int)offset value:(int*)value;
/**

    Tries to read a 9-bit value.

    @param offset The offset.
    @param bitOffset The bit offset.
    @param value The value.
*/
- (bool) tryRead9WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/**

    Produces a new data buffer containing supplied data
    in big-endian format.

    @param data The data.
*/
+ (FMLiveSwitchDataBuffer*) wrapWithData:(NSMutableData*)data;
/**

    Produces a new data buffer containing supplied data
    in big-endian format.

    @param data The data.
    @param index The index.
*/
+ (FMLiveSwitchDataBuffer*) wrapWithData:(NSMutableData*)data index:(int)index;
/**

    Produces a new data buffer containing supplied data
    in big-endian format.

    @param data The data.
    @param index The index.
    @param length The length.
*/
+ (FMLiveSwitchDataBuffer*) wrapWithData:(NSMutableData*)data index:(int)index length:(int)length;
/**

    Produces a new data buffer containing supplied data.

    @param data The data.
    @param index The index.
    @param length The length.
    @param littleEndian Whether the data is little-endian.
*/
+ (FMLiveSwitchDataBuffer*) wrapWithData:(NSMutableData*)data index:(int)index length:(int)length littleEndian:(bool)littleEndian;
/**

    Produces a new data buffer containing supplied data.

    @param data The data.
    @param index The index.
    @param littleEndian Whether the data is little-endian.
*/
+ (FMLiveSwitchDataBuffer*) wrapWithData:(NSMutableData*)data index:(int)index littleEndian:(bool)littleEndian;
/**

    Produces a new data buffer containing supplied data.

    @param data The data.
    @param littleEndian Whether the data is little-endian.
*/
+ (FMLiveSwitchDataBuffer*) wrapWithData:(NSMutableData*)data littleEndian:(bool)littleEndian;
/**

    Writes a 1-bit value.

    @param value The value.
    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (bool) write1:(bool)value offset:(int)offset bitOffset:(int)bitOffset;
/**

    Writes a 10-bit value.

    @param value The value.
    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (bool) write10:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/**

    Writes an 11-bit value.

    @param value The value.
    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (bool) write11:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/**

    Writes a 12-bit value.

    @param value The value.
    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (bool) write12:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/**

    Writes a 13-bit value.

    @param value The value.
    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (bool) write13:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/**

    Writes a 14-bit value.

    @param value The value.
    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (bool) write14:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/**

    Writes a 15-bit value.

    @param value The value.
    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (bool) write15:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/**

    Writes a 16-bit value.

    @param value The value.
    @param offset The offset.
*/
- (bool) write16:(int)value offset:(int)offset;
/**

    Writes a 16-bit value.

    @param value The value.
    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (bool) write16:(int)value offset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Writes a signed 16-bit value.

    @param value The value.
    @param offset The offset.
*/
- (bool) write16Signed:(int)value offset:(int)offset;
/**

    Writes a 17-bit value.

    @param value The value.
    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (bool) write17:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/**

    Writes an 18-bit value.

    @param value The value.
    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (bool) write18:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/**

    Writes a 19-bit value.

    @param value The value.
    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (bool) write19:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/**

    Writes a 2-bit value.

    @param value The value.
    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (bool) write2:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/**

    Writes a 20-bit value.

    @param value The value.
    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (bool) write20:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/**

    Writes a 21-bit value.

    @param value The value.
    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (bool) write21:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/**

    Writes a 22-bit value.

    @param value The value.
    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (bool) write22:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/**

    Writes a 23-bit value.

    @param value The value.
    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (bool) write23:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/**

    Writes a 24-bit value.

    @param value The value.
    @param offset The offset.
*/
- (bool) write24:(int)value offset:(int)offset;
/**

    Writes a 24-bit value.

    @param value The value.
    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (bool) write24:(int)value offset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Writes a 3-bit value.

    @param value The value.
    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (bool) write3:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/**

    Writes a 32-bit value.

    @param value The value.
    @param offset The offset.
*/
- (bool) write32:(long long)value offset:(int)offset;
/**

    Writes a 32-bit value.

    @param value The value.
    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (bool) write32:(long long)value offset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Writes a 4-bit value.

    @param value The value.
    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (bool) write4:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/**

    Writes a 40-bit value.

    @param value The value.
    @param offset The offset.
*/
- (bool) write40:(long long)value offset:(int)offset;
/**

    Writes a 40-bit value.

    @param value The value.
    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (bool) write40:(long long)value offset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Writes a 48-bit value.

    @param value The value.
    @param offset The offset.
*/
- (bool) write48:(long long)value offset:(int)offset;
/**

    Writes a 48-bit value.

    @param value The value.
    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (bool) write48:(long long)value offset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Writes a 5-bit value.

    @param value The value.
    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (bool) write5:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/**

    Writes a 56-bit value.

    @param value The value.
    @param offset The offset.
*/
- (bool) write56:(long long)value offset:(int)offset;
/**

    Writes a 56-bit value.

    @param value The value.
    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (bool) write56:(long long)value offset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Writes a 6-bit value.

    @param value The value.
    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (bool) write6:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/**

    Writes a 64-bit value.

    @param value The value.
    @param offset The offset.
*/
- (bool) write64:(long long)value offset:(int)offset;
/**

    Writes a 64-bit value.

    @param value The value.
    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (bool) write64:(long long)value offset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Writes a 7-bit value.

    @param value The value.
    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (bool) write7:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/**

    Writes an 8-bit value.

    @param value The value.
    @param offset The offset.
*/
- (bool) write8:(int)value offset:(int)offset;
/**

    Writes an 8-bit value.

    @param value The value.
    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (bool) write8:(int)value offset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Writes a 9-bit value.

    @param value The value.
    @param offset The offset.
    @param bitOffset The bit offset.
*/
- (bool) write9:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/**

    Writes a byte array to this instance.

    @param bytes The bytes.
*/
- (void) writeBytes:(NSMutableData*)bytes;
/**

    Writes a byte array to this instance.

    @param bytes The bytes.
    @param bytesIndex The bytes index.
    @param bytesLength The bytes length.
    @param offset The offset.
*/
- (void) writeBytes:(NSMutableData*)bytes bytesIndex:(int)bytesIndex bytesLength:(int)bytesLength offset:(int)offset;
/**

    Writes a byte array to this instance.

    @param bytes The bytes.
    @param bytesIndex The bytes index.
    @param bytesLength The bytes length.
    @param offset The offset.
    @param offsetPlus The offset plus the buffer length.
*/
- (void) writeBytes:(NSMutableData*)bytes bytesIndex:(int)bytesIndex bytesLength:(int)bytesLength offset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Writes a byte array to this instance.

    @param bytes The bytes.
    @param bytesIndex The bytes index.
    @param offset The offset.
*/
- (void) writeBytes:(NSMutableData*)bytes bytesIndex:(int)bytesIndex offset:(int)offset;
/**

    Writes a byte array to this instance.

    @param bytes The bytes.
    @param offset The offset.
*/
- (void) writeBytes:(NSMutableData*)bytes offset:(int)offset;
/**

    Writes a data buffer to this instance.

    @param buffer The buffer.
*/
- (void) writeWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Writes a data buffer to this instance.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Writes a data buffer to this instance.

    @param buffer The buffer.
    @param offset The offset.
    @param offsetPlus The offset plus the buffer length.
*/
- (void) writeWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Performs a bitwise "xor" operation on a value.

    @param value The value.
    @param offset The offset.
*/
- (bool) xor:(int)value offset:(int)offset;

@end

/**

    A DataBuffer that uses a circular buffer to manage data.

*/
@interface FMLiveSwitchCircularDataBuffer : FMLiveSwitchDataBuffer

/**

    Appends a data buffer to the correct place in this circular data buffer.

    @param buffer The buffer to write.
*/
- (void) appendDataBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Tells the CircularDataBuffer to expect more data of up to maxWriteSize. Will reshuffle data around or resize if necessary.

    @param maxWriteSize The amount of bytes to make available for writing.
*/
- (int) beginWriteWithMaxWriteSize:(int)maxWriteSize;
/**

    Gets the capacity of this CircularDataBuffer.

*/
- (int) capacity;
/**

    Creates a new instance of the CircularDataBuffer that can hold a initial amount of data.

    @param initialSize The initial size of the inner buffer.
*/
+ (FMLiveSwitchCircularDataBuffer*) createWithInitialSize:(int)initialSize;
/**

    Gets the data.

*/
- (NSMutableData*) data;
/**

    Advances the Index by amount so the space used by the data can be reused.

    @param amount The amount to advance the Index by.
*/
- (void) discardWithAmount:(int)amount;
/**

    Tells the CircularDataBuffer how much data was actually written so that the Length can be set appropriately.

    @param actuallyWrittenSize The amount of data actually written to the data buffer.
*/
- (void) endWriteWithActuallyWrittenSize:(int)actuallyWrittenSize;
/**

    Frees the internal pooled DataBuffer.

*/
- (FMLiveSwitchDataBuffer*) free;

@end

/**

    A subset of a DataBuffer.

*/
@interface FMLiveSwitchDataBufferSubset : FMLiveSwitchDataBuffer

/**

    Appends a buffer.

    @param buffer The buffer.
*/
- (FMLiveSwitchDataBuffer*) appendWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Appends some buffers.

    @param buffers The buffers.
*/
- (FMLiveSwitchDataBuffer*) appendWithBuffers:(NSMutableArray*)buffers;
/**

    Gets the data.

*/
- (NSMutableData*) data;
/**

    Decrements the retain count by one and returns the Buffer to the pool if zero.

*/
- (FMLiveSwitchDataBuffer*) free;
/**

    Gets whether this DataBuffer is from a pool.

*/
- (bool) isPooled;
/**

    Gets whether this DataBuffer is a subset.

*/
- (bool) isSubset;
/**

    Increment the retain count by one.

*/
- (FMLiveSwitchDataBuffer*) keep;
/**

    Gets the Subset parent.

*/
- (FMLiveSwitchDataBuffer*) parent;
/**

    Prepends a buffer.

    @param buffer The buffer.
*/
- (FMLiveSwitchDataBuffer*) prependWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Prepends some buffers.

    @param buffers The buffers.
*/
- (void) prependWithBuffers:(NSMutableArray*)buffers;
/**

    Gets a subset of this instance.

    @param offset The offset.
*/
- (FMLiveSwitchDataBuffer*) subsetWithOffset:(int)offset;
/**

    Gets a subset of this instance.

    @param offset The offset.
    @param length The length.
*/
- (FMLiveSwitchDataBuffer*) subsetWithOffset:(int)offset length:(int)length;

@end

/**

    A socket.

*/
@interface FMLiveSwitchManagedSocket : NSObject

/**

    Gets the adapter speed.

*/
- (long long) adapterSpeed;
/**

    Binds the socket to a local endpoint.

    @param ipAddress The local IP address.
    @param port The local port.
    @param addressInUse Indicates that access to the address is forbidden or in use.
*/
- (bool) bindWithIPAddress:(NSString*)ipAddress port:(int)port addressInUse:(bool*)addressInUse;
/**

    Closes the socket.

*/
- (void) close;
- (instancetype) init;
/**

    Gets a value indicating whether the socket supports IPv6.

*/
- (bool) ipv6;
/**

    Gets a value indicating whether this instance is closed.

*/
- (bool) isClosed;
/**

    Gets the local IP address.

*/
- (NSString*) localIPAddress;
/**

    Gets the local port.

*/
- (int) localPort;
+ (FMLiveSwitchManagedSocket*) managedSocket;
/**

    Gets the public IP addresses, if known.

*/
- (NSMutableArray*) publicIPAddresses;
/**

    Sets the adapter speed.

*/
- (void) setAdapterSpeed:(long long)value;
/**

    Sets the public IP addresses, if known.

*/
- (void) setPublicIPAddresses:(NSMutableArray*)value;

@end

/**

    A datagram socket.

*/
@interface FMLiveSwitchDatagramSocket : FMLiveSwitchManagedSocket

+ (FMLiveSwitchDatagramSocket*) datagramSocket;
- (instancetype) init;
/**

    Gets the maximum number of packets
    that can be queued at any given point in time.

*/
- (int) maxQueuedPackets;
/**

    Invokes the receive failure callback.

    @param callback The callback.
    @param exception The exception.
*/
- (void) raiseReceiveFailureWithCallback:(FMLiveSwitchAction1<NSException*>*)callback exception:(NSException*)exception;
/**

    Invokes the receive failure callback.

    @param callbackBlock The callback.
    @param exception The exception.
*/
- (void) raiseReceiveFailureWithCallbackBlock:(void(^)(NSException*))callbackBlock exception:(NSException*)exception;
/**

    Invokes the receive failure callback.

    @inlineparam callbackBlock The callback.
    @inlineparam exception The exception.
*/
- (void (^)(void(^)(NSException*), NSException*)) raiseReceiveFailureWithCallbackBlockAndException;
/**

    Invokes the receive success callback.

    @param callback The callback.
    @param buffer The buffer.
    @param ipAddress The IP address.
    @param port The port.
*/
- (void) raiseReceiveSuccessWithCallback:(FMLiveSwitchAction3<FMLiveSwitchDataBuffer*,NSString*,id>*)callback buffer:(FMLiveSwitchDataBuffer*)buffer ipAddress:(NSString*)ipAddress port:(int)port;
/**

    Invokes the receive success callback.

    @param callbackBlock The callback.
    @param buffer The buffer.
    @param ipAddress The IP address.
    @param port The port.
*/
- (void) raiseReceiveSuccessWithCallbackBlock:(void(^)(FMLiveSwitchDataBuffer*, NSString*, int))callbackBlock buffer:(FMLiveSwitchDataBuffer*)buffer ipAddress:(NSString*)ipAddress port:(int)port;
/**

    Invokes the receive success callback.

    @inlineparam callbackBlock The callback.
    @inlineparam buffer The buffer.
    @inlineparam ipAddress The IP address.
    @inlineparam port The port.
*/
- (void (^)(void(^)(FMLiveSwitchDataBuffer*, NSString*, int), FMLiveSwitchDataBuffer*, NSString*, int)) raiseReceiveSuccessWithCallbackBlockAndBufferAndIPAddressAndPort;
/**

    Receives data asynchronously.

    @param onSuccess The callback to invoke on success.
    @param onFailure The callback to invoke on failure.
*/
- (void) receiveAsyncWithOnSuccess:(FMLiveSwitchAction3<FMLiveSwitchDataBuffer*,NSString*,id>*)onSuccess onFailure:(FMLiveSwitchAction1<NSException*>*)onFailure;
/**

    Receives data asynchronously.

    @param onSuccessBlock The callback to invoke on success.
    @param onFailureBlock The callback to invoke on failure.
*/
- (void) receiveAsyncWithOnSuccessBlock:(void(^)(FMLiveSwitchDataBuffer*, NSString*, int))onSuccessBlock onFailureBlock:(void(^)(NSException*))onFailureBlock;
/**

    Receives data asynchronously.

    @inlineparam onSuccessBlock The callback to invoke on success.
    @inlineparam onFailureBlock The callback to invoke on failure.
*/
- (void (^)(void(^)(FMLiveSwitchDataBuffer*, NSString*, int), void(^)(NSException*))) receiveAsyncWithOnSuccessBlockAndOnFailureBlock;
/**

    Gets the current receive buffer size.

*/
- (int) receiveBufferSize;
/**

    Gets the current send buffer size.

*/
- (int) sendBufferSize;
/**

    Sends data synchronously.

    @param buffer The buffer.
    @param ipAddress The remote IP address.
    @param port The remote port.
*/
- (FMLiveSwitchError*) sendWithBuffer:(FMLiveSwitchDataBuffer*)buffer ipAddress:(NSString*)ipAddress port:(int)port;
/**

    Sets the maximum number of packets
    that can be queued at any given point in time.

*/
- (void) setMaxQueuedPackets:(int)value;

@end

/**

    Arguments for a datagram socket create event.

*/
@interface FMLiveSwitchDatagramSocketCreateArgs : NSObject

/**

    Initializes a new instance of the FMLiveSwitchDatagramSocketCreateArgs class.

    @param ipv6 Whether the socket should support IPv6.
*/
+ (FMLiveSwitchDatagramSocketCreateArgs*) datagramSocketCreateArgsWithIPv6:(bool)ipv6;
/**

    Initializes a new instance of the FMLiveSwitchDatagramSocketCreateArgs class.

    @param ipv6 Whether the socket should support IPv6.
*/
- (instancetype) initWithIPv6:(bool)ipv6;
/**

    Gets a value indicating whether the socket should support IPv6.

*/
- (bool) ipv6;
/**

    Sets the stream index.

*/
- (void) setStreamIndex:(int)value;
/**

    Gets the stream index.

*/
- (int) streamIndex;

@end

/**

    A hash context.

*/
@interface FMLiveSwitchHashContextBase : NSObject

/**

    Computes the hash.

    @param input The input.
*/
- (FMLiveSwitchDataBuffer*) computeWithInput:(FMLiveSwitchDataBuffer*)input;
/**

    Computes the hash.

    @param inputString The input.
*/
- (FMLiveSwitchDataBuffer*) computeWithInputString:(NSString*)inputString;
/**

    Computes the hash for a given type.

    @param type The type.
    @param input The input.
*/
+ (FMLiveSwitchDataBuffer*) computeWithType:(FMLiveSwitchHashType)type input:(FMLiveSwitchDataBuffer*)input;
/**

    Computes the hash for a given type.

    @param type The type.
    @param inputString The input string.
*/
+ (FMLiveSwitchDataBuffer*) computeWithType:(FMLiveSwitchHashType)type inputString:(NSString*)inputString;
/**

    Destroys this instance.

*/
- (void) destroy;
/**

    Computes the hash.

    @param input The input.
*/
- (FMLiveSwitchDataBuffer*) doComputeWithInput:(FMLiveSwitchDataBuffer*)input;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Initializes a new instance of the FMLiveSwitchHashContextBase class.

    @param type The type.
*/
+ (FMLiveSwitchHashContextBase*) hashContextBaseWithType:(FMLiveSwitchHashType)type;
/**

    Initializes a new instance of the FMLiveSwitchHashContextBase class.

    @param type The type.
*/
- (instancetype) initWithType:(FMLiveSwitchHashType)type;
/**

    Gets the type.

*/
- (FMLiveSwitchHashType) type;

@end

/**

    A message authentication code (MAC) context.

*/
@interface FMLiveSwitchMacContextBase : NSObject

/**

    Computes the message authentication code (MAC).

    @param input The input.
*/
- (FMLiveSwitchDataBuffer*) computeWithInput:(FMLiveSwitchDataBuffer*)input;
/**

    Computes the message authentication code (MAC) for a given type.

    @param type The type.
    @param key The key.
    @param input The input.
*/
+ (FMLiveSwitchDataBuffer*) computeWithType:(FMLiveSwitchMacType)type key:(FMLiveSwitchDataBuffer*)key input:(FMLiveSwitchDataBuffer*)input;
/**

    Destroys this instance.

*/
- (void) destroy;
/**

    Computes the message authentication code (MAC).

    @param input The input.
*/
- (FMLiveSwitchDataBuffer*) doComputeWithInput:(FMLiveSwitchDataBuffer*)input;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Initializes a new instance of the FMLiveSwitchMacContextBase class.

    @param type The type.
*/
- (instancetype) initWithType:(FMLiveSwitchMacType)type;
/**

    Initializes a new instance of the FMLiveSwitchMacContextBase class.

    @param type The type.
*/
+ (FMLiveSwitchMacContextBase*) macContextBaseWithType:(FMLiveSwitchMacType)type;
/**

    Gets the type.

*/
- (FMLiveSwitchMacType) type;

@end

/**

    Details about a specific log event.

*/
@interface FMLiveSwitchLogEvent : NSObject

/**

    Gets the event context.

*/
- (FMLiveSwitchLogContext*) context;
/**


*/
- (NSString*) description;
/**

    Gets the event exception, if one exists.

*/
- (NSException*) exception;
/**

    Deserializes a log event from JSON.

    @param logEventJson The log event JSON.
*/
+ (FMLiveSwitchLogEvent*) fromJsonWithLogEventJson:(NSString*)logEventJson;
/**

    Initializes a new instance of the FMLiveSwitchLogEvent class.

    @param timestamp The event timestamp.
    @param tag The event tag.
    @param scope The event scope.
    @param level The event level.
    @param context The event context.
    @param message The event message.
    @param exception The event exception, if one exists.
    @param threadId The ID of the thread generating the event.
*/
- (instancetype) initWithTimestamp:(NSDate*)timestamp tag:(NSString*)tag scope:(NSString*)scope level:(FMLiveSwitchLogLevel)level context:(FMLiveSwitchLogContext*)context message:(NSString*)message exception:(NSException*)exception threadId:(long long)threadId;
/**

    Gets the event level.

*/
- (FMLiveSwitchLogLevel) level;
/**

    Initializes a new instance of the FMLiveSwitchLogEvent class.

    @param timestamp The event timestamp.
    @param tag The event tag.
    @param scope The event scope.
    @param level The event level.
    @param context The event context.
    @param message The event message.
    @param exception The event exception, if one exists.
    @param threadId The ID of the thread generating the event.
*/
+ (FMLiveSwitchLogEvent*) logEventWithTimestamp:(NSDate*)timestamp tag:(NSString*)tag scope:(NSString*)scope level:(FMLiveSwitchLogLevel)level context:(FMLiveSwitchLogContext*)context message:(NSString*)message exception:(NSException*)exception threadId:(long long)threadId;
/**

    Gets the level of this log event.
    Alias for FMLiveSwitchLogEvent#level.

*/
- (FMLiveSwitchLogLevel) logLevel;
/**

    Gets the event message.

*/
- (NSString*) message;
/**

    Gets the event scope.

*/
- (NSString*) scope;
/**

    Sets the event context.

*/
- (void) setContext:(FMLiveSwitchLogContext*)value;
/**

    Sets the event exception, if one exists.

*/
- (void) setException:(NSException*)value;
/**

    Sets the event level.

*/
- (void) setLevel:(FMLiveSwitchLogLevel)value;
/**

    Sets the event message.

*/
- (void) setMessage:(NSString*)value;
/**

    Sets the event scope.

*/
- (void) setScope:(NSString*)value;
/**

    Sets the event tag.

*/
- (void) setTag:(NSString*)value;
/**

    Sets the ID of the thread generating the event.

*/
- (void) setThreadId:(long long)value;
/**

    Sets the event timestamp.

*/
- (void) setTimestamp:(NSDate*)value;
/**

    Gets the event tag.

*/
- (NSString*) tag;
/**

    Gets the ID of the thread generating the event.

*/
- (long long) threadId;
/**

    Gets the event timestamp.

*/
- (NSDate*) timestamp;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes a log event to JSON.

    @param logEvent The log event.
*/
+ (NSString*) toJsonWithLogEvent:(FMLiveSwitchLogEvent*)logEvent;

@end

@interface FMLiveSwitchHashTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchHashType)value;

@end

@interface FMLiveSwitchMacTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchMacType)value;

@end

/**

    Managed AutoResetEvent.

*/
@interface FMLiveSwitchManagedAutoResetEvent : NSObject

/**

    Creates a new instance.

*/
- (instancetype) init;
/**

    Creates a new instance.

*/
+ (FMLiveSwitchManagedAutoResetEvent*) managedAutoResetEvent;
/**

    Signal to release all threads.

*/
- (void) set;
/**

    Blocks until signalled.

*/
- (void) waitOne;
/**

    Blocks until signalled or until timeout.

    @param millisecondsTimeout Length of time to block for (in ms).
*/
- (bool) waitOneWithMillisecondsTimeout:(int)millisecondsTimeout;

@end

/**

    A managed timer that will tick on intervals. Might catchup if callback takes too long.

*/
@interface FMLiveSwitchManagedTimer : NSObject

/**

    Changes the interval of the timer.

    @param newInterval 
*/
- (void) changeIntervalWithNewInterval:(int)newInterval;
/**

    Gets the Id of the timer.

*/
- (NSString*) id;
/**

    Creates a new instance of the managed timer.

    @param interval The millisecond interval to tick on.
    @param callback The callback to use when a tick occurs.
*/
- (instancetype) initWithInterval:(int)interval callback:(FMLiveSwitchAction0*)callback;
/**

    Gets the interval that the timer will tick on.

*/
- (int) interval;
/**

    Gets whether the callback is currently being called.

*/
- (bool) inTick;
/**

    Creates a new instance of the managed timer.

    @param interval The millisecond interval to tick on.
    @param callback The callback to use when a tick occurs.
*/
+ (FMLiveSwitchManagedTimer*) managedTimerWithInterval:(int)interval callback:(FMLiveSwitchAction0*)callback;
/**

    Calculates a interval based on how many times you want the timer to tick per second.

    @param timesPerSecond The amount of times to tick per second.
*/
+ (int) perSecondIntervalWithTimesPerSecond:(double)timesPerSecond;
/**

    Gets whether the timer is running.

*/
- (bool) running;
/**

    Starts the timer.

    @return `false` if the timer was already started; otherwise, `true`.
*/
- (bool) start;
/**

    Stops the timer.

    @return `false` if the timer was already stopped; otherwise, `true`.
*/
- (bool) stop;
/**

    Stops the timer.

    @return `false` if the timer was already stopped; otherwise, `true`.
*/
- (FMLiveSwitchFuture<id>*) stopAsync;
/**

    Stops the timer.

    @param waitForStop True if method should block until timer is stopped.
    @return `false` if the timer was already stopped; otherwise, `true`.
*/
- (bool) stopWithWaitForStop:(bool)waitForStop;

@end

/**

    An MD5-SHA1 hash context.

*/
@interface FMLiveSwitchMd5Sha1HashContext : NSObject

/**

    Computes the specified input.

    @param input The input.
*/
- (FMLiveSwitchDataBuffer*) computeWithInput:(FMLiveSwitchDataBuffer*)input;
/**

    Destroys this instance.

*/
- (void) destroy;
/**

    Initializes a new instance of the FMLiveSwitchMd5Sha1HashContext class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMd5Sha1HashContext class.

*/
+ (FMLiveSwitchMd5Sha1HashContext*) md5Sha1HashContext;

@end

/**

    Utility class to assist with Unix timestamp conversions.

*/
@interface FMLiveSwitchUnixTimestamp : NSObject

/**

    Converts a date to a Unix timestamp with millisecond precision.

    @param dateTime The date to convert.
    @return The equivalent Unix timestamp.
*/
+ (long long) dateTimeToUnixMillisWithDateTime:(NSDate*)dateTime;
/**

    Converts a date to a Unix timestamp.

    @param dateTime The date to convert.
    @return The equivalent Unix timestamp.
*/
+ (long long) dateTimeToUnixWithDateTime:(NSDate*)dateTime;
- (instancetype) init;
/**

    Converts ticks to a Unix timestamp with millisecond precision.

    @param ticks The ticks to convert.
    @return The equivalent Unix timestamp.
*/
+ (long long) ticksToUnixMillisWithTicks:(long long)ticks;
/**

    Converts ticks to a Unix timestamp.

    @param ticks The ticks to convert.
    @return The equivalent Unix timestamp.
*/
+ (long long) ticksToUnixWithTicks:(long long)ticks;
/**

    Converts a Unix timestamp with millisecond precision to a date.

    @param unix The Unix timestamp to convert.
    @return The equivalent date.
*/
+ (NSDate*) unixMillisToDateTimeWithUnix:(long long)unix;
/**

    Converts a Unix timestamp with millisecond precision to ticks.

    @param unix The Unix timestamp to convert.
    @return The equivalent ticks.
*/
+ (long long) unixMillisToTicksWithUnix:(long long)unix;
+ (FMLiveSwitchUnixTimestamp*) unixTimestamp;
/**

    Converts a Unix timestamp to a date.

    @param unix The Unix timestamp to convert.
    @return The equivalent date.
*/
+ (NSDate*) unixToDateTimeWithUnix:(long long)unix;
/**

    Converts a Unix timestamp to ticks.

    @param unix The Unix timestamp to convert.
    @return The equivalent ticks.
*/
+ (long long) unixToTicksWithUnix:(long long)unix;
/**

    Gets the current UTC time in Unix format.

*/
+ (long long) utcNow;
/**

    Gets the current UTC time in Unix format with millisecond precision.

*/
+ (long long) utcNowMillis;

@end

/**

    DNS utility methods.

*/
@interface FMLiveSwitchDns : NSObject

/**

    Resolves a host name to an IP address.

    @param hostname The host name to resolve.
*/
+ (FMLiveSwitchFuture<NSMutableArray*>*) resolveWithHostname:(NSString*)hostname;
/**

    Resolves a host name to an IP address.

    @param name The name to resolve.
    @param callback The callback to invoke when resolution is complete.
    @param state A custom state object to pass into the callback.
*/
+ (void) resolveWithName:(NSString*)name callback:(FMLiveSwitchAction2<NSMutableArray*,id>*)callback state:(id)state;
/**

    Resolves a host name to an IP address.

    @param name The name to resolve.
    @param callbackBlock The callback to invoke when resolution is complete.
    @param state A custom state object to pass into the callback.
*/
+ (void) resolveWithName:(NSString*)name callbackBlock:(void(^)(NSMutableArray*, id))callbackBlock state:(id)state;
/**

    Resolves a host name to an IP address.

    @inlineparam name The name to resolve.
    @inlineparam callbackBlock The callback to invoke when resolution is complete.
    @inlineparam state A custom state object to pass into the callback.
*/
+ (void (^)(NSString*, void(^)(NSMutableArray*, id), id)) resolveWithNameAndCallbackBlockAndState;

@end

/**

    Class to hold a double value passed by reference.

*/
@interface FMLiveSwitchDoubleHolder : NSObject

/**

    Initializes a new instance of the FMLiveSwitchDoubleHolder class.

*/
+ (FMLiveSwitchDoubleHolder*) doubleHolder;
/**

    Initializes a new instance of the FMLiveSwitchDoubleHolder class.

    @param value The value.
*/
+ (FMLiveSwitchDoubleHolder*) doubleHolder:(double)value;
/**

    Initializes a new instance of the FMLiveSwitchDoubleHolder class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchDoubleHolder class.

    @param value The value.
*/
- (instancetype) initWithValue:(double)value;
/**

    Sets the value.

*/
- (void) setValue:(double)value;
/**

    Gets the value.

*/
- (double) value;

@end

/**

    Base definition for classes that allow serialization to/from JSON.

*/
@interface FMLiveSwitchSerializable : NSObject

/**

    Initializes a new instance of the FMLiveSwitchSerializable class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchSerializable class.

*/
+ (FMLiveSwitchSerializable*) serializable;

@end

/**

    Supplies class instances with a key-value
    mapping to support dynamic property storage.

*/
@interface FMLiveSwitchDynamic : FMLiveSwitchSerializable

+ (FMLiveSwitchDynamic*) dynamic;
/**

    Gets all dynamic properties on this instance.

*/
- (NSMutableDictionary<NSString*,id>*) dynamicProperties;
/**

    Gets a property value from the local cache.

    @param key The property key. This key is used internally only, but should be namespaced to avoid conflict with third-party extensions.
    @return The stored value, if found; otherwise null.
*/
- (id) getDynamicValueWithKey:(NSString*)key;
- (instancetype) init;
/**

    Sets a property value in the local cache.

    @param key The property key. This key is used internally only, but should be namespaced to avoid conflict with third-party extensions.
    @param value The property value. This can be any object that needs to be stored for future use.
*/
- (void) setDynamicValueWithKey:(NSString*)key value:(id)value;
/**

    Removes a property value from the local cache. Returns true if the value was removed and returns false otherwise.

    @param key The property key. This key is used internally only, but should be namespaced to avoid conflict with third-party extensions.
    @return `true` if the value was removed; otherwise, `false`.
*/
- (bool) unsetDynamicValueWithKey:(NSString*)key;

@end

/**

    An error.

*/
@interface FMLiveSwitchError : NSObject

/**

    Gets the code.

*/
- (FMLiveSwitchErrorCode) code;
/**

    Gets the code.

*/
- (int) codeValue;
/**

    Returns the string representation of this error.

*/
- (NSString*) description;
/**

    Initializes a new instance of the FMLiveSwitchError class.

*/
+ (FMLiveSwitchError*) error;
/**

    Gets the code.

    @deprecated Use Code instead.
*/
- (FMLiveSwitchErrorCode) errorCode __deprecated_msg("Use Code instead.");
/**

    Initializes a new instance of the FMLiveSwitchError class.

    @param code The code.
    @param exception The exception.
*/
+ (FMLiveSwitchError*) errorWithCode:(FMLiveSwitchErrorCode)code exception:(NSException*)exception;
/**

    Initializes a new instance of the FMLiveSwitchError class.

    @param code The code.
    @param message The message.
*/
+ (FMLiveSwitchError*) errorWithCode:(FMLiveSwitchErrorCode)code message:(NSString*)message;
/**

    Gets the exception.

*/
- (NSException*) exception;
/**

    Deserializes an instance from JSON.

    @param errorJson The JSON to deserialize.
    @return The deserialized error.
*/
+ (FMLiveSwitchError*) fromJsonWithErrorJson:(NSString*)errorJson;
/**

    Gets the description for this FMLiveSwitchError.

*/
- (NSString*) getDescription;
/**

    Initializes a new instance of the FMLiveSwitchError class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchError class.

    @param code The code.
    @param exception The exception.
*/
- (instancetype) initWithCode:(FMLiveSwitchErrorCode)code exception:(NSException*)exception;
/**

    Initializes a new instance of the FMLiveSwitchError class.

    @param code The code.
    @param message The message.
*/
- (instancetype) initWithCode:(FMLiveSwitchErrorCode)code message:(NSString*)message;
/**

    Gets the message.

*/
- (NSString*) message;
/**

    Sets the code.

*/
- (void) setCode:(FMLiveSwitchErrorCode)value;
/**

    Sets the code.

*/
- (void) setCodeValue:(int)value;
/**

    Sets the code.

    @deprecated Use Code instead.
*/
- (void) setErrorCode:(FMLiveSwitchErrorCode)value __deprecated_msg("Use Code instead.");
/**

    Sets the exception.

*/
- (void) setException:(NSException*)value;
/**

    Sets the message.

*/
- (void) setMessage:(NSString*)value;
/**

    Serializes this instance to JSON.

    @return 
            The serialized JSON.
            
*/
- (NSString*) toJson;
/**

    Serializes an instance to JSON.

    @param error The error.
    @return 
            The serialized JSON.
            
*/
+ (NSString*) toJsonWithError:(FMLiveSwitchError*)error;

@end

@interface FMLiveSwitchErrorCodeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchErrorCode)value;

@end

/**

    A utility class for reading/writing from/to a FMLiveSwitchFileAssistant#file.

*/
@interface FMLiveSwitchFileAssistant : NSObject

/**

    Gets the file.

*/
- (FMLiveSwitchFileStream*) file;
/**

    Initializes a new instance of the FMLiveSwitchFileAssistant class.

    @param file The file.
*/
+ (FMLiveSwitchFileAssistant*) fileAssistantWithFile:(FMLiveSwitchFileStream*)file;
/**

    Initializes a new instance of the FMLiveSwitchFileAssistant class.

    @param file The file.
*/
- (instancetype) initWithFile:(FMLiveSwitchFileStream*)file;
/**

    Gets whether to read/write using little-endian ordering.

*/
- (bool) littleEndian;
/**

    Converts a 16-bit network representation to an integer.

*/
- (int) read16;
/**

    Converts a 24-bit network representation to an integer.

*/
- (int) read24;
/**

    Converts a 32-bit network representation to an integer.

*/
- (long long) read32;
/**

    Converts a 40-bit network representation to an integer.

*/
- (long long) read40;
/**

    Converts a 48-bit network representation to an integer.

*/
- (long long) read48;
/**

    Converts a 56-bit network representation to an integer.

*/
- (long long) read56;
/**

    Converts a 64-bit network representation to an integer.

*/
- (long long) read64;
/**

    Converts an 8-bit network representation to an integer.

*/
- (int) read8;
/**

    Reads all the bytes of a file into a byte array.

    @param path The filepath to the file to read.
*/
+ (NSMutableData*) readAllBytesWithPath:(NSString*)path;
/**

    Reads a 16-bit-length opaque value from a File.

*/
- (NSMutableData*) readOpaque16;
/**

    Reads a 24-bit-length opaque value from a File.

*/
- (NSMutableData*) readOpaque24;
/**

    Reads a 32-bit-length opaque value from a File.

*/
- (NSMutableData*) readOpaque32;
/**

    Reads an 8-bit-length opaque value from a File.

*/
- (NSMutableData*) readOpaque8;
/**

    Reads a value from a File.

    @param length The number of bytes to read.
*/
- (NSMutableData*) readWithLength:(int)length;
/**

    Sets whether to read/write using little-endian ordering.

*/
- (void) setLittleEndian:(bool)value;
/**

    Adds a value to a File.

    @param value The value.
*/
- (void) write:(NSMutableData*)value;
/**

    Adds a value to a File.

    @param value The value.
    @param offset The offset.
    @param length The length.
*/
- (void) write:(NSMutableData*)value offset:(int)offset length:(int)length;
/**

    Adds a 16-bit value to a File.

    @param value The value.
*/
- (void) write16:(int)value;
/**

    Adds a 16-bit value to a File.

    @param location The location to write to.
    @param value The value.
*/
- (void) write16ToWithLocation:(int)location value:(int)value;
/**

    Adds a 24-bit value to a File.

    @param value The value.
*/
- (void) write24:(int)value;
/**

    Adds a 24-bit value to a File.

    @param location The location to write to.
    @param value The value.
*/
- (void) write24ToWithLocation:(int)location value:(int)value;
/**

    Adds a 32-bit value to a File.

    @param value The value.
*/
- (void) write32:(long long)value;
/**

    Adds a 32-bit value to a File.

    @param location The location to write to.
    @param value The value.
*/
- (void) write32ToWithLocation:(int)location value:(long long)value;
/**

    Adds a 40-bit value to a File.

    @param value The value.
*/
- (void) write40:(long long)value;
/**

    Adds a 40-bit value to a File.

    @param location The location to write to.
    @param value The value.
*/
- (void) write40ToWithLocation:(int)location value:(long long)value;
/**

    Adds a 48-bit value to a File.

    @param value The value.
*/
- (void) write48:(long long)value;
/**

    Adds a 48-bit value to a File.

    @param location The location to write to.
    @param value The value.
*/
- (void) write48ToWithLocation:(int)location value:(long long)value;
/**

    Adds a 56-bit value to a File.

    @param value The value.
*/
- (void) write56:(long long)value;
/**

    Adds a 56-bit value to a File.

    @param location The location to write to.
    @param value The value.
*/
- (void) write56ToWithLocation:(int)location value:(long long)value;
/**

    Adds a 64-bit value to a File.

    @param value The value.
*/
- (void) write64:(long long)value;
/**

    Adds a 64-bit value to a File.

    @param location The location to write to.
    @param value The value.
*/
- (void) write64ToWithLocation:(int)location value:(long long)value;
/**

    Adds an 8-bit value to a File.

    @param value The value.
*/
- (void) write8:(int)value;
/**

    Adds an 8-bit value to a File.

    @param location The location to write to.
    @param value The value.
*/
- (void) write8ToWithLocation:(int)location value:(int)value;
/**

    Adds a 16-bit-length opaque value to a File.

    @param value The value.
*/
- (void) writeOpaque16:(NSMutableData*)value;
/**

    Adds a 16-bit-length opaque value to a File.

    @param location The location to write to.
    @param value The value.
*/
- (void) writeOpaque16ToWithLocation:(int)location value:(NSMutableData*)value;
/**

    Adds a 24-bit-length opaque value to a File.

    @param value The value.
*/
- (void) writeOpaque24:(NSMutableData*)value;
/**

    Adds a 24-bit-length opaque value to a File.

    @param location The location to write to.
    @param value The value.
*/
- (void) writeOpaque24ToWithLocation:(int)location value:(NSMutableData*)value;
/**

    Adds a 32-bit-length opaque value to a File.

    @param value The value.
*/
- (void) writeOpaque32:(NSMutableData*)value;
/**

    Adds a 32-bit-length opaque value to a File.

    @param location The location to write to.
    @param value The value.
*/
- (void) writeOpaque32ToWithLocation:(int)location value:(NSMutableData*)value;
/**

    Adds a 40-bit-length opaque value to a File.

    @param value The value.
*/
- (void) writeOpaque40:(NSMutableData*)value;
/**

    Adds a 40-bit-length opaque value to a File.

    @param location The location to write to.
    @param value The value.
*/
- (void) writeOpaque40ToWithLocation:(int)location value:(NSMutableData*)value;
/**

    Adds a 48-bit-length opaque value to a File.

    @param value The value.
*/
- (void) writeOpaque48:(NSMutableData*)value;
/**

    Adds a 48-bit-length opaque value to a File.

    @param location The location to write to.
    @param value The value.
*/
- (void) writeOpaque48ToWithLocation:(int)location value:(NSMutableData*)value;
/**

    Adds a 56-bit-length opaque value to a File.

    @param value The value.
*/
- (void) writeOpaque56:(NSMutableData*)value;
/**

    Adds a 56-bit-length opaque value to a File.

    @param location The location to write to.
    @param value The value.
*/
- (void) writeOpaque56ToWithLocation:(int)location value:(NSMutableData*)value;
/**

    Adds a 64-bit-length opaque value to a File.

    @param value The value.
*/
- (void) writeOpaque64:(NSMutableData*)value;
/**

    Adds a 64-bit-length opaque value to a File.

    @param location The location to write to.
    @param value The value.
*/
- (void) writeOpaque64ToWithLocation:(int)location value:(NSMutableData*)value;
/**

    Adds an 8-bit-length opaque value to a File.

    @param value The value.
*/
- (void) writeOpaque8:(NSMutableData*)value;
/**

    Adds an 8-bit-length opaque value to a File.

    @param location The location to write to.
    @param value The value.
*/
- (void) writeOpaque8ToWithLocation:(int)location value:(NSMutableData*)value;
/**

    Adds a value to a File.

    @param location The location to write to.
    @param value The value.
*/
- (void) writeToWithLocation:(int)location value:(NSMutableData*)value;

@end

@interface FMLiveSwitchFileStreamAccessWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchFileStreamAccess)value;

@end

/**

    Class to hold a float value passed by reference.

*/
@interface FMLiveSwitchFloatHolder : NSObject

/**

    Initializes a new instance of the FMLiveSwitchFloatHolder class.

*/
+ (FMLiveSwitchFloatHolder*) floatHolder;
/**

    Initializes a new instance of the FMLiveSwitchFloatHolder class.

    @param value The value.
*/
+ (FMLiveSwitchFloatHolder*) floatHolder:(float)value;
/**

    Initializes a new instance of the FMLiveSwitchFloatHolder class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchFloatHolder class.

    @param value The value.
*/
- (instancetype) initWithValue:(float)value;
/**

    Sets the value.

*/
- (void) setValue:(float)value;
/**

    Gets the value.

*/
- (float) value;

@end

/**

    Future base properties/methods.

*/
@interface FMLiveSwitchFutureBase<__covariant T> : NSObject

/**

    Gets the exception if rejected.

*/
- (NSException*) exception;
+ (FMLiveSwitchFutureBase*) futureBase;
- (instancetype) init;
/**

    Gets the result if resolved.

*/
- (T) result;
/**

    Sets the exception if rejected.

*/
- (void) setException:(NSException*)value;
/**

    Sets the result if resolved.

*/
- (void) setResult:(T)value;
/**

    Sets the current state.

*/
- (void) setState:(FMLiveSwitchFutureState)value;
/**

    Gets the current state.

*/
- (FMLiveSwitchFutureState) state;

@end

/**

    A future.

*/
@interface FMLiveSwitchFuture<__covariant T> : FMLiveSwitchFutureBase<T>

/**

    Appends a handler to be executed when the promise is rejected.

    @param rejectAction The reject action.
*/
- (FMLiveSwitchFuture<T>*) failWithRejectAction:(FMLiveSwitchAction1<NSException*>*)rejectAction;
/**

    Appends a handler to be executed when the promise is rejected.

    @inlineparam rejectActionBlock The reject action.
*/
- (FMLiveSwitchFuture<T>* (^)(void(^)(NSException*))) failWithRejectActionBlock;
/**

    Appends a handler to be executed when the promise is rejected.

    @param rejectActionBlock The reject action.
*/
- (FMLiveSwitchFuture<T>*) failWithRejectActionBlock:(void(^)(NSException*))rejectActionBlock;
/**

    Appends a handler to be executed when the promise is rejected.

    @param rejectFunction The reject function.
*/
- (FMLiveSwitchFuture<T>*) failWithRejectFunction:(FMLiveSwitchFunction1<NSException*,FMLiveSwitchFuture<T>*>*)rejectFunction;
/**

    Appends a handler to be executed when the promise is rejected.

    @inlineparam rejectFunctionBlock The reject function.
*/
- (FMLiveSwitchFuture<T>* (^)(FMLiveSwitchFuture<T>*(^)(NSException*))) failWithRejectFunctionBlock;
/**

    Appends a handler to be executed when the promise is rejected.

    @param rejectFunctionBlock The reject function.
*/
- (FMLiveSwitchFuture<T>*) failWithRejectFunctionBlock:(FMLiveSwitchFuture<T>*(^)(NSException*))rejectFunctionBlock;
+ (FMLiveSwitchFuture*) future;
- (instancetype) init;
/**

    Appends a handler to be executed when the promise is resolved.

    @param resolveAction The resolve action.
*/
- (FMLiveSwitchFuture<T>*) thenWithResolveAction:(FMLiveSwitchAction1<T>*)resolveAction;
/**

    Appends handlers to be executed when the promise is resolved or rejected.

    @param resolveAction The resolve action.
    @param rejectAction The reject action.
*/
- (FMLiveSwitchFuture<T>*) thenWithResolveAction:(FMLiveSwitchAction1<T>*)resolveAction rejectAction:(FMLiveSwitchAction1<NSException*>*)rejectAction;
/**

    Appends a handler to be executed when the promise is resolved.

    @inlineparam resolveActionBlock The resolve action.
*/
- (FMLiveSwitchFuture<T>* (^)(void(^)(T))) thenWithResolveActionBlock;
/**

    Appends a handler to be executed when the promise is resolved.

    @param resolveActionBlock The resolve action.
*/
- (FMLiveSwitchFuture<T>*) thenWithResolveActionBlock:(void(^)(T))resolveActionBlock;
/**

    Appends handlers to be executed when the promise is resolved or rejected.

    @param resolveActionBlock The resolve action.
    @param rejectActionBlock The reject action.
*/
- (FMLiveSwitchFuture<T>*) thenWithResolveActionBlock:(void(^)(T))resolveActionBlock rejectActionBlock:(void(^)(NSException*))rejectActionBlock;
/**

    Appends handlers to be executed when the promise is resolved or rejected.

    @inlineparam resolveActionBlock The resolve action.
    @inlineparam rejectActionBlock The reject action.
*/
- (FMLiveSwitchFuture<T>* (^)(void(^)(T), void(^)(NSException*))) thenWithResolveActionBlockAndRejectActionBlock;
/**

    Appends a handler to be executed when the promise is resolved.

    @param resolveFunction The resolve function.
*/
- (FMLiveSwitchFuture<id>*) thenWithResolveFunction:(FMLiveSwitchFunction1<T,FMLiveSwitchFuture<id>*>*)resolveFunction;
/**

    Appends handlers to be executed when the promise is resolved or rejected.

    @param resolveFunction The resolve function.
    @param rejectAction The reject action.
*/
- (FMLiveSwitchFuture<id>*) thenWithResolveFunction:(FMLiveSwitchFunction1<T,FMLiveSwitchFuture<id>*>*)resolveFunction rejectAction:(FMLiveSwitchAction1<NSException*>*)rejectAction;
/**

    Appends a handler to be executed when the promise is resolved.

    @inlineparam resolveFunctionBlock The resolve function.
*/
- (FMLiveSwitchFuture<id>* (^)(FMLiveSwitchFuture<id>*(^)(T))) thenWithResolveFunctionBlock;
/**

    Appends a handler to be executed when the promise is resolved.

    @param resolveFunctionBlock The resolve function.
*/
- (FMLiveSwitchFuture<id>*) thenWithResolveFunctionBlock:(FMLiveSwitchFuture<id>*(^)(T))resolveFunctionBlock;
/**

    Appends handlers to be executed when the promise is resolved or rejected.

    @param resolveFunctionBlock The resolve function.
    @param rejectActionBlock The reject action.
*/
- (FMLiveSwitchFuture<id>*) thenWithResolveFunctionBlock:(FMLiveSwitchFuture<id>*(^)(T))resolveFunctionBlock rejectActionBlock:(void(^)(NSException*))rejectActionBlock;
/**

    Appends handlers to be executed when the promise is resolved or rejected.

    @inlineparam resolveFunctionBlock The resolve function.
    @inlineparam rejectActionBlock The reject action.
*/
- (FMLiveSwitchFuture<id>* (^)(FMLiveSwitchFuture<id>*(^)(T), void(^)(NSException*))) thenWithResolveFunctionBlockAndRejectActionBlock;
/**

    Blocks the current thread from proceeding
    until the future state has been resolved
    or rejected.

*/
- (void) waitForPromise;
/**

    Blocks the current thread from proceeding
    until the future state has been resolved
    or rejected or if the timeout period elapses.

    @param millisecondsTimeout The number of milliseconds to wait before timing out.
*/
- (void) waitForPromiseWithMillisecondsTimeout:(int)millisecondsTimeout;
/**

    Blocks the current thread from proceeding
    until the future has a result. Throws an
    exception if the promise is rejected.

*/
- (T) waitForResult;
/**

    Blocks the current thread from proceeding
    until the future has a result. Throws an
    exception if the promise is rejected or
    if the timeout period elapses.

    @param millisecondsTimeout The number of milliseconds to wait before timing out.
*/
- (T) waitForResultWithMillisecondsTimeout:(int)millisecondsTimeout;

@end

/**

    Helper methods for downloading binary files.

*/
@interface FMLiveSwitchHttpFileTransfer : NSObject

/**

    Downloads a file from the url. Decompresses using BZip2 if needed.

    @param url The URL.
*/
+ (FMLiveSwitchFuture<FMLiveSwitchDataBuffer*>*) downloadFileWithUrl:(NSString*)url;
/**

    Downloads a file from the url. Decompresses using BZip2 if needed. Then saves to the file system at filePath.

    @param url The URL.
    @param filePath The file path.
*/
+ (FMLiveSwitchFuture<id>*) downloadFileWithUrl:(NSString*)url filePath:(NSString*)filePath;
+ (FMLiveSwitchHttpFileTransfer*) httpFileTransfer;
- (instancetype) init;

@end

@interface FMLiveSwitchHttpMethodWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchHttpMethod)value;

@end

/**

    Arguments for sending an HTTP request.

*/
@interface FMLiveSwitchHttpRequestArgs : FMLiveSwitchDynamic

/**

    Gets the binary content to transfer over HTTP.
    Overrides FMLiveSwitchHttpRequestArgs#textContent.

*/
- (NSMutableData*) binaryContent;
/**

    Gets the headers to transfer over HTTP.

*/
- (FMLiveSwitchNameValueCollection*) headers;
/**

    Initializes a new instance of the FMLiveSwitchHttpRequestArgs class
    with default values.

*/
+ (FMLiveSwitchHttpRequestArgs*) httpRequestArgs;
/**

    Initializes a new instance of the FMLiveSwitchHttpRequestArgs class
    with default values.

*/
- (instancetype) init;
/**

    Gets the maximum number of retries allowed.

*/
- (int) maxRetries;
/**

    Gets the HTTP method.

*/
- (FMLiveSwitchHttpMethod) method;
/**

    Gets the callback to invoke once the outgoing HTTP request is created.
    See FMLiveSwitchHttpRequestCreatedArgs for callback argument details.

*/
- (FMLiveSwitchAction1<FMLiveSwitchHttpRequestCreatedArgs*>*) onRequestCreated;
/**

    Gets the callback to invoke once the incoming HTTP response has been
    received. See FMLiveSwitchHttpResponseReceivedArgs for callback argument details.

*/
- (FMLiveSwitchAction1<FMLiveSwitchHttpResponseReceivedArgs*>*) onResponseReceived;
/**

    Gets the sender of the content, either a client or publisher.

*/
- (id) sender;
/**

    Sets the binary content to transfer over HTTP.
    Overrides FMLiveSwitchHttpRequestArgs#textContent.

*/
- (void) setBinaryContent:(NSMutableData*)value;
/**

    Sets the headers to transfer over HTTP.

*/
- (void) setHeaders:(FMLiveSwitchNameValueCollection*)value;
/**

    Sets the maximum number of retries allowed.

*/
- (void) setMaxRetries:(int)value;
/**

    Sets the HTTP method.

*/
- (void) setMethod:(FMLiveSwitchHttpMethod)value;
/**

    Sets the callback to invoke once the outgoing HTTP request is created.
    See FMLiveSwitchHttpRequestCreatedArgs for callback argument details.

*/
- (void) setOnRequestCreated:(FMLiveSwitchAction1<FMLiveSwitchHttpRequestCreatedArgs*>*)value;
/**

    Sets the callback to invoke once the outgoing HTTP request is created.
    See FMLiveSwitchHttpRequestCreatedArgs for callback argument details.

*/
- (void (^)(void(^)(FMLiveSwitchHttpRequestCreatedArgs*))) setOnRequestCreatedBlock;
/**

    Sets the callback to invoke once the outgoing HTTP request is created.
    See FMLiveSwitchHttpRequestCreatedArgs for callback argument details.

*/
- (void) setOnRequestCreatedBlock:(void(^)(FMLiveSwitchHttpRequestCreatedArgs*))valueBlock;
/**

    Sets the callback to invoke once the incoming HTTP response has been
    received. See FMLiveSwitchHttpResponseReceivedArgs for callback argument details.

*/
- (void) setOnResponseReceived:(FMLiveSwitchAction1<FMLiveSwitchHttpResponseReceivedArgs*>*)value;
/**

    Sets the callback to invoke once the incoming HTTP response has been
    received. See FMLiveSwitchHttpResponseReceivedArgs for callback argument details.

*/
- (void (^)(void(^)(FMLiveSwitchHttpResponseReceivedArgs*))) setOnResponseReceivedBlock;
/**

    Sets the callback to invoke once the incoming HTTP response has been
    received. See FMLiveSwitchHttpResponseReceivedArgs for callback argument details.

*/
- (void) setOnResponseReceivedBlock:(void(^)(FMLiveSwitchHttpResponseReceivedArgs*))valueBlock;
/**

    Sets the sender of the content, either a client or publisher.

*/
- (void) setSender:(id)value;
/**

    Sets the text content to transfer over HTTP.

*/
- (void) setTextContent:(NSString*)value;
/**

    Sets the number of milliseconds to wait before timing out the HTTP transfer.
    Defaults to 15000 ms (15 seconds).

*/
- (void) setTimeout:(int)value;
/**

    Sets the target URL for the HTTP request.

*/
- (void) setUrl:(NSString*)value;
/**

    Gets the text content to transfer over HTTP.

*/
- (NSString*) textContent;
/**

    Gets the number of milliseconds to wait before timing out the HTTP transfer.
    Defaults to 15000 ms (15 seconds).

*/
- (int) timeout;
/**

    Gets the target URL for the HTTP request.

*/
- (NSString*) url;

@end

/**

    Arguments passed into callbacks when an HTTP request is created.

*/
@interface FMLiveSwitchHttpRequestCreatedArgs : NSObject

+ (FMLiveSwitchHttpRequestCreatedArgs*) httpRequestCreatedArgs;
- (instancetype) init;
/**

    Gets the outgoing HTTP request about to be sent to the server.

*/
- (NSMutableURLRequest*) request;
/**

    Gets the original request arguments.

*/
- (FMLiveSwitchHttpRequestArgs*) requestArgs;
/**

    Gets the sender of the request, either a client or publisher.

*/
- (id) sender;
/**

    Sets the outgoing HTTP request about to be sent to the server.

*/
- (void) setRequest:(NSMutableURLRequest*)value;
/**

    Sets the original request arguments.

*/
- (void) setRequestArgs:(FMLiveSwitchHttpRequestArgs*)value;
/**

    Sets the sender of the request, either a client or publisher.

*/
- (void) setSender:(id)value;

@end

/**

    Arguments for receiving an HTTP response.

*/
@interface FMLiveSwitchHttpResponseArgs : NSObject

/**

    Gets the binary content read from the HTTP response.

*/
- (NSMutableData*) binaryContent;
/**

    Gets the exception generated while completing the request.

*/
- (NSException*) exception;
/**

    Gets the headers read from the HTTP response.

*/
- (FMLiveSwitchNameValueCollection*) headers;
/**

    Initializes a new instance of the FMLiveSwitchHttpResponseArgs class.

    @param requestArgs The request arguments.
*/
+ (FMLiveSwitchHttpResponseArgs*) httpResponseArgsWithRequestArgs:(FMLiveSwitchHttpRequestArgs*)requestArgs;
/**

    Initializes a new instance of the FMLiveSwitchHttpResponseArgs class.

    @param requestArgs The request arguments.
*/
- (instancetype) initWithRequestArgs:(FMLiveSwitchHttpRequestArgs*)requestArgs;
/**

    Gets the original FMLiveSwitchHttpRequestArgs.

*/
- (FMLiveSwitchHttpRequestArgs*) requestArgs;
/**

    Gets the number of retries that were required.

*/
- (int) retries;
/**

    Sets the binary content read from the HTTP response.

*/
- (void) setBinaryContent:(NSMutableData*)value;
/**

    Sets the exception generated while completing the request.

*/
- (void) setException:(NSException*)value;
/**

    Sets the original FMLiveSwitchHttpRequestArgs.

*/
- (void) setRequestArgs:(FMLiveSwitchHttpRequestArgs*)value;
/**

    Sets the number of retries that were required.

*/
- (void) setRetries:(int)value;
/**

    Sets the status code read from the HTTP response.

*/
- (void) setStatusCode:(int)value;
/**

    Sets the text content read from the HTTP response.

*/
- (void) setTextContent:(NSString*)value;
/**

    Gets the status code read from the HTTP response.

*/
- (int) statusCode;
/**

    Gets the text content read from the HTTP response.

*/
- (NSString*) textContent;

@end

/**

    Arguments passed into callbacks when an HTTP response is received.

*/
@interface FMLiveSwitchHttpResponseReceivedArgs : NSObject

+ (FMLiveSwitchHttpResponseReceivedArgs*) httpResponseReceivedArgs;
- (instancetype) init;
/**

    Gets the original request arguments.

*/
- (FMLiveSwitchHttpRequestArgs*) requestArgs;
/**

    Gets the incoming HTTP response received from the server.

*/
- (NSURLResponse*) response;
/**

    Gets the sender of the request, either a client or publisher.

*/
- (id) sender;
/**

    Sets the original request arguments.

*/
- (void) setRequestArgs:(FMLiveSwitchHttpRequestArgs*)value;
/**

    Sets the incoming HTTP response received from the server.

*/
- (void) setResponse:(NSURLResponse*)value;
/**

    Sets the sender of the request, either a client or publisher.

*/
- (void) setSender:(id)value;

@end

/**

    Arguments for FMLiveSwitchHttpTransfer#addOnSendStart:.

*/
@interface FMLiveSwitchHttpSendFinishArgs : NSObject

+ (FMLiveSwitchHttpSendFinishArgs*) httpSendFinishArgs;
- (instancetype) init;
/**

    Gets the binary content of the request.

*/
- (NSMutableData*) requestBinaryContent;
/**

    Gets the text content of the request.

*/
- (NSString*) requestTextContent;
/**

    Gets the binary content of the response.

*/
- (NSMutableData*) responseBinaryContent;
/**

    Gets the headers of the response.

*/
- (FMLiveSwitchNameValueCollection*) responseHeaders;
/**

    Gets the binary content of the response.

*/
- (NSString*) responseTextContent;
/**

    Gets the sender of the request, either a client or publisher.

*/
- (id) sender;

@end

/**

    Arguments for FMLiveSwitchHttpTransfer#addOnSendStart:.

*/
@interface FMLiveSwitchHttpSendStartArgs : NSObject

+ (FMLiveSwitchHttpSendStartArgs*) httpSendStartArgs;
- (instancetype) init;
/**

    Gets the binary content of the request.

*/
- (NSMutableData*) requestBinaryContent;
/**

    Gets the text content of the request.

*/
- (NSString*) requestTextContent;
/**

    Gets the sender of the request, either a client or publisher.

*/
- (id) sender;

@end

/**

    Base class that defines methods for transferring content over HTTP.

*/
@interface FMLiveSwitchHttpTransfer : NSObject

/**

    Adds a handler that is raised before an HTTP request is sent.

*/
+ (void) addOnSendFinish:(FMLiveSwitchAction1<FMLiveSwitchHttpSendFinishArgs*>*)value;
/**

    Adds a handler that is raised before an HTTP request is sent.

*/
+ (void (^)(void(^)(FMLiveSwitchHttpSendFinishArgs*))) addOnSendFinishWithBlock;
/**

    Adds a handler that is raised before an HTTP request is sent.

*/
+ (void) addOnSendFinishWithBlock:(void(^)(FMLiveSwitchHttpSendFinishArgs*))valueBlock;
/**

    Adds a handler that is raised before an HTTP request is sent.

*/
+ (void) addOnSendStart:(FMLiveSwitchAction1<FMLiveSwitchHttpSendStartArgs*>*)value;
/**

    Adds a handler that is raised before an HTTP request is sent.

*/
+ (void (^)(void(^)(FMLiveSwitchHttpSendStartArgs*))) addOnSendStartWithBlock;
/**

    Adds a handler that is raised before an HTTP request is sent.

*/
+ (void) addOnSendStartWithBlock:(void(^)(FMLiveSwitchHttpSendStartArgs*))valueBlock;
/**

    Escapes and adds a query parameter as a key/empty-value pair to a URL.

    @param url The URL with the query to which the key/value should be added.
    @param key The key of the query parameter to add.
    @return The original URL with the query parameter added.
*/
+ (NSString*) addQueryToUrl:(NSString*)url key:(NSString*)key;
/**

    Escapes and adds a query parameter as a key/value pair to a URL.

    @param url The URL with the query to which the key/value should be added.
    @param key The key of the query parameter to add.
    @param value The value of the query parameter to add.
    @return The original URL with the query parameter added.
*/
+ (NSString*) addQueryToUrl:(NSString*)url key:(NSString*)key value:(NSString*)value;
/**

    Gets a random wildcard character.

    @return A random wildcard character.
*/
+ (NSString*) getRandomWildcardCharacter;
+ (FMLiveSwitchHttpTransfer*) httpTransfer;
- (instancetype) init;
/**

    Removes a handler that is raised before an HTTP request is sent.

*/
+ (void) removeOnSendFinish:(FMLiveSwitchAction1<FMLiveSwitchHttpSendFinishArgs*>*)value;
/**

    Removes a handler that is raised before an HTTP request is sent.

*/
+ (void) removeOnSendStart:(FMLiveSwitchAction1<FMLiveSwitchHttpSendStartArgs*>*)value;
/**

    Replaces asterisks in URLs with characters from
    WildcardCharacters.

    @param url The URL with asterisks.
*/
+ (NSString*) replaceWildcardsWithUrl:(NSString*)url;
/**

    Sends a request asynchronously.

    @param requestArgs The request parameters.
    @param callback The callback to execute with the resulting response.
*/
- (void) sendAsyncWithRequestArgs:(FMLiveSwitchHttpRequestArgs*)requestArgs callback:(FMLiveSwitchAction1<FMLiveSwitchHttpResponseArgs*>*)callback;
/**

    Sends a request asynchronously.

    @param requestArgs The request parameters.
    @param callbackBlock The callback to execute with the resulting response.
*/
- (void) sendAsyncWithRequestArgs:(FMLiveSwitchHttpRequestArgs*)requestArgs callbackBlock:(void(^)(FMLiveSwitchHttpResponseArgs*))callbackBlock;
/**

    Sends a request asynchronously.

    @inlineparam requestArgs The request parameters.
    @inlineparam callbackBlock The callback to execute with the resulting response.
*/
- (void (^)(FMLiveSwitchHttpRequestArgs*, void(^)(FMLiveSwitchHttpResponseArgs*))) sendAsyncWithRequestArgsAndCallbackBlock;
/**

    Sends binary content asynchronously using the specified arguments.

    @param requestArgs The request arguments.
    @param callback The callback to execute on success or failure.
*/
- (void) sendBinaryAsyncWithRequestArgs:(FMLiveSwitchHttpRequestArgs*)requestArgs callback:(FMLiveSwitchAction1<FMLiveSwitchHttpResponseArgs*>*)callback;
/**

    Sends binary content asynchronously using the specified arguments.

    @param requestArgs The request arguments.
    @param callbackBlock The callback to execute on success or failure.
*/
- (void) sendBinaryAsyncWithRequestArgs:(FMLiveSwitchHttpRequestArgs*)requestArgs callbackBlock:(void(^)(FMLiveSwitchHttpResponseArgs*))callbackBlock;
/**

    Sends binary content asynchronously using the specified arguments.

    @inlineparam requestArgs The request arguments.
    @inlineparam callbackBlock The callback to execute on success or failure.
*/
- (void (^)(FMLiveSwitchHttpRequestArgs*, void(^)(FMLiveSwitchHttpResponseArgs*))) sendBinaryAsyncWithRequestArgsAndCallbackBlock;
/**

    Sends binary content synchronously using the specified arguments.

    @param requestArgs The request arguments.
    @return The response arguments from the server.
*/
- (FMLiveSwitchHttpResponseArgs*) sendBinaryWithRequestArgs:(FMLiveSwitchHttpRequestArgs*)requestArgs;
/**

    Sends text content asynchronously using the specified arguments.

    @param requestArgs The request arguments.
    @param callback The callback to execute on success or failure.
*/
- (void) sendTextAsyncWithRequestArgs:(FMLiveSwitchHttpRequestArgs*)requestArgs callback:(FMLiveSwitchAction1<FMLiveSwitchHttpResponseArgs*>*)callback;
/**

    Sends text content asynchronously using the specified arguments.

    @param requestArgs The request arguments.
    @param callbackBlock The callback to execute on success or failure.
*/
- (void) sendTextAsyncWithRequestArgs:(FMLiveSwitchHttpRequestArgs*)requestArgs callbackBlock:(void(^)(FMLiveSwitchHttpResponseArgs*))callbackBlock;
/**

    Sends text content asynchronously using the specified arguments.

    @inlineparam requestArgs The request arguments.
    @inlineparam callbackBlock The callback to execute on success or failure.
*/
- (void (^)(FMLiveSwitchHttpRequestArgs*, void(^)(FMLiveSwitchHttpResponseArgs*))) sendTextAsyncWithRequestArgsAndCallbackBlock;
/**

    Sends text content synchronously using the specified arguments.

    @param requestArgs The request arguments.
    @return The response arguments from the server.
*/
- (FMLiveSwitchHttpResponseArgs*) sendTextWithRequestArgs:(FMLiveSwitchHttpRequestArgs*)requestArgs;
/**

    Sends a request synchronously.

    @param requestArgs The request parameters.
    @return The resulting response.
*/
- (FMLiveSwitchHttpResponseArgs*) sendWithRequestArgs:(FMLiveSwitchHttpRequestArgs*)requestArgs;
/**

    Sets the wildcard characters used
    to replace asterisks in ReplaceWildcards.

*/
+ (void) setWildcardCharacters:(NSString*)value;
/**

    Releases any resources and shuts down.

*/
- (void) shutdown;
/**

    Gets the wildcard characters used
    to replace asterisks in ReplaceWildcards.

*/
+ (NSString*) wildcardCharacters;

@end

/**

    Creates implementations of FMLiveSwitchHttpTransfer.

*/
@interface FMLiveSwitchHttpTransferFactory : NSObject

/**

    Gets the callback that creates an HTTP-based transfer class.

*/
+ (FMLiveSwitchFunction0<FMLiveSwitchHttpTransfer*>*) createHttpTransfer;
/**

    Gets an instance of the HTTP-based transfer class.

*/
+ (FMLiveSwitchHttpTransfer*) getHttpTransfer;
+ (FMLiveSwitchHttpTransferFactory*) httpTransferFactory;
- (instancetype) init;
/**

    Sets the callback that creates an HTTP-based transfer class.

*/
+ (void) setCreateHttpTransfer:(FMLiveSwitchFunction0<FMLiveSwitchHttpTransfer*>*)value;
/**

    Sets the callback that creates an HTTP-based transfer class.

*/
+ (void (^)(FMLiveSwitchHttpTransfer*(^)(void))) setCreateHttpTransferBlock;
/**

    Sets the callback that creates an HTTP-based transfer class.

*/
+ (void) setCreateHttpTransferBlock:(FMLiveSwitchHttpTransfer*(^)(void))valueBlock;

@end

/**

    An HTTP web request sender.

*/
@interface FMLiveSwitchHttpWebRequestSender : FMLiveSwitchDynamic

+ (FMLiveSwitchHttpWebRequestSender*) httpWebRequestSender;
- (instancetype) init;

@end

/**

    Class to hold an integer value passed by reference.

*/
@interface FMLiveSwitchIntegerHolder : NSObject

/**

    Initializes a new instance of the FMLiveSwitchIntegerHolder class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchIntegerHolder class.

    @param value The value.
*/
- (instancetype) initWithValue:(int)value;
/**

    Initializes a new instance of the FMLiveSwitchIntegerHolder class.

*/
+ (FMLiveSwitchIntegerHolder*) integerHolder;
/**

    Initializes a new instance of the FMLiveSwitchIntegerHolder class.

    @param value The value.
*/
+ (FMLiveSwitchIntegerHolder*) integerHolder:(int)value;
/**

    Sets the value.

*/
- (void) setValue:(int)value;
/**

    Gets the value.

*/
- (int) value;

@end

/**

    JSON utility class.

*/
@interface FMLiveSwitchJson : NSObject

/**

    Deserializes a value from a JSON string.

    @param valueJson The JSON string to deserialize.
    @return The deserialized value.
*/
+ (id) deserializeWithValueJson:(NSString*)valueJson;
- (instancetype) init;
+ (FMLiveSwitchJson*) json;
/**

    Gets the JSON provider to use.

*/
+ (FMLiveSwitchJsonProvider*) provider;
/**

    Serializes a value to a JSON string.

    @param value The value to serialize.
    @return The serialized JSON string.
*/
+ (NSString*) serialize:(id)value;
/**

    Sets the JSON provider to use.

*/
+ (void) setProvider:(FMLiveSwitchJsonProvider*)value;

@end

/**

    Base class for all JSON provider implementations.

*/
@interface FMLiveSwitchJsonProvider : NSObject

/**

    Deserializes a value from a JSON string.

    @param valueJson The JSON string to deserialize.
    @return The deserialized value.
*/
- (id) deserializeWithValueJson:(NSString*)valueJson;
- (instancetype) init;
+ (FMLiveSwitchJsonProvider*) jsonProvider;
/**

    Serializes a value to a JSON string.

    @param value The value to serialize.
    @return The serialized JSON string.
*/
- (NSString*) serialize:(id)value;

@end

/**

    A license.

*/
@interface FMLiveSwitchLicense : NSObject

/**

    Gets the account identifier.

*/
- (NSString*) accountId;
/**

    Gets a value indicating whether a valid key has been set.

*/
+ (void) checkKey;
/**

    Checks if the license is valid for this product.

    @param message 
*/
- (bool) checkWithMessage:(NSString**)message;
/**

    Gets the contact email address.

*/
- (NSString*) contactEmailAddress;
/**

    Gets the contact name.

*/
- (NSString*) contactName;
/**

    Gets the contact phone number.

*/
- (NSString*) contactPhoneNumber;
/**

    Gets the core count.

*/
- (FMLiveSwitchNullableInt*) coreCount;
/**

    Gets the current license.

*/
+ (FMLiveSwitchLicense*) current;
/**

    Gets the license identifier.

*/
- (NSString*) id;
/**

    Gets a value indicating whether this is a trial license.

*/
- (bool) isTrial;
/**

    Gets a value indicating whether this is a valid license.

*/
- (bool) isValid;
/**

    Parses a license key.

    @param key The key.
*/
+ (FMLiveSwitchLicense*) parseKey:(NSString*)key;
/**

    Gets the product code.

*/
- (NSString*) productCode;
/**

    Sets the license key.

    @param key The license key.
*/
+ (void) setKey:(NSString*)key;
/**

    Gets the site address.

*/
- (NSString*) siteAddress;
/**

    Gets the site name.

*/
- (NSString*) siteName;
/**

    Gets the "valid from" date.

*/
- (NSDate*) validFrom;
/**

    Gets the "valid to" date.

*/
- (NSDate*) validTo;

@end

/**

    Thread-safe class providing access to a single FMLiveSwitchLockedRandomizerRandomizer.

*/
@interface FMLiveSwitchLockedRandomizer : NSObject

/**

    Returns a nonnegative random number.

*/
+ (int) next;
/**

    Fills the elements of a specified array of bytes with random numbers.

    @param buffer The array of bytes to fill.
*/
+ (void) nextBytesWithBuffer:(NSMutableData*)buffer;
/**

    Returns a random number between 0.0 and 1.0.

*/
+ (double) nextDouble;
/**

    Returns a nonnegative random number.

*/
+ (long long) nextLong;
/**

    Returns a nonnegative random number less than the specified maximum.

    @param maxValue The maximum value (exclusive).
*/
+ (int) nextWithMaxValue:(int)maxValue;
/**

    Returns a random number within a specified range.

    @param minValue The minimum value (inclusive).
    @param maxValue The maximum value (exclusive).
*/
+ (int) nextWithMinValue:(int)minValue maxValue:(int)maxValue;
/**

    Generates a random string of a specified size.

    @param size The size of the output string.
*/
+ (NSString*) randomStringWithSize:(int)size;

@end

/**

    Log utility class.

*/
@interface FMLiveSwitchLog : NSObject

/**

    Registers a log provider as a logging target.
    Alias for RegisterProvider.

    @param provider The new provider.
*/
+ (void) addProvider:(FMLiveSwitchLogProvider*)provider;
/**

    Registers a log provider as a logging target,
    setting its log level in the process.
    Alias for RegisterProvider.

    @param provider The new provider.
    @param level The log level.
*/
+ (void) addProvider:(FMLiveSwitchLogProvider*)provider level:(FMLiveSwitchLogLevel)level;
/**

    Logs a debug-level message.

    @param message The message.
    @param context The log context.
*/
+ (void) debugWithContext:(FMLiveSwitchLogContext*)context message:(NSString*)message;
/**

    Logs a debug-level message.

    @param message The message.
    @param ex The exception.
    @param context The log context.
*/
+ (void) debugWithContext:(FMLiveSwitchLogContext*)context message:(NSString*)message ex:(NSException*)ex;
/**

    Logs a debug-level message.

    @param message The message.
*/
+ (void) debugWithMessage:(NSString*)message;
/**

    Logs a debug-level message.

    @param message The message.
    @param ex The exception.
*/
+ (void) debugWithMessage:(NSString*)message ex:(NSException*)ex;
/**

    Gets the default log level.

*/
+ (FMLiveSwitchLogLevel) defaultLogLevel;
/**

    Logs an error-level message.

    @param message The message.
    @param context The log context.
*/
+ (void) errorWithContext:(FMLiveSwitchLogContext*)context message:(NSString*)message;
/**

    Logs an error-level message.

    @param message The message.
    @param ex The exception.
    @param context The log context.
*/
+ (void) errorWithContext:(FMLiveSwitchLogContext*)context message:(NSString*)message ex:(NSException*)ex;
/**

    Logs an error-level message.

    @param message The message.
*/
+ (void) errorWithMessage:(NSString*)message;
/**

    Logs an error-level message.

    @param message The message.
    @param ex The exception.
*/
+ (void) errorWithMessage:(NSString*)message ex:(NSException*)ex;
/**

    Logs a fatal-level message.

    @param message The message.
    @param context The log context.
*/
+ (void) fatalWithContext:(FMLiveSwitchLogContext*)context message:(NSString*)message;
/**

    Logs a fatal-level message.

    @param message The message.
    @param ex The exception.
    @param context The log context.
*/
+ (void) fatalWithContext:(FMLiveSwitchLogContext*)context message:(NSString*)message ex:(NSException*)ex;
/**

    Logs a fatal-level message.

    @param message The message.
*/
+ (void) fatalWithMessage:(NSString*)message;
/**

    Logs a fatal-level message.

    @param message The message.
    @param ex The exception.
*/
+ (void) fatalWithMessage:(NSString*)message ex:(NSException*)ex;
/**

    Blocks until all logs are written out.

*/
+ (void) flush;
/**

    Get a logger for a specific Tag.

    @param tag The tag to log to.
    @return A ILog that will log to the specified tag.
*/
+ (NSObject<FMLiveSwitchILog>*) getLoggerWithTag:(NSString*)tag;
/**

    Get a logger for a specific Tag.

    @param tag The tag to log to.
    @param level Logger's default log level.
    @return A ILog that will log to the specified tag.
*/
+ (NSObject<FMLiveSwitchILog>*) getLoggerWithTag:(NSString*)tag level:(FMLiveSwitchLogLevel)level;
/**

    Get a logger for a specific Tag. The tag is taken from the class namespace and name.

    @param type The type to use as the tag.
    @return A ILog that will log to the specified tag.
*/
+ (NSObject<FMLiveSwitchILog>*) getLoggerWithType:(Class)type;
/**

    Get a logger for a specific Tag.  The tag is taken from the class namespace and name.

    @param type The type to use as the tag.
    @param level Logger's default log level.
    @return A ILog that will log to the specified tag.
*/
+ (NSObject<FMLiveSwitchILog>*) getLoggerWithType:(Class)type level:(FMLiveSwitchLogLevel)level;
/**

    Logs an info-level message.

    @param message The message.
    @param context The log context.
*/
+ (void) infoWithContext:(FMLiveSwitchLogContext*)context message:(NSString*)message;
/**

    Logs an info-level message.

    @param message The message.
    @param ex The exception.
    @param context The log context.
*/
+ (void) infoWithContext:(FMLiveSwitchLogContext*)context message:(NSString*)message ex:(NSException*)ex;
/**

    Logs an info-level message.

    @param message The message.
*/
+ (void) infoWithMessage:(NSString*)message;
/**

    Logs an info-level message.

    @param message The message.
    @param ex The exception.
*/
+ (void) infoWithMessage:(NSString*)message ex:(NSException*)ex;
- (instancetype) init;
/**

    Gets a value indicating whether logging is enabled for debug-level messages
    for at least one of the registered providers.

*/
+ (bool) isDebugEnabled;
/**

    Gets a value indicating whether logging is enabled for error-level messages
    for at least one of the registered providers.

*/
+ (bool) isErrorEnabled;
/**

    Gets a value indicating whether logging is enabled for fatal-level messages
    for at least one of the registered providers.

*/
+ (bool) isFatalEnabled;
/**

    Gets a value indicating whether logging is enabled for info-level messages
    for at least one of the registered providers.

*/
+ (bool) isInfoEnabled;
/**

    Gets a value indicating whether logging is enabled for verbose-level messages
    for at least one of the registered providers.

*/
+ (bool) isVerboseEnabled;
/**

    Gets a value indicating whether logging is enabled for warn-level messages
    for at least one of the registered providers.

*/
+ (bool) isWarnEnabled;
+ (FMLiveSwitchLog*) log;
/**

    Gets the default log level.

    @deprecated Use DefaultLogLevel instead.
*/
+ (FMLiveSwitchLogLevel) logLevel __deprecated_msg("Use DefaultLogLevel instead.");
/**

    Gets the first log provider.

*/
+ (FMLiveSwitchLogProvider*) provider;
/**

    Gets the log providers.

*/
+ (NSMutableArray*) providers;
/**

    Registers a log provider as a logging target.

    @param provider The provider.
*/
+ (void) registerProvider:(FMLiveSwitchLogProvider*)provider;
/**

    Registers a log provider as a logging target,
    setting its log level in the process.

    @param provider The provider.
    @param level The log level.
*/
+ (void) registerProvider:(FMLiveSwitchLogProvider*)provider level:(FMLiveSwitchLogLevel)level;
/**

    Unregisters a log provider as a logging target.
    Alias for UnregisterProvider.

    @param provider The provider.
*/
+ (bool) removeProvider:(FMLiveSwitchLogProvider*)provider;
/**

    Unregisters all log providers as logging targets.
    Alias for UnregisterProviders.

*/
+ (void) removeProviders;
/**

    Sets the default log level.

*/
+ (void) setDefaultLogLevel:(FMLiveSwitchLogLevel)value;
/**

    Sets the default log level.

    @deprecated Use DefaultLogLevel instead.
*/
+ (void) setLogLevel:(FMLiveSwitchLogLevel)value __deprecated_msg("Use DefaultLogLevel instead.");
/**

    Sets the first log provider.

*/
+ (void) setProvider:(FMLiveSwitchLogProvider*)value;
/**

    Override the default log level for a specific tag.

    @param tag The Tag to set the log level to.
    @param level The new loglevel to use.
*/
+ (void) setTagOverrideWithTag:(NSString*)tag level:(FMLiveSwitchLogLevel)level;
/**

    Unregisters a log provider as a logging target.

    @param provider The provider.
*/
+ (bool) unregisterProvider:(FMLiveSwitchLogProvider*)provider;
/**

    Unregisters all log providers as logging targets.

*/
+ (void) unregisterProviders;
/**

    Logs a verbose-level message.

    @param message The message.
    @param context The log context.
*/
+ (void) verboseWithContext:(FMLiveSwitchLogContext*)context message:(NSString*)message;
/**

    Logs a verbose-level message.

    @param message The message.
    @param ex The exception.
    @param context The log context.
*/
+ (void) verboseWithContext:(FMLiveSwitchLogContext*)context message:(NSString*)message ex:(NSException*)ex;
/**

    Logs a verbose-level message.

    @param message The message.
*/
+ (void) verboseWithMessage:(NSString*)message;
/**

    Logs a verbose-level message.

    @param message The message.
    @param ex The exception.
*/
+ (void) verboseWithMessage:(NSString*)message ex:(NSException*)ex;
/**

    Logs a warn-level message.

    @param message The message.
    @param context The log context.
*/
+ (void) warnWithContext:(FMLiveSwitchLogContext*)context message:(NSString*)message;
/**

    Logs a warn-level message.

    @param message The message.
    @param ex The exception.
    @param context The log context.
*/
+ (void) warnWithContext:(FMLiveSwitchLogContext*)context message:(NSString*)message ex:(NSException*)ex;
/**

    Logs a warn-level message.

    @param message The message.
*/
+ (void) warnWithMessage:(NSString*)message;
/**

    Logs a warn-level message.

    @param message The message.
    @param ex The exception.
*/
+ (void) warnWithMessage:(NSString*)message ex:(NSException*)ex;
/**

    Writes a line of text to the log.

    @param text The text to write to the log.
*/
+ (void) writeLineWithText:(NSString*)text;

@end

@interface FMLiveSwitchLogLevelWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchLogLevel)value;

@end

/**

    Class to hold a long value passed by reference.

*/
@interface FMLiveSwitchLongHolder : NSObject

/**

    Initializes a new instance of the FMLiveSwitchLongHolder class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchLongHolder class.

    @param value The value.
*/
- (instancetype) initWithValue:(long long)value;
/**

    Initializes a new instance of the FMLiveSwitchLongHolder class.

*/
+ (FMLiveSwitchLongHolder*) longHolder;
/**

    Initializes a new instance of the FMLiveSwitchLongHolder class.

    @param value The value.
*/
+ (FMLiveSwitchLongHolder*) longHolder:(long long)value;
/**

    Sets the value.

*/
- (void) setValue:(long long)value;
/**

    Gets the value.

*/
- (long long) value;

@end

/**

    Utility class to assist with Network Time Protocol (NTP) conversions.
    NTP timestamps are 64-bit values that can span just over 136 years,
    from 1900-01-01 to 2036-02-08. Compact NTP timestamps are 32-bit
    values that can span span just over 18 hours.
    These utility methods guarantee precision to the millisecond.

*/
@interface FMLiveSwitchNetworkTimeProtocol : NSObject

/**

    Gets an instance of FMLiveSwitchNetworkTimeProtocol that uses
    1900-01-01 as the reference date, for use cases where the absolute
    wall-clock time represented is important.

*/
+ (FMLiveSwitchNetworkTimeProtocol*) absolute;
/**

    Converts a compact NTP timestamp (32 bits) to a date.

    @param ntp The NTP timestamp to convert.
    @return The equivalent date.
*/
- (NSDate*) compactNtpToDateTimeWithNtp:(long long)ntp;
/**

    Converts a compact NTP timestamp (32 bits) to ticks.

    @param ntp The NTP timestamp to convert.
    @return The equivalent ticks.
*/
- (long long) compactNtpToTicksWithNtp:(long long)ntp;
/**

    Converts a date to a compact NTP timestamp (32 bits).

    @param dateTime The date to convert.
    @return The equivalent NTP timestamp.
*/
- (long long) dateTimeToCompactNtpWithDateTime:(NSDate*)dateTime;
/**

    Converts a date to an NTP timestamp (double).

    @param dateTime The date to convert.
    @return The equivalent NTP timestamp.
*/
- (double) dateTimeToNtpSecondsWithDateTime:(NSDate*)dateTime;
/**

    Converts a date to an NTP timestamp (64 bits).

    @param dateTime The date to convert.
    @return The equivalent NTP timestamp.
*/
- (long long) dateTimeToNtpWithDateTime:(NSDate*)dateTime;
/**

    Initializes a new instance of the FMLiveSwitchNetworkTimeProtocol class
    with base set to 1900-01-01.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchNetworkTimeProtocol class.

    @param baseTicks The base ticks.
*/
- (instancetype) initWithBaseTicks:(long long)baseTicks;
/**

    Initializes a new instance of the FMLiveSwitchNetworkTimeProtocol class
    with base set to 1900-01-01.

*/
+ (FMLiveSwitchNetworkTimeProtocol*) networkTimeProtocol;
/**

    Initializes a new instance of the FMLiveSwitchNetworkTimeProtocol class.

    @param baseTicks The base ticks.
*/
+ (FMLiveSwitchNetworkTimeProtocol*) networkTimeProtocolWithBaseTicks:(long long)baseTicks;
/**

    Converts an NTP timestamp (double) to a date.

    @param ntpSeconds The NTP timestamp to convert.
    @return The equivalent date.
*/
- (NSDate*) ntpSecondsToDateTimeWithNtpSeconds:(double)ntpSeconds;
/**

    Converts an NTP timestamp (double) to ticks.

    @param ntpSeconds The NTP timestamp to convert.
    @return The equivalent ticks.
*/
- (long long) ntpSecondsToTicksWithNtpSeconds:(double)ntpSeconds;
/**

    Converts an NTP timestamp (64 bits) to a date.

    @param ntp The NTP timestamp to convert.
    @return The equivalent date.
*/
- (NSDate*) ntpToDateTimeWithNtp:(long long)ntp;
/**

    Converts an NTP timestamp (64 bits) to ticks.

    @param ntp The NTP timestamp to convert.
    @return The equivalent ticks.
*/
- (long long) ntpToTicksWithNtp:(long long)ntp;
/**

    Gets an instance of FMLiveSwitchNetworkTimeProtocol that uses
    zero as the reference date, for use cases where the time is relative
    to other times, and the reference time is not significant.

*/
+ (FMLiveSwitchNetworkTimeProtocol*) relative;
/**

    Converts ticks to a compact NTP timestamp (32 bits).

    @param ticks The ticks to convert.
    @return The equivalent NTP timestamp.
*/
- (long long) ticksToCompactNtpWithTicks:(long long)ticks;
/**

    Converts ticks to an NTP timestamp (double).

    @param ticks The ticks to convert.
    @return The equivalent NTP timestamp.
*/
- (double) ticksToNtpSecondsWithTicks:(long long)ticks;
/**

    Converts ticks to an NTP timestamp (64 bits).

    @param ticks The ticks to convert.
    @return The equivalent NTP timestamp.
*/
- (long long) ticksToNtpWithTicks:(long long)ticks;
/**

    Gets the current UTC time in NTP format.

*/
- (long long) utcNow;

@end

/**

    An implementation of a JSON provider that does nothing.

*/
@interface FMLiveSwitchNullJsonProvider : FMLiveSwitchJsonProvider

/**

    Deserializes a value from a JSON string.

    @param valueJson The JSON string to deserialize.
    @return 
            The deserialized value.
            
*/
- (id) deserializeWithValueJson:(NSString*)valueJson;
- (instancetype) init;
+ (FMLiveSwitchNullJsonProvider*) nullJsonProvider;
/**

    Serializes a value to a JSON string.

    @param value The value to serialize.
    @return 
            The serialized JSON string.
            
*/
- (NSString*) serialize:(id)value;

@end

/**

    An implementation of a logging provider that does nothing.

*/
@interface FMLiveSwitchNullLogProvider : FMLiveSwitchLogProvider

/**

    Logs a message at the specified log level.

    @param logEvent The log event details.
*/
- (void) doLogWithLogEvent:(FMLiveSwitchLogEvent*)logEvent;
- (instancetype) init;
+ (FMLiveSwitchNullLogProvider*) nullLogProvider;

@end

/**

    A data buffer pool.

*/
@interface FMLiveSwitchDataBufferPool : NSObject<FMLiveSwitchIDataBufferPool>

/**

    Gets the block size.

*/
- (int) blockSize;
/**

    Initializes a new instance of the FMLiveSwitchDataBufferPool class.

*/
+ (FMLiveSwitchDataBufferPool*) dataBufferPool;
/**

    Initializes a new instance of the FMLiveSwitchDataBufferPool class.

    @param tag The tag for stats output.
*/
+ (FMLiveSwitchDataBufferPool*) dataBufferPoolWithTag:(NSString*)tag;
/**

    Gets whether the pool is disabled.
    If disabled, each call to take a buffer
    will result in a new allocation.

*/
- (bool) disabled;
/**

    Gets whether to enable statistics.

*/
- (bool) enableStatistics;
/**

    Get a data buffer pool tracer for a specific tag using the default pool.

    @param tag The tag to log to.
    @return A tracer that will associate stats with the type.
*/
+ (FMLiveSwitchDataBufferPoolTracer*) getTracerWithTag:(NSString*)tag;
/**

    Get a data buffer pool tracer for a specific tag and pool.

    @param tag The tag to log to.
    @param pool The underlying pool.
    @return A tracer that will associate stats with the type.
*/
+ (FMLiveSwitchDataBufferPoolTracer*) getTracerWithTag:(NSString*)tag pool:(FMLiveSwitchDataBufferPool*)pool;
/**

    Get a data buffer pool tracer for a specific tag using the default pool. The tag is taken from the class namespace and name.

    @param type The type to use as the tag.
    @return A tracer that will associate stats with the tag.
*/
+ (FMLiveSwitchDataBufferPoolTracer*) getTracerWithType:(Class)type;
/**

    Get a data buffer pool tracer for a specific tag and pool. The tag is taken from the class namespace and name.

    @param type The type to use as the tag.
    @param pool The underlying pool.
    @return A tracer that will associate stats with the tag.
*/
+ (FMLiveSwitchDataBufferPoolTracer*) getTracerWithType:(Class)type pool:(FMLiveSwitchDataBufferPool*)pool;
/**

    Gets pool usage statistics for a specific tag.

    @param tag The tag.
*/
- (FMLiveSwitchPoolStatistics*) getTraceStatisticsWithTag:(NSString*)tag;
/**

    Gets pool usage statistics for a specific tag.

    @param type The type to use as the tag.
*/
- (FMLiveSwitchPoolStatistics*) getTraceStatisticsWithType:(Class)type;
/**

    Initializes a new instance of the FMLiveSwitchDataBufferPool class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchDataBufferPool class.

    @param tag The tag for stats output.
*/
- (instancetype) initWithTag:(NSString*)tag;
/**

    Gets the singleton instance.

*/
+ (FMLiveSwitchDataBufferPool*) instance;
/**

    Gets a value indicating whether DataBuffer pooling is supported on this platform.

*/
+ (bool) isSupported;
/**

    Gets the total bytes available in the pool.

*/
- (long long) pooledBytesAvailable;
/**

    Release the pools.

*/
- (void) releasePools;
/**

    Sets whether the pool is disabled.
    If disabled, each call to take a buffer
    will result in a new allocation.

*/
- (void) setDisabled:(bool)value;
/**

    Sets whether to enable statistics.

*/
- (void) setEnableStatistics:(bool)value;
/**

    Gets the pool usage statistics.

*/
- (FMLiveSwitchPoolStatistics*) statistics;
/**

    Takes a buffer from the pool.

    @param size The number of bytes needed.
*/
- (FMLiveSwitchDataBuffer*) takeWithSize:(int)size;
/**

    Takes a buffer from the pool.

    @param size The number of bytes needed.
    @param littleEndian Whether the data buffer should be little-endian.
*/
- (FMLiveSwitchDataBuffer*) takeWithSize:(int)size littleEndian:(bool)littleEndian;
/**

    Takes a buffer from the pool.

    @param size The number of bytes needed.
    @param littleEndian Whether the data buffer should be little-endian.
    @param clearBytes Whether to clear the data buffer.
*/
- (FMLiveSwitchDataBuffer*) takeWithSize:(int)size littleEndian:(bool)littleEndian clearBytes:(bool)clearBytes;
/**

    Gets all tagged pool usage statistics.

*/
- (NSMutableArray*) traceStatistics;

@end

/**

    Pool statistics.

*/
@interface FMLiveSwitchPoolStatistics : NSObject

/**

    Gets the number of pools in use.

*/
- (long long) activePools;
/**

    Overriden ToString

*/
- (NSString*) description;
/**

    Gets the percentage of cache hits.

*/
- (double) hitPercentage;
/**

    Gets the percentage of cache misses.

*/
- (double) missPercentage;
/**

    Gets the amount of buffer padding that is unused for caller's requested buffers.

*/
- (long long) paddingWasted;
/**

    Gets the total size of all buffers currently in the pool.

*/
- (long long) pendingPoolSize;
/**

    Gets the percentage of items returned to the pool.

*/
- (double) returnPercentage;
/**

    Gets the tag.

*/
- (NSString*) tag;
/**

    Gets the total calls to obtain a DataBuffer.

*/
- (long long) totalCalls;
/**

    Gets the total pools created.

*/
- (long long) totalPools;
/**

    Gets the total size of all buffers allocated in the pool.

*/
- (long long) totalPoolSize;

@end

/**

    Promise base properties/methods.

*/
@interface FMLiveSwitchPromiseBase<__covariant T> : FMLiveSwitchFuture<T><FMLiveSwitchIPromise>

/**

    Returns a promise that resolves when all passed in promises resolve.

    @param promises The promises to check.
*/
+ (FMLiveSwitchFuture<id>*) allWithPromises:(NSMutableArray*)promises;
/**

    Returns a promise that resolves when any passed in promise resolves.

    @param promises The promises to check.
*/
+ (FMLiveSwitchFuture<id>*) anyWithPromises:(NSMutableArray*)promises;
/**

    Casts the result and resolves the promise.
    Will throw an exception if the cast fails.

    @param result The result.
*/
- (bool) castAndResolveWithResult:(id)result;
/**

    Create a promise that resolves afer a delay.

    @param delayMs 
*/
+ (FMLiveSwitchFuture<id>*) delayWithDelayMs:(int)delayMs;
/**

    Internal DoAll.

*/
- (void) doAllWithPromises:(NSMutableArray*)promises counter:(FMLiveSwitchAtomicInteger*)counter;
/**

    Internal DoAny.

    @param promises 
    @param resolveCount 
    @param rejectCounter 
*/
- (void) doAnyWithPromises:(NSMutableArray*)promises resolveCount:(FMLiveSwitchAtomicInteger*)resolveCount rejectCounter:(FMLiveSwitchAtomicInteger*)rejectCounter;
/**

    Gets the identifier of this promise.

*/
- (NSString*) id;
/**

    Initializes a new instance of the FMLiveSwitchPromiseBase`1 class.

*/
- (instancetype) init;
/**

    Processes the specified promise.

    @param promise The promise.
    @param resolve The resolve.
    @param reject The reject.
*/
- (void) processWithPromise:(NSObject<FMLiveSwitchIPromise>*)promise resolve:(FMLiveSwitchAction1<T>*)resolve reject:(FMLiveSwitchAction1<NSException*>*)reject;
/**

    Processes the specified promise.

    @param promise The promise.
    @param resolveBlock The resolve.
    @param rejectBlock The reject.
*/
- (void) processWithPromise:(NSObject<FMLiveSwitchIPromise>*)promise resolveBlock:(void(^)(T))resolveBlock rejectBlock:(void(^)(NSException*))rejectBlock;
/**

    Processes the specified promise.

    @inlineparam promise The promise.
    @inlineparam resolveBlock The resolve.
    @inlineparam rejectBlock The reject.
*/
- (void (^)(NSObject<FMLiveSwitchIPromise>*, void(^)(T), void(^)(NSException*))) processWithPromiseAndResolveBlockAndRejectBlock;
/**

    Initializes a new instance of the FMLiveSwitchPromiseBase`1 class.

*/
+ (FMLiveSwitchPromiseBase*) promiseBase;
/**

    Rejects the promise asynchronously.

    @param exception The exception.
*/
- (FMLiveSwitchFuture<id>*) rejectAsyncWithException:(NSException*)exception;
/**

    Creates a promise and rejects it immediately.

    @param ex The exception.
*/
+ (FMLiveSwitchFuture<id>*) rejectNowWithEx:(NSException*)ex;
/**

    Rejects the promise.

    @param exception The exception.
*/
- (bool) rejectWithException:(NSException*)exception;
/**

    Resolves the promise asynchronously.

    @param result The result.
*/
- (FMLiveSwitchFuture<id>*) resolveAsyncWithResult:(T)result;
/**

    Creates a promise and resolves it immediately
    using a null result value.

*/
+ (FMLiveSwitchFuture<id>*) resolveNow;
/**

    Creates a promise and resolves it immediately
    using the given result value.

    @param result The result.
*/
+ (FMLiveSwitchFuture<id>*) resolveNowWithResult:(id)result;
/**

    Resolves the promise.

    @param result The result.
*/
- (bool) resolveWithResult:(T)result;
/**

    Creates a promise and resolves it using the result from a
    callback function, or rejects it if an exception is thrown.

    @param callback The callback function.
*/
+ (FMLiveSwitchFuture<id>*) wrapPromiseWithCallback:(FMLiveSwitchFunction0<FMLiveSwitchFuture<id>*>*)callback;
/**

    Creates a promise and resolves it using the result from a
    callback function, or rejects it if an exception is thrown.

    @inlineparam callbackBlock The callback function.
*/
+ (FMLiveSwitchFuture<id>* (^)(FMLiveSwitchFuture<id>*(^)(void))) wrapPromiseWithCallbackBlock;
/**

    Creates a promise and resolves it using the result from a
    callback function, or rejects it if an exception is thrown.

    @param callbackBlock The callback function.
*/
+ (FMLiveSwitchFuture<id>*) wrapPromiseWithCallbackBlock:(FMLiveSwitchFuture<id>*(^)(void))callbackBlock;

@end

/**

    A promise.

*/
@interface FMLiveSwitchPromise<__covariant T> : FMLiveSwitchPromiseBase<T>

/**

    Appends a handler to be executed when the promise is rejected.

    @param rejectAction The reject action.
*/
- (FMLiveSwitchFuture<T>*) failWithRejectAction:(FMLiveSwitchAction1<NSException*>*)rejectAction;
/**

    Appends a handler to be executed when the promise is rejected.

    @inlineparam rejectActionBlock The reject action.
*/
- (FMLiveSwitchFuture<T>* (^)(void(^)(NSException*))) failWithRejectActionBlock;
/**

    Appends a handler to be executed when the promise is rejected.

    @param rejectActionBlock The reject action.
*/
- (FMLiveSwitchFuture<T>*) failWithRejectActionBlock:(void(^)(NSException*))rejectActionBlock;
/**

    Appends a handler to be executed when the promise is rejected.

    @param rejectFunction The reject function.
*/
- (FMLiveSwitchFuture<T>*) failWithRejectFunction:(FMLiveSwitchFunction1<NSException*,FMLiveSwitchFuture<T>*>*)rejectFunction;
/**

    Appends a handler to be executed when the promise is rejected.

    @inlineparam rejectFunctionBlock The reject function.
*/
- (FMLiveSwitchFuture<T>* (^)(FMLiveSwitchFuture<T>*(^)(NSException*))) failWithRejectFunctionBlock;
/**

    Appends a handler to be executed when the promise is rejected.

    @param rejectFunctionBlock The reject function.
*/
- (FMLiveSwitchFuture<T>*) failWithRejectFunctionBlock:(FMLiveSwitchFuture<T>*(^)(NSException*))rejectFunctionBlock;
/**

    Creates a new promise.

*/
- (instancetype) init;
/**

    Creates a promise with a resolve callback and a reject callback.

*/
- (instancetype) initWithCallback:(FMLiveSwitchAction2<FMLiveSwitchAction1<T>*,FMLiveSwitchAction1<NSException*>*>*)callback;
/**

    Creates a promise with a resolve callback and a reject callback.

*/
- (instancetype) initWithCallbackBlock:(void(^)(FMLiveSwitchAction1<T>*, FMLiveSwitchAction1<NSException*>*))callbackBlock;
/**

    Creates a new promise.

*/
+ (FMLiveSwitchPromise*) promise;
/**

    Creates a promise with a resolve callback and a reject callback.

*/
+ (FMLiveSwitchPromise*) promiseWithCallback:(FMLiveSwitchAction2<FMLiveSwitchAction1<T>*,FMLiveSwitchAction1<NSException*>*>*)callback;
/**

    Creates a promise with a resolve callback and a reject callback.

*/
+ (FMLiveSwitchPromise*) promiseWithCallbackBlock:(void(^)(FMLiveSwitchAction1<T>*, FMLiveSwitchAction1<NSException*>*))callbackBlock;
/**

    Appends a handler to be executed when the promise is resolved.

    @param resolveAction The resolve action.
*/
- (FMLiveSwitchFuture<T>*) thenWithResolveAction:(FMLiveSwitchAction1<T>*)resolveAction;
/**

    Appends handlers to be executed when the promise is resolved or rejected.

    @param resolveAction The resolve action.
    @param rejectAction The reject action.
*/
- (FMLiveSwitchFuture<T>*) thenWithResolveAction:(FMLiveSwitchAction1<T>*)resolveAction rejectAction:(FMLiveSwitchAction1<NSException*>*)rejectAction;
/**

    Appends a handler to be executed when the promise is resolved.

    @inlineparam resolveActionBlock The resolve action.
*/
- (FMLiveSwitchFuture<T>* (^)(void(^)(T))) thenWithResolveActionBlock;
/**

    Appends a handler to be executed when the promise is resolved.

    @param resolveActionBlock The resolve action.
*/
- (FMLiveSwitchFuture<T>*) thenWithResolveActionBlock:(void(^)(T))resolveActionBlock;
/**

    Appends handlers to be executed when the promise is resolved or rejected.

    @param resolveActionBlock The resolve action.
    @param rejectActionBlock The reject action.
*/
- (FMLiveSwitchFuture<T>*) thenWithResolveActionBlock:(void(^)(T))resolveActionBlock rejectActionBlock:(void(^)(NSException*))rejectActionBlock;
/**

    Appends handlers to be executed when the promise is resolved or rejected.

    @inlineparam resolveActionBlock The resolve action.
    @inlineparam rejectActionBlock The reject action.
*/
- (FMLiveSwitchFuture<T>* (^)(void(^)(T), void(^)(NSException*))) thenWithResolveActionBlockAndRejectActionBlock;
/**

    Appends a handler to be executed when the promise is resolved.

    @param resolveFunction The resolve function.
*/
- (FMLiveSwitchFuture<id>*) thenWithResolveFunction:(FMLiveSwitchFunction1<T,FMLiveSwitchFuture<id>*>*)resolveFunction;
/**

    Appends handlers to be executed when the promise is resolved or rejected.

    @param resolveFunction The resolve function.
    @param rejectAction The reject action.
*/
- (FMLiveSwitchFuture<id>*) thenWithResolveFunction:(FMLiveSwitchFunction1<T,FMLiveSwitchFuture<id>*>*)resolveFunction rejectAction:(FMLiveSwitchAction1<NSException*>*)rejectAction;
/**

    Appends a handler to be executed when the promise is resolved.

    @inlineparam resolveFunctionBlock The resolve function.
*/
- (FMLiveSwitchFuture<id>* (^)(FMLiveSwitchFuture<id>*(^)(T))) thenWithResolveFunctionBlock;
/**

    Appends a handler to be executed when the promise is resolved.

    @param resolveFunctionBlock The resolve function.
*/
- (FMLiveSwitchFuture<id>*) thenWithResolveFunctionBlock:(FMLiveSwitchFuture<id>*(^)(T))resolveFunctionBlock;
/**

    Appends handlers to be executed when the promise is resolved or rejected.

    @param resolveFunctionBlock The resolve function.
    @param rejectActionBlock The reject action.
*/
- (FMLiveSwitchFuture<id>*) thenWithResolveFunctionBlock:(FMLiveSwitchFuture<id>*(^)(T))resolveFunctionBlock rejectActionBlock:(void(^)(NSException*))rejectActionBlock;
/**

    Appends handlers to be executed when the promise is resolved or rejected.

    @inlineparam resolveFunctionBlock The resolve function.
    @inlineparam rejectActionBlock The reject action.
*/
- (FMLiveSwitchFuture<id>* (^)(FMLiveSwitchFuture<id>*(^)(T), void(^)(NSException*))) thenWithResolveFunctionBlockAndRejectActionBlock;
/**

    Creates a promise and resolves it after invoking a callback
    action, or rejects it if an exception is thrown.
    The callback is always dispatched to the background.

    @param callbackAction The callback action.
*/
+ (FMLiveSwitchFuture<id>*) wrapAsyncWithCallbackAction:(FMLiveSwitchAction0*)callbackAction;
/**

    Creates a promise and resolves it using the result from a
    callback function, or rejects it if an exception is thrown.
    The callback is always dispatched to the background.

    @param callbackFunction The callback function.
*/
+ (FMLiveSwitchFuture<id>*) wrapAsyncWithCallbackFunction:(FMLiveSwitchFunction0<id>*)callbackFunction;
/**

    Creates a promise and resolves it using the result from a
    callback function, or rejects it if an exception is thrown.
    The callback is always dispatched to the background.

    @inlineparam callbackFunctionBlock The callback function.
*/
+ (FMLiveSwitchFuture<id>* (^)(id(^)(void))) wrapAsyncWithCallbackFunctionBlock;
/**

    Creates a promise and resolves it using the result from a
    callback function, or rejects it if an exception is thrown.
    The callback is always dispatched to the background.

    @param callbackFunctionBlock The callback function.
*/
+ (FMLiveSwitchFuture<id>*) wrapAsyncWithCallbackFunctionBlock:(id(^)(void))callbackFunctionBlock;
/**

    Creates a promise and resolves it after invoking a callback
    action, or rejects it if an exception is thrown.

    @param callbackAction The callback action.
*/
+ (FMLiveSwitchFuture<id>*) wrapWithCallbackAction:(FMLiveSwitchAction0*)callbackAction;
/**

    Creates a promise and resolves it using the result from a
    callback function, or rejects it if an exception is thrown.

    @param callbackFunction The callback function.
*/
+ (FMLiveSwitchFuture<id>*) wrapWithCallbackFunction:(FMLiveSwitchFunction0<id>*)callbackFunction;
/**

    Creates a promise and resolves it using the result from a
    callback function, or rejects it if an exception is thrown.

    @inlineparam callbackFunctionBlock The callback function.
*/
+ (FMLiveSwitchFuture<id>* (^)(id(^)(void))) wrapWithCallbackFunctionBlock;
/**

    Creates a promise and resolves it using the result from a
    callback function, or rejects it if an exception is thrown.

    @param callbackFunctionBlock The callback function.
*/
+ (FMLiveSwitchFuture<id>*) wrapWithCallbackFunctionBlock:(id(^)(void))callbackFunctionBlock;

@end

@interface FMLiveSwitchFutureStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchFutureState)value;

@end

/**

    An RSA key.

*/
@interface FMLiveSwitchRsaKey : FMLiveSwitchAsymmetricKey

/**

    Gets the private value inverse-Q.

*/
- (NSMutableData*) coefficient;
/**

    Gets the private value DP.

*/
- (NSMutableData*) exponent1;
/**

    Gets the private value DQ.

*/
- (NSMutableData*) exponent2;
/**

    Serializes this key to binary.

*/
- (NSMutableData*) getBytes;
/**

    Returns `true` if the key contains
    private information.

*/
- (bool) hasPrivate;
/**

    Returns `true` if the key contains
    public information.

*/
- (bool) hasPublic;
- (instancetype) init;
/**

    Gets the public value N.

*/
- (NSMutableData*) modulus;
/**

    Deserializes a key from binary.

    @param buffer The buffer.
*/
+ (FMLiveSwitchRsaKey*) parseBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Deserializes a key from binary.

    @param bytes The bytes.
*/
+ (FMLiveSwitchRsaKey*) parseBytes:(NSMutableData*)bytes;
/**

    Gets the private value P.

*/
- (NSMutableData*) prime1;
/**

    Gets the private value Q.

*/
- (NSMutableData*) prime2;
/**

    Gets the private value D.

*/
- (NSMutableData*) privateExponent;
/**

    Gets the public value E.

*/
- (NSMutableData*) publicExponent;
+ (FMLiveSwitchRsaKey*) rsaKey;
/**

    Sets the private value inverse-Q.

*/
- (void) setCoefficient:(NSMutableData*)value;
/**

    Sets the private value DP.

*/
- (void) setExponent1:(NSMutableData*)value;
/**

    Sets the private value DQ.

*/
- (void) setExponent2:(NSMutableData*)value;
/**

    Sets the public value N.

*/
- (void) setModulus:(NSMutableData*)value;
/**

    Sets the private value P.

*/
- (void) setPrime1:(NSMutableData*)value;
/**

    Sets the private value Q.

*/
- (void) setPrime2:(NSMutableData*)value;
/**

    Sets the private value D.

*/
- (void) setPrivateExponent:(NSMutableData*)value;
/**

    Sets the public value E.

*/
- (void) setPublicExponent:(NSMutableData*)value;
/**

    Gets the size of the key.

*/
- (int) size;
/**

    Gets the key type.

*/
- (FMLiveSwitchAsymmetricKeyType) type;

@end

/**

    Class to hold a short value passed by reference.

*/
@interface FMLiveSwitchShortHolder : NSObject

/**

    Initializes a new instance of the FMLiveSwitchShortHolder class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchShortHolder class.

    @param value The value.
*/
- (instancetype) initWithValue:(short)value;
/**

    Sets the value.

*/
- (void) setValue:(short)value;
/**

    Initializes a new instance of the FMLiveSwitchShortHolder class.

*/
+ (FMLiveSwitchShortHolder*) shortHolder;
/**

    Initializes a new instance of the FMLiveSwitchShortHolder class.

    @param value The value.
*/
+ (FMLiveSwitchShortHolder*) shortHolder:(short)value;
/**

    Gets the value.

*/
- (short) value;

@end

/**

    Encapsulates useful sorting utilities.

*/
@interface FMLiveSwitchSort : NSObject

- (instancetype) init;
/**

    Sorts an array using the in-place quick-sort algorithm.

    @param array The array of elements.
    @param comparer The function used to compare elements in the array -
            should return less than 0 if item 1 is less than item 2 (item 1 should appear
            before item 2), 0 if the items are equal, or more than 0 is item 1 is greater
            than item 2 (item 1 should appear after item 2).
*/
+ (void) quickSortWithArray:(NSMutableArray<id>*)array comparer:(FMLiveSwitchFunction2<id,id,id>*)comparer;
/**

    Sorts an array using the in-place quick-sort algorithm.

    @param array The array of elements.
    @param comparerBlock The function used to compare elements in the array -
            should return less than 0 if item 1 is less than item 2 (item 1 should appear
            before item 2), 0 if the items are equal, or more than 0 is item 1 is greater
            than item 2 (item 1 should appear after item 2).
*/
+ (void) quickSortWithArray:(NSMutableArray<id>*)array comparerBlock:(FMLiveSwitchCompareResult(^)(id, id))comparerBlock;
/**

    Sorts an array using the in-place quick-sort algorithm.

    @inlineparam array The array of elements.
    @inlineparam comparerBlock The function used to compare elements in the array -
            should return less than 0 if item 1 is less than item 2 (item 1 should appear
            before item 2), 0 if the items are equal, or more than 0 is item 1 is greater
            than item 2 (item 1 should appear after item 2).
*/
+ (void (^)(NSMutableArray<id>*, FMLiveSwitchCompareResult(^)(id, id))) quickSortWithArrayAndComparerBlock;
+ (FMLiveSwitchSort*) sort;

@end

/**

    Utility class for splitting strings.

*/
@interface FMLiveSwitchSplitter : NSObject

- (instancetype) init;
+ (FMLiveSwitchSplitter*) splitter;
/**

    Splits a string using a given delimiter.

    @param str The string.
    @param delimiter The delimiter.
*/
+ (NSMutableArray*) splitWithStr:(NSString*)str delimiter:(NSString*)delimiter;

@end

/**

    A stream socket.

*/
@interface FMLiveSwitchStreamSocket : FMLiveSwitchManagedSocket

/**

    Accepts a new socket asynchronously.

    @param onSuccess The callback to invoke on success.
    @param onFailure The callback to invoke on failure.
    @param onSocket The callback to invoke when a socket is ready.
*/
- (void) acceptAsyncWithOnSuccess:(FMLiveSwitchAction0*)onSuccess onFailure:(FMLiveSwitchAction1<NSException*>*)onFailure onSocket:(FMLiveSwitchAction1<FMLiveSwitchStreamSocket*>*)onSocket;
/**

    Accepts a new socket asynchronously.

    @param onSuccessBlock The callback to invoke on success.
    @param onFailureBlock The callback to invoke on failure.
    @param onSocketBlock The callback to invoke when a socket is ready.
*/
- (void) acceptAsyncWithOnSuccessBlock:(void(^)(void))onSuccessBlock onFailureBlock:(void(^)(NSException*))onFailureBlock onSocketBlock:(void(^)(FMLiveSwitchStreamSocket*))onSocketBlock;
/**

    Accepts a new socket asynchronously.

    @inlineparam onSuccessBlock The callback to invoke on success.
    @inlineparam onFailureBlock The callback to invoke on failure.
    @inlineparam onSocketBlock The callback to invoke when a socket is ready.
*/
- (void (^)(void(^)(void), void(^)(NSException*), void(^)(FMLiveSwitchStreamSocket*))) acceptAsyncWithOnSuccessBlockAndOnFailureBlockAndOnSocketBlock;
/**

    Connects the socket asynchronously.

    @param hostname The remote hostname.
    @param ipAddress The remote IP address.
    @param port The remote port.
    @param timeout The timeout (in ms).
    @param onSuccess The callback to invoke on success.
    @param onFailure The callback to invoke on failure.
*/
- (void) connectAsyncWithHostname:(NSString*)hostname ipAddress:(NSString*)ipAddress port:(int)port timeout:(int)timeout onSuccess:(FMLiveSwitchAction0*)onSuccess onFailure:(FMLiveSwitchAction2<NSException*,id>*)onFailure;
/**

    Connects the socket asynchronously.

    @param hostname The remote hostname.
    @param ipAddress The remote IP address.
    @param port The remote port.
    @param timeout The timeout (in ms).
    @param onSuccessBlock The callback to invoke on success.
    @param onFailureBlock The callback to invoke on failure.
*/
- (void) connectAsyncWithHostname:(NSString*)hostname ipAddress:(NSString*)ipAddress port:(int)port timeout:(int)timeout onSuccessBlock:(void(^)(void))onSuccessBlock onFailureBlock:(void(^)(NSException*, bool))onFailureBlock;
/**

    Connects the socket asynchronously.

    @inlineparam hostname The remote hostname.
    @inlineparam ipAddress The remote IP address.
    @inlineparam port The remote port.
    @inlineparam timeout The timeout (in ms).
    @inlineparam onSuccessBlock The callback to invoke on success.
    @inlineparam onFailureBlock The callback to invoke on failure.
*/
- (void (^)(NSString*, NSString*, int, int, void(^)(void), void(^)(NSException*, bool))) connectAsyncWithHostnameAndIPAddressAndPortAndTimeoutAndOnSuccessBlockAndOnFailureBlock;
- (instancetype) init;
/**

    Gets a callback invoked on failed read from TCP stream.

*/
- (FMLiveSwitchAction2<NSException*,id>*) onReceiveFailure;
/**

    Gets a callback invoked on successful read from TCP stream.

*/
- (FMLiveSwitchAction1<FMLiveSwitchDataBuffer*>*) onReceiveSuccess;
/**

    Invokes the accept failure callback.

    @param callback The callback.
    @param exception The exception.
*/
- (void) raiseAcceptFailureWithCallback:(FMLiveSwitchAction1<NSException*>*)callback exception:(NSException*)exception;
/**

    Invokes the accept failure callback.

    @param callbackBlock The callback.
    @param exception The exception.
*/
- (void) raiseAcceptFailureWithCallbackBlock:(void(^)(NSException*))callbackBlock exception:(NSException*)exception;
/**

    Invokes the accept failure callback.

    @inlineparam callbackBlock The callback.
    @inlineparam exception The exception.
*/
- (void (^)(void(^)(NSException*), NSException*)) raiseAcceptFailureWithCallbackBlockAndException;
/**

    Invokes the accept success callback.

    @param callback The callback.
    @param socket The socket.
*/
- (void) raiseAcceptSocketWithCallback:(FMLiveSwitchAction1<FMLiveSwitchStreamSocket*>*)callback socket:(FMLiveSwitchStreamSocket*)socket;
/**

    Invokes the accept success callback.

    @param callbackBlock The callback.
    @param socket The socket.
*/
- (void) raiseAcceptSocketWithCallbackBlock:(void(^)(FMLiveSwitchStreamSocket*))callbackBlock socket:(FMLiveSwitchStreamSocket*)socket;
/**

    Invokes the accept success callback.

    @inlineparam callbackBlock The callback.
    @inlineparam socket The socket.
*/
- (void (^)(void(^)(FMLiveSwitchStreamSocket*), FMLiveSwitchStreamSocket*)) raiseAcceptSocketWithCallbackBlockAndSocket;
/**

    Invokes the accept success callback.

    @param callback The callback.
*/
- (void) raiseAcceptSuccessWithCallback:(FMLiveSwitchAction0*)callback;
/**

    Invokes the connect failure callback.

    @param callback The callback.
    @param exception The exception.
    @param timedOut if set to `true` [timed out].
*/
- (void) raiseConnectFailureWithCallback:(FMLiveSwitchAction2<NSException*,id>*)callback exception:(NSException*)exception timedOut:(bool)timedOut;
/**

    Invokes the connect failure callback.

    @param callbackBlock The callback.
    @param exception The exception.
    @param timedOut if set to `true` [timed out].
*/
- (void) raiseConnectFailureWithCallbackBlock:(void(^)(NSException*, bool))callbackBlock exception:(NSException*)exception timedOut:(bool)timedOut;
/**

    Invokes the connect failure callback.

    @inlineparam callbackBlock The callback.
    @inlineparam exception The exception.
    @inlineparam timedOut if set to `true` [timed out].
*/
- (void (^)(void(^)(NSException*, bool), NSException*, bool)) raiseConnectFailureWithCallbackBlockAndExceptionAndTimedOut;
/**

    Invokes the connect success callback.

    @param callback The callback.
*/
- (void) raiseConnectSuccessWithCallback:(FMLiveSwitchAction0*)callback;
/**

    Invokes the receive failure callback.

    @param callback The callback.
    @param exception The exception.
    @param timedOut if set to `true` [timed out].
*/
- (void) raiseReceiveFailureWithCallback:(FMLiveSwitchAction2<NSException*,id>*)callback exception:(NSException*)exception timedOut:(bool)timedOut;
/**

    Invokes the receive failure callback.

    @param callbackBlock The callback.
    @param exception The exception.
    @param timedOut if set to `true` [timed out].
*/
- (void) raiseReceiveFailureWithCallbackBlock:(void(^)(NSException*, bool))callbackBlock exception:(NSException*)exception timedOut:(bool)timedOut;
/**

    Invokes the receive failure callback.

    @inlineparam callbackBlock The callback.
    @inlineparam exception The exception.
    @inlineparam timedOut if set to `true` [timed out].
*/
- (void (^)(void(^)(NSException*, bool), NSException*, bool)) raiseReceiveFailureWithCallbackBlockAndExceptionAndTimedOut;
/**

    Invokes the receive success callback.

    @param callback The callback.
    @param buffer The buffer.
*/
- (void) raiseReceiveSuccessWithCallback:(FMLiveSwitchAction1<FMLiveSwitchDataBuffer*>*)callback buffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Invokes the receive success callback.

    @param callbackBlock The callback.
    @param buffer The buffer.
*/
- (void) raiseReceiveSuccessWithCallbackBlock:(void(^)(FMLiveSwitchDataBuffer*))callbackBlock buffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Invokes the receive success callback.

    @inlineparam callbackBlock The callback.
    @inlineparam buffer The buffer.
*/
- (void (^)(void(^)(FMLiveSwitchDataBuffer*), FMLiveSwitchDataBuffer*)) raiseReceiveSuccessWithCallbackBlockAndBuffer;
/**

    Invokes the send failure callback.

    @param callback The callback.
    @param exception The exception.
    @param timedOut if set to `true` [timed out].
*/
- (void) raiseSendFailureWithCallback:(FMLiveSwitchAction2<NSException*,id>*)callback exception:(NSException*)exception timedOut:(bool)timedOut;
/**

    Invokes the send failure callback.

    @param callbackBlock The callback.
    @param exception The exception.
    @param timedOut if set to `true` [timed out].
*/
- (void) raiseSendFailureWithCallbackBlock:(void(^)(NSException*, bool))callbackBlock exception:(NSException*)exception timedOut:(bool)timedOut;
/**

    Invokes the send failure callback.

    @inlineparam callbackBlock The callback.
    @inlineparam exception The exception.
    @inlineparam timedOut if set to `true` [timed out].
*/
- (void (^)(void(^)(NSException*, bool), NSException*, bool)) raiseSendFailureWithCallbackBlockAndExceptionAndTimedOut;
/**

    Invokes the send success callback.

    @param callback The callback.
*/
- (void) raiseSendSuccessWithCallback:(FMLiveSwitchAction0*)callback;
/**

    Receives data asynchronously.

    @param timeout The timeout (in ms).
*/
- (void) receiveAsyncWithTimeout:(int)timeout;
/**

    Gets the remote hostname.

*/
- (NSString*) remoteHostname;
/**

    Gets the remote IP address.

*/
- (NSString*) remoteIPAddress;
/**

    Gets the remote port.

*/
- (int) remotePort;
/**

    Gets a value indicating whether the socket is secure.

*/
- (bool) secure;
/**

    Sends data asynchronously.

    @param buffer The buffer.
    @param timeout The timeout (in ms).
    @param onSuccess The callback to invoke on success.
    @param onFailure The callback to invoke on failure.
*/
- (void) sendAsyncWithBuffer:(FMLiveSwitchDataBuffer*)buffer timeout:(int)timeout onSuccess:(FMLiveSwitchAction0*)onSuccess onFailure:(FMLiveSwitchAction2<NSException*,id>*)onFailure;
/**

    Sends data asynchronously.

    @param buffer The buffer.
    @param timeout The timeout (in ms).
    @param onSuccessBlock The callback to invoke on success.
    @param onFailureBlock The callback to invoke on failure.
*/
- (void) sendAsyncWithBuffer:(FMLiveSwitchDataBuffer*)buffer timeout:(int)timeout onSuccessBlock:(void(^)(void))onSuccessBlock onFailureBlock:(void(^)(NSException*, bool))onFailureBlock;
/**

    Sends data asynchronously.

    @inlineparam buffer The buffer.
    @inlineparam timeout The timeout (in ms).
    @inlineparam onSuccessBlock The callback to invoke on success.
    @inlineparam onFailureBlock The callback to invoke on failure.
*/
- (void (^)(FMLiveSwitchDataBuffer*, int, void(^)(void), void(^)(NSException*, bool))) sendAsyncWithBufferAndTimeoutAndOnSuccessBlockAndOnFailureBlock;
/**

    Sends data synchronously.

    @param buffer The buffer.
*/
- (bool) sendWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Gets a value indicating whether the socket can accept incoming connections.

*/
- (bool) server;
/**

    Sets a callback invoked on failed read from TCP stream.

*/
- (void) setOnReceiveFailure:(FMLiveSwitchAction2<NSException*,id>*)value;
/**

    Sets a callback invoked on failed read from TCP stream.

*/
- (void (^)(void(^)(NSException*, bool))) setOnReceiveFailureBlock;
/**

    Sets a callback invoked on failed read from TCP stream.

*/
- (void) setOnReceiveFailureBlock:(void(^)(NSException*, bool))valueBlock;
/**

    Sets a callback invoked on successful read from TCP stream.

*/
- (void) setOnReceiveSuccess:(FMLiveSwitchAction1<FMLiveSwitchDataBuffer*>*)value;
/**

    Sets a callback invoked on successful read from TCP stream.

*/
- (void (^)(void(^)(FMLiveSwitchDataBuffer*))) setOnReceiveSuccessBlock;
/**

    Sets a callback invoked on successful read from TCP stream.

*/
- (void) setOnReceiveSuccessBlock:(void(^)(FMLiveSwitchDataBuffer*))valueBlock;
+ (FMLiveSwitchStreamSocket*) streamSocket;

@end

/**

    Arguments for a stream socket create event.

*/
@interface FMLiveSwitchStreamSocketCreateArgs : NSObject

/**

    Initializes a new instance of the FMLiveSwitchStreamSocketCreateArgs class.

    @param server Whether the socket should accept incoming connections.
    @param ipv6 Whether the socket should support IPv6.
    @param secure Whether the socket should be secured.
*/
- (instancetype) initWithServer:(bool)server ipv6:(bool)ipv6 secure:(bool)secure;
/**

    Gets a value indicating whether the socket should support IPv6.

*/
- (bool) ipv6;
/**

    Gets a value indicating whether the socket should be secured.

*/
- (bool) secure;
/**

    Gets a value indicating whether the socket should accept incoming connections.

*/
- (bool) server;
/**

    Sets the stream index.

*/
- (void) setStreamIndex:(int)value;
/**

    Gets the stream index.

*/
- (int) streamIndex;
/**

    Initializes a new instance of the FMLiveSwitchStreamSocketCreateArgs class.

    @param server Whether the socket should accept incoming connections.
    @param ipv6 Whether the socket should support IPv6.
    @param secure Whether the socket should be secured.
*/
+ (FMLiveSwitchStreamSocketCreateArgs*) streamSocketCreateArgsWithServer:(bool)server ipv6:(bool)ipv6 secure:(bool)secure;

@end

/**

    Contains methods for string manipulation.

*/
@interface FMLiveSwitchStringAssistant : NSObject

- (instancetype) init;
/**


    @param s The s.
*/
+ (bool) isNullOrWhiteSpaceWithS:(NSString*)s;
+ (FMLiveSwitchStringAssistant*) stringAssistant;
/**

    Creates a subarray from an existing array.

    @param array The source array.
    @param offset The offset into the source array.
    @return The subarray.
*/
+ (NSMutableArray*) subArray:(NSMutableArray*)array offset:(int)offset;
/**

    Creates a subarray from an existing array.

    @param array The source array.
    @param offset The offset into the source array.
    @param count The number of elements to copy into the subarray.
    @return The subarray.
*/
+ (NSMutableArray*) subArray:(NSMutableArray*)array offset:(int)offset count:(int)count;

@end

/**

    Simple log provider that writes to a local string builder.

*/
@interface FMLiveSwitchTextLogProvider : FMLiveSwitchLogProvider

/**

    Gets a callback to invoke
    whenever text is written to the log.

*/
- (FMLiveSwitchAction1<NSString*>*) callback;
/**

    Clears all text from the log
    and returns the former contents.

*/
- (NSString*) clear;
/**

    Logs a message at the specified log level.

    @param logEvent The log event details.
*/
- (void) doLogWithLogEvent:(FMLiveSwitchLogEvent*)logEvent;
/**

    Initializes a new instance of the FMLiveSwitchTextLogProvider.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchTextLogProvider class.

    @param level The log level.
*/
- (instancetype) initWithLevel:(FMLiveSwitchLogLevel)level;
/**

    Sets a callback to invoke
    whenever text is written to the log.

*/
- (void) setCallback:(FMLiveSwitchAction1<NSString*>*)value;
/**

    Sets a callback to invoke
    whenever text is written to the log.

*/
- (void (^)(void(^)(NSString*))) setCallbackBlock;
/**

    Sets a callback to invoke
    whenever text is written to the log.

*/
- (void) setCallbackBlock:(void(^)(NSString*))valueBlock;
/**

    Gets the logged text.

*/
- (NSString*) text;
/**

    Initializes a new instance of the FMLiveSwitchTextLogProvider.

*/
+ (FMLiveSwitchTextLogProvider*) textLogProvider;
/**

    Initializes a new instance of the FMLiveSwitchTextLogProvider class.

    @param level The log level.
*/
+ (FMLiveSwitchTextLogProvider*) textLogProviderWithLevel:(FMLiveSwitchLogLevel)level;

@end

/**

    An IP address and port.

*/
@interface FMLiveSwitchTransportAddress : NSObject

/**

    Gets the address type.

*/
- (FMLiveSwitchAddressType) addressType;
/**

    Compares two addresses to see if they are on
    the same subnet.

    @param address1 The first address.
    @param address2 The second address.
    @param mask The subnet mask.
*/
+ (bool) checkMaskWithAddress1:(NSString*)address1 address2:(NSString*)address2 mask:(NSString*)mask;
/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Returns a hash code for this instance.

    @return 
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            
*/
- (int) hash;
/**

    Initializes a new instance of the FMLiveSwitchTransportAddress class.

    @param ipAddress The IP address.
    @param port The port.
*/
- (instancetype) initWithIPAddress:(NSString*)ipAddress port:(int)port;
/**

    Gets the IP address.

*/
- (NSString*) ipAddress;
/**

    Determines whether the specified IP address is a 6to4 address.

    @param ipAddress The IP address.
*/
+ (bool) is6To4WithIPAddress:(NSString*)ipAddress;
/**

    Determines whether the specified IP address is all zeros
    and represents "any" IP address.

    @param ipAddress The IP address.
*/
+ (bool) isAnyWithIPAddress:(NSString*)ipAddress;
/**

    Determines whether the specified IP address is a discard address.

    @param ipAddress The IP address.
*/
+ (bool) isDiscardWithIPAddress:(NSString*)ipAddress;
/**

    Determines whether the specified IP address is a documentation address.

    @param ipAddress The IP address.
*/
+ (bool) isDocumentationWithIPAddress:(NSString*)ipAddress;
/**

    Determines whether the specified object is equal to this instance.

    @param obj The object to compare with this instance.
*/
- (bool) isEqualWithObj:(id)obj;
/**

    Determines whether a string is a valid IPv4 or IPv6 address

    @param address The address.
*/
+ (bool) isIPAddress:(NSString*)address;
/**

    Determines whether the specified IP address is IPv4.

    @param ipAddress The IP address.
    @return `true` if the specified IP address is IPv4; otherwise, `false`.
            
*/
+ (bool) isIPv4WithIPAddress:(NSString*)ipAddress;
/**

    Determines whether the specified IP address is IPv6.

    @param ipAddress The IP address.
    @return `true` if the specified IP address is IPv6; otherwise, `false`.
            
*/
+ (bool) isIPv6WithIPAddress:(NSString*)ipAddress;
/**

    Determines whether the specified IP address is a limited broadcast address.

    @param ipAddress The IP address.
*/
+ (bool) isLimitedBroadcastWithIPAddress:(NSString*)ipAddress;
/**

    Determines whether the specified IP address is a link-local address.

    @param ipAddress The IP address.
*/
+ (bool) isLinkLocalWithIPAddress:(NSString*)ipAddress;
/**

    Determines whether the specified IP address is a loopback address.

    @param ipAddress The IP address.
*/
+ (bool) isLoopbackWithIPAddress:(NSString*)ipAddress;
/**

    Determines whether the specified IP address is a multicast address.

    @param ipAddress The IP address.
*/
+ (bool) isMulticastWithIPAddress:(NSString*)ipAddress;
/**

    Determines whether the specified IP address is an ORCHID address.

    @param ipAddress The IP address.
*/
+ (bool) isOrchidWithIPAddress:(NSString*)ipAddress;
/**

    Determines whether the specified IP address is a private address.

    @param ipAddress The IP address.
*/
+ (bool) isPrivateWithIPAddress:(NSString*)ipAddress;
/**

    Determines whether the specified IP address is a reserved address.

    @param ipAddress The IP address.
*/
+ (bool) isReservedWithIPAddress:(NSString*)ipAddress;
/**

    Determines whether the specified IP address is a source address.

    @param ipAddress The IP address.
*/
+ (bool) isSourceWithIPAddress:(NSString*)ipAddress;
/**

    Determines whether the specified IP address is a Teredo address.

    @param ipAddress The IP address.
*/
+ (bool) isTeredoWithIPAddress:(NSString*)ipAddress;
/**

    Gets a subnet mask from an IPv4 prefix length (0-32).

    @param prefixLength The prefix length.
*/
+ (NSString*) maskFromPrefixLength:(int)prefixLength;
/**

    Gets a subnet mask from an IPv4 or IPv6 prefix length (0-32 or 0-128).

    @param prefixLength The prefix length.
    @param ipv6 Whether to return an IPv6 mask.
*/
+ (NSString*) maskFromPrefixLength:(int)prefixLength ipv6:(bool)ipv6;
/**

    Gets the port.

*/
- (int) port;
/**

    Sanitizes the IP address, removing any local information.

    @param ipAddress The IP address to sanitize.
*/
+ (NSString*) sanitizeIPAddress:(NSString*)ipAddress;
/**

    Sets the IP address.

*/
- (void) setIPAddress:(NSString*)value;
/**

    Sets the port.

*/
- (void) setPort:(int)value;
/**

    Initializes a new instance of the FMLiveSwitchTransportAddress class.

    @param ipAddress The IP address.
    @param port The port.
*/
+ (FMLiveSwitchTransportAddress*) transportAddressWithIPAddress:(NSString*)ipAddress port:(int)port;

@end

/**

    Throws exceptions on a separate thread.

*/
@interface FMLiveSwitchUnhandled : NSObject

- (instancetype) init;
/**

    Logs an unhandled exception.

    @param ex The exception to throw.
    @param source The source of the exception.
*/
+ (void) logExceptionWithEx:(NSException*)ex source:(NSString*)source;
+ (FMLiveSwitchUnhandled*) unhandled;

@end

/**

    Arguments for an unhandled exception.

*/
@interface FMLiveSwitchUnhandledExceptionArgs : NSObject

/**

    Gets the unhandled exception.

*/
- (NSException*) exception;
/**

    Gets whether the exception has been
    appropriately handled. If set to `true`,
    then the exception will not be thrown.

*/
- (bool) handled;
/**

    Initializes a new instance of the FMLiveSwitchUnhandledExceptionArgs class.

    @param exception The exception.
*/
- (instancetype) initWithException:(NSException*)exception;
/**

    Sets whether the exception has been
    appropriately handled. If set to `true`,
    then the exception will not be thrown.

*/
- (void) setHandled:(bool)value;
/**

    Initializes a new instance of the FMLiveSwitchUnhandledExceptionArgs class.

    @param exception The exception.
*/
+ (FMLiveSwitchUnhandledExceptionArgs*) unhandledExceptionArgsWithException:(NSException*)exception;

@end

/**

    UTF-8 encoding/decoding utility.

*/
@interface FMLiveSwitchUtf8 : NSObject

/**

    Decodes a UTF-8 data buffer to a string.

    @param buffer The input byte array.
*/
+ (NSString*) decodeWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Decodes a UTF-8 byte array to a string.

    @param input The input byte array.
*/
+ (NSString*) decodeWithInput:(NSMutableData*)input;
/**

    Decodes a UTF-8 byte array to a string.

    @param input The input byte array.
    @param index The index to start reading.
    @param length The length.
*/
+ (NSString*) decodeWithInput:(NSMutableData*)input index:(int)index length:(int)length;
/**

    Encodes a string to a UTF-8 byte array.

    @param input The input string.
*/
+ (NSMutableData*) encodeWithInput:(NSString*)input;
/**

    Gets the number of bytes that would be returned by
    a call to encode.

    @param input The input string.
*/
+ (int) getByteCountWithInput:(NSString*)input;
- (instancetype) init;
+ (FMLiveSwitchUtf8*) utf8;

@end

/**

    WebSocket base properties/methods.

*/
@interface FMLiveSwitchWebSocketBase : NSObject

/**

    Adds a handler that is raised when the latest round trip time is calculated.

*/
- (void) addOnLatestRoundTripTime:(FMLiveSwitchAction1<id>*)value;
/**

    Adds a handler that is raised when the latest round trip time is calculated.

*/
- (void (^)(void(^)(int))) addOnLatestRoundTripTimeWithBlock;
/**

    Adds a handler that is raised when the latest round trip time is calculated.

*/
- (void) addOnLatestRoundTripTimeWithBlock:(void(^)(int))valueBlock;
- (instancetype) init;
/**

    Gets the last round trip time.

*/
- (int) lastRoundTripTime;
/**

    Raises the close complete callback.

    @param closeArgs The close arguments.
    @param statusCode The status code.
    @param reason The reason.
*/
- (void) raiseCloseCompleteWithCloseArgs:(FMLiveSwitchWebSocketCloseArgs*)closeArgs statusCode:(FMLiveSwitchWebSocketStatusCode)statusCode reason:(NSString*)reason;
/**

    Raises the OnLatestRoundTripTime event.

    @param value 
*/
- (void) raiseOnLatestRoundTripTime:(int)value;
/**

    Raises the open failure callback.

    @param openArgs The open arguments.
    @param statusCode The status code.
    @param exception The exception.
*/
- (void) raiseOpenFailureWithOpenArgs:(FMLiveSwitchWebSocketOpenArgs*)openArgs statusCode:(FMLiveSwitchWebSocketStatusCode)statusCode exception:(NSException*)exception;
/**

    Raises the open success callback.

    @param openArgs The open arguments.
*/
- (void) raiseOpenSuccessWithOpenArgs:(FMLiveSwitchWebSocketOpenArgs*)openArgs;
/**

    Raises the receive callback.

    @param openArgs The open arguments.
    @param textMessage The text message.
    @param binaryMessage The binary message.
*/
- (void) raiseReceiveWithOpenArgs:(FMLiveSwitchWebSocketOpenArgs*)openArgs textMessage:(NSString*)textMessage binaryMessage:(NSMutableData*)binaryMessage;
/**

    Raises the stream failure callback.

    @param openArgs The open arguments.
    @param statusCode The status code.
    @param exception The exception.
*/
- (void) raiseStreamFailureWithOpenArgs:(FMLiveSwitchWebSocketOpenArgs*)openArgs statusCode:(FMLiveSwitchWebSocketStatusCode)statusCode exception:(NSException*)exception;
/**

    Removes a handler that is raised when the latest round trip time is calculated.

*/
- (void) removeOnLatestRoundTripTime:(FMLiveSwitchAction1<id>*)value;
/**

    Sets the last round trip time.

*/
- (void) setLastRoundTripTime:(int)value;
+ (FMLiveSwitchWebSocketBase*) webSocketBase;

@end

/**

    A Message Channel

*/
@interface FMLiveSwitchWebSocketReceiverRelay : NSObject

/**

    Add an event listener.

    @param listener 
    @param receiver 
*/
- (void) addEventListener:(FMLiveSwitchAction1<FMLiveSwitchWebSocketReceiveArgs*>*)listener receiver:(FMLiveSwitchRelayPort*)receiver;
/**

    Add an event listener.

    @param listenerBlock 
    @param receiver 
*/
- (void) addEventListenerWithListenerBlock:(void(^)(FMLiveSwitchWebSocketReceiveArgs*))listenerBlock receiver:(FMLiveSwitchRelayPort*)receiver;
/**

    Add an event listener.

    @inlineparam listenerBlock 
    @inlineparam receiver 
*/
- (void (^)(void(^)(FMLiveSwitchWebSocketReceiveArgs*), FMLiveSwitchRelayPort*)) addEventListenerWithListenerBlockAndReceiver;
/**

    Create a MessageChannel.

*/
- (instancetype) init;
/**

    Gets Port1.

*/
- (FMLiveSwitchRelayPort*) port1;
/**

    Gets Port1.

*/
- (FMLiveSwitchRelayPort*) port2;
/**

    Post a message.

    @param args 
    @param sender 
*/
- (void) postMessageWithArgs:(FMLiveSwitchWebSocketReceiveArgs*)args sender:(FMLiveSwitchRelayPort*)sender;
/**

    Remove an event listener.

    @param listener 
    @param receiver 
*/
- (void) removeEventListener:(FMLiveSwitchAction1<FMLiveSwitchWebSocketReceiveArgs*>*)listener receiver:(FMLiveSwitchRelayPort*)receiver;
/**

    Remove an event listener.

    @param listenerBlock 
    @param receiver 
*/
- (void) removeEventListenerWithListenerBlock:(void(^)(FMLiveSwitchWebSocketReceiveArgs*))listenerBlock receiver:(FMLiveSwitchRelayPort*)receiver;
/**

    Remove an event listener.

    @inlineparam listenerBlock 
    @inlineparam receiver 
*/
- (void (^)(void(^)(FMLiveSwitchWebSocketReceiveArgs*), FMLiveSwitchRelayPort*)) removeEventListenerWithListenerBlockAndReceiver;
/**

    Sets Port1.

*/
- (void) setPort1:(FMLiveSwitchRelayPort*)value;
/**

    Sets Port1.

*/
- (void) setPort2:(FMLiveSwitchRelayPort*)value;
/**

    Create a MessageChannel.

*/
+ (FMLiveSwitchWebSocketReceiverRelay*) webSocketReceiverRelay;

@end

/**

    Implementation of the WebSocket protocol v8.

*/
@interface FMLiveSwitchWebSocket : FMLiveSwitchWebSocketBase<FMLiveSwitchIWebSocket>

/**

    Gets the number of bytes buffered in the send queue.

*/
- (int) bufferedAmount;
/**

    Closes the WebSocket connection.

*/
- (void) close;
/**

    Closes the WebSocket connection.

    @param closeArgs The close arguments
*/
- (void) closeWithCloseArgs:(FMLiveSwitchWebSocketCloseArgs*)closeArgs;
/**

    Gets a value indicating whether WebSocket support exists on this platform.

*/
+ (bool) exists;
/**

    Creates a new FMLiveSwitchWebSocket.

    @param requestUrl The target URL for the WebSocket connection.
*/
- (instancetype) initWithRequestUrl:(NSString*)requestUrl;
/**

    Creates a new FMLiveSwitchWebSocket.

    @param requestUrl The target URL for the WebSocket connection.
    @param protocol The WebSocket protocol.
*/
- (instancetype) initWithRequestUrl:(NSString*)requestUrl protocol:(NSString*)protocol;
/**

    Gets a value indicating whether the WebSocket is connected.

*/
- (bool) isOpen;
/**

    Opens the WebSocket connection.

    @param openArgs The open arguments.
*/
- (void) openWithOpenArgs:(FMLiveSwitchWebSocketOpenArgs*)openArgs;
/**

    Gets the WebSocket protocol.

*/
- (NSString*) protocol;
/**

    Gets a value indicating whether the WebSocket is secure.

*/
- (bool) secure;
/**

    Sends a message to the WebSocket server.

    @param sendArgs The send arguments.
*/
- (void) sendWithSendArgs:(FMLiveSwitchWebSocketSendArgs*)sendArgs;
/**

    Creates a new FMLiveSwitchWebSocket.

    @param requestUrl The target URL for the WebSocket connection.
*/
+ (FMLiveSwitchWebSocket*) webSocketWithRequestUrl:(NSString*)requestUrl;
/**

    Creates a new FMLiveSwitchWebSocket.

    @param requestUrl The target URL for the WebSocket connection.
    @param protocol The WebSocket protocol.
*/
+ (FMLiveSwitchWebSocket*) webSocketWithRequestUrl:(NSString*)requestUrl protocol:(NSString*)protocol;

@end

/**

    Close arguments for the FMLiveSwitchWebSocket class.

*/
@interface FMLiveSwitchWebSocketCloseArgs : FMLiveSwitchDynamic

/**

    Creates a new instance of FMLiveSwitchWebSocketCloseArgs
    with default values.

*/
- (instancetype) init;
/**

    Gets the callback to execute when the connection is closed.

*/
- (FMLiveSwitchAction1<FMLiveSwitchWebSocketCloseCompleteArgs*>*) onComplete;
/**

    Gets the reason to send with the close frame.

*/
- (NSString*) reason;
/**

    Sets the callback to execute when the connection is closed.

*/
- (void) setOnComplete:(FMLiveSwitchAction1<FMLiveSwitchWebSocketCloseCompleteArgs*>*)value;
/**

    Sets the callback to execute when the connection is closed.

*/
- (void (^)(void(^)(FMLiveSwitchWebSocketCloseCompleteArgs*))) setOnCompleteBlock;
/**

    Sets the callback to execute when the connection is closed.

*/
- (void) setOnCompleteBlock:(void(^)(FMLiveSwitchWebSocketCloseCompleteArgs*))valueBlock;
/**

    Sets the reason to send with the close frame.

*/
- (void) setReason:(NSString*)value;
/**

    Sets the status code to send with the close frame.

*/
- (void) setStatusCode:(FMLiveSwitchWebSocketStatusCode)value;
/**

    Gets the status code to send with the close frame.

*/
- (FMLiveSwitchWebSocketStatusCode) statusCode;
/**

    Creates a new instance of FMLiveSwitchWebSocketCloseArgs
    with default values.

*/
+ (FMLiveSwitchWebSocketCloseArgs*) webSocketCloseArgs;

@end

/**

    Arguments for FMLiveSwitchWebSocketCloseArgs#onComplete.

*/
@interface FMLiveSwitchWebSocketCloseCompleteArgs : FMLiveSwitchDynamic

/**

    Gets the original arguments passed to the close method.

*/
- (FMLiveSwitchWebSocketCloseArgs*) closeArgs;
- (instancetype) init;
/**

    Gets the reason given for closing the connection.

*/
- (NSString*) reason;
/**

    Sets the original arguments passed to the close method.

*/
- (void) setCloseArgs:(FMLiveSwitchWebSocketCloseArgs*)value;
/**

    Sets the reason given for closing the connection.

*/
- (void) setReason:(NSString*)value;
/**

    Sets the status code associated with the close operation.

*/
- (void) setStatusCode:(FMLiveSwitchWebSocketStatusCode)value;
/**

    Gets the status code associated with the close operation.

*/
- (FMLiveSwitchWebSocketStatusCode) statusCode;
+ (FMLiveSwitchWebSocketCloseCompleteArgs*) webSocketCloseCompleteArgs;

@end

/**

    Open arguments for the FMLiveSwitchWebSocket class.

*/
@interface FMLiveSwitchWebSocketOpenArgs : FMLiveSwitchDynamic

/**

    Gets the timeout for the handshake (in ms).

*/
- (int) handshakeTimeout;
/**

    Gets headers to send with the handshake request.

*/
- (FMLiveSwitchManagedConcurrentDictionary<NSString*,NSString*>*) headers;
/**

    Creates a new instance of

*/
- (instancetype) init;
/**

    Gets the keep-alive interval for the stream (in ms). Defaults to 5,000.

*/
- (int) keepAliveInterval;
/**

    Gets the keep-alive timeout for the stream (in ms). Defaults to 7,500.

*/
- (int) keepAliveTimeout;
/**

    Gets the callback to invoke when a connection could not be established.

*/
- (FMLiveSwitchAction1<FMLiveSwitchWebSocketOpenFailureArgs*>*) onFailure;
/**

    Gets the callback to invoke when a message is received.

*/
- (FMLiveSwitchAction1<FMLiveSwitchWebSocketReceiveArgs*>*) onReceive;
/**

    Gets the callback to invoke before the handshake request is sent.

*/
- (FMLiveSwitchAction1<FMLiveSwitchHttpRequestCreatedArgs*>*) onRequestCreated;
/**

    Gets the callback to invoke after the handshake response is received.

*/
- (FMLiveSwitchAction1<FMLiveSwitchHttpResponseReceivedArgs*>*) onResponseReceived;
/**

    Gets the callback to invoke when a successful connection breaks down.

*/
- (FMLiveSwitchAction1<FMLiveSwitchWebSocketStreamFailureArgs*>*) onStreamFailure;
/**

    Gets the callback to invoke when a successful connection has been established.

*/
- (FMLiveSwitchAction1<FMLiveSwitchWebSocketOpenSuccessArgs*>*) onSuccess;
/**

    Gets the relay port to dispatch messages.

*/
- (FMLiveSwitchRelayPort*) relayPort;
/**

    Gets the sender of the request.

*/
- (id) sender;
/**

    Sets the timeout for the handshake (in ms).

*/
- (void) setHandshakeTimeout:(int)value;
/**

    Sets headers to send with the handshake request.

*/
- (void) setHeaders:(FMLiveSwitchManagedConcurrentDictionary<NSString*,NSString*>*)value;
/**

    Sets the keep-alive interval for the stream (in ms). Defaults to 5,000.

*/
- (void) setKeepAliveInterval:(int)value;
/**

    Sets the keep-alive timeout for the stream (in ms). Defaults to 7,500.

*/
- (void) setKeepAliveTimeout:(int)value;
/**

    Sets the callback to invoke when a connection could not be established.

*/
- (void) setOnFailure:(FMLiveSwitchAction1<FMLiveSwitchWebSocketOpenFailureArgs*>*)value;
/**

    Sets the callback to invoke when a connection could not be established.

*/
- (void (^)(void(^)(FMLiveSwitchWebSocketOpenFailureArgs*))) setOnFailureBlock;
/**

    Sets the callback to invoke when a connection could not be established.

*/
- (void) setOnFailureBlock:(void(^)(FMLiveSwitchWebSocketOpenFailureArgs*))valueBlock;
/**

    Sets the callback to invoke when a message is received.

*/
- (void) setOnReceive:(FMLiveSwitchAction1<FMLiveSwitchWebSocketReceiveArgs*>*)value;
/**

    Sets the callback to invoke when a message is received.

*/
- (void (^)(void(^)(FMLiveSwitchWebSocketReceiveArgs*))) setOnReceiveBlock;
/**

    Sets the callback to invoke when a message is received.

*/
- (void) setOnReceiveBlock:(void(^)(FMLiveSwitchWebSocketReceiveArgs*))valueBlock;
/**

    Sets the callback to invoke before the handshake request is sent.

*/
- (void) setOnRequestCreated:(FMLiveSwitchAction1<FMLiveSwitchHttpRequestCreatedArgs*>*)value;
/**

    Sets the callback to invoke before the handshake request is sent.

*/
- (void (^)(void(^)(FMLiveSwitchHttpRequestCreatedArgs*))) setOnRequestCreatedBlock;
/**

    Sets the callback to invoke before the handshake request is sent.

*/
- (void) setOnRequestCreatedBlock:(void(^)(FMLiveSwitchHttpRequestCreatedArgs*))valueBlock;
/**

    Sets the callback to invoke after the handshake response is received.

*/
- (void) setOnResponseReceived:(FMLiveSwitchAction1<FMLiveSwitchHttpResponseReceivedArgs*>*)value;
/**

    Sets the callback to invoke after the handshake response is received.

*/
- (void (^)(void(^)(FMLiveSwitchHttpResponseReceivedArgs*))) setOnResponseReceivedBlock;
/**

    Sets the callback to invoke after the handshake response is received.

*/
- (void) setOnResponseReceivedBlock:(void(^)(FMLiveSwitchHttpResponseReceivedArgs*))valueBlock;
/**

    Sets the callback to invoke when a successful connection breaks down.

*/
- (void) setOnStreamFailure:(FMLiveSwitchAction1<FMLiveSwitchWebSocketStreamFailureArgs*>*)value;
/**

    Sets the callback to invoke when a successful connection breaks down.

*/
- (void (^)(void(^)(FMLiveSwitchWebSocketStreamFailureArgs*))) setOnStreamFailureBlock;
/**

    Sets the callback to invoke when a successful connection breaks down.

*/
- (void) setOnStreamFailureBlock:(void(^)(FMLiveSwitchWebSocketStreamFailureArgs*))valueBlock;
/**

    Sets the callback to invoke when a successful connection has been established.

*/
- (void) setOnSuccess:(FMLiveSwitchAction1<FMLiveSwitchWebSocketOpenSuccessArgs*>*)value;
/**

    Sets the callback to invoke when a successful connection has been established.

*/
- (void (^)(void(^)(FMLiveSwitchWebSocketOpenSuccessArgs*))) setOnSuccessBlock;
/**

    Sets the callback to invoke when a successful connection has been established.

*/
- (void) setOnSuccessBlock:(void(^)(FMLiveSwitchWebSocketOpenSuccessArgs*))valueBlock;
/**

    Sets the relay port to dispatch messages.

*/
- (void) setRelayPort:(FMLiveSwitchRelayPort*)value;
/**

    Sets the sender of the request.

*/
- (void) setSender:(id)value;
/**

    Sets the timeout for the stream (in ms).

*/
- (void) setStreamTimeout:(int)value;
/**

    Gets the timeout for the stream (in ms).

*/
- (int) streamTimeout;
/**

    Creates a new instance of

*/
+ (FMLiveSwitchWebSocketOpenArgs*) webSocketOpenArgs;

@end

/**

    Arguments for FMLiveSwitchWebSocketOpenArgs#onFailure.

*/
@interface FMLiveSwitchWebSocketOpenFailureArgs : FMLiveSwitchDynamic

/**

    Gets the exception generated while connecting.

*/
- (NSException*) exception;
- (instancetype) init;
/**

    Gets the original arguments passed to the open method.

*/
- (FMLiveSwitchWebSocketOpenArgs*) openArgs;
/**

    Sets the exception generated while connecting.

*/
- (void) setException:(NSException*)value;
/**

    Sets the original arguments passed to the open method.

*/
- (void) setOpenArgs:(FMLiveSwitchWebSocketOpenArgs*)value;
/**

    Sets the status code associated with the failure to connect.

*/
- (void) setStatusCode:(FMLiveSwitchWebSocketStatusCode)value;
/**

    Gets the status code associated with the failure to connect.

*/
- (FMLiveSwitchWebSocketStatusCode) statusCode;
+ (FMLiveSwitchWebSocketOpenFailureArgs*) webSocketOpenFailureArgs;

@end

/**

    Arguments for FMLiveSwitchWebSocketOpenArgs#onSuccess.

*/
@interface FMLiveSwitchWebSocketOpenSuccessArgs : FMLiveSwitchDynamic

- (instancetype) init;
/**

    Gets the original arguments passed to the open method.

*/
- (FMLiveSwitchWebSocketOpenArgs*) openArgs;
/**

    Sets the original arguments passed to the open method.

*/
- (void) setOpenArgs:(FMLiveSwitchWebSocketOpenArgs*)value;
+ (FMLiveSwitchWebSocketOpenSuccessArgs*) webSocketOpenSuccessArgs;

@end

/**

    Arguments for FMLiveSwitchWebSocketOpenArgs#onReceive.

*/
@interface FMLiveSwitchWebSocketReceiveArgs : FMLiveSwitchDynamic

/**

    Gets the message received from the server as binary data.

*/
- (NSMutableData*) binaryMessage;
/**

    Gets the byte count of the message.

*/
- (long long) byteCount;
- (instancetype) init;
/**

    Gets whether or not the received message is text.

*/
- (bool) isText;
/**

    Gets the original arguments passed to the open method.

*/
- (FMLiveSwitchWebSocketOpenArgs*) openArgs;
/**

    Sets the message received from the server as binary data.

*/
- (void) setBinaryMessage:(NSMutableData*)value;
/**

    Sets the original arguments passed to the open method.

*/
- (void) setOpenArgs:(FMLiveSwitchWebSocketOpenArgs*)value;
/**

    Sets the message received from the server as text data.

*/
- (void) setTextMessage:(NSString*)value;
/**

    Gets the message received from the server as text data.

*/
- (NSString*) textMessage;
+ (FMLiveSwitchWebSocketReceiveArgs*) webSocketReceiveArgs;

@end

/**

    Send arguments for the FMLiveSwitchWebSocket class.

*/
@interface FMLiveSwitchWebSocketSendArgs : FMLiveSwitchDynamic

/**

    Gets the message to send as binary data.

*/
- (NSMutableData*) binaryMessage;
/**

    Gets the byte count of the message.

*/
- (long long) byteCount;
/**

    Creates a new FMLiveSwitchWebSocketSendArgs instance.

*/
- (instancetype) init;
/**

    Sets the message to send as binary data.

*/
- (void) setBinaryMessage:(NSMutableData*)value;
/**

    Sets the message to send as text data.

*/
- (void) setTextMessage:(NSString*)value;
/**

    Sets the timeout for the request (in ms).

*/
- (void) setTimeout:(int)value;
/**

    Gets the message to send as text data.

*/
- (NSString*) textMessage;
/**

    Gets the timeout for the request (in ms).

*/
- (int) timeout;
/**

    Creates a new FMLiveSwitchWebSocketSendArgs instance.

*/
+ (FMLiveSwitchWebSocketSendArgs*) webSocketSendArgs;

@end

@interface FMLiveSwitchWebSocketStatusCodeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchWebSocketStatusCode)value;

@end

/**

    Arguments for FMLiveSwitchWebSocketOpenArgs#onStreamFailure.

*/
@interface FMLiveSwitchWebSocketStreamFailureArgs : FMLiveSwitchDynamic

/**

    Gets the exception generated by the active connection.

*/
- (NSException*) exception;
- (instancetype) init;
/**

    Gets the original arguments passed to the open method.

*/
- (FMLiveSwitchWebSocketOpenArgs*) openArgs;
/**

    Sets the exception generated by the active connection.

*/
- (void) setException:(NSException*)value;
/**

    Sets the original arguments passed to the open method.

*/
- (void) setOpenArgs:(FMLiveSwitchWebSocketOpenArgs*)value;
/**

    Sets the status code associated with the stream failure.

*/
- (void) setStatusCode:(FMLiveSwitchWebSocketStatusCode)value;
/**

    Gets the status code associated with the stream failure.

*/
- (FMLiveSwitchWebSocketStatusCode) statusCode;
+ (FMLiveSwitchWebSocketStreamFailureArgs*) webSocketStreamFailureArgs;

@end

/**

    Base class that defines methods for transferring content over the WebSocket protocol.

*/
@interface FMLiveSwitchWebSocketTransfer : NSObject

/**

    Gets the timeout for the initial handshake (in ms).

*/
- (int) handshakeTimeout;
/**

    Initializes a new instance of the FMLiveSwitchWebSocketTransfer class.

    @param url The URL.
*/
- (instancetype) initWithUrl:(NSString*)url;
/**

    Gets the callback to invoke if the handshake fails.

*/
- (FMLiveSwitchAction1<FMLiveSwitchWebSocketOpenFailureArgs*>*) onOpenFailure;
/**

    Gets the callback to invoke if the handshake succeeds.

*/
- (FMLiveSwitchAction1<FMLiveSwitchWebSocketOpenSuccessArgs*>*) onOpenSuccess;
/**

    Gets the callback to invoke when the handshake request is created.

*/
- (FMLiveSwitchAction1<FMLiveSwitchHttpRequestCreatedArgs*>*) onRequestCreated;
/**

    Gets the callback to invoke when the handshake response is received.

*/
- (FMLiveSwitchAction1<FMLiveSwitchHttpResponseReceivedArgs*>*) onResponseReceived;
/**

    Gets the callback to invoke if the stream errors out.

*/
- (FMLiveSwitchAction1<FMLiveSwitchWebSocketStreamFailureArgs*>*) onStreamFailure;
/**

    Opens the socket.

    @param headers The headers to pass in with the initial handshake.
*/
- (void) openWithHeaders:(FMLiveSwitchNameValueCollection*)headers;
/**

    Sends a request asynchronously.

    @param requestArgs The request parameters.
    @param callback The callback to execute with the resulting response.
*/
- (void) sendAsyncWithRequestArgs:(FMLiveSwitchHttpRequestArgs*)requestArgs callback:(FMLiveSwitchAction1<FMLiveSwitchHttpResponseArgs*>*)callback;
/**

    Sends a request asynchronously.

    @param requestArgs The request parameters.
    @param callbackBlock The callback to execute with the resulting response.
*/
- (void) sendAsyncWithRequestArgs:(FMLiveSwitchHttpRequestArgs*)requestArgs callbackBlock:(void(^)(FMLiveSwitchHttpResponseArgs*))callbackBlock;
/**

    Sends a request asynchronously.

    @inlineparam requestArgs The request parameters.
    @inlineparam callbackBlock The callback to execute with the resulting response.
*/
- (void (^)(FMLiveSwitchHttpRequestArgs*, void(^)(FMLiveSwitchHttpResponseArgs*))) sendAsyncWithRequestArgsAndCallbackBlock;
/**

    Gets the sender of the messages.

*/
- (id) sender;
/**

    Sends a request synchronously.

    @param requestArgs The request parameters.
    @return The response parameters.
*/
- (FMLiveSwitchHttpResponseArgs*) sendWithRequestArgs:(FMLiveSwitchHttpRequestArgs*)requestArgs;
/**

    Sets the timeout for the initial handshake (in ms).

*/
- (void) setHandshakeTimeout:(int)value;
/**

    Sets the callback to invoke if the handshake fails.

*/
- (void) setOnOpenFailure:(FMLiveSwitchAction1<FMLiveSwitchWebSocketOpenFailureArgs*>*)value;
/**

    Sets the callback to invoke if the handshake fails.

*/
- (void (^)(void(^)(FMLiveSwitchWebSocketOpenFailureArgs*))) setOnOpenFailureBlock;
/**

    Sets the callback to invoke if the handshake fails.

*/
- (void) setOnOpenFailureBlock:(void(^)(FMLiveSwitchWebSocketOpenFailureArgs*))valueBlock;
/**

    Sets the callback to invoke if the handshake succeeds.

*/
- (void) setOnOpenSuccess:(FMLiveSwitchAction1<FMLiveSwitchWebSocketOpenSuccessArgs*>*)value;
/**

    Sets the callback to invoke if the handshake succeeds.

*/
- (void (^)(void(^)(FMLiveSwitchWebSocketOpenSuccessArgs*))) setOnOpenSuccessBlock;
/**

    Sets the callback to invoke if the handshake succeeds.

*/
- (void) setOnOpenSuccessBlock:(void(^)(FMLiveSwitchWebSocketOpenSuccessArgs*))valueBlock;
/**

    Sets the callback to invoke when the handshake request is created.

*/
- (void) setOnRequestCreated:(FMLiveSwitchAction1<FMLiveSwitchHttpRequestCreatedArgs*>*)value;
/**

    Sets the callback to invoke when the handshake request is created.

*/
- (void (^)(void(^)(FMLiveSwitchHttpRequestCreatedArgs*))) setOnRequestCreatedBlock;
/**

    Sets the callback to invoke when the handshake request is created.

*/
- (void) setOnRequestCreatedBlock:(void(^)(FMLiveSwitchHttpRequestCreatedArgs*))valueBlock;
/**

    Sets the callback to invoke when the handshake response is received.

*/
- (void) setOnResponseReceived:(FMLiveSwitchAction1<FMLiveSwitchHttpResponseReceivedArgs*>*)value;
/**

    Sets the callback to invoke when the handshake response is received.

*/
- (void (^)(void(^)(FMLiveSwitchHttpResponseReceivedArgs*))) setOnResponseReceivedBlock;
/**

    Sets the callback to invoke when the handshake response is received.

*/
- (void) setOnResponseReceivedBlock:(void(^)(FMLiveSwitchHttpResponseReceivedArgs*))valueBlock;
/**

    Sets the callback to invoke if the stream errors out.

*/
- (void) setOnStreamFailure:(FMLiveSwitchAction1<FMLiveSwitchWebSocketStreamFailureArgs*>*)value;
/**

    Sets the callback to invoke if the stream errors out.

*/
- (void (^)(void(^)(FMLiveSwitchWebSocketStreamFailureArgs*))) setOnStreamFailureBlock;
/**

    Sets the callback to invoke if the stream errors out.

*/
- (void) setOnStreamFailureBlock:(void(^)(FMLiveSwitchWebSocketStreamFailureArgs*))valueBlock;
/**

    Sets the sender of the messages.

*/
- (void) setSender:(id)value;
/**

    Sets the timeout for the stream (in ms).

*/
- (void) setStreamTimeout:(int)value;
/**

    Sets the URL.

*/
- (void) setUrl:(NSString*)value;
/**

    Releases any resources and shuts down.

*/
- (void) shutdown;
/**

    Gets the timeout for the stream (in ms).

*/
- (int) streamTimeout;
/**

    Gets the URL.

*/
- (NSString*) url;
/**

    Initializes a new instance of the FMLiveSwitchWebSocketTransfer class.

    @param url The URL.
*/
+ (FMLiveSwitchWebSocketTransfer*) webSocketTransferWithUrl:(NSString*)url;

@end

/**

    Creates implementations of FMLiveSwitchWebSocketWebRequestTransfer.

*/
@interface FMLiveSwitchWebSocketTransferFactory : NSObject

/**

    Gets the callback that creates a WebSocket-based transfer class.

*/
+ (FMLiveSwitchFunction1<NSString*,FMLiveSwitchWebSocketTransfer*>*) createWebSocketTransfer;
/**

    Gets an instance of the WebSocket-based transfer class.

*/
+ (FMLiveSwitchWebSocketTransfer*) getWebSocketTransferWithUrl:(NSString*)url;
- (instancetype) init;
/**

    Sets the callback that creates a WebSocket-based transfer class.

*/
+ (void) setCreateWebSocketTransfer:(FMLiveSwitchFunction1<NSString*,FMLiveSwitchWebSocketTransfer*>*)value;
/**

    Sets the callback that creates a WebSocket-based transfer class.

*/
+ (void (^)(FMLiveSwitchWebSocketTransfer*(^)(NSString*))) setCreateWebSocketTransferBlock;
/**

    Sets the callback that creates a WebSocket-based transfer class.

*/
+ (void) setCreateWebSocketTransferBlock:(FMLiveSwitchWebSocketTransfer*(^)(NSString*))valueBlock;
+ (FMLiveSwitchWebSocketTransferFactory*) webSocketTransferFactory;

@end

/**

    Defines methods for transferring messages using the WebSocket protocol.

*/
@interface FMLiveSwitchWebSocketWebRequestTransfer : FMLiveSwitchWebSocketTransfer

/**

    Creates a new instance of FMLiveSwitchWebSocketWebRequestTransfer.

    @param url The URL.
*/
- (instancetype) initWithUrl:(NSString*)url;
/**

    Opens the WebSocket connection.

*/
- (void) openWithHeaders:(FMLiveSwitchNameValueCollection*)headers;
/**

    Sends a request asynchronously.

    @param requestArgs The request parameters.
    @param callback The callback to execute with the resulting response.
*/
- (void) sendAsyncWithRequestArgs:(FMLiveSwitchHttpRequestArgs*)requestArgs callback:(FMLiveSwitchAction1<FMLiveSwitchHttpResponseArgs*>*)callback;
/**

    Sends a request asynchronously.

    @param requestArgs The request parameters.
    @param callbackBlock The callback to execute with the resulting response.
*/
- (void) sendAsyncWithRequestArgs:(FMLiveSwitchHttpRequestArgs*)requestArgs callbackBlock:(void(^)(FMLiveSwitchHttpResponseArgs*))callbackBlock;
/**

    Sends a request asynchronously.

    @inlineparam requestArgs The request parameters.
    @inlineparam callbackBlock The callback to execute with the resulting response.
*/
- (void (^)(FMLiveSwitchHttpRequestArgs*, void(^)(FMLiveSwitchHttpResponseArgs*))) sendAsyncWithRequestArgsAndCallbackBlock;
/**

    Sends a request synchronously.

    @param requestArgs The request parameters.
    @return The response parameters.
*/
- (FMLiveSwitchHttpResponseArgs*) sendWithRequestArgs:(FMLiveSwitchHttpRequestArgs*)requestArgs;
/**

    Releases any resources and shuts down.

*/
- (void) shutdown;
/**

    Creates a new instance of FMLiveSwitchWebSocketWebRequestTransfer.

    @param url The URL.
*/
+ (FMLiveSwitchWebSocketWebRequestTransfer*) webSocketWebRequestTransferWithUrl:(NSString*)url;

@end

/**

    Represents a WebSocket Ping message with a transaction identifier.

*/
@interface FMLiveSwitchWssPingMessage : NSObject

/**

    Converts the ping message to its string representation.

    @return A string in the format "ls-ping {transactionId}".
*/
- (NSString*) description;
/**

    Initializes a new instance of the FMLiveSwitchWssPingMessage class.

    @param transactionId The transaction identifier for the ping message.
*/
- (instancetype) initWithTransactionId:(NSString*)transactionId;
/**

    Parses a string representation of a ping message into a FMLiveSwitchWssPingMessage instance.

    @param message The string to parse, which should be in the format "ls-ping {transactionId}".
    @return A new instance of FMLiveSwitchWssPingMessage containing the parsed transaction ID.
*/
+ (FMLiveSwitchWssPingMessage*) parseWithMessage:(NSString*)message;
/**

    Gets the transaction identifier associated with this ping message.

*/
- (NSString*) transactionId;
/**

    Initializes a new instance of the FMLiveSwitchWssPingMessage class.

    @param transactionId The transaction identifier for the ping message.
*/
+ (FMLiveSwitchWssPingMessage*) wssPingMessageWithTransactionId:(NSString*)transactionId;

@end

/**

    Represents a WebSocket Pong message with a transaction identifier.

*/
@interface FMLiveSwitchWssPongMessage : NSObject

/**

    Converts the pong message to its string representation.

    @return A string in the format "ls-pong {transactionId}".
*/
- (NSString*) description;
/**

    Initializes a new instance of the FMLiveSwitchWssPongMessage class with the same transaction ID as the ping message.

    @param ping The ping message to respond to.
*/
- (instancetype) initWithPing:(FMLiveSwitchWssPingMessage*)ping;
/**

    Initializes a new instance of the FMLiveSwitchWssPongMessage class.

    @param transactionId The transaction identifier for the pong message.
*/
- (instancetype) initWithTransactionId:(NSString*)transactionId;
/**

    Parses a string representation of a pong message into a FMLiveSwitchWssPongMessage instance.

    @param message The string to parse, which should be in the format "ls-pong {transactionId}".
    @return A new instance of FMLiveSwitchWssPongMessage containing the parsed transaction ID.
*/
+ (FMLiveSwitchWssPongMessage*) parseWithMessage:(NSString*)message;
/**

    Gets the transaction identifier associated with this pong message.

*/
- (NSString*) transactionId;
/**

    Initializes a new instance of the FMLiveSwitchWssPongMessage class with the same transaction ID as the ping message.

    @param ping The ping message to respond to.
*/
+ (FMLiveSwitchWssPongMessage*) wssPongMessageWithPing:(FMLiveSwitchWssPingMessage*)ping;
/**

    Initializes a new instance of the FMLiveSwitchWssPongMessage class.

    @param transactionId The transaction identifier for the pong message.
*/
+ (FMLiveSwitchWssPongMessage*) wssPongMessageWithTransactionId:(NSString*)transactionId;

@end

/**

    Remote receiver stats.

*/
@interface FMLiveSwitchRemoteReceiverStats : NSObject<FMLiveSwitchIEquivalent>

/**

    Gets the cumulative number of packets lost.

*/
- (int) cumulativeNumberOfPacketsLost;
/**

    Gets the delay since last sender report.

*/
- (long long) delaySinceLastSenderReport;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Gets the extended highest sequence number received.

*/
- (long long) extendedHighestSequenceNumberReceived;
/**

    Gets the fraction lost according to RFC 1889.
    The value has a range of 0 (no packet loss) to 255 (all packets lost).

*/
- (int) fractionLost;
/**

    Derializes a remote receiver stats array from JSON.

    @param remoteReceiversJson The remote receivers' stats JSON.
*/
+ (NSMutableArray*) fromJsonArrayWithRemoteReceiversJson:(NSString*)remoteReceiversJson;
/**

    Derializes remote receiver stats from JSON.

    @param remoteReceiverJson The remote receiver's stats JSON.
*/
+ (FMLiveSwitchRemoteReceiverStats*) fromJsonWithRemoteReceiverJson:(NSString*)remoteReceiverJson;
- (instancetype) init;
/**

    Gets the interarrival jitter.

*/
- (long long) interarrivalJitter;
/**

    Checks if a remote receiver is equivalent to this one.

    @param instance The remote receiver.
*/
- (bool) isEquivalentWithInstance:(FMLiveSwitchRemoteReceiverStats*)instance;
/**

    Gets the last sender report timestamp.

*/
- (long long) lastSenderReportTimestamp;
/**

    Gets the percentage of lost packets.
    The value has a range of 0.0 (no packet loss) to 1.0 (all packets lost).

*/
- (double) percentLost;
+ (FMLiveSwitchRemoteReceiverStats*) remoteReceiverStats;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Gets the synchronization source.

*/
- (long long) synchronizationSource;
/**

    Serializes this to JSON.

*/
- (NSString*) toJson;
/**

    Serializes a remote receiver stats array to JSON.

    @param remoteReceivers The remote receivers' stats.
*/
+ (NSString*) toJsonArrayWithRemoteReceivers:(NSMutableArray*)remoteReceivers;
/**

    Serializes remote receiver stats to JSON.

    @param remoteReceiver The remote receiver's stats.
*/
+ (NSString*) toJsonWithRemoteReceiver:(FMLiveSwitchRemoteReceiverStats*)remoteReceiver;

@end

/**

    An RTCP Data Channel Signalling Activation.

*/
@interface FMLiveSwitchRtcpDataChannelSignallingActivation : NSObject

/**

    Deserializes a property from JSON.

    @param key The property key.
    @param valueJson The property value in JSON format.
*/
- (void) deserializePropertyWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes an instance from JSON.

    @param activateInbandSignallingJson The instance in JSON format.
    @return The instance.
*/
+ (FMLiveSwitchRtcpDataChannelSignallingActivation*) fromJsonWithActivateInbandSignallingJson:(NSString*)activateInbandSignallingJson;
/**

    Initializes a new instance of the FMLiveSwitchRtcpDataChannelSignallingActivation class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchRtcpDataChannelSignallingActivation class.

*/
- (instancetype) initWithSupportedMessageTypes:(NSMutableArray*)supportedMessageTypes;
/**

    Initializes a new instance of the FMLiveSwitchRtcpDataChannelSignallingActivation class.

*/
+ (FMLiveSwitchRtcpDataChannelSignallingActivation*) rtcpDataChannelSignallingActivation;
/**

    Initializes a new instance of the FMLiveSwitchRtcpDataChannelSignallingActivation class.

*/
+ (FMLiveSwitchRtcpDataChannelSignallingActivation*) rtcpDataChannelSignallingActivationWithSupportedMessageTypes:(NSMutableArray*)supportedMessageTypes;
/**

    Serializes properties to JSON.

    @param jsonObject The JSON target.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Gets supported message types.

*/
- (NSMutableArray*) supportedMessageTypes;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an instance to JSON.

    @param activateInbandSignalling The instance.
    @return The instance in JSON format.
*/
+ (NSString*) toJsonWithActivateInbandSignalling:(FMLiveSwitchRtcpDataChannelSignallingActivation*)activateInbandSignalling;

@end

/**

    A media configuration.

*/
@interface FMLiveSwitchMediaConfig<__covariant TConfig> : NSObject

/**

    Gets the clock rate.

*/
- (int) clockRate;
/**

    Initializes a new instance of the FMLiveSwitchMediaConfig`1 class.

    @param clockRate The clock rate.
*/
- (instancetype) initWithClockRate:(int)clockRate;
/**

    Determines whether the specified configuration is equivalent.

    @param config The configuration.
*/
- (bool) isEquivalentWithConfig:(TConfig)config;
/**

    Initializes a new instance of the FMLiveSwitchMediaConfig`1 class.

    @param clockRate The clock rate.
*/
+ (FMLiveSwitchMediaConfig*) mediaConfigWithClockRate:(int)clockRate;

@end

/**

    An audio configuration.

*/
@interface FMLiveSwitchAudioConfig : FMLiveSwitchMediaConfig<FMLiveSwitchAudioConfig*>

/**

    Initializes a new instance of the FMLiveSwitchAudioConfig class.

    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
+ (FMLiveSwitchAudioConfig*) audioConfigWithClockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Gets the channel count.

*/
- (int) channelCount;
/**

    Returns a string that represents this instance.

*/
- (NSString*) description;
/**

    Initializes a new instance of the FMLiveSwitchAudioConfig class.

    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
- (instancetype) initWithClockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Determines whether the specified configuration is equivalent.

    @param config The configuration.
*/
- (bool) isEquivalentWithConfig:(FMLiveSwitchAudioConfig*)config;

@end

@interface FMLiveSwitchBandwidthAdaptationPolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchBandwidthAdaptationPolicy)value;

@end

/**

    Base stats.

*/
@interface FMLiveSwitchBaseStats : NSObject

+ (FMLiveSwitchBaseStats*) baseStats;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Gets the identifier of
    the object generating these stats.

*/
- (NSString*) id;
- (instancetype) init;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Gets the timestamp when
    these stats were generated.

*/
- (NSDate*) timestamp;

@end

/**

    A bitrate notification.

*/
@interface FMLiveSwitchBitrateNotification : NSObject

/**

    Gets the bitrate.

*/
- (int) bitrate;
/**

    Initializes a new instance of the FMLiveSwitchBitrateNotification class.

*/
+ (FMLiveSwitchBitrateNotification*) bitrateNotification;
/**

    Deserializes a property from JSON.

    @param key The property key.
    @param valueJson The property value in JSON format.
*/
- (void) deserializePropertyWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes an array from JSON.

    @param bitrateNotificationsJson The array in JSON format.
    @return The array.
*/
+ (NSMutableArray*) fromJsonArrayWithBitrateNotificationsJson:(NSString*)bitrateNotificationsJson;
/**

    Deserializes an instance from JSON.

    @param bitrateNotificationJson The instance in JSON format.
    @return The instance.
*/
+ (FMLiveSwitchBitrateNotification*) fromJsonWithBitrateNotificationJson:(NSString*)bitrateNotificationJson;
/**

    Initializes a new instance of the FMLiveSwitchBitrateNotification class.

*/
- (instancetype) init;
/**

    Gets the media description ID.

*/
- (NSString*) mediaDescriptionId;
/**

    Gets the RTP stream ID.

*/
- (NSString*) rtpStreamId;
/**

    Serializes properties to JSON.

    @param jsonObject The JSON target.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the bitrate.

*/
- (void) setBitrate:(int)value;
/**

    Sets the media description ID.

*/
- (void) setMediaDescriptionId:(NSString*)value;
/**

    Sets the RTP stream ID.

*/
- (void) setRtpStreamId:(NSString*)value;
/**

    Sets the synchronization source.

*/
- (void) setSynchronizationSource:(long long)value;
/**

    Gets the synchronization source.

*/
- (long long) synchronizationSource;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param bitrateNotifications The array.
    @return The array in JSON format.
*/
+ (NSString*) toJsonArrayWithBitrateNotifications:(NSMutableArray*)bitrateNotifications;
/**

    Serializes an instance to JSON.

    @param bitrateNotification The instance.
    @return The instance in JSON format.
*/
+ (NSString*) toJsonWithBitrateNotification:(FMLiveSwitchBitrateNotification*)bitrateNotification;

@end

/**

    A bitrate request.

*/
@interface FMLiveSwitchBitrateRequest : NSObject

/**

    Gets the bitrate (in kbps).

*/
- (int) bitrate;
/**

    Initializes a new instance of the FMLiveSwitchBitrateRequest class.

*/
+ (FMLiveSwitchBitrateRequest*) bitrateRequest;
/**

    Deserializes a property from JSON.

    @param key The property key.
    @param valueJson The property value in JSON format.
*/
- (void) deserializePropertyWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes an array from JSON.

    @param bitrateRequestsJson The array in JSON format.
    @return The array.
*/
+ (NSMutableArray*) fromJsonArrayWithBitrateRequestsJson:(NSString*)bitrateRequestsJson;
/**

    Deserializes an instance from JSON.

    @param bitrateRequestJson The instance in JSON format.
    @return The instance.
*/
+ (FMLiveSwitchBitrateRequest*) fromJsonWithBitrateRequestJson:(NSString*)bitrateRequestJson;
/**

    Initializes a new instance of the FMLiveSwitchBitrateRequest class.

*/
- (instancetype) init;
/**

    Gets the media description ID.

*/
- (NSString*) mediaDescriptionId;
/**

    Gets the RTP stream ID.

*/
- (NSString*) rtpStreamId;
/**

    Gets the sender synchronization source.

*/
- (long long) senderSynchronizationSource;
/**

    Serializes properties to JSON.

    @param jsonObject The JSON target.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the bitrate (in kbps).

*/
- (void) setBitrate:(int)value;
/**

    Sets the media description ID.

*/
- (void) setMediaDescriptionId:(NSString*)value;
/**

    Sets the RTP stream ID.

*/
- (void) setRtpStreamId:(NSString*)value;
/**

    Sets the sender synchronization source.

*/
- (void) setSenderSynchronizationSource:(long long)value;
/**

    Sets the synchronization source.

*/
- (void) setSynchronizationSource:(long long)value;
/**

    Gets the synchronization source.

*/
- (long long) synchronizationSource;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param bitrateRequests The array.
    @return The array in JSON format.
*/
+ (NSString*) toJsonArrayWithBitrateRequests:(NSMutableArray*)bitrateRequests;
/**

    Serializes an instance to JSON.

    @param bitrateRequest The instance.
    @return The instance in JSON format.
*/
+ (NSString*) toJsonWithBitrateRequest:(FMLiveSwitchBitrateRequest*)bitrateRequest;

@end

/**

    Information.

*/
@interface FMLiveSwitchInfo : NSObject

/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Gets the identifier.

*/
- (NSString*) id;
+ (FMLiveSwitchInfo*) info;
- (instancetype) init;
/**

    Processes an array for an info.

    @param newValues The new values.
    @param oldValues The old values.
    @return The new values, if the new values are not equivalent to the old values; otherwise null.
*/
+ (NSMutableArray*) processArrayWithNewValues:(NSMutableArray*)newValues oldValues:(NSMutableArray*)oldValues;
/**

    Processes a boolean array for an info.

    @param newValues The new values.
    @param oldValues The old values.
    @return The new values, if the new values do not equal the old values; otherwise null.
*/
+ (NSMutableArray*) processBooleanArrayWithNewValues:(NSMutableArray*)newValues oldValues:(NSMutableArray*)oldValues;
/**

    Processes a boolean for an info.

    @param newValue The new value.
    @param oldValue The old value.
    @return The new value, if the new value does not equal the old value; otherwise null.
*/
+ (FMLiveSwitchNullableBool*) processBooleanWithNewValue:(bool)newValue oldValue:(bool)oldValue;
/**

    Processes a double for an info.

    @param newValue The new value.
    @param oldValue The old value.
    @return The new value, if the new value does not equal the old value; otherwise null.
*/
+ (FMLiveSwitchNullableDouble*) processDoubleWithNewValue:(double)newValue oldValue:(double)oldValue;
/**

    Processes a float array for an info.

    @param newValues The new values.
    @param oldValues The old values.
    @return The new values, if the new values do not equal the old values; otherwise null.
*/
+ (NSMutableArray*) processFloatArrayWithNewValues:(NSMutableArray*)newValues oldValues:(NSMutableArray*)oldValues;
/**

    Processes a float for an info.

    @param newValue The new value.
    @param oldValue The old value.
    @return The new value, if the new value does not equal the old value; otherwise null.
*/
+ (FMLiveSwitchNullableFloat*) processFloatWithNewValue:(float)newValue oldValue:(float)oldValue;
/**

    Processes a integer array for an info.

    @param newValues The new values.
    @param oldValues The old values.
    @return The new values, if the new values do not equal the old values; otherwise null.
*/
+ (NSMutableArray*) processIntegerArrayWithNewValues:(NSMutableArray*)newValues oldValues:(NSMutableArray*)oldValues;
/**

    Processes an integer for an info.

    @param newValue The new value.
    @param oldValue The old value.
    @return The new value, if the new value does not equal the old value; otherwise null.
*/
+ (FMLiveSwitchNullableInt*) processIntegerWithNewValue:(int)newValue oldValue:(int)oldValue;
/**

    Processes a long array for an info.

    @param newValues The new values.
    @param oldValues The old values.
    @return The new values, if the new values do not equal the old values; otherwise null.
*/
+ (NSMutableArray*) processLongArrayWithNewValues:(NSMutableArray*)newValues oldValues:(NSMutableArray*)oldValues;
/**

    Processes a long for an info.

    @param newValue The new value.
    @param oldValue The old value.
    @return The new value, if the new value does not equal the old value; otherwise null.
*/
+ (FMLiveSwitchNullableLong*) processLongWithNewValue:(long long)newValue oldValue:(long long)oldValue;
/**

    Processes an object for an info.

    @param newValue The new value.
    @param oldValue The old value.
    @return The new value, if the new value does not equal the old value; otherwise null.
*/
+ (NSObject<FMLiveSwitchIEquivalent>*) processObjectWithNewValue:(NSObject<FMLiveSwitchIEquivalent>*)newValue oldValue:(NSObject<FMLiveSwitchIEquivalent>*)oldValue;
/**

    Processes a short array for an info.

    @param newValues The new values.
    @param oldValues The old values.
    @return The new values, if the new values do not equal the old values; otherwise null.
*/
+ (NSMutableArray*) processShortArrayWithNewValues:(NSMutableArray*)newValues oldValues:(NSMutableArray*)oldValues;
/**

    Processes a short for an info.

    @param newValue The new value.
    @param oldValue The old value.
    @return The new value, if the new value does not equal the old value; otherwise null.
*/
+ (FMLiveSwitchNullableShort*) processShortWithNewValue:(short)newValue oldValue:(short)oldValue;
/**

    Processes a string for an info.

    @param newValue The new value.
    @param oldValue The old value.
    @return The new value, if the new value does not equal the old value; otherwise null.
*/
+ (NSString*) processStringWithNewValue:(NSString*)newValue oldValue:(NSString*)oldValue;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the identifier.

*/
- (void) setId:(NSString*)value;

@end

/**

    Candidate information.

*/
@interface FMLiveSwitchCandidateInfo : FMLiveSwitchInfo

/**

    Initializes a new instance of the FMLiveSwitchCandidateInfo class.

*/
+ (FMLiveSwitchCandidateInfo*) candidateInfo;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes an array from JSON.

    @param candidateReportsJson The JSON.
    @return The deserialized array.
*/
+ (NSMutableArray*) fromJsonArrayWithCandidateReportsJson:(NSString*)candidateReportsJson;
/**

    Deserializes an instance from JSON.

    @param candidateReportJson The JSON.
    @return The deserialized instance.
*/
+ (FMLiveSwitchCandidateInfo*) fromJsonWithCandidateReportJson:(NSString*)candidateReportJson;
/**

    Initializes a new instance of the FMLiveSwitchCandidateInfo class.

*/
- (instancetype) init;
/**

    Gets the candidate IP address.

*/
- (NSString*) ipAddress;
/**

    Gets the candidate port.

*/
- (FMLiveSwitchNullableInt*) port;
/**

    Gets the candidate priority.

*/
- (FMLiveSwitchNullableLong*) priority;
/**

    Gets the candidate protocol.

*/
- (NSString*) protocol;
/**

    Gets the candidate related IP address.

*/
- (NSString*) relatedIPAddress;
/**

    Gets the candidate related port.

*/
- (FMLiveSwitchNullableInt*) relatedPort;
/**

    Gets the candidate relay protocol.

*/
- (NSString*) relayProtocol;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the candidate IP address.

*/
- (void) setIPAddress:(NSString*)value;
/**

    Sets the candidate port.

*/
- (void) setPort:(FMLiveSwitchNullableInt*)value;
/**

    Sets the candidate priority.

*/
- (void) setPriority:(FMLiveSwitchNullableLong*)value;
/**

    Sets the candidate protocol.

*/
- (void) setProtocol:(NSString*)value;
/**

    Sets the candidate related IP address.

*/
- (void) setRelatedIPAddress:(NSString*)value;
/**

    Sets the candidate related port.

*/
- (void) setRelatedPort:(FMLiveSwitchNullableInt*)value;
/**

    Sets the candidate relay protocol.

*/
- (void) setRelayProtocol:(NSString*)value;
/**

    Sets the candidate type.

*/
- (void) setType:(NSString*)value;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param candidateReports The array.
    @return The serialized JSON.
*/
+ (NSString*) toJsonArrayWithCandidateReports:(NSMutableArray*)candidateReports;
/**

    Serializes an instance to JSON.

    @param candidateReport The instance.
    @return The serialized JSON.
*/
+ (NSString*) toJsonWithCandidateReport:(FMLiveSwitchCandidateInfo*)candidateReport;
/**

    Gets the candidate type.

*/
- (NSString*) type;

@end

/**

    Candidate pair information.

*/
@interface FMLiveSwitchCandidatePairInfo : FMLiveSwitchInfo

/**

    Initializes a new instance of the FMLiveSwitchCandidatePairInfo class.

*/
+ (FMLiveSwitchCandidatePairInfo*) candidatePairInfo;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Derializes an array from JSON.

    @param arrayJson The array JSON.
    @return The deserialized array.
*/
+ (NSMutableArray*) fromJsonArrayWithArrayJson:(NSString*)arrayJson;
/**

    Deserializes an instance from JSON.

    @param instanceJson The instance JSON.
    @return The deserialized instance.
*/
+ (FMLiveSwitchCandidatePairInfo*) fromJsonWithInstanceJson:(NSString*)instanceJson;
/**

    Initializes a new instance of the FMLiveSwitchCandidatePairInfo class.

*/
- (instancetype) init;
/**

    Gets the candidate pair's local candidate identifier.

*/
- (NSString*) localCandidateId;
/**

    Gets whether the candidate pair is nominated.

*/
- (FMLiveSwitchNullableBool*) nominated;
/**

    Gets the candidate pair priority.

*/
- (FMLiveSwitchNullableLong*) priority;
/**

    Gets the candidate pair's remote candidate identifier.

*/
- (NSString*) remoteCandidateId;
/**

    Gets whether the candidate pair report.

*/
- (FMLiveSwitchCandidatePairReport*) report;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the candidate pair's local candidate identifier.

*/
- (void) setLocalCandidateId:(NSString*)value;
/**

    Sets whether the candidate pair is nominated.

*/
- (void) setNominated:(FMLiveSwitchNullableBool*)value;
/**

    Sets the candidate pair priority.

*/
- (void) setPriority:(FMLiveSwitchNullableLong*)value;
/**

    Sets the candidate pair's remote candidate identifier.

*/
- (void) setRemoteCandidateId:(NSString*)value;
/**

    Sets whether the candidate pair report.

*/
- (void) setReport:(FMLiveSwitchCandidatePairReport*)value;
/**

    Sets the candidate pair state.

*/
- (void) setState:(NSString*)value;
/**

    Gets the candidate pair state.

*/
- (NSString*) state;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param array The array.
    @return The serialized array JSON.
*/
+ (NSString*) toJsonArray:(NSMutableArray*)array;
/**

    Serializes an instance to JSON.

    @param instance The instance.
    @return The serialized instance JSON.
*/
+ (NSString*) toJsonWithInstance:(FMLiveSwitchCandidatePairInfo*)instance;

@end

@interface FMLiveSwitchCandidatePairStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchCandidatePairState)value;

@end

/**

    Candidate pair stats.

*/
@interface FMLiveSwitchCandidatePairStats : FMLiveSwitchBaseStats<FMLiveSwitchIEquivalent>

/**

    Gets the number of bytes received.

*/
- (long long) bytesReceived;
/**

    Gets the number of bytes sent.

*/
- (long long) bytesSent;
/**

    Initializes a new instance of the FMLiveSwitchCandidatePairStats class.

*/
+ (FMLiveSwitchCandidatePairStats*) candidatePairStats;
/**

    Gets the number of consent requests received.

*/
- (long long) consentRequestsReceived;
/**

    Gets the number of consent requests sent.

*/
- (long long) consentRequestsSent;
/**

    Gets the number of consent responses received.

*/
- (long long) consentResponsesReceived;
/**

    Gets the number of consent responses sent.

*/
- (long long) consentResponsesSent;
/**

    Gets the current round trip time in milliseconds.

*/
- (int) currentRoundTripTime;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Derializes an array of candidate pair stats from JSON.

    @param candidatePairsJson The candidate pairs' stats JSON.
*/
+ (NSMutableArray*) fromJsonArrayWithCandidatePairsJson:(NSString*)candidatePairsJson;
/**

    Derializes candidate pair stats from JSON.

    @param candidatePairJson The candidate pair's stats JSON.
*/
+ (FMLiveSwitchCandidatePairStats*) fromJsonWithCandidatePairJson:(NSString*)candidatePairJson;
/**

    Initializes a new instance of the FMLiveSwitchCandidatePairStats class.

*/
- (instancetype) init;
/**

    Checks if a candidate pair is equivalent to this one.

    @param instance The candidate pair.
*/
- (bool) isEquivalentWithInstance:(FMLiveSwitchCandidatePairStats*)instance;
/**

    Gets the local candidate identifier.

*/
- (NSString*) localCandidateId;
/**

    Gets whether the candidate pair is nominated.

*/
- (bool) nominated;
/**

    Gets the priority.

*/
- (long long) priority;
/**

    Gets the remote candidate identifier.

*/
- (NSString*) remoteCandidateId;
/**

    Gets the number of requests received.

*/
- (long long) requestsReceived;
/**

    Gets the number of requests sent.

*/
- (long long) requestsSent;
/**

    Gets the number of responses received.

*/
- (long long) responsesReceived;
/**

    Gets the number of responses sent.

*/
- (long long) responsesSent;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Gets the state.

*/
- (FMLiveSwitchCandidatePairState) state;
/**

    Serializes this to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array of candidate pair stats to JSON.

    @param candidatePairs The candidate pairs' stats.
*/
+ (NSString*) toJsonArrayWithCandidatePairs:(NSMutableArray*)candidatePairs;
/**

    Serializes candidate pair stats to JSON.

    @param candidatePair The candidate pair's stats.
*/
+ (NSString*) toJsonWithCandidatePair:(FMLiveSwitchCandidatePairStats*)candidatePair;
/**

    Gets the total round trip time in milliseconds.

*/
- (int) totalRoundTripTime;
/**

    Gets the transport identifier.

*/
- (NSString*) transportId;

@end

/**

    Candidate stats.

*/
@interface FMLiveSwitchCandidateStats : FMLiveSwitchBaseStats<FMLiveSwitchIEquivalent>

/**

    Initializes a new instance of the FMLiveSwitchCandidateStats class.

*/
+ (FMLiveSwitchCandidateStats*) candidateStats;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Derializes an array of candidate stats from JSON.

    @param candidatesJson The candidates' stats JSON.
*/
+ (NSMutableArray*) fromJsonArrayWithCandidatesJson:(NSString*)candidatesJson;
/**

    Derializes candidate stats from JSON.

    @param candidateJson The candidate's stats JSON.
*/
+ (FMLiveSwitchCandidateStats*) fromJsonWithCandidateJson:(NSString*)candidateJson;
/**

    Initializes a new instance of the FMLiveSwitchCandidateStats class.

*/
- (instancetype) init;
/**

    Gets the IP address.

*/
- (NSString*) ipAddress;
/**

    Checks if a candidate is equivalent to this one.

    @param instance The candidate.
*/
- (bool) isEquivalentWithInstance:(FMLiveSwitchCandidateStats*)instance;
/**

    Gets whether the candidate is host/local.

*/
- (bool) isHost;
/**

    Gets whether the candidate is reflexive.

*/
- (bool) isReflexive;
/**

    Gets whether the candidate is relayed.

*/
- (bool) isRelayed;
/**

    Gets the port.

*/
- (int) port;
/**

    Gets the priority.

*/
- (long long) priority;
/**

    Gets the protocol.

*/
- (FMLiveSwitchProtocolType) protocol;
/**

    Gets the related IP address.

*/
- (NSString*) relatedIPAddress;
/**

    Gets the related port.

*/
- (int) relatedPort;
/**

    Gets the relay protocol.

*/
- (FMLiveSwitchProtocolType) relayProtocol;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Serializes this to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array of candidate stats to JSON.

    @param candidates The candidates' stats.
*/
+ (NSString*) toJsonArrayWithCandidates:(NSMutableArray*)candidates;
/**

    Serializes candidate stats to JSON.

    @param candidate The candidate's stats.
*/
+ (NSString*) toJsonWithCandidate:(FMLiveSwitchCandidateStats*)candidate;
/**

    Gets the relay protocol.

    @deprecated Use RelayProtocol instead.
*/
- (FMLiveSwitchProtocolType) turnProtocol __deprecated_msg("Use RelayProtocol instead.");
/**

    Gets the type.

*/
- (FMLiveSwitchCandidateType) type;

@end

@interface FMLiveSwitchCandidateTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchCandidateType)value;

@end

/**

    Utility functions for candidate and candidate pair.

*/
@interface FMLiveSwitchCandidateUtility : NSObject

/**

    Convert string to CandidatePairState.

    @param stateString 
*/
+ (FMLiveSwitchCandidatePairState) candidatePairStateFromStringWithStateString:(NSString*)stateString;
/**

    Convert CandidatePairState to string.

    @param state 
*/
+ (NSString*) candidatePairStateToStringWithState:(FMLiveSwitchCandidatePairState)state;
+ (FMLiveSwitchCandidateUtility*) candidateUtility;
- (instancetype) init;
/**

    Convert string to ProtocolType.

    @param protocolTypeString 
*/
+ (FMLiveSwitchProtocolType) protocolTypeFromStringWithProtocolTypeString:(NSString*)protocolTypeString;
/**

    Convert ProtocolType to string.

    @param protocolType 
*/
+ (NSString*) protocolTypeToStringWithProtocolType:(FMLiveSwitchProtocolType)protocolType;
/**

    Convert string to CandidateType.

    @param typeString 
*/
+ (FMLiveSwitchCandidateType) typeFromStringWithTypeString:(NSString*)typeString;
/**

    Convert CandidateType to string.

    @param type 
*/
+ (NSString*) typeToStringWithType:(FMLiveSwitchCandidateType)type;

@end

/**

    Certificate information.

*/
@interface FMLiveSwitchCertificateInfo : FMLiveSwitchInfo

/**

    Gets the certificate in Base64 format.

*/
- (NSString*) base64;
/**

    Initializes a new instance of the FMLiveSwitchCertificateInfo class.

*/
+ (FMLiveSwitchCertificateInfo*) certificateInfo;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Gets the certificate fingerprint.

*/
- (NSString*) fingerprint;
/**

    Gets the certificate fingerprint algorithm.

*/
- (NSString*) fingerprintAlgorithm;
/**

    Derializes an array from JSON.

    @param arrayJson The array JSON.
    @return The deserialized array.
*/
+ (NSMutableArray*) fromJsonArrayWithArrayJson:(NSString*)arrayJson;
/**

    Deserializes an instance from JSON.

    @param instanceJson The instance JSON.
    @return The deserialized instance.
*/
+ (FMLiveSwitchCertificateInfo*) fromJsonWithInstanceJson:(NSString*)instanceJson;
/**

    Initializes a new instance of the FMLiveSwitchCertificateInfo class.

*/
- (instancetype) init;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the certificate in Base64 format.

*/
- (void) setBase64:(NSString*)value;
/**

    Sets the certificate fingerprint.

*/
- (void) setFingerprint:(NSString*)value;
/**

    Sets the certificate fingerprint algorithm.

*/
- (void) setFingerprintAlgorithm:(NSString*)value;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param array The array.
    @return The serialized array JSON.
*/
+ (NSString*) toJsonArray:(NSMutableArray*)array;
/**

    Serializes an instance to JSON.

    @param instance The instance.
    @return The serialized instance JSON.
*/
+ (NSString*) toJsonWithInstance:(FMLiveSwitchCertificateInfo*)instance;

@end

/**

    Certificate stats.

*/
@interface FMLiveSwitchCertificateStats : FMLiveSwitchBaseStats<FMLiveSwitchIEquivalent>

/**

    Gets the certificate in Base64 format.

*/
- (NSString*) certificateBase64;
+ (FMLiveSwitchCertificateStats*) certificateStats;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Gets the fingerprint.

*/
- (NSString*) fingerprint;
/**

    Gets the fingerprint algorithm.

*/
- (NSString*) fingerprintAlgorithm;
/**

    Derializes an array of certificate stats from JSON.

    @param certificatesJson The certificates' stats JSON.
*/
+ (NSMutableArray*) fromJsonArrayWithCertificatesJson:(NSString*)certificatesJson;
/**

    Derializes certificate stats from JSON.

    @param certificateJson The certificate's stats JSON.
*/
+ (FMLiveSwitchCertificateStats*) fromJsonWithCertificateJson:(NSString*)certificateJson;
- (instancetype) init;
/**

    Checks if a certificate is equivalent to this one.

    @param instance The certificate.
*/
- (bool) isEquivalentWithInstance:(FMLiveSwitchCertificateStats*)instance;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Serializes this to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array of certificate stats to JSON.

    @param certificates The certificates' stats.
*/
+ (NSString*) toJsonArrayWithCertificates:(NSMutableArray*)certificates;
/**

    Serializes certificate stats to JSON.

    @param certificate The certificate's stats.
*/
+ (NSString*) toJsonWithCertificate:(FMLiveSwitchCertificateStats*)certificate;

@end

/**

    Codec information.

*/
@interface FMLiveSwitchCodecInfo : FMLiveSwitchInfo

/**

    Gets the codec channel count.

*/
- (FMLiveSwitchNullableInt*) channelCount;
/**

    Gets the codec clock rate.

*/
- (FMLiveSwitchNullableInt*) clockRate;
+ (FMLiveSwitchCodecInfo*) codecInfo;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes an array from JSON.

    @param codecInfosJson The serialized JSON.
    @return The deserialized array.
*/
+ (NSMutableArray*) fromJsonArrayWithCodecInfosJson:(NSString*)codecInfosJson;
/**

    Deserializes an instance from JSON.

    @param codecInfoJson The serialized JSON.
    @return The deserialized instance.
*/
+ (FMLiveSwitchCodecInfo*) fromJsonWithCodecInfoJson:(NSString*)codecInfoJson;
- (instancetype) init;
/**

    Gets the codec name.

*/
- (NSString*) name;
/**

    Gets the codec parameters.

*/
- (NSString*) parameters;
/**

    Gets the codec payload type.

*/
- (FMLiveSwitchNullableInt*) payloadType;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the codec channel count.

*/
- (void) setChannelCount:(FMLiveSwitchNullableInt*)value;
/**

    Sets the codec clock rate.

*/
- (void) setClockRate:(FMLiveSwitchNullableInt*)value;
/**

    Sets the codec name.

*/
- (void) setName:(NSString*)value;
/**

    Sets the codec parameters.

*/
- (void) setParameters:(NSString*)value;
/**

    Sets the codec payload type.

*/
- (void) setPayloadType:(FMLiveSwitchNullableInt*)value;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param codecInfos The array to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonArrayWithCodecInfos:(NSMutableArray*)codecInfos;
/**

    Serializes an instance to JSON.

    @param codecInfo The instance to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonWithCodecInfo:(FMLiveSwitchCodecInfo*)codecInfo;

@end

/**

    Codec stats.

*/
@interface FMLiveSwitchCodecStats : FMLiveSwitchBaseStats<FMLiveSwitchIEquivalent>

/**

    Gets the channel count.

*/
- (int) channelCount;
/**

    Gets the clock rate.

*/
- (int) clockRate;
+ (FMLiveSwitchCodecStats*) codecStats;
/**

    Gets the codec type, "encode" or "decode", depending on whether this object represents a media format that the implementation is prepared to encode or decode.

*/
- (FMLiveSwitchCodecType) codecType;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Derializes codec stats from JSON.

    @param codecJson The codec's stats JSON.
*/
+ (FMLiveSwitchCodecStats*) fromJsonWithCodecJson:(NSString*)codecJson;
- (instancetype) init;
/**

    Checks if a codec is equivalent to this one.

    @param instance The codec.
*/
- (bool) isEquivalentWithInstance:(FMLiveSwitchCodecStats*)instance;
/**

    Gets the name.

*/
- (NSString*) name;
/**

    Gets the parameters.

*/
- (NSString*) parameters;
/**

    Gets the payload type.

*/
- (int) payloadType;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Serializes this to JSON.

*/
- (NSString*) toJson;
/**

    Serializes codec stats to JSON.

    @param codec The codec's stats.
*/
+ (NSString*) toJsonWithCodec:(FMLiveSwitchCodecStats*)codec;

@end

@interface FMLiveSwitchCodecTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchCodecType)value;

@end

@interface FMLiveSwitchConnectionStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchConnectionState)value;

@end

/**

    Connection stats.

*/
@interface FMLiveSwitchConnectionStats : FMLiveSwitchBaseStats

/**

    Gets the audio streams' minimum estimated media quality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

*/
- (double) audioMediaQuality;
/**

    Gets the audio streams' minimum estimated network quality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

*/
- (double) audioNetworkQuality;
/**

    Gets the audio receiver streams' estimated network score.
    <br />
    The value ranges from 1.0 to 5.0, where 1.0 is the lowest score and 5.0 is the highest score.

*/
- (double) audioReceiverNetworkScore;
/**

    Gets the first audio stream's stats.

*/
- (FMLiveSwitchMediaStreamStats*) audioStream;
/**

    Gets the audio streams' stats.

*/
- (NSMutableArray*) audioStreams;
+ (FMLiveSwitchConnectionStats*) connectionStats;
/**

    Gets the data stream's stats.

*/
- (FMLiveSwitchDataStreamStats*) dataStream;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Gets the external identifier.

*/
- (NSString*) externalId;
/**

    Derializes connection stats from JSON.

    @param connectionJson The connection's stats JSON.
*/
+ (FMLiveSwitchConnectionStats*) fromJsonWithConnectionJson:(NSString*)connectionJson;
/**

    Gets a media stream by its identifier.

    @param mediaStreamId The media stream identifier.
*/
- (FMLiveSwitchMediaStreamStats*) getMediaStreamWithMediaStreamId:(NSString*)mediaStreamId;
- (instancetype) init;
/**

    Gets whether any of the streams are using a transport
    whose active candidate pair has a host candidate.

*/
- (bool) isHost;
/**

    Gets whether any of the streams are using a transport
    whose active candidate pair has a reflexive candidate.

*/
- (bool) isReflexive;
/**

    Gets whether any of the streams are using a transport
    whose active candidate pair has a relayed candidate.

*/
- (bool) isRelayed;
/**

    Gets the connection's estimated media quality as the minimum of the FMLiveSwitchConnectionStats#audioMediaQuality and the FMLiveSwitchConnectionStats#videoMediaQuality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

*/
- (double) mediaQuality;
/**

    Gets the first media stream's stats.

*/
- (FMLiveSwitchMediaStreamStats*) mediaStream;
/**

    Gets the media streams' stats.

*/
- (NSMutableArray*) mediaStreams;
/**

    Gets the connection's estimated network quality as the minimum of the FMLiveSwitchConnectionStats#audioNetworkQuality and the FMLiveSwitchConnectionStats#videoNetworkQuality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

*/
- (double) networkQuality;
/**

    Gets the connection's estimated network score as the minimum of the FMLiveSwitchConnectionStats#audioReceiverNetworkScore and the FMLiveSwitchConnectionStats#videoReceiverNetworkScore.
    <br />
    The value ranges from 1.0 to 5.0, where 1.0 is the lowest score and 5.0 is the highest score.

*/
- (double) receiverNetworkScore;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the external identifier.

*/
- (void) setExternalId:(NSString*)value;
/**

    Sets the state.

*/
- (void) setState:(FMLiveSwitchConnectionState)value;
/**

    Gets the state.

*/
- (FMLiveSwitchConnectionState) state;
/**

    Gets the streams' stats.

*/
- (NSMutableArray*) streams;
/**

    Serializes this to JSON.

*/
- (NSString*) toJson;
/**

    Serializes connection stats to JSON.

    @param connection The connection's stats.
*/
+ (NSString*) toJsonWithConnection:(FMLiveSwitchConnectionStats*)connection;
/**

    Gets the video streams' minimum estimated media quality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

*/
- (double) videoMediaQuality;
/**

    Gets the video streams' minimum estimated network quality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

*/
- (double) videoNetworkQuality;
/**

    Gets the video receiver streams' estimated network score.
    <br />
    The value ranges from 1.0 to 5.0, where 1.0 is the lowest score and 5.0 is the highest score.

*/
- (double) videoReceiverNetworkScore;
/**

    Gets the first video stream's stats.

*/
- (FMLiveSwitchMediaStreamStats*) videoStream;
/**

    Gets the video streams' stats.

*/
- (NSMutableArray*) videoStreams;

@end

/**

    Data channel information.

*/
@interface FMLiveSwitchDataChannelInfo : FMLiveSwitchInfo

+ (FMLiveSwitchDataChannelInfo*) dataChannelInfo;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes JSON to an array.

    @param dataChannelInfosJson The serialized JSON.
    @return The deserialized array.
*/
+ (NSMutableArray*) fromJsonArrayWithDataChannelInfosJson:(NSString*)dataChannelInfosJson;
/**

    Deserializes Json to a DataChannelInfo.

    @param dataChannelInfoJson The serialized Json.
    @return The deserialized DataChannelInfo.
*/
+ (FMLiveSwitchDataChannelInfo*) fromJsonWithDataChannelInfoJson:(NSString*)dataChannelInfoJson;
- (instancetype) init;
/**

    Gets the data channel label.

*/
- (NSString*) label;
/**

    Gets whether the data channel is ordered.

*/
- (bool) ordered;
/**

    Gets the data channel report.

*/
- (FMLiveSwitchDataChannelReport*) report;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the data channel label.

*/
- (void) setLabel:(NSString*)value;
/**

    Sets whether the data channel is ordered.

*/
- (void) setOrdered:(bool)value;
/**

    Sets the data channel report.

*/
- (void) setReport:(FMLiveSwitchDataChannelReport*)value;
/**

    Sets the data channel state.

*/
- (void) setState:(NSString*)value;
/**

    Sets the data channel subprotocol.

*/
- (void) setSubprotocol:(NSString*)value;
/**

    Gets the data channel state.

*/
- (NSString*) state;
/**

    Gets the data channel subprotocol.

*/
- (NSString*) subprotocol;
/**

    Serializes this instance to Json.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param dataChannelInfos The array to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonArrayWithDataChannelInfos:(NSMutableArray*)dataChannelInfos;
/**

    Serializes an instance to Json.

    @param dataChannelInfo The instance to serialize.
    @return Serialized Json.
*/
+ (NSString*) toJsonWithDataChannelInfo:(FMLiveSwitchDataChannelInfo*)dataChannelInfo;

@end

@interface FMLiveSwitchDataChannelStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchDataChannelState)value;

@end

/**

    Data channel stats.

*/
@interface FMLiveSwitchDataChannelStats : FMLiveSwitchBaseStats

/**

    Gets the number of bytes received.

*/
- (long long) bytesReceived;
/**

    Gets the number of bytes sent.

*/
- (long long) bytesSent;
/**

    Initializes a new instance of FMLiveSwitchDataChannelStats.

*/
+ (FMLiveSwitchDataChannelStats*) dataChannelStats;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Derializes an array of data channel stats from JSON.

    @param dataChannelsJson The data channels' stats JSON.
*/
+ (NSMutableArray*) fromJsonArrayWithDataChannelsJson:(NSString*)dataChannelsJson;
/**

    Derializes data channel stats from JSON.

    @param dataChannelJson The data channel's stats JSON.
*/
+ (FMLiveSwitchDataChannelStats*) fromJsonWithDataChannelJson:(NSString*)dataChannelJson;
/**

    Initializes a new instance of FMLiveSwitchDataChannelStats.

*/
- (instancetype) init;
/**

    Gets the label.

*/
- (NSString*) label;
/**

    Gets the number of messages received.

*/
- (long long) messagesReceived;
/**

    Gets the number of messages sent.

*/
- (long long) messagesSent;
/**

    Gets whether the channel is ordered.

*/
- (bool) ordered;
/**

    Gets the protocol.

*/
- (NSString*) protocol;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Gets the state.

*/
- (FMLiveSwitchDataChannelState) state;
/**

    Serializes this to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array of data channel stats to JSON.

    @param dataChannels The data channels' stats.
*/
+ (NSString*) toJsonArrayWithDataChannels:(NSMutableArray*)dataChannels;
/**

    Serializes data channel stats to JSON.

    @param dataChannel The data channel's stats.
*/
+ (NSString*) toJsonWithDataChannel:(FMLiveSwitchDataChannelStats*)dataChannel;

@end

/**

    Stream information.

*/
@interface FMLiveSwitchStreamInfo : FMLiveSwitchInfo

/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
- (instancetype) init;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the tag.

*/
- (void) setTag:(NSString*)value;
/**

    Sets the transport id.

*/
- (void) setTransportId:(NSString*)value;
+ (FMLiveSwitchStreamInfo*) streamInfo;
/**

    Gets the tag.

*/
- (NSString*) tag;
/**

    Gets the transport id.

*/
- (NSString*) transportId;

@end

/**

    Data stream information.

*/
@interface FMLiveSwitchDataStreamInfo : FMLiveSwitchStreamInfo

/**

    Gets the data stream channels.

*/
- (NSMutableArray*) channels;
+ (FMLiveSwitchDataStreamInfo*) dataStreamInfo;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes JSON to a DataStreamInfo array.

    @param dataStreamInfosJson The serialized JSON.
    @return The deserialized DataStreamInfo array.
*/
+ (NSMutableArray*) fromJsonArrayWithDataStreamInfosJson:(NSString*)dataStreamInfosJson;
/**

    Deserializes Json to a DataStreamInfo.

    @param dataStreamInfoJson The serialized Json.
    @return The deserialized DataStreamInfo.
*/
+ (FMLiveSwitchDataStreamInfo*) fromJsonWithDataStreamInfoJson:(NSString*)dataStreamInfoJson;
- (instancetype) init;
/**

    Gets the data stream report.

*/
- (FMLiveSwitchDataStreamReport*) report;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the data stream channels.

*/
- (void) setChannels:(NSMutableArray*)value;
/**

    Sets the data stream report.

*/
- (void) setReport:(FMLiveSwitchDataStreamReport*)value;
/**

    Serializes this instance to Json.

*/
- (NSString*) toJson;
/**

    Serializes an instance array to JSON.

    @param dataStreamInfos The instance array to serialize.
    @return Serialized Json.
*/
+ (NSString*) toJsonArrayWithDataStreamInfos:(NSMutableArray*)dataStreamInfos;
/**

    Serializes an instance to Json.

    @param dataStreamInfo The instance to serialize.
    @return Serialized Json.
*/
+ (NSString*) toJsonWithDataStreamInfo:(FMLiveSwitchDataStreamInfo*)dataStreamInfo;

@end

/**

    Stream stats.

*/
@interface FMLiveSwitchStreamStats : FMLiveSwitchBaseStats

/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
- (instancetype) init;
/**

    Gets whether the transport's active candidate pair has a host candidate.

*/
- (bool) isHost;
/**

    Gets whether the transport's active candidate pair has a reflexive candidate.

*/
- (bool) isReflexive;
/**

    Gets whether the transport's active candidate pair has a relayed candidate.

*/
- (bool) isRelayed;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
+ (FMLiveSwitchStreamStats*) streamStats;
/**

    Gets the transport's stats.

*/
- (FMLiveSwitchTransportStats*) transport;
/**

    Gets the type.

*/
- (FMLiveSwitchStreamType) type;

@end

/**

    Data stream stats.

*/
@interface FMLiveSwitchDataStreamStats : FMLiveSwitchStreamStats

/**

    Gets the number of bytes received.

*/
- (long long) bytesReceived;
/**

    Gets the number of bytes sent.

*/
- (long long) bytesSent;
/**

    Gets the first channel's stats.

*/
- (FMLiveSwitchDataChannelStats*) channel;
/**

    Gets the channels' stats.

*/
- (NSMutableArray*) channels;
/**

    Gets the first channel's stats.

    @deprecated Use Channel instead.
*/
- (FMLiveSwitchDataChannelStats*) dataChannel __deprecated_msg("Use Channel instead.");
/**

    Gets the channels' stats.

    @deprecated Use Channels instead.
*/
- (NSMutableArray*) dataChannels __deprecated_msg("Use Channels instead.");
+ (FMLiveSwitchDataStreamStats*) dataStreamStats;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Derializes an array of data stream stats from JSON.

    @param dataStreamsJson The data streams' stats JSON.
*/
+ (NSMutableArray*) fromJsonArrayWithDataStreamsJson:(NSString*)dataStreamsJson;
/**

    Derializes data stream stats from JSON.

    @param dataStreamJson The data stream's stats JSON.
*/
+ (FMLiveSwitchDataStreamStats*) fromJsonWithDataStreamJson:(NSString*)dataStreamJson;
/**

    Gets a channel by its identifier.

    @param channelId The channel identifier.
*/
- (FMLiveSwitchDataChannelStats*) getChannelWithChannelId:(NSString*)channelId;
/**

    Gets a channel by its identifier.

    @param dataChannelId The channel identifier.
    @deprecated Use GetChannel instead.
*/
- (FMLiveSwitchDataChannelStats*) getDataChannelWithDataChannelId:(NSString*)dataChannelId __deprecated_msg("Use GetChannel instead.");
- (instancetype) init;
/**

    Gets the number of messages received.

*/
- (long long) messagesReceived;
/**

    Gets the number of messages sent.

*/
- (long long) messagesSent;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Serializes this to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array of data stream stats to JSON.

    @param dataStreams The data streams' stats.
*/
+ (NSString*) toJsonArrayWithDataStreams:(NSMutableArray*)dataStreams;
/**

    Serializes data stream stats to JSON.

    @param dataStream The data stream's stats.
*/
+ (NSString*) toJsonWithDataStream:(FMLiveSwitchDataStreamStats*)dataStream;

@end

/**

    Encoding configuration.

*/
@interface FMLiveSwitchEncodingConfig : NSObject

/**

    Gets the bitrate, in kbps.

*/
- (int) bitrate;
/**

    Gets whether this encoding is deactivated.

*/
- (bool) deactivated;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Initializes a new instance of the FMLiveSwitchEncodingConfig class.

*/
+ (FMLiveSwitchEncodingConfig*) encodingConfig;
/**

    Initializes a new instance of the FMLiveSwitchEncodingConfig class.

    @param encoding The encoding.
*/
+ (FMLiveSwitchEncodingConfig*) encodingConfigWithEncoding:(FMLiveSwitchEncodingInfo*)encoding;
/**

    Initializes a new instance of the FMLiveSwitchEncodingConfig class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchEncodingConfig class.

    @param encoding The encoding.
*/
- (instancetype) initWithEncoding:(FMLiveSwitchEncodingInfo*)encoding;
/**

    Gets the RTP stream identifier.

*/
- (NSString*) rtpStreamId;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the bitrate, in kbps.

*/
- (void) setBitrate:(int)value;
/**

    Sets whether this encoding is deactivated.

*/
- (void) setDeactivated:(bool)value;
/**

    Gets the synchronization source.

*/
- (long long) synchronizationSource;

@end

/**

    Audio encoding configuration.

*/
@interface FMLiveSwitchAudioEncodingConfig : FMLiveSwitchEncodingConfig

/**

    Initializes a new instance of the FMLiveSwitchAudioEncodingConfig class.

*/
+ (FMLiveSwitchAudioEncodingConfig*) audioEncodingConfig;
/**

    Initializes a new instance of the FMLiveSwitchAudioEncodingConfig class.

    @param encoding The encoding.
*/
+ (FMLiveSwitchAudioEncodingConfig*) audioEncodingConfigWithEncoding:(FMLiveSwitchEncodingInfo*)encoding;
/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Deserializes an array from JSON.

    @param encodingConfigsJson The serialized JSON.
    @return The deserialized array.
*/
+ (NSMutableArray*) fromJsonArrayWithEncodingConfigsJson:(NSString*)encodingConfigsJson;
/**

    Deserializes an instance from JSON.

    @param encodingConfigJson The serialized JSON.
    @return The deserialized instance.
*/
+ (FMLiveSwitchAudioEncodingConfig*) fromJsonWithEncodingConfigJson:(NSString*)encodingConfigJson;
/**

    Initializes a new instance of the FMLiveSwitchAudioEncodingConfig class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchAudioEncodingConfig class.

    @param encoding The encoding.
*/
- (instancetype) initWithEncoding:(FMLiveSwitchEncodingInfo*)encoding;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param encodingConfigs The array to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonArrayWithEncodingConfigs:(NSMutableArray*)encodingConfigs;
/**

    Serializes an instance to JSON.

    @param encodingConfig The instance to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonWithEncodingConfig:(FMLiveSwitchAudioEncodingConfig*)encodingConfig;

@end

/**

    A DTMF (telephone-event) packet.

*/
@interface FMLiveSwitchDtmfPacket : NSObject

/**

    Gets the duration in timestamp units (based on the negotiated clock rate).

*/
- (int) duration;
/**

    Gets the end-bit.

*/
- (bool) end;
/**

    Gets the event code.

*/
- (int) eventCode;
/**

    Gets the length.

*/
- (int) getLength;
/**

    Initializes a new instance of the FMLiveSwitchDtmfPacket class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchDtmfPacket class.

*/
+ (FMLiveSwitchDtmfPacket*) packet;
/**

    Reads from a data buffer.

    @param dataBuffer The data buffer.
*/
+ (FMLiveSwitchDtmfPacket*) readFromWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Sets the duration in timestamp units (based on the negotiated clock rate).

*/
- (void) setDuration:(int)value;
/**

    Sets the end-bit.

*/
- (void) setEnd:(bool)value;
/**

    Sets the event code.

*/
- (void) setEventCode:(int)value;
/**

    Sets the volume in dBm0 with the sign removed. Power levels range from 0 to -63 dBm0,
    so the value of this field ranges from 0-63, with higher values indicating lower volume.

*/
- (void) setVolume:(int)value;
/**

    Gets the volume in dBm0 with the sign removed. Power levels range from 0 to -63 dBm0,
    so the value of this field ranges from 0-63, with higher values indicating lower volume.

*/
- (int) volume;
/**

    Writes to a data buffer.

    @param dataBuffer The data buffer.
*/
- (void) writeToWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;

@end

/**

    A DTMF (telephone-event) tone.

*/
@interface FMLiveSwitchDtmfTone : NSObject

/**

    Gets A tone.

*/
+ (FMLiveSwitchDtmfTone*) a;
/**

    Gets the A value ("A").

*/
+ (NSString*) aValue;
/**

    Gets the B tone.

*/
+ (FMLiveSwitchDtmfTone*) b;
/**

    Gets the B value ("B").

*/
+ (NSString*) bValue;
/**

    Gets the C tone.

*/
+ (FMLiveSwitchDtmfTone*) c;
/**

    Clones this instance.

*/
- (FMLiveSwitchDtmfTone*) clone;
/**

    Clones this instance.

    @param duration The new duration.
*/
- (FMLiveSwitchDtmfTone*) cloneWithDuration:(int)duration;
/**

    Gets the C value ("C").

*/
+ (NSString*) cValue;
/**

    Gets the D tone.

*/
+ (FMLiveSwitchDtmfTone*) d;
/**

    Serializes to a string.

*/
- (NSString*) description;
/**

    Gets the duration in milliseconds.

*/
- (int) duration;
/**

    Gets the D value ("D").

*/
+ (NSString*) dValue;
/**

    Gets the eight tone.

*/
+ (FMLiveSwitchDtmfTone*) eight;
/**

    Gets the eight value ("8").

*/
+ (NSString*) eightValue;
/**

    Gets the empty tone.

*/
+ (FMLiveSwitchDtmfTone*) empty;
/**

    Gets the empty value ("").

*/
+ (NSString*) emptyValue;
/**

    Gets whether this is the final
    tone raised for the current value.

*/
- (bool) end;
/**

    Gets the five tone.

*/
+ (FMLiveSwitchDtmfTone*) five;
/**

    Gets the five value ("5").

*/
+ (NSString*) fiveValue;
/**

    Gets the four tone.

*/
+ (FMLiveSwitchDtmfTone*) four;
/**

    Gets the four value ("4").

*/
+ (NSString*) fourValue;
/**

    Deserializes an array from JSON.

    @param tonesJson The JSON.
*/
+ (NSMutableArray*) fromJsonArrayWithTonesJson:(NSString*)tonesJson;
/**

    Deserializes from JSON.

    @param toneJson The JSON.
*/
+ (FMLiveSwitchDtmfTone*) fromJsonWithToneJson:(NSString*)toneJson;
/**

    Deserializes from a packet.

    @param packet The packet.
    @param clockRate The clock rate.
*/
+ (FMLiveSwitchDtmfTone*) fromPacket:(FMLiveSwitchDtmfPacket*)packet clockRate:(int)clockRate;
/**

    Converts a DTMF tone string into an array of tones.
    Each tone will have a duration of 100ms and an inter-tone gap of 100ms.

    @param toneString The tone string.
*/
+ (NSMutableArray*) fromToneString:(NSString*)toneString;
/**

    Converts a DTMF tone string into an array of tones.
    Each tone will have an inter-tone gap of 100ms.

    @param toneString The tone string.
    @param duration The duration, in milliseconds (minimum of 40, maximum of 2,000).
*/
+ (NSMutableArray*) fromToneString:(NSString*)toneString duration:(int)duration;
/**

    Converts a DTMF tone string into an array of tones.

    @param toneString The tone string.
    @param duration The duration, in milliseconds (minimum of 40, maximum of 2,000).
    @param interToneGap The time between tones, in milliseconds (minimum of 40).
*/
+ (NSMutableArray*) fromToneString:(NSString*)toneString duration:(int)duration interToneGap:(int)interToneGap;
/**

    Gets the hash tone.

*/
+ (FMLiveSwitchDtmfTone*) hash;
/**

    Gets the hash value ("#").

*/
+ (NSString*) hashValue;
/**

    Initializes a new instance of the FMLiveSwitchDtmfTone class.

    @param value The value.
*/
- (instancetype) initWithValue:(NSString*)value;
/**

    Initializes a new instance of the FMLiveSwitchDtmfTone class.

    @param value The value.
    @param duration The duration.
*/
- (instancetype) initWithValue:(NSString*)value duration:(int)duration;
/**

    Gets the nine tone.

*/
+ (FMLiveSwitchDtmfTone*) nine;
/**

    Gets the nine value ("9").

*/
+ (NSString*) nineValue;
/**

    Gets the one tone.

*/
+ (FMLiveSwitchDtmfTone*) one;
/**

    Gets the one value ("1").

*/
+ (NSString*) oneValue;
/**

    Gets the pause tone.

*/
+ (FMLiveSwitchDtmfTone*) pause;
/**

    Gets the pause duration in milliseconds (2000).

*/
+ (int) pauseDuration;
/**

    Gets the pause value (",").

*/
+ (NSString*) pauseValue;
/**

    Gets the seven tone.

*/
+ (FMLiveSwitchDtmfTone*) seven;
/**

    Gets the seven value ("7").

*/
+ (NSString*) sevenValue;
/**

    Gets the six tone.

*/
+ (FMLiveSwitchDtmfTone*) six;
/**

    Gets the six value ("6").

*/
+ (NSString*) sixValue;
/**

    Gets the star tone.

*/
+ (FMLiveSwitchDtmfTone*) star;
/**

    Gets the star value ("*").

*/
+ (NSString*) starValue;
/**

    Gets the three tone.

*/
+ (FMLiveSwitchDtmfTone*) three;
/**

    Gets the three value ("3").

*/
+ (NSString*) threeValue;
/**

    Serializes to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param tones The array.
*/
+ (NSString*) toJsonArrayWithTones:(NSMutableArray*)tones;
/**

    Serializes to JSON.

*/
+ (NSString*) toJsonWithTone:(FMLiveSwitchDtmfTone*)tone;
/**

    Initializes a new instance of the FMLiveSwitchDtmfTone class.

    @param value The value.
*/
+ (FMLiveSwitchDtmfTone*) tone:(NSString*)value;
/**

    Initializes a new instance of the FMLiveSwitchDtmfTone class.

    @param value The value.
    @param duration The duration.
*/
+ (FMLiveSwitchDtmfTone*) tone:(NSString*)value duration:(int)duration;
/**

    Serializes to a packet.

    @param clockRate The clock rate.
*/
- (FMLiveSwitchDtmfPacket*) toPacketWithClockRate:(int)clockRate;
/**

    Converts an array of DTMF tones into a tone string.
    This discards duration and inter-tone gap data.

    @param tones The tones.
*/
+ (NSString*) toToneStringWithTones:(NSMutableArray*)tones;
/**

    Gets the two tone.

*/
+ (FMLiveSwitchDtmfTone*) two;
/**

    Gets the two value ("2").

*/
+ (NSString*) twoValue;
/**

    Gets the value.

*/
- (NSString*) value;
/**

    Gets the zero tone.

*/
+ (FMLiveSwitchDtmfTone*) zero;
/**

    Gets the zero value ("0").

*/
+ (NSString*) zeroValue;

@end

/**

    Defines valid SDP content values.

*/
@interface FMLiveSwitchSdpContent : NSObject

/**

    Gets the SDP content value "alt", which implies that the media stream is taken from the alternative source.

*/
+ (NSString*) alternative;
/**

    Gets the SDP content value "main", which implies that the media stream is taken from the main source.

*/
+ (NSString*) main;
/**

    Gets the SDP content value "sl", which implies that the media stream contains sign language.

*/
+ (NSString*) signLanguage;
/**

    Gets the SDP content value "slides", which implies that the media stream includes presentation slides.
    The media type can be, for example, a video stream or a number of instant messages with pictures.

*/
+ (NSString*) slides;
/**

    Gets the SDP content value "speaker", which implies that the media stream contains the image of the speaker.
    The media can be, for example, a video stream or a still image.

*/
+ (NSString*) speaker;

@end

/**

    An SDP attribute.

*/
@interface FMLiveSwitchSdpAttribute : NSObject

+ (FMLiveSwitchSdpAttribute*) attribute;
/**

    Gets this Attribute's Type.

*/
- (FMLiveSwitchSdpAttributeType) attributeType;
/**

    Creates an attribute.

    @param name The name.
    @param value The value.
*/
+ (FMLiveSwitchSdpAttribute*) createAttributeWithName:(NSString*)name value:(NSString*)value;
/**

    Converts this instance to a string.

*/
- (NSString*) description;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Gets the name of the attribute type.

    @param type The attribute type.
*/
+ (NSString*) getTypeNameWithType:(Class)type;
- (instancetype) init;
/**

    Determines whether the type applies to media streams.

    @param type The type.
*/
+ (bool) isMediaLevelWithType:(Class)type;
/**

    Determines whether the type applies to sessions.

    @param type The type.
*/
+ (bool) isSessionLevelWithType:(Class)type;
/**

    Gets the Multiplexing Category of this Attribute.

*/
- (FMLiveSwitchSdpAttributeCategory) multiplexingCategory;
/**

    Creates an FMLiveSwitchSdpConnectionData instance from a string.

    @param s The string to parse.
*/
+ (FMLiveSwitchSdpAttribute*) parseWithS:(NSString*)s;
/**

    Sets this Attribute's Type.

*/
- (void) setAttributeType:(FMLiveSwitchSdpAttributeType)value;
/**

    Sets the Multiplexing Category of this Attribute.

*/
- (void) setMultiplexingCategory:(FMLiveSwitchSdpAttributeCategory)value;

@end

/**

    The 'content' attribute contains one or more tokens, which MAY be
    attached to a media stream by a sending application.An application
    MAY attach a 'content' attribute to any media stream it describes.

*/
@interface FMLiveSwitchSdpContentAttribute : FMLiveSwitchSdpAttribute

/**

    Gets the type of the conference. See FMLiveSwitchSdpContentAttribute#content for possible values.

*/
- (NSString*) content;
/**

    Initializes a new instance of the FMLiveSwitchSdpContentAttribute class.

    @param content The content. See FMLiveSwitchSdpContentAttribute#content for possible values.
*/
+ (FMLiveSwitchSdpContentAttribute*) contentAttributeWithContent:(NSString*)content;
/**

    Initializes a new instance of the FMLiveSwitchSdpContentAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpContentAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpContentAttribute class.

    @param content The content. See FMLiveSwitchSdpContentAttribute#content for possible values.
*/
- (instancetype) initWithContent:(NSString*)content;

@end

/**

    Attribute that indicates if the stream track is muted.

*/
@interface FMLiveSwitchSdpMutedAttribute : FMLiveSwitchSdpAttribute

/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpMutedAttribute class.

*/
- (instancetype) initWithValue:(bool)value;
/**

    Initializes a new instance of the FMLiveSwitchSdpMutedAttribute class.

*/
+ (FMLiveSwitchSdpMutedAttribute*) mutedAttribute:(bool)value;

@end

/**

    A simulcast notification.

*/
@interface FMLiveSwitchSimulcastNotification : NSObject

/**

    Deserializes a property from JSON.

    @param key The property key.
    @param valueJson The property value in JSON format.
*/
- (void) deserializePropertyWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes an array from JSON.

    @param simulcastNotificationJson The array in JSON format.
    @return The array.
*/
+ (NSMutableArray*) fromJsonArrayWithSimulcastNotificationJson:(NSString*)simulcastNotificationJson;
/**

    Deserializes an instance from JSON.

    @param simulcastNotificationJson The instance in JSON format.
    @return The instance.
*/
+ (FMLiveSwitchSimulcastNotification*) fromJsonWithSimulcastNotificationJson:(NSString*)simulcastNotificationJson;
/**

    Initializes a new instance of the FMLiveSwitchSimulcastNotification class.

*/
- (instancetype) init;
/**

    Gets the media description ID.

*/
- (NSString*) mediaDescriptionId;
/**

    Gets the RTP stream ID.

*/
- (NSString*) rtpStreamId;
/**

    Serializes properties to JSON.

    @param jsonObject The JSON target.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the media description ID.

*/
- (void) setMediaDescriptionId:(NSString*)value;
/**

    Sets the RTP stream ID.

*/
- (void) setRtpStreamId:(NSString*)value;
/**

    Sets the simulcast stream's state

*/
- (void) setStreamState:(FMLiveSwitchSimulcastStreamState)value;
/**

    Sets the synchronization source.

*/
- (void) setSynchronizationSource:(long long)value;
/**

    Initializes a new instance of the FMLiveSwitchSimulcastNotification class.

*/
+ (FMLiveSwitchSimulcastNotification*) simulcastNotification;
/**

    Gets the simulcast stream's state

*/
- (FMLiveSwitchSimulcastStreamState) streamState;
/**

    Gets the synchronization source.

*/
- (long long) synchronizationSource;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param simulcastNotifications The array.
    @return The array in JSON format.
*/
+ (NSString*) toJsonArrayWithSimulcastNotifications:(NSMutableArray*)simulcastNotifications;
/**

    Serializes an instance to JSON.

    @param simulcastNotification The instance.
    @return The instance in JSON format.
*/
+ (NSString*) toJsonWithSimulcastNotification:(FMLiveSwitchSimulcastNotification*)simulcastNotification;

@end

@interface FMLiveSwitchSimulcastStreamStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchSimulcastStreamState)value;

@end

/**

    A stream description.

*/
@interface FMLiveSwitchStreamDescription : NSObject

/**

    Creates a new StreamDescription object.

    @param description SDP MediaDescription of the stream.
*/
- (instancetype) initWithDescription:(FMLiveSwitchSdpMediaDescription*)description;
/**

    Gets the media description associated with this stream.

*/
- (FMLiveSwitchSdpMediaDescription*) mediaDescription;
/**

    Gets the mid associated with this stream, if present. Null if not.

*/
- (NSString*) mediaDescriptionIdentifier;
/**

    Sets the media description associated with this stream.

*/
- (void) setMediaDescription:(FMLiveSwitchSdpMediaDescription*)value;
/**

    Creates a new StreamDescription object.

    @param description SDP MediaDescription of the stream.
*/
+ (FMLiveSwitchStreamDescription*) streamDescription:(FMLiveSwitchSdpMediaDescription*)description;
/**

    Gets the stream type.

*/
- (FMLiveSwitchStreamType) streamType;

@end

/**

    Class containing utility methods for FMLiveSwitchStreamType.

*/
@interface FMLiveSwitchStreamTypeHelper : NSObject

/**

    Convert a string to a FMLiveSwitchStreamType.

    @param typeString 
*/
+ (FMLiveSwitchStreamType) typeFromStringWithTypeString:(NSString*)typeString;
/**

    Convert a FMLiveSwitchStreamType to a string.

    @param streamType 
*/
+ (NSString*) typeToCapitalizedStringWithStreamType:(FMLiveSwitchStreamType)streamType;
/**

    Convert a FMLiveSwitchStreamType to a string.

    @param streamType 
*/
+ (NSString*) typeToStringWithStreamType:(FMLiveSwitchStreamType)streamType;

@end

/**

    Video content values.

*/
@interface FMLiveSwitchVideoContent : NSObject

/**

    Gets a value indicating camera-based video.

*/
+ (NSString*) camera;
/**

    Converts an SDP content attribute to a video content value.

    @param sdpContentAttribute The SDP content attribute.
    @return The video content value.
*/
+ (NSString*) fromContentAttributeWithSdpContentAttribute:(FMLiveSwitchSdpContentAttribute*)sdpContentAttribute;
/**

    Converts a video type to a video content value.

    @param videoType The video type.
    @return The video content value.
*/
+ (NSString*) fromVideoType:(FMLiveSwitchVideoType)videoType;
/**

    Gets a value indicating screen-based video.

*/
+ (NSString*) screen;
/**

    Converts a video content value to an SDP content attribute.

    @param videoContent The video content value.
    @return The SDP content attribute.
*/
+ (FMLiveSwitchSdpContentAttribute*) toSdpContentAttributeWithVideoContent:(NSString*)videoContent;
/**

    Converts a video content value to a video type.

    @param videoContent The video content value.
    @return The video type.
*/
+ (FMLiveSwitchVideoType) toVideoTypeWithVideoContent:(NSString*)videoContent;

@end

@interface FMLiveSwitchVideoDegradationPreferenceWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchVideoDegradationPreference)value;

@end

/**

    Video encoding configuration.

*/
@interface FMLiveSwitchVideoEncodingConfig : FMLiveSwitchEncodingConfig

/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Gets the frame-rate, in fps.

*/
- (double) frameRate;
/**

    Deserializes an array from JSON.

    @param encodingConfigsJson The serialized JSON.
    @return The deserialized array.
*/
+ (NSMutableArray*) fromJsonArrayWithEncodingConfigsJson:(NSString*)encodingConfigsJson;
/**

    Deserializes an instance from JSON.

    @param encodingConfigJson The serialized JSON.
    @return The deserialized instance.
*/
+ (FMLiveSwitchVideoEncodingConfig*) fromJsonWithEncodingConfigJson:(NSString*)encodingConfigJson;
/**

    Initializes a new instance of the FMLiveSwitchVideoEncodingConfig class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchVideoEncodingConfig class.

    @param encoding The encoding.
*/
- (instancetype) initWithEncoding:(FMLiveSwitchEncodingInfo*)encoding;
/**

    Gets the target scale.

*/
- (double) scale;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the frame-rate, in fps.

*/
- (void) setFrameRate:(double)value;
/**

    Sets the target scale.

*/
- (void) setScale:(double)value;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param encodingConfigs The array to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonArrayWithEncodingConfigs:(NSMutableArray*)encodingConfigs;
/**

    Serializes an instance to JSON.

    @param encodingConfig The instance to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonWithEncodingConfig:(FMLiveSwitchVideoEncodingConfig*)encodingConfig;
/**

    Initializes a new instance of the FMLiveSwitchVideoEncodingConfig class.

*/
+ (FMLiveSwitchVideoEncodingConfig*) videoEncodingConfig;
/**

    Initializes a new instance of the FMLiveSwitchVideoEncodingConfig class.

    @param encoding The encoding.
*/
+ (FMLiveSwitchVideoEncodingConfig*) videoEncodingConfigWithEncoding:(FMLiveSwitchEncodingInfo*)encoding;

@end

@interface FMLiveSwitchEncryptionModeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchEncryptionMode)value;

@end

/**

    Format information.

*/
@interface FMLiveSwitchFormatInfo : NSObject<FMLiveSwitchIEquivalent>

/**

    Gets the channel count if available. Unused for video codecs.

*/
- (int) channelCount;
/**

    Gets the clock rate.

*/
- (int) clockRate;
/**

    Gets the name.

    @deprecated Use Name instead.
*/
- (NSString*) codecName __deprecated_msg("Use Name instead.");
/**

    Returns a string that represents this instance.

*/
- (NSString*) description;
/**

    Creates a new instance of a FormatInfo.

*/
+ (FMLiveSwitchFormatInfo*) formatInfo;
/**

    Creates an instance of a FormatInfo from an AudioFormat.

    @param audioFormat The audio format.
*/
+ (FMLiveSwitchFormatInfo*) formatInfoWithAudioFormat:(FMLiveSwitchAudioFormat*)audioFormat;
/**

    Creates a new instance of a FormatInfo.

    @param codecName The codec name.
    @param clockRate The clock rate.
*/
+ (FMLiveSwitchFormatInfo*) formatInfoWithCodecName:(NSString*)codecName clockRate:(int)clockRate;
/**

    Creates a new instance of a FormatInfo.

    @param name The name.
    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
+ (FMLiveSwitchFormatInfo*) formatInfoWithName:(NSString*)name clockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Creates an instance of a FormatInfo from a VideoFormat.

    @param videoFormat The video format.
*/
+ (FMLiveSwitchFormatInfo*) formatInfoWithVideoFormat:(FMLiveSwitchVideoFormat*)videoFormat;
/**

    Derializes an array of format infos from JSON.

    @param formatInfosJson The format infos in JSON format.
*/
+ (NSMutableArray*) fromJsonArrayWithFormatInfosJson:(NSString*)formatInfosJson;
/**

    Deserializes Json to a FormatInfo.

    @param formatInfoJson The serialized Json.
    @return The deserialized FormatInfo.
*/
+ (FMLiveSwitchFormatInfo*) fromJsonWithFormatInfoJson:(NSString*)formatInfoJson;
/**

    Converts the RTP map attributes in an SDP media description
    to an array of FormatInfo objects.

    @param sdpMediaDescription The SDP media description.
    @return An array of FormatInfo objects.
*/
+ (NSMutableArray*) fromSdpMediaDescription:(FMLiveSwitchSdpMediaDescription*)sdpMediaDescription;
/**

    Creates a new instance of a FormatInfo.

*/
- (instancetype) init;
/**

    Creates an instance of a FormatInfo from an AudioFormat.

    @param audioFormat The audio format.
*/
- (instancetype) initWithAudioFormat:(FMLiveSwitchAudioFormat*)audioFormat;
/**

    Creates a new instance of a FormatInfo.

    @param codecName The codec name.
    @param clockRate The clock rate.
*/
- (instancetype) initWithCodecName:(NSString*)codecName clockRate:(int)clockRate;
/**

    Creates a new instance of a FormatInfo.

    @param name The name.
    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
- (instancetype) initWithName:(NSString*)name clockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Creates an instance of a FormatInfo from a VideoFormat.

    @param videoFormat The video format.
*/
- (instancetype) initWithVideoFormat:(FMLiveSwitchVideoFormat*)videoFormat;
/**

    Checks if an instance is equivalent to this one.

    @param instance The instance.
*/
- (bool) isEquivalentWithInstance:(FMLiveSwitchFormatInfo*)instance;
/**

    Tests for equivalency.

    @param channelCount The channel count.
    @param clockRate The clock rate.
    @param name The format name.
    @return `true` if equivalent; otherwise, `false`.
            
*/
- (bool) isEquivalentWithName:(NSString*)name clockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Gets the name.

*/
- (NSString*) name;
/**

    Sets the channel count if available. Unused for video codecs.

*/
- (void) setChannelCount:(int)value;
/**

    Sets the clock rate.

*/
- (void) setClockRate:(int)value;
/**

    Sets the name.

    @deprecated Use Name instead.
*/
- (void) setCodecName:(NSString*)value __deprecated_msg("Use Name instead.");
/**

    Sets the name.

*/
- (void) setName:(NSString*)value;
/**

    Serializes this instance to Json.

*/
- (NSString*) toJson;
/**

    Serializes an array of format infos to JSON.

    @param formatInfos The format infos.
*/
+ (NSString*) toJsonArrayWithFormatInfos:(NSMutableArray*)formatInfos;
/**

    Serializes an instance to Json.

    @param formatInfo The instance to serialize.
    @return Serialized Json.
*/
+ (NSString*) toJsonWithFormatInfo:(FMLiveSwitchFormatInfo*)formatInfo;

@end

/**

    A layout frame definition, including X/Y coordinates and width/height values.

*/
@interface FMLiveSwitchLayoutFrame : NSObject

/**

    Gets the client identifier.

*/
- (NSString*) clientId;
/**

    Gets the device identifier.

*/
- (NSString*) deviceId;
/**

    Deserializes a layout frame from JSON.

    @param layoutFrameJson The layout frame JSON.
*/
+ (FMLiveSwitchLayoutFrame*) fromJsonWithLayoutFrameJson:(NSString*)layoutFrameJson;
/**

    Gets a scaled frame.

    @param scale The scaling algorithm to use.
    @param outerWidth The width of the outer container.
    @param outerHeight The height of the outer container.
    @param innerWidth The width of the inner element.
    @param innerHeight The height of the inner element.
*/
+ (FMLiveSwitchLayoutFrame*) getScaledFrameWithScale:(FMLiveSwitchLayoutScale)scale outerWidth:(int)outerWidth outerHeight:(int)outerHeight innerWidth:(int)innerWidth innerHeight:(int)innerHeight;
/**

    Gets the height value.

*/
- (int) height;
/**

    Initializes a new instance of the FMLiveSwitchLayoutFrame class.

    @param x The X coordinate.
    @param y The Y coordinate.
    @param width The width value.
    @param height The height value.
*/
- (instancetype) initWithX:(int)x y:(int)y width:(int)width height:(int)height;
/**

    Determines whether the specified layout frame is equivalent.

    @param layoutFrame The layout frame.
*/
- (bool) isEquivalentWithLayoutFrame:(FMLiveSwitchLayoutFrame*)layoutFrame;
/**

    Initializes a new instance of the FMLiveSwitchLayoutFrame class.

    @param x The X coordinate.
    @param y The Y coordinate.
    @param width The width value.
    @param height The height value.
*/
+ (FMLiveSwitchLayoutFrame*) layoutFrameWithX:(int)x y:(int)y width:(int)width height:(int)height;
/**

    Gets the orientation in degrees.

*/
- (int) orientation;
/**

    Sets the client identifier.

*/
- (void) setClientId:(NSString*)value;
/**

    Sets the device identifier.

*/
- (void) setDeviceId:(NSString*)value;
/**

    Sets the height value.

*/
- (void) setHeight:(int)value;
/**

    Sets the orientation in degrees.

*/
- (void) setOrientation:(int)value;
/**

    Sets the user identifier.

*/
- (void) setUserId:(NSString*)value;
/**

    Sets the view ID.

*/
- (void) setViewId:(NSString*)value;
/**

    Sets the width value.

*/
- (void) setWidth:(int)value;
/**

    Sets the X coordinate.

*/
- (void) setX:(int)value;
/**

    Sets the Y coordinate.

*/
- (void) setY:(int)value;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes a layout frame to JSON.

    @param layoutFrame The layout frame.
*/
+ (NSString*) toJsonWithLayoutFrame:(FMLiveSwitchLayoutFrame*)layoutFrame;
/**

    Gets the user identifier.

*/
- (NSString*) userId;
/**

    Gets the view ID.

*/
- (NSString*) viewId;
/**

    Gets the width value.

*/
- (int) width;
/**

    Gets the X coordinate.

*/
- (int) x;
/**

    Gets the Y coordinate.

*/
- (int) y;

@end

@interface FMLiveSwitchLayoutScaleWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchLayoutScale)value;

@end

/**

    Media component information.

*/
@interface FMLiveSwitchMediaComponentInfo : FMLiveSwitchInfo

/**

    Gets codec.

*/
- (FMLiveSwitchCodecInfo*) codec;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Initializes a new instance of the FMLiveSwitchMediaComponentInfo class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMediaComponentInfo class.

    @param stats 
    @param lastStats 
*/
- (instancetype) initWithStats:(FMLiveSwitchMediaComponentStats*)stats lastStats:(FMLiveSwitchMediaComponentStats*)lastStats;
/**

    Initializes a new instance of the FMLiveSwitchMediaComponentInfo class.

*/
+ (FMLiveSwitchMediaComponentInfo*) mediaComponentInfo;
/**

    Initializes a new instance of the FMLiveSwitchMediaComponentInfo class.

    @param stats 
    @param lastStats 
*/
+ (FMLiveSwitchMediaComponentInfo*) mediaComponentInfoWithStats:(FMLiveSwitchMediaComponentStats*)stats lastStats:(FMLiveSwitchMediaComponentStats*)lastStats;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets codec.

*/
- (void) setCodec:(FMLiveSwitchCodecInfo*)value;
/**

    Sets synchronization source of media track.

*/
- (void) setSynchronizationSource:(FMLiveSwitchNullableLong*)value;
/**

    Sets track.

*/
- (void) setTrack:(FMLiveSwitchMediaTrackInfo*)value;
/**

    Gets synchronization source of media track.

*/
- (FMLiveSwitchNullableLong*) synchronizationSource;
/**

    Gets track.

*/
- (FMLiveSwitchMediaTrackInfo*) track;

@end

/**

    Media component stats.

*/
@interface FMLiveSwitchMediaComponentStats : FMLiveSwitchBaseStats

/**

    Gets the codec stats.

*/
- (FMLiveSwitchCodecStats*) codec;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Gets the FIR count.

*/
- (long long) firCount;
/**

    Gets the component's estimated media quality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

    @param audio Whether these are audio stats.
*/
- (double) getMediaQualityWithAudio:(bool)audio;
- (instancetype) init;
/**

    Gets the LRR count.

*/
- (long long) lrrCount;
+ (FMLiveSwitchMediaComponentStats*) mediaComponentStats;
/**

    Gets the NACK count.

*/
- (long long) nackCount;
/**

    Gets the PLI count.

*/
- (long long) pliCount;
/**

    Gets the repaired RTP stream identifier.

*/
- (NSString*) repairedRtpStreamId;
/**

    Gets the RTP stream identifier.

*/
- (NSString*) rtpStreamId;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the codec stats.

*/
- (void) setCodec:(FMLiveSwitchCodecStats*)value;
/**

    Sets the FIR count.

*/
- (void) setFirCount:(long long)value;
/**

    Sets the LRR count.

*/
- (void) setLrrCount:(long long)value;
/**

    Sets the NACK count.

*/
- (void) setNackCount:(long long)value;
/**

    Sets the PLI count.

*/
- (void) setPliCount:(long long)value;
/**

    Sets the repaired RTP stream identifier.

*/
- (void) setRepairedRtpStreamId:(NSString*)value;
/**

    Sets the RTP stream identifier.

*/
- (void) setRtpStreamId:(NSString*)value;
/**

    Sets the SLI count.

*/
- (void) setSliCount:(long long)value;
/**

    Sets the synchronization source.

*/
- (void) setSynchronizationSource:(long long)value;
/**

    Sets the track's stats.

*/
- (void) setTrack:(FMLiveSwitchMediaTrackStats*)value;
/**

    Gets the SLI count.

*/
- (long long) sliCount;
/**

    Gets the synchronization source.

*/
- (long long) synchronizationSource;
/**

    Gets the track's stats.

*/
- (FMLiveSwitchMediaTrackStats*) track;

@end

/**

    Media receiver information.

*/
@interface FMLiveSwitchMediaReceiverInfo : FMLiveSwitchMediaComponentInfo

/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes an array from JSON.

    @param mediaReceiversJson The serialized JSON.
    @return The deserialized array.
*/
+ (NSMutableArray*) fromJsonArrayWithMediaReceiversJson:(NSString*)mediaReceiversJson;
/**

    Deserializes an instance from JSON.

    @param mediaReceiverJson The serialized JSON.
    @return The deserialized instance.
*/
+ (FMLiveSwitchMediaReceiverInfo*) fromJsonWithMediaReceiverJson:(NSString*)mediaReceiverJson;
/**

    Initializes a new instance of the FMLiveSwitchMediaReceiverInfo class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMediaReceiverInfo class.

*/
+ (FMLiveSwitchMediaReceiverInfo*) mediaReceiverInfo;
/**

    Gets report.

*/
- (FMLiveSwitchMediaReceiverReport*) report;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets report.

*/
- (void) setReport:(FMLiveSwitchMediaReceiverReport*)value;
/**

    Sets sink.

*/
- (void) setSink:(FMLiveSwitchMediaSinkInfo*)value;
/**

    Gets sink.

*/
- (FMLiveSwitchMediaSinkInfo*) sink;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param mediaReceivers The array to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonArrayWithMediaReceivers:(NSMutableArray*)mediaReceivers;
/**

    Serializes an instance to JSON.

    @param mediaReceiver The instance to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonWithMediaReceiver:(FMLiveSwitchMediaReceiverInfo*)mediaReceiver;

@end

/**

    Media receiver stats.

*/
@interface FMLiveSwitchMediaReceiverStats : FMLiveSwitchMediaComponentStats<FMLiveSwitchIEquivalent>

/**

    Gets the number of bytes received.

*/
- (long long) bytesReceived;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Derializes media receiver stats array from JSON.

    @param mediaReceiversJson The media receivers' stats JSON.
*/
+ (NSMutableArray*) fromJsonArrayWithMediaReceiversJson:(NSString*)mediaReceiversJson;
/**

    Derializes media receiver stats from JSON.

    @param mediaReceiverJson The media receiver's stats JSON.
*/
+ (FMLiveSwitchMediaReceiverStats*) fromJsonWithMediaReceiverJson:(NSString*)mediaReceiverJson;
/**

    Gets the receiver's estimated media quality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

    @param audio Whether these are audio stats.
*/
- (double) getMediaQualityWithAudio:(bool)audio;
- (instancetype) init;
/**

    Checks if a media receiver is equivalent to this one.

    @param instance The media receiver.
*/
- (bool) isEquivalentWithInstance:(FMLiveSwitchMediaReceiverStats*)instance;
/**

    Gets the jitter in milliseconds.

*/
- (int) jitter;
+ (FMLiveSwitchMediaReceiverStats*) mediaReceiverStats;
/**

    Gets the receiver's estimated network quality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

*/
- (double) networkQuality;
/**

    Gets the receiver's estimated network score.
    <br />
    The value ranges from 1.0 to 5.0, where 1.0 is the lowest score and 5.0 is the highest score.

*/
- (double) networkScore;
/**

    Gets the number of packets discarded.

*/
- (long long) packetsDiscarded;
/**

    Gets the number of packets duplicated.

*/
- (long long) packetsDuplicated;
/**

    Gets the number of packets lost.

*/
- (long long) packetsLost;
/**

    Gets the number of packets received.

*/
- (long long) packetsReceived;
/**

    Gets the number of packets repaired.

*/
- (long long) packetsRepaired;
/**

    Gets the round trip time in milliseconds.

*/
- (int) roundTripTime;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Gets the sink stats.

*/
- (FMLiveSwitchMediaSinkStats*) sink;
/**

    Serializes this to JSON.

*/
- (NSString*) toJson;
/**

    Serializes media receiver stats array to JSON.

    @param mediaReceivers The media receivers' stats.
*/
+ (NSString*) toJsonArrayWithMediaReceivers:(NSMutableArray*)mediaReceivers;
/**

    Serializes media receiver stats to JSON.

    @param mediaReceiver The media receiver's stats.
*/
+ (NSString*) toJsonWithMediaReceiver:(FMLiveSwitchMediaReceiverStats*)mediaReceiver;

@end

/**

    Media sender information.

*/
@interface FMLiveSwitchMediaSenderInfo : FMLiveSwitchMediaComponentInfo

/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes an array from JSON.

    @param mediaSendersJson The serialized JSON.
    @return The deserialized array.
*/
+ (NSMutableArray*) fromJsonArrayWithMediaSendersJson:(NSString*)mediaSendersJson;
/**

    Deserializes an instance from JSON.

    @param mediaSenderJson The serialized JSON.
    @return The deserialized instance.
*/
+ (FMLiveSwitchMediaSenderInfo*) fromJsonWithMediaSenderJson:(NSString*)mediaSenderJson;
/**

    Initializes a new instance of the FMLiveSwitchMediaSenderInfo class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMediaSenderInfo class.

*/
+ (FMLiveSwitchMediaSenderInfo*) mediaSenderInfo;
/**

    Gets report.

*/
- (FMLiveSwitchMediaSenderReport*) report;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets report.

*/
- (void) setReport:(FMLiveSwitchMediaSenderReport*)value;
/**

    Sets source.

*/
- (void) setSource:(FMLiveSwitchMediaSourceInfo*)value;
/**

    Gets source.

*/
- (FMLiveSwitchMediaSourceInfo*) source;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param mediaSenders The array to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonArrayWithMediaSenders:(NSMutableArray*)mediaSenders;
/**

    Serializes an instance to JSON.

    @param mediaSender The instance to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonWithMediaSender:(FMLiveSwitchMediaSenderInfo*)mediaSender;

@end

/**

    Media sender stats.

*/
@interface FMLiveSwitchMediaSenderStats : FMLiveSwitchMediaComponentStats<FMLiveSwitchIEquivalent>

/**

    Gets the number of bytes sent.

*/
- (long long) bytesSent;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Derializes a media sender stats array from JSON.

    @param mediaSendersJson The media senders' stats JSON.
*/
+ (NSMutableArray*) fromJsonArrayWithMediaSendersJson:(NSString*)mediaSendersJson;
/**

    Derializes media sender stats from JSON.

    @param mediaSenderJson The media sender's stats JSON.
*/
+ (FMLiveSwitchMediaSenderStats*) fromJsonWithMediaSenderJson:(NSString*)mediaSenderJson;
- (instancetype) init;
/**

    Checks if a media sender is equivalent to this one.

    @param instance The media sender.
*/
- (bool) isEquivalentWithInstance:(FMLiveSwitchMediaSenderStats*)instance;
/**

    Gets the last remote receiver stats.

*/
- (FMLiveSwitchRemoteReceiverStats*) lastRemoteReceiverStats;
+ (FMLiveSwitchMediaSenderStats*) mediaSenderStats;
/**

    Gets the sender's estimated network quality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

*/
- (double) networkQuality;
/**

    Gets the number of packets sent.

*/
- (long long) packetsSent;
/**

    Gets the round trip time in milliseconds.

*/
- (int) roundTripTime;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Gets the source stats.

*/
- (FMLiveSwitchMediaSourceStats*) source;
/**

    Serializes this to JSON.

*/
- (NSString*) toJson;
/**

    Serializes a media sender stats array to JSON.

    @param mediaSenders The media senders' stats.
*/
+ (NSString*) toJsonArrayWithMediaSenders:(NSMutableArray*)mediaSenders;
/**

    Serializes media sender stats to JSON.

    @param mediaSender The media sender's stats.
*/
+ (NSString*) toJsonWithMediaSender:(FMLiveSwitchMediaSenderStats*)mediaSender;

@end

/**

    Media sink information.

*/
@interface FMLiveSwitchMediaSinkInfo : FMLiveSwitchInfo

/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes an array from JSON.

    @param mediaSinkInfosJson The serialized JSON.
    @return The deserialized array.
*/
+ (NSMutableArray*) fromJsonArrayWithMediaSinkInfosJson:(NSString*)mediaSinkInfosJson;
/**

    Deserializes an instance from JSON.

    @param mediaSinkInfoJson The serialized JSON.
    @return The deserialized instance.
*/
+ (FMLiveSwitchMediaSinkInfo*) fromJsonWithMediaSinkInfoJson:(NSString*)mediaSinkInfoJson;
/**

    Initializes a new instance of the FMLiveSwitchMediaSinkInfo class.

*/
- (instancetype) init;
/**

    Gets the media sink input format.

*/
- (FMLiveSwitchFormatInfo*) inputFormat;
/**

    Gets the media sink label.

*/
- (NSString*) label;
/**

    Initializes a new instance of the FMLiveSwitchMediaSinkInfo class.

*/
+ (FMLiveSwitchMediaSinkInfo*) mediaSinkInfo;
/**

    Gets the media sink output id.

*/
- (NSString*) outputId;
/**

    Gets the media sink output name.

*/
- (NSString*) outputName;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the media sink input format.

*/
- (void) setInputFormat:(FMLiveSwitchFormatInfo*)value;
/**

    Sets the media sink label.

*/
- (void) setLabel:(NSString*)value;
/**

    Sets the media sink output id.

*/
- (void) setOutputId:(NSString*)value;
/**

    Sets the media sink output name.

*/
- (void) setOutputName:(NSString*)value;
/**

    Sets the media sink tag.

*/
- (void) setTag:(NSString*)value;
/**

    Gets the media sink tag.

*/
- (NSString*) tag;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param mediaSinkInfos The array to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonArrayWithMediaSinkInfos:(NSMutableArray*)mediaSinkInfos;
/**

    Serializes an instance to JSON.

    @param mediaSinkInfo The instance to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonWithMediaSinkInfo:(FMLiveSwitchMediaSinkInfo*)mediaSinkInfo;

@end

/**

    Media sink stats.

*/
@interface FMLiveSwitchMediaSinkStats : FMLiveSwitchBaseStats<FMLiveSwitchIEquivalent>

/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes an array from JSON.

    @param arrayJson The serialized JSON.
    @return The deserialized array.
*/
+ (NSMutableArray*) fromJsonArrayWithArrayJson:(NSString*)arrayJson;
/**

    Deserializes an instance from JSON.

    @param instanceJson The serialized JSON.
    @return The deserialized instance.
*/
+ (FMLiveSwitchMediaSinkStats*) fromJsonWithInstanceJson:(NSString*)instanceJson;
- (instancetype) init;
/**

    Gets the input format.

*/
- (FMLiveSwitchFormatInfo*) inputFormat;
/**

    Checks if a source is equivalent to this one.

    @param instance The source.
*/
- (bool) isEquivalentWithInstance:(FMLiveSwitchMediaSinkStats*)instance;
/**

    Gets the label.

*/
- (NSString*) label;
+ (FMLiveSwitchMediaSinkStats*) mediaSinkStats;
/**

    Gets the muted flag.

*/
- (bool) muted;
/**

    Gets the output identifier.

*/
- (NSString*) outputId;
/**

    Gets the output name.

*/
- (NSString*) outputName;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the input format.

*/
- (void) setInputFormat:(FMLiveSwitchFormatInfo*)value;
/**

    Sets the label.

*/
- (void) setLabel:(NSString*)value;
/**

    Sets the muted flag.

*/
- (void) setMuted:(bool)value;
/**

    Sets the output identifier.

*/
- (void) setOutputId:(NSString*)value;
/**

    Sets the output name.

*/
- (void) setOutputName:(NSString*)value;
/**

    Sets the tag.

*/
- (void) setTag:(NSString*)value;
/**

    Gets the tag.

*/
- (NSString*) tag;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param array The array to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonArray:(NSMutableArray*)array;
/**

    Serializes an instance to JSON.

    @param instance The instance to serialize.
    @return Serialized JSON.
*/
+ (NSString*) toJsonWithInstance:(FMLiveSwitchMediaSinkStats*)instance;

@end

/**

    Media source stats.

*/
@interface FMLiveSwitchMediaSourceStats : FMLiveSwitchBaseStats<FMLiveSwitchIEquivalent>

/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes an instance from JSON.

    @param instanceJson The serialized Json.
    @return The deserialized VideoSourceInfo.
*/
+ (FMLiveSwitchMediaSourceStats*) fromJsonWithInstanceJson:(NSString*)instanceJson;
- (instancetype) init;
/**

    Gets the input identifier.

*/
- (NSString*) inputId;
/**

    Gets the input name.

*/
- (NSString*) inputName;
/**

    Checks if a source is equivalent to this one.

    @param instance The source.
*/
- (bool) isEquivalentWithInstance:(FMLiveSwitchMediaSourceStats*)instance;
/**

    Gets the label.

*/
- (NSString*) label;
+ (FMLiveSwitchMediaSourceStats*) mediaSourceStats;
/**

    Gets the muted flag.

*/
- (bool) muted;
/**

    Gets the output format.

*/
- (FMLiveSwitchFormatInfo*) outputFormat;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the input identifier.

*/
- (void) setInputId:(NSString*)value;
/**

    Sets the input name.

*/
- (void) setInputName:(NSString*)value;
/**

    Sets the label.

*/
- (void) setLabel:(NSString*)value;
/**

    Sets the muted flag.

*/
- (void) setMuted:(bool)value;
/**

    Sets the output format.

*/
- (void) setOutputFormat:(FMLiveSwitchFormatInfo*)value;
/**

    Sets the tag.

*/
- (void) setTag:(NSString*)value;
/**

    Gets the tag.

*/
- (NSString*) tag;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an instance to JSON.

    @param instance The instance to serialize.
    @return Serialized Json.
*/
+ (NSString*) toJsonWithInstance:(FMLiveSwitchMediaSourceStats*)instance;

@end

/**

    Media stats.

*/
@interface FMLiveSwitchMediaStats : FMLiveSwitchBaseStats

/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Derializes media stats from JSON.

    @param mediaJson The media's stats JSON.
*/
+ (FMLiveSwitchMediaStats*) fromJsonWithMediaJson:(NSString*)mediaJson;
/**

    Gets a track by its identifier.

    @param trackId The track identifier.
*/
- (FMLiveSwitchMediaTrackStats*) getTrackWithTrackId:(NSString*)trackId;
- (instancetype) init;
+ (FMLiveSwitchMediaStats*) mediaStats;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Serializes this to JSON.

*/
- (NSString*) toJson;
/**

    Serializes media stats to JSON.

    @param media The media's stats.
*/
+ (NSString*) toJsonWithMedia:(FMLiveSwitchMediaStats*)media;
/**

    Gets the first track's stats.

*/
- (FMLiveSwitchMediaTrackStats*) track;
/**

    Gets the tracks' stats.

*/
- (NSMutableArray*) tracks;

@end

/**

    Encoding information.

*/
@interface FMLiveSwitchEncodingInfo : FMLiveSwitchInfo

/**

    Gets the bitrate, in kbps.

*/
- (int) bitrate;
/**

    Gets whether this encoding is deactivated.

*/
- (bool) deactivated;
/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
+ (FMLiveSwitchEncodingInfo*) encodingInfo;
/**

    Gets the frame-rate, in fps.

*/
- (double) frameRate;
/**

    Deserializes an array from JSON.

    @param encodingInfosJson The serialized JSON.
    @return The deserialized array.
*/
+ (NSMutableArray*) fromJsonArrayWithEncodingInfosJson:(NSString*)encodingInfosJson;
/**

    Deserializes an instance from JSON.

    @param encodingInfoJson The serialized JSON.
    @return The deserialized instance.
*/
+ (FMLiveSwitchEncodingInfo*) fromJsonWithEncodingInfoJson:(NSString*)encodingInfoJson;
/**

    Converts an SDP RID attribute into an instance.

    @param ridAttribute The SDP RID attribute.
*/
+ (FMLiveSwitchEncodingInfo*) fromSdpRidAttribute:(FMLiveSwitchSdpRtpRidAttribute*)ridAttribute;
/**

    Gets the height.

*/
- (int) height;
- (instancetype) init;
/**

    Gets whether this encoding is empty.

*/
- (bool) isEmpty;
/**

    Determines whether the specified encoding is equivalent.

    @param encoding The encoding.
*/
- (bool) isEquivalentWithEncoding:(FMLiveSwitchEncodingInfo*)encoding;
/**

    Determines whether the specified encoding is equivalent.

    @param encoding The encoding.
    @param restrictionsOnly Whether to check restrictions only.
*/
- (bool) isEquivalentWithEncoding:(FMLiveSwitchEncodingInfo*)encoding restrictionsOnly:(bool)restrictionsOnly;
/**

    Determines whether the two encodings are equivalent.

    @param encoding1 The first encoding.
    @param encoding2 The second encoding.
*/
+ (bool) isEquivalentWithEncoding1:(FMLiveSwitchEncodingInfo*)encoding1 encoding2:(FMLiveSwitchEncodingInfo*)encoding2;
/**

    Determines whether the two encodings are equivalent.

    @param encoding1 The first encoding.
    @param encoding2 The second encoding.
    @param restrictionsOnly Whether to check restrictions only.
*/
+ (bool) isEquivalentWithEncoding1:(FMLiveSwitchEncodingInfo*)encoding1 encoding2:(FMLiveSwitchEncodingInfo*)encoding2 restrictionsOnly:(bool)restrictionsOnly;
/**

    Returns a new encoding with each value
    being the maximum of two input encodings.

    @param encoding1 The first encoding.
    @param encoding2 The second encoding.
    @return A new encoding.
*/
+ (FMLiveSwitchEncodingInfo*) maxWithEncoding1:(FMLiveSwitchEncodingInfo*)encoding1 encoding2:(FMLiveSwitchEncodingInfo*)encoding2;
/**

    Returns a new encoding with each value
    being the minimum of two input encodings.

    @param encoding1 The first encoding.
    @param encoding2 The second encoding.
    @return A new encoding.
*/
+ (FMLiveSwitchEncodingInfo*) minWithEncoding1:(FMLiveSwitchEncodingInfo*)encoding1 encoding2:(FMLiveSwitchEncodingInfo*)encoding2;
/**

    Gets the RTP stream identifier.

*/
- (NSString*) rtpStreamId;
/**

    Gets the target scale.

*/
- (double) scale;
/**

    Gets the scaled height.

*/
- (int) scaledHeight;
/**

    Gets the scaled size.

*/
- (FMLiveSwitchSize*) scaledSize;
/**

    Gets the scaled width.

*/
- (int) scaledWidth;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the bitrate, in kbps.

*/
- (void) setBitrate:(int)value;
/**

    Sets whether this encoding is deactivated.

*/
- (void) setDeactivated:(bool)value;
/**

    Sets the frame-rate, in fps.

*/
- (void) setFrameRate:(double)value;
/**

    Sets the RTP stream identifier.

*/
- (void) setRtpStreamId:(NSString*)value;
/**

    Sets the target scale.

*/
- (void) setScale:(double)value;
/**

    Sets the size.

*/
- (void) setSize:(FMLiveSwitchSize*)value;
/**

    Sets the synchronization source.

*/
- (void) setSynchronizationSource:(long long)value;
/**

    Gets the size.

*/
- (FMLiveSwitchSize*) size;
/**

    Gets the synchronization source.

*/
- (long long) synchronizationSource;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param encodingInfos The array to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonArrayWithEncodingInfos:(NSMutableArray*)encodingInfos;
/**

    Serializes an instance to JSON.

    @param encodingInfo The instance to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonWithEncodingInfo:(FMLiveSwitchEncodingInfo*)encodingInfo;
/**

    Converts this instance into an SDP RID attribute.

    @param direction The direction.
*/
- (FMLiveSwitchSdpRtpRidAttribute*) toSdpRidAttributeWithDirection:(NSString*)direction;
/**

    Converts this instance into an SDP RID attribute.

    @param direction The direction.
    @param includeRestrictions Whether to include restrictions.
*/
- (FMLiveSwitchSdpRtpRidAttribute*) toSdpRidAttributeWithDirection:(NSString*)direction includeRestrictions:(bool)includeRestrictions;
/**

    Converts an instance into an SDP RID attribute.

    @param encoding The encoding.
    @param direction The direction.
*/
+ (FMLiveSwitchSdpRtpRidAttribute*) toSdpRidAttributeWithEncoding:(FMLiveSwitchEncodingInfo*)encoding direction:(NSString*)direction;
/**

    Converts an instance into an SDP RID attribute.

    @param encoding The encoding.
    @param direction The direction.
    @param includeRestrictions Whether to include restrictions.
*/
+ (FMLiveSwitchSdpRtpRidAttribute*) toSdpRidAttributeWithEncoding:(FMLiveSwitchEncodingInfo*)encoding direction:(NSString*)direction includeRestrictions:(bool)includeRestrictions;
/**

    Gets the width.

*/
- (int) width;

@end

/**

    Media stream information.

*/
@interface FMLiveSwitchMediaStreamInfo : FMLiveSwitchStreamInfo

/**

    Gets the control transport id.
    This will be `null` if BUNDLE is active.

*/
- (NSString*) controlTransportId;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Gets the media stream direction.

*/
- (NSString*) direction;
/**

    Deserializes an array from JSON.

    @param mediaStreamInfosJson The serialized JSON.
    @return The deserialized array.
*/
+ (NSMutableArray*) fromJsonArrayWithMediaStreamInfosJson:(NSString*)mediaStreamInfosJson;
/**

    Deserializes an instance from JSON.

    @param mediaStreamInfoJson The serialized JSON.
    @return The deserialized instance.
*/
+ (FMLiveSwitchMediaStreamInfo*) fromJsonWithMediaStreamInfoJson:(NSString*)mediaStreamInfoJson;
- (instancetype) init;
/**

    Gets the media stream's local bandwidth.

*/
- (int) localBandwidth;
/**

    Gets the media stream's maximum frame height.

*/
- (int) maxFrameHeight;
/**

    Gets the media stream's maximum frame width.

*/
- (int) maxFrameWidth;
+ (FMLiveSwitchMediaStreamInfo*) mediaStreamInfo;
/**

    Gets the media stream's receive content.

*/
- (NSString*) receiveContent;
/**

    Gets whether the media stream has the receive direction disabled.

*/
- (bool) receiveDisabled;
/**

    Gets the media stream receive encodings.

*/
- (NSMutableArray*) receiveEncodings;
/**

    Gets the media stream receive formats.

*/
- (NSMutableArray*) receiveFormats;
/**

    Gets the first media stream receiver information.

*/
- (FMLiveSwitchMediaReceiverInfo*) receiver;
/**

    Gets the media stream receivers information.

*/
- (NSMutableArray*) receivers;
/**

    Gets the media stream's remote bandwidth.

*/
- (int) remoteBandwidth;
/**

    Gets the media stream's send content.

*/
- (NSString*) sendContent;
/**

    Gets whether the media stream has the send direction disabled.

*/
- (bool) sendDisabled;
/**

    Gets the media stream send encodings.

*/
- (NSMutableArray*) sendEncodings;
/**

    Gets the first media stream sender information.

*/
- (FMLiveSwitchMediaSenderInfo*) sender;
/**

    Gets the media stream senders information.

*/
- (NSMutableArray*) senders;
/**

    Gets the media stream send formats.

*/
- (NSMutableArray*) sendFormats;
/**

    Gets whether the sender is muted. Returns true if the sender is muted and false otherwise.

*/
- (bool) sendMuted;
/**

    Gets whether the sender cannot be unmuted. Returns true if the sender cannot be unmuted and false otherwise.

*/
- (bool) sendUnmuteDisabled;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the control transport id.
    This will be `null` if BUNDLE is active.

*/
- (void) setControlTransportId:(NSString*)value;
/**

    Sets the media stream direction.

*/
- (void) setDirection:(NSString*)value;
/**

    Sets the media stream's local bandwidth.

*/
- (void) setLocalBandwidth:(int)value;
/**

    Sets the media stream's maximum frame height.

*/
- (void) setMaxFrameHeight:(int)value;
/**

    Sets the media stream's maximum frame width.

*/
- (void) setMaxFrameWidth:(int)value;
/**

    Sets the media stream's receive content.

*/
- (void) setReceiveContent:(NSString*)value;
/**

    Sets whether the media stream has the receive direction disabled.

*/
- (void) setReceiveDisabled:(bool)value;
/**

    Sets the media stream receive encodings.

*/
- (void) setReceiveEncodings:(NSMutableArray*)value;
/**

    Sets the media stream receive formats.

*/
- (void) setReceiveFormats:(NSMutableArray*)value;
/**

    Sets the media stream receivers information.

*/
- (void) setReceivers:(NSMutableArray*)value;
/**

    Sets the media stream's remote bandwidth.

*/
- (void) setRemoteBandwidth:(int)value;
/**

    Sets the media stream's send content.

*/
- (void) setSendContent:(NSString*)value;
/**

    Sets whether the media stream has the send direction disabled.

*/
- (void) setSendDisabled:(bool)value;
/**

    Sets the media stream send encodings.

*/
- (void) setSendEncodings:(NSMutableArray*)value;
/**

    Sets the media stream senders information.

*/
- (void) setSenders:(NSMutableArray*)value;
/**

    Sets the media stream send formats.

*/
- (void) setSendFormats:(NSMutableArray*)value;
/**

    Sets whether the sender is muted. Returns true if the sender is muted and false otherwise.

*/
- (void) setSendMuted:(bool)value;
/**

    Sets whether the sender cannot be unmuted. Returns true if the sender cannot be unmuted and false otherwise.

*/
- (void) setSendUnmuteDisabled:(bool)value;
/**

    Sets the WebSocket Stream id.

*/
- (void) setWebSocketStreamId:(int)value;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param mediaStreamInfos The array to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonArrayWithMediaStreamInfos:(NSMutableArray*)mediaStreamInfos;
/**

    Serializes an instance to JSON.

    @param mediaStreamInfo The instance to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonWithMediaStreamInfo:(FMLiveSwitchMediaStreamInfo*)mediaStreamInfo;
/**

    Gets the WebSocket Stream id.

*/
- (int) webSocketStreamId;

@end

/**

    Media stream stats.

*/
@interface FMLiveSwitchMediaStreamStats : FMLiveSwitchStreamStats

/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Gets the direction.

*/
- (FMLiveSwitchStreamDirection) direction;
/**

    Derializes an array of media stream stats from JSON.

    @param mediaStreamsJson The media streams' stats JSON.
*/
+ (NSMutableArray*) fromJsonArrayWithMediaStreamsJson:(NSString*)mediaStreamsJson;
/**

    Derializes media stream stats from JSON.

    @param mediaStreamJson The media stream's stats JSON.
*/
+ (FMLiveSwitchMediaStreamStats*) fromJsonWithMediaStreamJson:(NSString*)mediaStreamJson;
- (instancetype) init;
/**

    Gets the max receive bitrate.

*/
- (int) maxReceiveBitrate;
/**

    Gets the max send bitrate.

*/
- (int) maxSendBitrate;
/**

    Gets the stream's estimated media quality as the minimum of the sender media quality and the receiver media quality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

*/
- (double) mediaQuality;
+ (FMLiveSwitchMediaStreamStats*) mediaStreamStats;
/**

    Gets the stream's estimated network quality as the minimum of the FMLiveSwitchMediaStreamStats#senderNetworkQuality and the FMLiveSwitchMediaStreamStats#receiverNetworkQuality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

*/
- (double) networkQuality;
/**

    Gets the first receiver's stats.

*/
- (FMLiveSwitchMediaReceiverStats*) receiver;
/**

    Gets the receivers' minimum estimated media quality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

*/
- (double) receiverMediaQuality;
/**

    Gets the receivers' minimum estimated network quality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

*/
- (double) receiverNetworkQuality;
/**

    Gets the receivers' estimated network score.
    <br />
    The value ranges from 1.0 to 5.0, where 1.0 is the lowest score and 5.0 is the highest score.

*/
- (double) receiverNetworkScore;
/**

    Gets the receivers' stats.

*/
- (NSMutableArray*) receivers;
/**

    Gets the first sender's stats.

*/
- (FMLiveSwitchMediaSenderStats*) sender;
/**

    Gets the senders' minimum estimated media quality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

*/
- (double) senderMediaQuality;
/**

    Gets the senders' minimum estimated network quality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

*/
- (double) senderNetworkQuality;
/**

    Gets the senders' stats.

*/
- (NSMutableArray*) senders;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Serializes this to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array of media stream stats to JSON.

    @param mediaStreams The media streams' stats.
*/
+ (NSString*) toJsonArrayWithMediaStreams:(NSMutableArray*)mediaStreams;
/**

    Serializes media stream stats to JSON.

    @param mediaStream The media stream's stats.
*/
+ (NSString*) toJsonWithMediaStream:(FMLiveSwitchMediaStreamStats*)mediaStream;

@end

/**

    Media track information

*/
@interface FMLiveSwitchMediaTrackInfo : FMLiveSwitchInfo

/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Gets the whether the media track is detached.

*/
- (FMLiveSwitchNullableBool*) detached;
/**

    Deserializes an array from JSON.

    @param mediaTrackInfosJson The serialized JSON.
    @return The deserialized array.
*/
+ (NSMutableArray*) fromJsonArrayWithMediaTrackInfosJson:(NSString*)mediaTrackInfosJson;
/**

    Deserializes an instance from JSON.

    @param mediaTrackInfoJson The serialized JSON.
    @return The deserialized instance.
*/
+ (FMLiveSwitchMediaTrackInfo*) fromJsonWithMediaTrackInfoJson:(NSString*)mediaTrackInfoJson;
/**

    Create MediaTrackInfo instance.

*/
- (instancetype) init;
/**

    Create MediaTrackInfo instance.

    @param stats 
    @param lastStats 
*/
- (instancetype) initWithStats:(FMLiveSwitchMediaTrackStats*)stats lastStats:(FMLiveSwitchMediaTrackStats*)lastStats;
/**

    Create MediaTrackInfo instance.

*/
+ (FMLiveSwitchMediaTrackInfo*) mediaTrackInfo;
/**

    Create MediaTrackInfo instance.

    @param stats 
    @param lastStats 
*/
+ (FMLiveSwitchMediaTrackInfo*) mediaTrackInfoWithStats:(FMLiveSwitchMediaTrackStats*)stats lastStats:(FMLiveSwitchMediaTrackStats*)lastStats;
/**

    Gets the whether the media track is muted.

*/
- (FMLiveSwitchNullableBool*) muted;
/**

    Gets the data stream report.

*/
- (FMLiveSwitchMediaTrackReport*) report;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the whether the media track is detached.

*/
- (void) setDetached:(FMLiveSwitchNullableBool*)value;
/**

    Sets the whether the media track is muted.

*/
- (void) setMuted:(FMLiveSwitchNullableBool*)value;
/**

    Sets the data stream report.

*/
- (void) setReport:(FMLiveSwitchMediaTrackReport*)value;
/**

    Sets the whether the media track is stopped.

*/
- (void) setStopped:(FMLiveSwitchNullableBool*)value;
/**

    Gets the whether the media track is stopped.

*/
- (FMLiveSwitchNullableBool*) stopped;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param mediaTrackInfos The array to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonArrayWithMediaTrackInfos:(NSMutableArray*)mediaTrackInfos;
/**

    Serializes an instance to JSON.

    @param mediaTrackInfo The instance to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonWithMediaTrackInfo:(FMLiveSwitchMediaTrackInfo*)mediaTrackInfo;

@end

/**

    Media track stats.

*/
@interface FMLiveSwitchMediaTrackStats : FMLiveSwitchBaseStats<FMLiveSwitchIEquivalent>

/**

    Gets the bitrate.
    Set by the encoder.

*/
- (int) bitrate;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Gets whether the track is detached.

*/
- (bool) detached;
/**

    Gets the expected frame rate. Video-only.
    Set by the stream.

*/
- (double) expectedFrameRate;
/**

    Gets the frame height. Video-only.
    Set by the encoder or decoder.

*/
- (int) frameHeight;
/**

    Gets the number of decoded frames in the last second. Video-only.
    Set by the encoder or decoder.

*/
- (double) frameRate;
/**

    Gets the number of corrupted frames. Video-only.
    Set by the depacketizer.

*/
- (long long) framesCorrupted;
/**

    Gets the number of frames decoded.
    Set by the decoder.

*/
- (long long) framesDecoded;
/**

    Gets the number of frames dropped. Video-only.
    Set by the depacketizer.

*/
- (long long) framesDropped;
/**

    Gets the number of frames encoded.
    Set by the encoder.

*/
- (long long) framesEncoded;
/**

    Gets the number of frames received.
    Set by the depacketizer.

*/
- (long long) framesReceived;
/**

    Gets the number of frames sent.
    Set by the packetizer.

*/
- (long long) framesSent;
/**

    Gets the frame width. Video-only.
    Set by the encoder or decoder.

*/
- (int) frameWidth;
/**

    Derializes an array of media track stats from JSON.

    @param mediaTracksJson The media tracks' stats JSON.
*/
+ (NSMutableArray*) fromJsonArrayWithMediaTracksJson:(NSString*)mediaTracksJson;
/**

    Derializes media track stats from JSON.

    @param mediaTrackJson The media track's stats JSON.
*/
+ (FMLiveSwitchMediaTrackStats*) fromJsonWithMediaTrackJson:(NSString*)mediaTrackJson;
/**

    Gets the track's estimated media quality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

    @param audio Whether these are audio stats.
*/
- (double) getMediaQualityWithAudio:(bool)audio;
- (instancetype) init;
/**

    Checks if a track is equivalent to this one.

    @param instance The track.
*/
- (bool) isEquivalentWithInstance:(FMLiveSwitchMediaTrackStats*)instance;
/**

    Gets the maximum bitrate.
    Set by the encoder.

*/
- (int) maxBitrate;
+ (FMLiveSwitchMediaTrackStats*) mediaTrackStats;
/**

    Gets the minimum bitrate.
    Set by the encoder.

*/
- (int) minBitrate;
/**

    Gets whether the track is muted.

*/
- (bool) muted;
/**

    Gets the first repaired RTP stream identifier.

*/
- (NSString*) repairedRtpStreamId;
/**

    Gets the repaired RTP stream identifiers.

*/
- (NSMutableArray*) repairedRtpStreamIds;
/**

    Gets the first RTP stream identifier.

*/
- (NSString*) rtpStreamId;
/**

    Gets the RTP stream identifiers.

*/
- (NSMutableArray*) rtpStreamIds;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Gets whether the track is stopped.
    Set by source.

*/
- (bool) stopped;
/**

    Gets the first synchronization source.

*/
- (long long) synchronizationSource;
/**

    Gets the synchronization sources.

*/
- (NSMutableArray*) synchronizationSources;
/**

    Serializes this to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array of media track stats to JSON.

    @param mediaTracks The media tracks' stats.
*/
+ (NSString*) toJsonArrayWithMediaTracks:(NSMutableArray*)mediaTracks;
/**

    Serializes media track stats to JSON.

    @param mediaTrack The media track's stats.
*/
+ (NSString*) toJsonWithMediaTrack:(FMLiveSwitchMediaTrackStats*)mediaTrack;

@end

/**

    Media source information.

*/
@interface FMLiveSwitchMediaSourceInfo : FMLiveSwitchInfo

/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes an array from JSON.

    @param mediaSourceInfosJson The serialized JSON.
    @return The deserialized array.
*/
+ (NSMutableArray*) fromJsonArrayWithMediaSourceInfosJson:(NSString*)mediaSourceInfosJson;
/**

    Deserializes an instance from JSON.

    @param mediaSourceInfoJson The serialized JSON.
    @return The deserialized instance.
*/
+ (FMLiveSwitchMediaSourceInfo*) fromJsonWithMediaSourceInfoJson:(NSString*)mediaSourceInfoJson;
/**

    Initializes a new instance of the FMLiveSwitchMediaSourceInfo class.

*/
- (instancetype) init;
/**

    Gets the media source input identifier.

*/
- (NSString*) inputId;
/**

    Gets the media source input name.

*/
- (NSString*) inputName;
/**

    Gets the media source label.

*/
- (NSString*) label;
/**

    Initializes a new instance of the FMLiveSwitchMediaSourceInfo class.

*/
+ (FMLiveSwitchMediaSourceInfo*) mediaSourceInfo;
/**

    Gets the whether the media source is muted.

*/
- (FMLiveSwitchNullableBool*) muted;
/**

    Gets the media source output format.

*/
- (FMLiveSwitchFormatInfo*) outputFormat;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the media source input identifier.

*/
- (void) setInputId:(NSString*)value;
/**

    Sets the media source input name.

*/
- (void) setInputName:(NSString*)value;
/**

    Sets the media source label.

*/
- (void) setLabel:(NSString*)value;
/**

    Sets the whether the media source is muted.

*/
- (void) setMuted:(FMLiveSwitchNullableBool*)value;
/**

    Sets the media source output format.

*/
- (void) setOutputFormat:(FMLiveSwitchFormatInfo*)value;
/**

    Sets the media source tag.

*/
- (void) setTag:(NSString*)value;
/**

    Gets the media source tag.

*/
- (NSString*) tag;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param mediaSourceInfos The array to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonArrayWithMediaSourceInfos:(NSMutableArray*)mediaSourceInfos;
/**

    Serializes an instance to JSON.

    @param mediaSourceInfo The instance to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonWithMediaSourceInfo:(FMLiveSwitchMediaSourceInfo*)mediaSourceInfo;

@end

/**

    A point (x and y coordinates).

*/
@interface FMLiveSwitchPoint : NSObject

/**

    Returns a string that represents this instance using format "{x},{y}".

*/
- (NSString*) description;
/**

    Gets the empty point (0,0).

*/
+ (FMLiveSwitchPoint*) empty;
/**

    Deserializes an instance from JSON.

    @param pointJson The JSON to deserialize.
    @return The deserialized point.
*/
+ (FMLiveSwitchPoint*) fromJsonWithPointJson:(NSString*)pointJson;
/**

    Initializes a new instance of the FMLiveSwitchPoint class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchPoint class.

    @param x The X coordinate.
    @param y The Y coordinate.
*/
- (instancetype) initWithX:(int)x y:(int)y;
/**

    Determines whether the specified point is equivalent.

    @param point The point.
*/
- (bool) isEquivalentWithPoint:(FMLiveSwitchPoint*)point;
/**

    Determines whether the two points are equivalent.

    @param point1 The first point.
    @param point2 The second point.
*/
+ (bool) isEquivalentWithPoint1:(FMLiveSwitchPoint*)point1 point2:(FMLiveSwitchPoint*)point2;
/**

    Initializes a new instance of the FMLiveSwitchPoint class.

*/
+ (FMLiveSwitchPoint*) point;
/**

    Initializes a new instance of the FMLiveSwitchPoint class.

    @param x The X coordinate.
    @param y The Y coordinate.
*/
+ (FMLiveSwitchPoint*) pointWithX:(int)x y:(int)y;
/**

    Sets the X coordinate.

*/
- (void) setX:(int)value;
/**

    Sets the Y coordinate.

*/
- (void) setY:(int)value;
/**

    Serializes this instance to JSON.

    @return 
            The serialized JSON.
            
*/
- (NSString*) toJson;
/**

    Serializes an instance to JSON.

    @param point The point.
    @return 
            The serialized JSON.
            
*/
+ (NSString*) toJsonWithPoint:(FMLiveSwitchPoint*)point;
/**

    Gets the X coordinate.

*/
- (int) x;
/**

    Gets the Y coordinate.

*/
- (int) y;

@end

/**

    A rectangle (size and origin).

*/
@interface FMLiveSwitchRectangle : NSObject

/**

    Returns a string that represents this instance using format "{origin}/{size}".

*/
- (NSString*) description;
/**

    Gets the empty rectangle (0,0/0x0).

*/
+ (FMLiveSwitchRectangle*) empty;
/**

    Deserializes an instance from JSON.

    @param rectangleJson The JSON to deserialize.
    @return The deserialized rectangle.
*/
+ (FMLiveSwitchRectangle*) fromJsonWithRectangleJson:(NSString*)rectangleJson;
/**

    Gets the size height.

*/
- (int) height;
/**

    Initializes a new instance of the FMLiveSwitchRectangle class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchRectangle class.

    @param origin The origin.
    @param size The size.
*/
- (instancetype) initWithOrigin:(FMLiveSwitchPoint*)origin size:(FMLiveSwitchSize*)size;
/**

    Determines whether the specified rectangle is equivalent.

    @param rectangle The rectangle.
*/
- (bool) isEquivalentWithRectangle:(FMLiveSwitchRectangle*)rectangle;
/**

    Determines whether the two rectangles are equivalent.

    @param rectangle1 The first rectangle.
    @param rectangle2 The second rectangle.
*/
+ (bool) isEquivalentWithRectangle1:(FMLiveSwitchRectangle*)rectangle1 rectangle2:(FMLiveSwitchRectangle*)rectangle2;
/**

    Gets the origin.

*/
- (FMLiveSwitchPoint*) origin;
/**

    Initializes a new instance of the FMLiveSwitchRectangle class.

*/
+ (FMLiveSwitchRectangle*) rectangle;
/**

    Initializes a new instance of the FMLiveSwitchRectangle class.

    @param origin The origin.
    @param size The size.
*/
+ (FMLiveSwitchRectangle*) rectangleWithOrigin:(FMLiveSwitchPoint*)origin size:(FMLiveSwitchSize*)size;
/**

    Sets the origin.

*/
- (void) setOrigin:(FMLiveSwitchPoint*)value;
/**

    Sets the size.

*/
- (void) setSize:(FMLiveSwitchSize*)value;
/**

    Gets the size.

*/
- (FMLiveSwitchSize*) size;
/**

    Serializes this instance to JSON.

    @return 
            The serialized JSON.
            
*/
- (NSString*) toJson;
/**

    Serializes an instance to JSON.

    @param rectangle The rectangle.
    @return 
            The serialized JSON.
            
*/
+ (NSString*) toJsonWithRectangle:(FMLiveSwitchRectangle*)rectangle;
/**

    Gets the size width.

*/
- (int) width;
/**

    Gets the origin X coordinate.

*/
- (int) x;
/**

    Gets the origin Y coordinate.

*/
- (int) y;

@end

/**

    Defines valid SDP address types.

*/
@interface FMLiveSwitchSdpAddressType : NSObject

/**

    Gets the SDP address type for the specified IP address.

    @param ipAddress The IP address.
*/
+ (NSString*) getAddressTypeForAddressWithIPAddress:(NSString*)ipAddress;
/**

    Gets the SDP address type meaning "IP version 4".

*/
+ (NSString*) ip4;
/**

    Gets the SDP address type meaning "IP version 6".

*/
+ (NSString*) ip6;

@end

@interface FMLiveSwitchSdpAttributeCategoryWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchSdpAttributeCategory)value;

@end

@interface FMLiveSwitchSdpAttributeTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchSdpAttributeType)value;

@end

/**

    An SDP bandwidth element.

*/
@interface FMLiveSwitchSdpBandwidth : NSObject

/**

    Gets the type of bandwidth. See FMLiveSwitchSdpBandwidth#bandwidthType for possible values.

*/
- (NSString*) bandwidthType;
/**

    Initializes a new instance of the FMLiveSwitchSdpBandwidth class.

    @param bandwidthType The type of bandwidth. See FMLiveSwitchSdpBandwidth#bandwidthType for possible values.
    @param value The bandwidth, typically in kilobits per second.
*/
+ (FMLiveSwitchSdpBandwidth*) bandwidthWithBandwidthType:(NSString*)bandwidthType value:(long long)value;
/**

    Converts this instance to a string.

*/
- (NSString*) description;
/**

    Initializes a new instance of the FMLiveSwitchSdpBandwidth class.

    @param bandwidthType The type of bandwidth. See FMLiveSwitchSdpBandwidth#bandwidthType for possible values.
    @param value The bandwidth, typically in kilobits per second.
*/
- (instancetype) initWithBandwidthType:(NSString*)bandwidthType value:(long long)value;
/**

    Creates an FMLiveSwitchSdpBandwidth instance from a string.

    @param s The string to parse.
*/
+ (FMLiveSwitchSdpBandwidth*) parseWithS:(NSString*)s;
/**

    Gets the bandwidth, typically in kilobits per second.

*/
- (long long) value;

@end

/**

    Defines valid SDP bandwidth types.

*/
@interface FMLiveSwitchSdpBandwidthType : NSObject

/**

    Gets the SDP bandwidth type meaning "Application Specific".

*/
+ (NSString*) applicationSpecific;
/**

    Gets the SDP bandwidth type meaning "Conference Total".

*/
+ (NSString*) conferenceTotal;
/**

    Gets the SDP bandwidth type meaning "RTCP Receivers".

*/
+ (NSString*) rtcpReceivers;
/**

    Gets the SDP bandwidth type meaning "RTCP Senders".

*/
+ (NSString*) rtcpSenders;
/**

    Gets the SDP bandwidth type meaning "Transport Independent Application Specific Maximum".

*/
+ (NSString*) transportIndependentApplicationSpecificMaximum;

@end

/**

    An SDP encryption key element.

*/
@interface FMLiveSwitchSdpEncryptionKey : NSObject

/**

    Converts this instance to a string.

*/
- (NSString*) description;
+ (FMLiveSwitchSdpEncryptionKey*) encryptionKey;
- (instancetype) init;
/**

    Creates an FMLiveSwitchSdpEncryptionKey instance from a string.

    @param s The string to parse.
*/
+ (FMLiveSwitchSdpEncryptionKey*) parseWithS:(NSString*)s;

@end

/**

    An SDP encryption key with a method of "base64".

*/
@interface FMLiveSwitchSdpBase64EncryptionKey : FMLiveSwitchSdpEncryptionKey

/**

    Initializes a new instance of the FMLiveSwitchSdpBase64EncryptionKey class.

    @param encodedEncryptionKey The base64-encoded encryption key.
*/
+ (FMLiveSwitchSdpBase64EncryptionKey*) base64EncryptionKeyWithEncodedEncryptionKey:(NSString*)encodedEncryptionKey;
/**

    Gets the base64-encoded encryption key.

*/
- (NSString*) encodedEncryptionKey;
/**

    Initializes a new instance of the FMLiveSwitchSdpBase64EncryptionKey class.

    @param encodedEncryptionKey The base64-encoded encryption key.
*/
- (instancetype) initWithEncodedEncryptionKey:(NSString*)encodedEncryptionKey;

@end

/**

    Defined in draft-ietf-mmusic-sdp-bundle-negotiation.
    Attribute is used to identify that a gioven media description can only be used  in bundled group.
    Its formatting in SDP is described by the following BNF:
    Name: bundle-only
    
    Value: N/A
    
    Usage Level: media
    
    Charset Dependent: no
    
    Example:
    
    a=bundle-only

*/
@interface FMLiveSwitchSdpBundleOnlyAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpBundleOnlyAttribute class.

*/
+ (FMLiveSwitchSdpBundleOnlyAttribute*) bundleOnlyAttribute;
/**

    Initializes a new instance of the FMLiveSwitchSdpGroupAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpBundleOnlyAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpBundleOnlyAttribute class.

*/
- (instancetype) init;

@end

/**

    This attribute gives the dot-separated hierarchical category of
    the session.  This is to enable a receiver to filter unwanted
    sessions by category.  There is no central registry of
    categories.  It is a session-level attribute, and it is not
    dependent on charset.

*/
@interface FMLiveSwitchSdpCategoryAttribute : FMLiveSwitchSdpAttribute

/**

    Gets the dot-separated hierarchical category of the session.

*/
- (NSString*) category;
/**

    Initializes a new instance of the FMLiveSwitchSdpCategoryAttribute class.

    @param category The dot-separated hierarchical category of the session.
*/
+ (FMLiveSwitchSdpCategoryAttribute*) categoryAttributeWithCategory:(NSString*)category;
/**

    Initializes a new instance of the FMLiveSwitchSdpCategoryAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpCategoryAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpCategoryAttribute class.

    @param category The dot-separated hierarchical category of the session.
*/
- (instancetype) initWithCategory:(NSString*)category;

@end

/**

    This specifies the character set to be used to display the
    session name and information data.  By default, the ISO-10646
    character set in UTF-8 encoding is used.  If a more compact
    representation is required, other character sets may be used.
    For example, the ISO 8859-1 is specified with the following SDP
    attribute:
    
    a=charset:ISO-8859-1

*/
@interface FMLiveSwitchSdpCharacterSetAttribute : FMLiveSwitchSdpAttribute

/**

    Gets the character set to be used to display the session name and information data.

*/
- (NSString*) characterSet;
/**

    Initializes a new instance of the FMLiveSwitchSdpCharacterSetAttribute class.

    @param characterSet The character set to be used to display the session name and information data.
*/
+ (FMLiveSwitchSdpCharacterSetAttribute*) characterSetAttributeWithCharacterSet:(NSString*)characterSet;
/**

    Initializes a new instance of the FMLiveSwitchSdpCharacterSetAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpCharacterSetAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpCharacterSetAttribute class.

    @param characterSet The character set to be used to display the session name and information data.
*/
- (instancetype) initWithCharacterSet:(NSString*)characterSet;

@end

/**

    An SDP encryption key with a method of "clear".

*/
@interface FMLiveSwitchSdpClearEncryptionKey : FMLiveSwitchSdpEncryptionKey

/**

    Initializes a new instance of the FMLiveSwitchSdpClearEncryptionKey class.

    @param encryptionKey The untransformed encryption key.
*/
+ (FMLiveSwitchSdpClearEncryptionKey*) clearEncryptionKey:(NSString*)encryptionKey;
/**

    Gets the untransformed encryption key.

*/
- (NSString*) encryptionKey;
/**

    Initializes a new instance of the FMLiveSwitchSdpClearEncryptionKey class.

    @param encryptionKey The untransformed encryption key.
*/
- (instancetype) initWithEncryptionKey:(NSString*)encryptionKey;

@end

/**

    Defines valid SDP conference types.

*/
@interface FMLiveSwitchSdpConferenceType : NSObject

/**

    Gets the SDP conference type meaning "Broadcast", which should imply receive-only.

*/
+ (NSString*) broadcast;
/**

    Gets the SDP conference type meaning "H332", which should imply receive-only and
    indicate that this loosely coupled session is part of an H.332 session.

*/
+ (NSString*) h332;
/**

    Gets the SDP conference type meaning "Meeting", which should imply send-receive.

*/
+ (NSString*) meeting;
/**

    Gets the SDP conference type meaning "Moderated", which should indicate the use of
    a floor control tool and that the media tools are started so as to mute
    new sites joining the conference.

*/
+ (NSString*) moderated;
/**

    Gets the SDP conference type meaning "Test", which should imply that unless
    explicitly requested otherwise, receivers can safely avoid displaying
    this session description to users.

*/
+ (NSString*) test;

@end

/**

    This specifies the type of the conference.  Suggested values
    are "broadcast", "meeting", "moderated", "test", and "H332".
    "recvonly" should be the default for "type:broadcast" sessions,
    "type:meeting" should imply "sendrecv", and "type:moderated"
    should indicate the use of a floor control tool and that the
    media tools are started so as to mute new sites joining the
    conference.

*/
@interface FMLiveSwitchSdpConferenceTypeAttribute : FMLiveSwitchSdpAttribute

/**

    Gets the type of the conference. See FMLiveSwitchSdpConferenceTypeAttribute#conferenceType for possible values.

*/
- (NSString*) conferenceType;
/**

    Initializes a new instance of the FMLiveSwitchSdpConferenceTypeAttribute class.

    @param conferenceType The type of the conference. See FMLiveSwitchSdpConferenceTypeAttribute#conferenceType for possible values.
*/
+ (FMLiveSwitchSdpConferenceTypeAttribute*) conferenceTypeAttributeWithConferenceType:(NSString*)conferenceType;
/**

    Initializes a new instance of the FMLiveSwitchSdpConferenceTypeAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpConferenceTypeAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpConferenceTypeAttribute class.

    @param conferenceType The type of the conference. See FMLiveSwitchSdpConferenceTypeAttribute#conferenceType for possible values.
*/
- (instancetype) initWithConferenceType:(NSString*)conferenceType;

@end

/**

    An SDP connection data element.

*/
@interface FMLiveSwitchSdpConnectionData : NSObject

/**

    Gets the type of the address. See FMLiveSwitchSdpConnectionData#addressType for possible values.

*/
- (NSString*) addressType;
/**

    Gets the connection address.

*/
- (NSString*) connectionAddress;
/**

    Initializes a new instance of the FMLiveSwitchSdpConnectionData class.

    @param connectionAddress The connection address.
*/
+ (FMLiveSwitchSdpConnectionData*) connectionDataWithConnectionAddress:(NSString*)connectionAddress;
/**

    Converts this instance to a string.

*/
- (NSString*) description;
/**

    Initializes a new instance of the FMLiveSwitchSdpConnectionData class.

    @param connectionAddress The connection address.
*/
- (instancetype) initWithConnectionAddress:(NSString*)connectionAddress;
/**

    Gets the type of network. See FMLiveSwitchSdpConnectionData#networkType for possible values.

*/
- (NSString*) networkType;
/**

    Creates an FMLiveSwitchSdpConnectionData instance from a string.

    @param s The string to parse.
*/
+ (FMLiveSwitchSdpConnectionData*) parseWithS:(NSString*)s;
/**

    Sets the type of the address. See FMLiveSwitchSdpConnectionData#addressType for possible values.

*/
- (void) setAddressType:(NSString*)value;
/**

    Sets the connection address.

*/
- (void) setConnectionAddress:(NSString*)value;
/**

    Sets the type of network. See FMLiveSwitchSdpConnectionData#networkType for possible values.

*/
- (void) setNetworkType:(NSString*)value;
/**

    Updates the connection address.

    @param connectionAddress The connection address.
*/
- (void) updateWithConnectionAddress:(NSString*)connectionAddress;

@end

/**

    This gives the maximum amount of media that can be encapsulated
    in each packet, expressed as time in milliseconds.  The time
    SHALL be calculated as the sum of the time the media present in
    the packet represents.  For frame-based codecs, the time SHOULD
    be an integer multiple of the frame size.  This attribute is
    probably only meaningful for audio data, but may be used with
    other media types if it makes sense.  It is a media-level
    attribute, and it is not dependent on charset.  Note that this
    attribute was introduced after RFC 2327, and non-updated
    implementations will ignore this attribute.

*/
@interface FMLiveSwitchSdpCryptoAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpCryptoAttribute class.

    @param tag The tag.
    @param cryptoSuite The crypto suite.
*/
+ (FMLiveSwitchSdpCryptoAttribute*) cryptoAttributeWithTag:(int)tag cryptoSuite:(NSString*)cryptoSuite;
/**

    Gets the crypto suite. See FMLiveSwitchSdpCryptoAttribute#cryptoSuite for possible values.

*/
- (NSString*) cryptoSuite;
/**

    Initializes a new instance of the FMLiveSwitchSdpCryptoAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpCryptoAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Gets the key from the "inline" key parameter.

*/
- (FMLiveSwitchDataBuffer*) getKey;
/**

    Gets the salt from the "inline" key parameter.

*/
- (FMLiveSwitchDataBuffer*) getSalt;
/**

    Initializes a new instance of the FMLiveSwitchSdpCryptoAttribute class.

    @param tag The tag.
    @param cryptoSuite The crypto suite.
*/
- (instancetype) initWithTag:(int)tag cryptoSuite:(NSString*)cryptoSuite;
/**

    Gets the key parameters.

*/
- (NSMutableDictionary<NSString*,NSString*>*) keyParams;
/**

    Gets the session parameters.

*/
- (NSMutableArray<NSString*>*) sessionParams;
/**

    Sets the key and salt for the "inline" key parameter.

    @param key The key.
    @param salt The salt.
*/
- (FMLiveSwitchSdpCryptoAttribute*) setKeySaltWithKey:(NSMutableData*)key salt:(NSMutableData*)salt;
/**

    Sets the tag.

*/
- (void) setTag:(int)value;
/**

    Gets the tag.

*/
- (int) tag;

@end

/**

    Defines valid SDP crypto key methods.

*/
@interface FMLiveSwitchSdpCryptoKeyMethod : NSObject

/**

    Gets the SDP crypto key method meaning "inline".

*/
+ (NSString*) inline;

@end

/**

    Defines valid SDP crypto session parameters.

*/
@interface FMLiveSwitchSdpCryptoSessionParam : NSObject

/**

    Gets the SDP crypto session parameter meaning "unauthenticated SRTP".

*/
+ (NSString*) unauthenticatedSRTP;
/**

    Gets the SDP crypto session parameter meaning "unencrypted SRTCP".

*/
+ (NSString*) unencryptedSRTCP;
/**

    Gets the SDP crypto session parameter meaning "unencrypted SRTP".

*/
+ (NSString*) unencryptedSRTP;

@end

/**

    Defines valid SDP crypto suites.

*/
@interface FMLiveSwitchSdpCryptoSuite : NSObject

/**

    Gets the SDP crypto suite meaning "AES-CM 128-bit cipher and HMAC-SHA1 message authentication with a 32-bit authentication tag".

*/
+ (NSString*) aesCm128HmacSha132;
/**

    Gets the SDP crypto suite meaning "AES-CM 128-bit cipher and HMAC-SHA1 message authentication with an 80-bit authentication tag".

*/
+ (NSString*) aesCM128HmacSha180;
/**

    Converts an EncryptionMode enum to a crypto-suite string.

    @param encryptionMode The EncryptionMode enum.
    @return The crypto-suite string.
*/
+ (NSString*) getCryptoSuiteWithEncryptionMode:(FMLiveSwitchEncryptionMode)encryptionMode;
/**

    Converts a crypto-suite string to an EncryptionMode enum.

    @param cryptoSuite The crypto-suite string.
    @return The EncryptionMode enum.
*/
+ (FMLiveSwitchEncryptionMode) getEncryptionModeWithCryptoSuite:(NSString*)cryptoSuite;
/**

    Gets the SDP crypto suite meaning "NULL cipher and HMAC-SHA1 message authentication with a 32-bit authentication tag".

*/
+ (NSString*) nullHmacSha132;
/**

    Gets the SDP crypto suite meaning "NULL cipher and HMAC-SHA1 message authentication with an 80-bit authentication tag".

*/
+ (NSString*) nullHmacSha180;

@end

/**

    This specifies the mode in which tools should be started.

*/
@interface FMLiveSwitchSdpDirectionAttribute : FMLiveSwitchSdpAttribute

+ (FMLiveSwitchSdpDirectionAttribute*) directionAttribute;
/**

    Creates a DirectionAttribute for a required direction.

    @param direction Direction.
*/
+ (FMLiveSwitchSdpDirectionAttribute*) generateDirectionAttributeWithDirection:(FMLiveSwitchStreamDirection)direction;
- (instancetype) init;
/**

    Gets the stream direction.

*/
- (FMLiveSwitchStreamDirection) streamDirection;

@end

/**

    This attribute allows parameters that are specific to a
    particular format to be conveyed in a way that SDP does not
    have to understand them.  The format must be one of the formats
    specified for the media.  Format-specific parameters may be any
    set of parameters required to be conveyed by SDP and given
    unchanged to the media tool that will use this format.  At most
    one instance of this attribute is allowed for each format.

*/
@interface FMLiveSwitchSdpFormatParametersAttribute : FMLiveSwitchSdpAttribute

/**

    Creates a dictionary map from the format specific parameters.

*/
- (NSMutableDictionary<NSString*,NSString*>*) deserializeFormatSpecificParameters;
/**

    Gets the format.

*/
- (int) format;
/**

    Initializes a new instance of the FMLiveSwitchSdpFormatParametersAttribute class.

    @param format The format.
*/
+ (FMLiveSwitchSdpFormatParametersAttribute*) formatParametersAttributeWithFormat:(int)format;
/**

    Initializes a new instance of the FMLiveSwitchSdpFormatParametersAttribute class.

    @param format The format.
    @param formatSpecificParameters The format-specific parameters.
*/
+ (FMLiveSwitchSdpFormatParametersAttribute*) formatParametersAttributeWithFormat:(int)format formatSpecificParameters:(NSString*)formatSpecificParameters;
/**

    Gets the format-specific parameters.

*/
- (NSString*) formatSpecificParameters;
/**

    Initializes a new instance of the FMLiveSwitchSdpFormatParametersAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpFormatParametersAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Gets a format specific parameter.

    @param key The key.
*/
- (NSString*) getFormatSpecificParameterWithKey:(NSString*)key;
/**

    Initializes a new instance of the FMLiveSwitchSdpFormatParametersAttribute class.

    @param format The format.
*/
- (instancetype) initWithFormat:(int)format;
/**

    Initializes a new instance of the FMLiveSwitchSdpFormatParametersAttribute class.

    @param format The format.
    @param formatSpecificParameters The format-specific parameters.
*/
- (instancetype) initWithFormat:(int)format formatSpecificParameters:(NSString*)formatSpecificParameters;
/**

    Updates the format specific parameters based on a dictionary map.

    @param map The map.
*/
- (void) serializeFormatSpecificParametersWithMap:(NSMutableDictionary<NSString*,NSString*>*)map;
/**

    Sets the format.

*/
- (void) setFormat:(int)value;
/**

    Sets a format specific parameter.

    @param key The key.
    @param value The value.
*/
- (void) setFormatSpecificParameterWithKey:(NSString*)key value:(NSString*)value;
/**

    Tries to get a format specific parameter.

    @param key The key.
    @param value The value.
*/
- (bool) tryGetFormatSpecificParameterWithKey:(NSString*)key value:(NSString**)value;
/**

    Unsets a format specific parameter.

    @param key The key.
*/
- (bool) unsetFormatSpecificParameterWithKey:(NSString*)key;

@end

/**

    This gives the maximum video frame rate in frames/sec.  It is
    intended as a recommendation for the encoding of video data.
    Decimal representations of fractional values using the notation
    "integer.fraction" are allowed.  It is a media-level
    attribute, defined only for video media, and it is not
    dependent on charset.

*/
@interface FMLiveSwitchSdpFrameRateAttribute : FMLiveSwitchSdpAttribute

/**

    Gets the maximum video frame rate in frames/second.

*/
- (NSString*) frameRate;
/**

    Initializes a new instance of the FMLiveSwitchSdpFrameRateAttribute class.

    @param frameRate The maximum video frame rate in frames/second.
*/
+ (FMLiveSwitchSdpFrameRateAttribute*) frameRateAttributeWithFrameRate:(NSString*)frameRate;
/**

    Initializes a new instance of the FMLiveSwitchSdpFrameRateAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpFrameRateAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpFrameRateAttribute class.

    @param frameRate The maximum video frame rate in frames/second.
*/
- (instancetype) initWithFrameRate:(NSString*)frameRate;

@end

/**

    A bundle group of SDP Media Description elements.

*/
@interface FMLiveSwitchSdpBundleGroup : NSObject

/**

    Adds a media description to this bundle group.

    @param mediaDescription 
*/
- (void) addMediaDescription:(FMLiveSwitchSdpMediaDescription*)mediaDescription;
/**

    Creates a BundleGroup object.

    @param groupType 
*/
+ (FMLiveSwitchSdpBundleGroup*) bundleGroupWithGroupType:(FMLiveSwitchSdpGroupSemanticsType)groupType;
/**

    Gets a value indicating whether this group contains Bundle-only elements.

*/
- (bool) bundleOnly;
/**

    Gets the semntic type of this group.

*/
- (FMLiveSwitchSdpGroupSemanticsType) groupType;
/**

    Creates a BundleGroup object.

    @param groupType 
*/
- (instancetype) initWithGroupType:(FMLiveSwitchSdpGroupSemanticsType)groupType;
/**

    Gets the mecia descriptions in this bundle group.

*/
- (NSMutableArray*) mediaDescriptions;
/**

    Gets media description identifiers associated with this bundle group.

*/
- (NSMutableArray*) mids;
/**

    Sets the tagged m-section of this bundle group.

*/
- (void) setTaggedMSection:(FMLiveSwitchSdpMediaDescription*)value;
/**

    Gets the tagged m-section of this bundle group.

*/
- (FMLiveSwitchSdpMediaDescription*) taggedMSection;

@end

/**

    Defined in RFC 3388. Attribute is used for grouping together different media streams.
    Its formatting in SDP is described by the following BNF:
    group-attribute    = "a=group:" semantics
    * (space identification-tag)
    semantics          = "LS" | "FID" | "BUNDLE"

*/
@interface FMLiveSwitchSdpGroupAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpGroupAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpGroupAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpGroupAttribute class.

    @param type The semantics type.
    @param ids Group identification ID tags.
*/
+ (FMLiveSwitchSdpGroupAttribute*) groupAttributeWithType:(FMLiveSwitchSdpGroupSemanticsType)type ids:(NSMutableArray*)ids;
/**

    Gets the group identification tags.

*/
- (NSMutableArray*) ids;
/**

    Initializes a new instance of the FMLiveSwitchSdpGroupAttribute class.

    @param type The semantics type.
    @param ids Group identification ID tags.
*/
- (instancetype) initWithType:(FMLiveSwitchSdpGroupSemanticsType)type ids:(NSMutableArray*)ids;
/**

    Gets the semantics.

*/
- (FMLiveSwitchSdpGroupSemanticsType) semantics;

@end

@interface FMLiveSwitchSdpGroupSemanticsTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchSdpGroupSemanticsType)value;

@end

/**

    The candidate attribute is a media-level attribute only.  It contains
    a transport address for a candidate that can be used for connectivity
    checks.

*/
@interface FMLiveSwitchSdpIceCandidateAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpIceCandidateAttribute class.

    @param foundation The candidate's foundation.
    @param priority The priority of the candidate.
    @param connectionAddress The IP address of the candidate.
    @param port The port of the candidate.
    @param candidateType The type of the candidate. See FMLiveSwitchSdpIceCandidateAttribute#candidateType for possible values.
    @param componentId The component identifier.
*/
+ (FMLiveSwitchSdpIceCandidateAttribute*) candidateAttributeWithFoundation:(NSString*)foundation priority:(long long)priority connectionAddress:(NSString*)connectionAddress port:(int)port candidateType:(NSString*)candidateType componentId:(int)componentId;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceCandidateAttribute class.

    @param foundation The candidate's foundation.
    @param priority The priority of the candidate.
    @param connectionAddress The IP address of the candidate.
    @param port The port of the candidate.
    @param candidateType The type of the candidate. See FMLiveSwitchSdpIceCandidateAttribute#candidateType for possible values.
    @param relatedAddress The IP address related to the candidate.
    @param relatedPort The port related to the candidate.
    @param protocol The protocol.
    @param componentId The ID of the component for which this is a candidate.
*/
+ (FMLiveSwitchSdpIceCandidateAttribute*) candidateAttributeWithFoundation:(NSString*)foundation priority:(long long)priority connectionAddress:(NSString*)connectionAddress port:(int)port candidateType:(NSString*)candidateType relatedAddress:(NSString*)relatedAddress relatedPort:(int)relatedPort protocol:(NSString*)protocol componentId:(int)componentId;
/**

    Gets the type of the candidate. See FMLiveSwitchSdpIceCandidateAttribute#candidateType for possible values.

*/
- (NSString*) candidateType;
/**

    Gets the ID of the component for which this is a candidate.

*/
- (int) componentId;
/**

    Gets the IP address of the candidate.

*/
- (NSString*) connectionAddress;
/**

    Gets the extensions.

*/
- (NSMutableDictionary<NSString*,NSString*>*) extensions;
/**

    Gets the candidate's foundation.

*/
- (NSString*) foundation;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceCandidateAttribute class.

    @param value The attribute as a string.
*/
+ (FMLiveSwitchSdpIceCandidateAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceCandidateAttribute class.

    @param foundation The candidate's foundation.
    @param priority The priority of the candidate.
    @param connectionAddress The IP address of the candidate.
    @param port The port of the candidate.
    @param candidateType The type of the candidate. See FMLiveSwitchSdpIceCandidateAttribute#candidateType for possible values.
    @param componentId The component identifier.
*/
- (instancetype) initWithFoundation:(NSString*)foundation priority:(long long)priority connectionAddress:(NSString*)connectionAddress port:(int)port candidateType:(NSString*)candidateType componentId:(int)componentId;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceCandidateAttribute class.

    @param foundation The candidate's foundation.
    @param priority The priority of the candidate.
    @param connectionAddress The IP address of the candidate.
    @param port The port of the candidate.
    @param candidateType The type of the candidate. See FMLiveSwitchSdpIceCandidateAttribute#candidateType for possible values.
    @param relatedAddress The IP address related to the candidate.
    @param relatedPort The port related to the candidate.
    @param protocol The protocol.
    @param componentId The ID of the component for which this is a candidate.
*/
- (instancetype) initWithFoundation:(NSString*)foundation priority:(long long)priority connectionAddress:(NSString*)connectionAddress port:(int)port candidateType:(NSString*)candidateType relatedAddress:(NSString*)relatedAddress relatedPort:(int)relatedPort protocol:(NSString*)protocol componentId:(int)componentId;
/**

    Gets the port of the candidate.

*/
- (int) port;
/**

    Gets the priority of the candidate.

*/
- (long long) priority;
/**

    Gets the protocol of this candidate.

*/
- (NSString*) protocol;
/**

    Gets the IP address related to the candidate.

*/
- (NSString*) relatedAddress;
/**

    Gets the port related to the candidate.

*/
- (int) relatedPort;
/**

    Sets the type of the candidate. See FMLiveSwitchSdpIceCandidateAttribute#candidateType for possible values.

*/
- (void) setCandidateType:(NSString*)value;
/**

    Sets the ID of the component for which this is a candidate.

*/
- (void) setComponentId:(int)value;
/**

    Sets the IP address of the candidate.

*/
- (void) setConnectionAddress:(NSString*)value;
/**

    Sets the candidate's foundation.

*/
- (void) setFoundation:(NSString*)value;
/**

    Sets the port of the candidate.

*/
- (void) setPort:(int)value;
/**

    Sets the priority of the candidate.

*/
- (void) setPriority:(long long)value;
/**

    Sets the protocol of this candidate.

*/
- (void) setProtocol:(NSString*)value;
/**

    Sets the IP address related to the candidate.

*/
- (void) setRelatedAddress:(NSString*)value;
/**

    Sets the port related to the candidate.

*/
- (void) setRelatedPort:(int)value;

@end

/**

    Defines valid SDP candidate types.

*/
@interface FMLiveSwitchSdpIceCandidateType : NSObject

/**

    Gets the SDP candidate type meaning "Host".

*/
+ (NSString*) host;
/**

    Gets the SDP candidate type meaning "Peer Reflexive".

*/
+ (NSString*) peerReflexive;
/**

    Gets the SDP candidate type meaning "Relayed".

*/
+ (NSString*) relayed;
/**

    Gets the SDP candidate type meaning "Server Reflexive".

*/
+ (NSString*) serverReflexive;

@end

/**

    The SDP session attribute "fingerprint" provides an encryption
    certificate fingerprint to a remote peer for use with DTLS.

*/
@interface FMLiveSwitchSdpIceFingerprintAttribute : FMLiveSwitchSdpAttribute

/**

    Gets the fingerprint.

*/
- (NSString*) fingerprint;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceFingerprintAttribute class.

    @param hashFunction The hash function.
    @param fingerprint The fingerprint.
*/
+ (FMLiveSwitchSdpIceFingerprintAttribute*) fingerprintAttributeWithHashFunction:(NSString*)hashFunction fingerprint:(NSString*)fingerprint;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceFingerprintAttribute class.

    @param value The attribute as a string.
*/
+ (FMLiveSwitchSdpIceFingerprintAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Gets the hash function (i.e. sha-256).

*/
- (NSString*) hashFunction;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceFingerprintAttribute class.

    @param hashFunction The hash function.
    @param fingerprint The fingerprint.
*/
- (instancetype) initWithHashFunction:(NSString*)hashFunction fingerprint:(NSString*)fingerprint;

@end

/**

    "ice-lite" is a session-level attribute only, and indicates that an
    agent is a lite implementation.

*/
@interface FMLiveSwitchSdpIceLiteAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpIceLiteAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpIceLiteAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceLiteAttribute class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceLiteAttribute class.

*/
+ (FMLiveSwitchSdpIceLiteAttribute*) liteAttribute;

@end

/**

    "ice-mismatch" is a media-level
    attribute only, and when present in an answer, indicates that the
    offer arrived with a default destination for a media component that
    didn't have a corresponding candidate attribute.

*/
@interface FMLiveSwitchSdpIceMismatchAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpIceMismatchAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpIceMismatchAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceMismatchAttribute class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceMismatchAttribute class.

*/
+ (FMLiveSwitchSdpIceMismatchAttribute*) mismatchAttribute;

@end

/**

    The "ice-options" attribute is a session-level attribute.  It
    contains a series of tokens that identify the options supported by
    the agent.

*/
@interface FMLiveSwitchSdpIceOptionsAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpIceOptionsAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpIceOptionsAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceOptionsAttribute class.

    @param tags The tokens that identify options supported by the agent.
*/
- (instancetype) initWithTags:(NSMutableArray<FMLiveSwitchSdpIceOptionTag*>*)tags;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceOptionsAttribute class.

    @param tags The tokens that identify options supported by the agent.
*/
+ (FMLiveSwitchSdpIceOptionsAttribute*) optionsAttributeWithTags:(NSMutableArray<FMLiveSwitchSdpIceOptionTag*>*)tags;
/**

    Sets the tokens that identify options supported by the agent.

*/
- (void) setTags:(NSMutableArray<FMLiveSwitchSdpIceOptionTag*>*)value;
/**

    Sets a value indicating whether trickle-ice is supported.

*/
- (void) setTrickleOptionSet:(bool)value;
/**

    Gets the tokens that identify options supported by the agent.

*/
- (NSMutableArray<FMLiveSwitchSdpIceOptionTag*>*) tags;
/**

    Gets a value indicating whether trickle-ice is supported.

*/
- (bool) trickleOptionSet;

@end

/**

    A tag for an FMLiveSwitchSdpIceOptionsAttribute.

*/
@interface FMLiveSwitchSdpIceOptionTag : NSObject

/**

    Gets the string representation of this tag.

*/
- (NSString*) description;
- (instancetype) init;
+ (FMLiveSwitchSdpIceOptionTag*) optionTag;
/**

    Generates a tag object from a string.

    @param tagString The tag string.
*/
+ (FMLiveSwitchSdpIceOptionTag*) parseWithTagString:(NSString*)tagString;
/**

    Sets the type of this tag.

*/
- (void) setType:(FMLiveSwitchSdpIceOptionTagType)value;
/**

    Gets the "trickle" option string.

*/
+ (NSString*) trickle;
/**

    Gets the type of this tag.

*/
- (FMLiveSwitchSdpIceOptionTagType) type;

@end

@interface FMLiveSwitchSdpIceOptionTagTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchSdpIceOptionTagType)value;

@end

/**

    The "ice-pwd" attribute conveys the password used by
    ICE for message integrity.

*/
@interface FMLiveSwitchSdpIcePasswordAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpIcePasswordAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpIcePasswordAttribute*) fromAttributeValue:(NSString*)value;
/**

    Generates a random password.

*/
+ (NSString*) generatePassword;
/**

    Gets the value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpIcePasswordAttribute class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchSdpIcePasswordAttribute class.

    @param password The password used by ICE for message integrity.
*/
- (instancetype) initWithPassword:(NSString*)password;
/**

    Gets the password used by ICE for message integrity.

*/
- (NSString*) password;
/**

    Initializes a new instance of the FMLiveSwitchSdpIcePasswordAttribute class.

*/
+ (FMLiveSwitchSdpIcePasswordAttribute*) passwordAttribute;
/**

    Initializes a new instance of the FMLiveSwitchSdpIcePasswordAttribute class.

    @param password The password used by ICE for message integrity.
*/
+ (FMLiveSwitchSdpIcePasswordAttribute*) passwordAttributeWithPassword:(NSString*)password;

@end

/**

    An SDP remote candidate element.

*/
@interface FMLiveSwitchSdpIceRemoteCandidate : NSObject

/**

    Gets the ID of the component for which this is a remote candidate.

*/
- (int) componentId;
/**

    Gets the IP address of the remote candidate.

*/
- (NSString*) connectionAddress;
/**

    Converts this instance to a string.

*/
- (NSString*) description;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceRemoteCandidate class.

    @param componentId The ID of the component for which this is a remote candidate.
    @param connectionAddress The IP address of the remote candidate.
    @param port The port of the remote candidate.
*/
- (instancetype) initWithComponentId:(int)componentId connectionAddress:(NSString*)connectionAddress port:(int)port;
/**

    Creates an FMLiveSwitchSdpIceRemoteCandidate instance from a string.

    @param s The string to parse.
*/
+ (FMLiveSwitchSdpIceRemoteCandidate*) parseWithS:(NSString*)s;
/**

    Gets the port of the remote candidate.

*/
- (int) port;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceRemoteCandidate class.

    @param componentId The ID of the component for which this is a remote candidate.
    @param connectionAddress The IP address of the remote candidate.
    @param port The port of the remote candidate.
*/
+ (FMLiveSwitchSdpIceRemoteCandidate*) remoteCandidateWithComponentId:(int)componentId connectionAddress:(NSString*)connectionAddress port:(int)port;

@end

/**

    The attribute contains a connection-address and port for each
    component.  The ordering of components is irrelevant.  However, a
    value MUST be present for each component of a media stream.  This
    attribute MUST be included in an offer by a controlling agent for a
    media stream that is Completed, and MUST NOT be included in any other
    case.

*/
@interface FMLiveSwitchSdpIceRemoteCandidatesAttribute : FMLiveSwitchSdpAttribute

/**

    Gets the array of remote candidates.

*/
- (NSMutableArray*) candidates;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceRemoteCandidatesAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpIceRemoteCandidatesAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceRemoteCandidatesAttribute class.

    @param candidates The array of remote candidates.
*/
- (instancetype) initWithCandidates:(NSMutableArray*)candidates;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceRemoteCandidatesAttribute class.

    @param candidates The array of remote candidates.
*/
+ (FMLiveSwitchSdpIceRemoteCandidatesAttribute*) remoteCandidatesAttributeWithCandidates:(NSMutableArray*)candidates;

@end

/**

    Defines valid SDP transport protocols.

*/
@interface FMLiveSwitchSdpIceTransportProtocol : NSObject

/**

    Gets the SDP transport protocol meaning "tcp".

*/
+ (NSString*) tcp;
/**

    Gets the SDP transport protocol meaning "udp".

*/
+ (NSString*) udp;

@end

/**


*/
@interface FMLiveSwitchSdpIceTrickleIceOptionTag : FMLiveSwitchSdpIceOptionTag

/**

    Gets the string representation of this tag

*/
- (NSString*) description;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceTrickleIceOptionTag class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceTrickleIceOptionTag class.

*/
+ (FMLiveSwitchSdpIceTrickleIceOptionTag*) trickleIceOptionTag;

@end

/**

    The "ice-ufrag" attribute conveys the username fragment
    used by ICE for message integrity.

*/
@interface FMLiveSwitchSdpIceUfragAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpIceUfragAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpIceUfragAttribute*) fromAttributeValue:(NSString*)value;
/**

    Generates a username fragment.

*/
+ (NSString*) generateUfrag;
/**

    Gets the value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceUfragAttribute class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceUfragAttribute class.

    @param ufrag The username fragment used by ICE for message integrity.
*/
- (instancetype) initWithUfrag:(NSString*)ufrag;
/**

    Gets the username fragment used by ICE for message integrity.

*/
- (NSString*) ufrag;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceUfragAttribute class.

*/
+ (FMLiveSwitchSdpIceUfragAttribute*) ufragAttribute;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceUfragAttribute class.

    @param ufrag The username fragment used by ICE for message integrity.
*/
+ (FMLiveSwitchSdpIceUfragAttribute*) ufragAttributeWithUfrag:(NSString*)ufrag;

@end

/**


*/
@interface FMLiveSwitchSdpIceUnknownIceOptionTag : FMLiveSwitchSdpIceOptionTag

/**

    Gets the string representation of this tag.

*/
- (NSString*) description;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceUnknownIceOptionTag class.

*/
- (instancetype) initWithTagString:(NSString*)tagString;
/**

    Gets the tag string.

*/
- (NSString*) tagString;
/**

    Initializes a new instance of the FMLiveSwitchSdpIceUnknownIceOptionTag class.

*/
+ (FMLiveSwitchSdpIceUnknownIceOptionTag*) unknownIceOptionTagWithTagString:(NSString*)tagString;

@end

/**

    This specifies that the tools should be started in inactive
    mode.  This is necessary for interactive conferences where
    users can put other users on hold.  No media is sent over an
    inactive media stream.  Note that an RTP-based system SHOULD
    still send RTCP, even if started inactive.  It can be either a
    session or media-level attribute, and it is not dependent on
    charset.

*/
@interface FMLiveSwitchSdpInactiveAttribute : FMLiveSwitchSdpDirectionAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpInactiveAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpInactiveAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpInactiveAttribute class.

*/
+ (FMLiveSwitchSdpInactiveAttribute*) inactiveAttribute;
/**

    Initializes a new instance of the FMLiveSwitchSdpInactiveAttribute class.

*/
- (instancetype) init;
/**

    Gets the stream direction.

*/
- (FMLiveSwitchStreamDirection) streamDirection;

@end

/**

    Like the cat attribute, this is to assist identifying wanted
    sessions at the receiver.  This allows a receiver to select
    interesting session based on keywords describing the purpose of
    the session; there is no central registry of keywords.  It is a
    session-level attribute.  It is a charset-dependent attribute,
    meaning that its value should be interpreted in the charset
    specified for the session description if one is specified, or
    by default in ISO 10646/UTF-8.

*/
@interface FMLiveSwitchSdpKeywordsAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpKeywordsAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpKeywordsAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpKeywordsAttribute class.

    @param keywords The keywords describing the purpose of the session.
*/
- (instancetype) initWithKeywords:(NSString*)keywords;
/**

    Gets the keywords describing the purpose of the session.

*/
- (NSString*) keywords;
/**

    Initializes a new instance of the FMLiveSwitchSdpKeywordsAttribute class.

    @param keywords The keywords describing the purpose of the session.
*/
+ (FMLiveSwitchSdpKeywordsAttribute*) keywordsAttributeWithKeywords:(NSString*)keywords;

@end

/**

    This can be a session-level attribute or a media-level
    attribute.  As a session-level attribute, it specifies the
    default language for the session being described.  As a media-
    level attribute, it specifies the language for that media,
    overriding any session-level language specified.  Multiple lang
    attributes can be provided either at session or media level if
    the session description or media use multiple languages, in
    which case the order of the attributes indicates the order of
    importance of the various languages in the session or media
    from most important to least important.

*/
@interface FMLiveSwitchSdpLanguageAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpLanguageAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpLanguageAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpLanguageAttribute class.

    @param languageTag The default language for the session being described
            (if used as a session-level attribute) or the language for a media
            stream (if used as a media-level attribute).
*/
- (instancetype) initWithLanguageTag:(NSString*)languageTag;
/**

    Initializes a new instance of the FMLiveSwitchSdpLanguageAttribute class.

    @param languageTag The default language for the session being described
            (if used as a session-level attribute) or the language for a media
            stream (if used as a media-level attribute).
*/
+ (FMLiveSwitchSdpLanguageAttribute*) languageAttributeWithLanguageTag:(NSString*)languageTag;
/**

    Gets the default language for the session being described
    (if used as a session-level attribute) or the language for a media
    stream (if used as a media-level attribute).

*/
- (NSString*) languageTag;

@end

/**

    This gives the maximum amount of media that can be encapsulated
    in each packet, expressed as time in milliseconds.  The time
    SHALL be calculated as the sum of the time the media present in
    the packet represents.  For frame-based codecs, the time SHOULD
    be an integer multiple of the frame size.  This attribute is
    probably only meaningful for audio data, but may be used with
    other media types if it makes sense.  It is a media-level
    attribute, and it is not dependent on charset.  Note that this
    attribute was introduced after RFC 2327, and non-updated
    implementations will ignore this attribute.

*/
@interface FMLiveSwitchSdpMaxPacketTimeAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpMaxPacketTimeAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpMaxPacketTimeAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpMaxPacketTimeAttribute class.

    @param maxPacketTime The maximum amount of media that can be encapsulated,
            in each packet, expressed as time in milliseconds.
*/
- (instancetype) initWithMaxPacketTime:(int)maxPacketTime;
/**

    Gets the maximum amount of media that can be encapsulated,
    in each packet, expressed as time in milliseconds.

*/
- (int) maxPacketTime;
/**

    Initializes a new instance of the FMLiveSwitchSdpMaxPacketTimeAttribute class.

    @param maxPacketTime The maximum amount of media that can be encapsulated,
            in each packet, expressed as time in milliseconds.
*/
+ (FMLiveSwitchSdpMaxPacketTimeAttribute*) maxPacketTimeAttributeWithMaxPacketTime:(int)maxPacketTime;

@end

/**

    An SDP media element.

*/
@interface FMLiveSwitchSdpMedia : NSObject

/**

    Converts this instance to a string.

*/
- (NSString*) description;
/**

    Gets the format description.

*/
- (NSString*) formatDescription;
/**

    Initializes a new instance of the FMLiveSwitchSdpMedia class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchSdpMedia class.

    @param mediaType The media type. See FMLiveSwitchSdpMedia#mediaType for possible values.
    @param transportPort The transport port.
    @param transportProtocol The transport protocol.
*/
- (instancetype) initWithMediaType:(NSString*)mediaType transportPort:(int)transportPort transportProtocol:(NSString*)transportProtocol;
/**

    Initializes a new instance of the FMLiveSwitchSdpMedia class.

    @param mediaType The media type. See FMLiveSwitchSdpMedia#mediaType for possible values.
    @param transportPort The transport port.
    @param transportProtocol The transport protocol.
    @param formatDescription The format description.
*/
- (instancetype) initWithMediaType:(NSString*)mediaType transportPort:(int)transportPort transportProtocol:(NSString*)transportProtocol formatDescription:(NSString*)formatDescription;
/**

    Initializes a new instance of the FMLiveSwitchSdpMedia class.

*/
+ (FMLiveSwitchSdpMedia*) media;
/**

    Gets the media type. See FMLiveSwitchSdpMedia#mediaType for possible values.

*/
- (NSString*) mediaType;
/**

    Initializes a new instance of the FMLiveSwitchSdpMedia class.

    @param mediaType The media type. See FMLiveSwitchSdpMedia#mediaType for possible values.
    @param transportPort The transport port.
    @param transportProtocol The transport protocol.
*/
+ (FMLiveSwitchSdpMedia*) mediaWithMediaType:(NSString*)mediaType transportPort:(int)transportPort transportProtocol:(NSString*)transportProtocol;
/**

    Initializes a new instance of the FMLiveSwitchSdpMedia class.

    @param mediaType The media type. See FMLiveSwitchSdpMedia#mediaType for possible values.
    @param transportPort The transport port.
    @param transportProtocol The transport protocol.
    @param formatDescription The format description.
*/
+ (FMLiveSwitchSdpMedia*) mediaWithMediaType:(NSString*)mediaType transportPort:(int)transportPort transportProtocol:(NSString*)transportProtocol formatDescription:(NSString*)formatDescription;
/**

    Gets the number of ports.

*/
- (short) numberOfPorts;
/**

    Creates an FMLiveSwitchSdpMedia instance from a string.

    @param s The string to parse.
*/
+ (FMLiveSwitchSdpMedia*) parseWithS:(NSString*)s;
/**

    Sets the format description.

*/
- (void) setFormatDescription:(NSString*)value;
/**

    Sets the media type. See FMLiveSwitchSdpMedia#mediaType for possible values.

*/
- (void) setMediaType:(NSString*)value;
/**

    Sets the number of ports.

*/
- (void) setNumberOfPorts:(short)value;
/**

    Sets the transport port.

*/
- (void) setTransportPort:(int)value;
/**

    Sets the transport protocol.

*/
- (void) setTransportProtocol:(NSString*)value;
/**

    Gets the transport port.

*/
- (int) transportPort;
/**

    Gets the transport protocol.

*/
- (NSString*) transportProtocol;

@end

/**

    An SDP media description element.

*/
@interface FMLiveSwitchSdpMediaDescription : NSObject

/**

    Adds a proposed bandwidth.

    @param bandwidth The proposed bandwidth to add.
*/
- (void) addBandwidth:(FMLiveSwitchSdpBandwidth*)bandwidth;
/**

    Adds a media-level attribute.

    @param attribute The session-level attribute to add.
*/
- (void) addMediaAttribute:(FMLiveSwitchSdpAttribute*)attribute;
/**

    Gets the array of proposed bandwidths to be used by the media.

*/
- (NSMutableArray*) bandwidths;
/**

    Gets a value indicating whether this media description has been marked as bundle-only.

*/
- (bool) bundleOnly;
/**

    Gets media-level connection data.

*/
- (FMLiveSwitchSdpConnectionData*) connectionData;
/**

    Gets CryptoAttributes associated with this MediaDescription.

*/
- (NSMutableArray*) cryptoAttributes;
/**

    Converts this instance to a string.

*/
- (NSString*) description;
/**

    Gets the media-level encryption key.

*/
- (FMLiveSwitchSdpEncryptionKey*) encryptionKey;
/**

    Gets the Fingerprint Attribute from this MediaDescription

*/
- (FMLiveSwitchSdpIceFingerprintAttribute*) fingerprintAttribute;
/**

    Obtains Ice Candidate attributes associated with this media description.

*/
- (NSMutableArray*) getCandidateAttributes;
/**

    Gets the RTCP "ccm fir" feedback attribute for the given payload type.

    @param payloadType The payload type.
*/
- (FMLiveSwitchSdpRtcpFeedbackAttribute*) getCcmFirFeedbackAttributeWithPayloadType:(int)payloadType;
/**

    Gets the RTCP "ccm lrr" feedback attribute for the given payload type.

    @param payloadType The payload type.
*/
- (FMLiveSwitchSdpRtcpFeedbackAttribute*) getCcmLrrFeedbackAttributeWithPayloadType:(int)payloadType;
/**

    Obtains the content attribute.

*/
- (FMLiveSwitchSdpContentAttribute*) getContentAttribute;
/**

    Gets the format parameters attribute for the given payload type.

    @param payloadType The payload type.
*/
- (FMLiveSwitchSdpFormatParametersAttribute*) getFormatParametersAttributeWithPayloadType:(int)payloadType;
/**

    Sets a format parameter value.

*/
- (NSString*) getFormatParameterValueWithPayloadType:(int)payloadType formatParameterName:(NSString*)formatParameterName;
/**

    Obtains Ice Options attributes associated with this media description.

*/
- (NSMutableArray*) getIceOptionAttributes;
/**

    Obtains the maximum packet time attribute.

*/
- (FMLiveSwitchSdpMaxPacketTimeAttribute*) getMaxPacketTimeAttribute;
/**

    Obtains the media stream identifier attribute.

*/
- (FMLiveSwitchSdpMediaStreamIdAttribute*) getMediaStreamIdentifierAttribute;
/**

    Gets the RTCP "nack" feedback attribute for the given payload type.

    @param payloadType The payload type.
*/
- (FMLiveSwitchSdpRtcpFeedbackAttribute*) getNackFeedbackAttributeWithPayloadType:(int)payloadType;
/**

    Gets the RTCP "nack pli" feedback attribute for the given payload type.

    @param payloadType The payload type.
*/
- (FMLiveSwitchSdpRtcpFeedbackAttribute*) getNackPliFeedbackAttributeWithPayloadType:(int)payloadType;
/**

    Gets the RTCP "nack rpsi" feedback attribute for the given payload type.

    @param payloadType The payload type.
*/
- (FMLiveSwitchSdpRtcpFeedbackAttribute*) getNackRpsiFeedbackAttributeWithPayloadType:(int)payloadType;
/**

    Gets the RTCP "nack sli" feedback attribute for the given payload type.

    @param payloadType The payload type.
*/
- (FMLiveSwitchSdpRtcpFeedbackAttribute*) getNackSliFeedbackAttributeWithPayloadType:(int)payloadType;
/**

    Obtains the packet time attribute.

*/
- (FMLiveSwitchSdpPacketTimeAttribute*) getPacketTimeAttribute;
/**

    Obtains the RTP map attributes in preference order.

*/
- (NSMutableArray*) getPreferredRtpMapAttributes;
/**

    Obtains the RID attributes.

*/
- (NSMutableArray*) getRidAttributes;
/**

    Obtains the RID attributes.

    @param direction The RID attribute direction.
*/
- (NSMutableArray*) getRidAttributesWithDirection:(NSString*)direction;
/**

    Obtains an RID attribute by its RID.

*/
- (FMLiveSwitchSdpRtpRidAttribute*) getRidAttributeWithRid:(NSString*)rid;
/**

    Gets the RTCP feedback attribute for the given payload type.

    @param payloadType The payload type.
    @param type The type.
    @param subType The sub-type.
*/
- (FMLiveSwitchSdpRtcpFeedbackAttribute*) getRtcpFeedbackAttributeWithPayloadType:(int)payloadType type:(NSString*)type subType:(NSString*)subType;
/**

    Obtains the RTP ext-map attributes.

*/
- (NSMutableArray*) getRtpExtMapAttributes;
/**

    Obtains the RTP map attributes.

*/
- (NSMutableArray*) getRtpMapAttributes;
/**

    Obtains the RTP map attributes for a given format.

    @param formatName Format name.
    @param clockRate Clock rate.
    @param formatParameters Format parameters.
*/
- (NSMutableArray*) getRtpMapAttributesWithFormatName:(NSString*)formatName clockRate:(int)clockRate formatParameters:(NSString*)formatParameters;
/**

    Obtains the RTP map attributes for a given format.

    @param formatName Format name.
    @param clockRate Clock rate.
    @param formatParameters Format parameters.
    @param rtpMapAttributeIndices The indeces of the FMLiveSwitchSdpRtpMapAttribute.
*/
- (NSMutableArray*) getRtpMapAttributesWithFormatName:(NSString*)formatName clockRate:(int)clockRate formatParameters:(NSString*)formatParameters rtpMapAttributeIndices:(NSMutableArray**)rtpMapAttributeIndices;
/**

    Obtains the RTP map attribute for a given format.

    @param formatName Format name.
    @param clockRate Clock rate.
*/
- (FMLiveSwitchSdpRtpMapAttribute*) getRtpMapAttributeWithFormatName:(NSString*)formatName clockRate:(int)clockRate;
/**

    Obtains the RTP map attribute for a given format.

    @param formatName Format name.
    @param clockRate Clock rate.
    @param formatParameters Format parameters.
*/
- (FMLiveSwitchSdpRtpMapAttribute*) getRtpMapAttributeWithFormatName:(NSString*)formatName clockRate:(int)clockRate formatParameters:(NSString*)formatParameters;
/**

    Obtains the RTP map attribute for a given format.

    @param formatName Format name.
    @param clockRate Clock rate.
    @param formatParameters Format parameters.
    @param rtpMapAttributeIndex The index of the FMLiveSwitchSdpRtpMapAttribute.
*/
- (FMLiveSwitchSdpRtpMapAttribute*) getRtpMapAttributeWithFormatName:(NSString*)formatName clockRate:(int)clockRate formatParameters:(NSString*)formatParameters rtpMapAttributeIndex:(int*)rtpMapAttributeIndex;
/**

    Obtains the RTP map attribute for a given payload type.

    @param payloadType The payload type.
*/
- (FMLiveSwitchSdpRtpMapAttribute*) getRtpMapAttributeWithPayloadType:(int)payloadType;
/**

    Obtains the RTP map attribute for a given payload type.

    @param payloadType The payload type.
    @param rtpMapAttributeIndex The index of the FMLiveSwitchSdpRtpMapAttribute.
*/
- (FMLiveSwitchSdpRtpMapAttribute*) getRtpMapAttributeWithPayloadType:(int)payloadType rtpMapAttributeIndex:(int*)rtpMapAttributeIndex;
/**

    Obtains the simulcast attribute.

*/
- (FMLiveSwitchSdpRtpSimulcastAttribute*) getSimulcastAttribute;
/**

    Obtains the SSRC attributes.

*/
- (NSMutableArray*) getSsrcAttributes;
/**

    Obtains the SSRC attributes.

    @param name The SSRC attribute name.
*/
- (NSMutableArray*) getSsrcAttributesWithName:(NSString*)name;
/**

    Obtains the SSRC attributes matching a given synchronization source.

    @param ssrc The synchronization source.
*/
- (NSMutableArray*) getSsrcAttributesWithSsrc:(long long)ssrc;
/**

    Obtains the SSRC attributes matching a given synchronization source and name.

    @param ssrc The synchronization source.
    @param name The attribute name.
*/
- (NSMutableArray*) getSsrcAttributesWithSsrc:(long long)ssrc name:(NSString*)name;
/**

    Obtains the first SSRC attribute matching a given synchronization source and name.

    @param ssrc The synchronization source.
    @param name The attribute name.
*/
- (FMLiveSwitchSdpRtpSsrcAttribute*) getSsrcAttributeWithSsrc:(long long)ssrc name:(NSString*)name;
/**

    Obtains the SSRC attribute matching a given synchronization source, name, and value.

    @param ssrc The synchronization source.
    @param name The attribute name.
    @param value The attribute value.
*/
- (FMLiveSwitchSdpRtpSsrcAttribute*) getSsrcAttributeWithSsrc:(long long)ssrc name:(NSString*)name value:(NSString*)value;
/**

    Obtains the SSRC Group attributes.

*/
- (NSMutableArray*) getSsrcGroupAttributes;
/**

    Obtains the SSRCS from the first SSRC Group with matching semantics.

*/
- (NSMutableArray*) getSsrcGroupSsrcsWithSemantics:(NSString*)semantics;
/**

    Gets the IcePasswordAttribute associated with this MediaDescription

*/
- (FMLiveSwitchSdpIcePasswordAttribute*) icePasswordAttribute;
/**

    Gets the IceUfragAttribute associated with this MediaDescription

*/
- (FMLiveSwitchSdpIceUfragAttribute*) iceUfragAttribute;
/**

    Gets the attributes with Identical Multiplexing Category present in this description.

    @return Attributes with Identical Multiplexing Category present in this description.
*/
- (NSMutableArray*) identicalCategoryAttributes;
/**

    Initializes a new instance of the FMLiveSwitchSdpMediaDescription class.

    @param media The media name and transport address.
*/
- (instancetype) initWithMedia:(FMLiveSwitchSdpMedia*)media;
/**

    DEPRECATED: Use AddMediaAttribute instead.
    Inserts a media-level attribute at the given index.

    @param attribute The session-level attribute to add.
    @param index The index.
*/
- (void) insertMediaAttribute:(FMLiveSwitchSdpAttribute*)attribute index:(int)index;
/**

    Gets whether this media description represents an application stream
    (media type == "application").

*/
- (bool) isApplication;
/**

    Gets whether this media description represents an audio stream
    (media type == "audio").

*/
- (bool) isAudio;
/**

    Gets whether this media description represents a message stream
    (media type == "message").

*/
- (bool) isMessage;
/**

    Gets a value indicating whether this stream is muted.
    Applies to only media streams.

*/
- (bool) isMuted;
/**

    Gets whether this media description represents a text stream
    (media type == "text").

*/
- (bool) isText;
/**

    Gets whether this media description represents a video stream
    (media type == "video").

*/
- (bool) isVideo;
/**

    Gets the media name and transport address.

*/
- (FMLiveSwitchSdpMedia*) media;
/**

    Gets the array of media-level attributes.

*/
- (NSMutableArray*) mediaAttributes;
/**

    Initializes a new instance of the FMLiveSwitchSdpMediaDescription class.

    @param media The media name and transport address.
*/
+ (FMLiveSwitchSdpMediaDescription*) mediaDescriptionWithMedia:(FMLiveSwitchSdpMedia*)media;
/**

    Gets the media title.

*/
- (NSString*) mediaTitle;
/**

    Orders the formats in preference order.

    @param names The format names.
    @return `false` if a media element does not exist; otherwise `true`.
*/
- (bool) orderFormatsWithNames:(NSMutableArray*)names;
/**

    Creates an FMLiveSwitchSdpMediaDescription instance from a string.

    @param s The string to parse.
*/
+ (FMLiveSwitchSdpMediaDescription*) parseWithS:(NSString*)s;
/**

    Removes a format by name.

    @param name The format name.
    @return `true` if the format was found and removed; otherwise, `false`
*/
- (bool) purgeFormatWithName:(NSString*)name;
/**

    Removes a format by name and clock rate.

    @param name The format name.
    @param clockRate The clock rate.
    @return `true` if the format was found and removed; otherwise, `false`
*/
- (bool) purgeFormatWithName:(NSString*)name clockRate:(int)clockRate;
/**

    Removes a format by name, clock rate, and channel count.

    @param name The format name.
    @param clockRate The clock rate.
    @param channelCount The channel count.
    @return `true` if the format was found and removed; otherwise, `false`
*/
- (bool) purgeFormatWithName:(NSString*)name clockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Gets the QualityAttribute associated with this MediaDescription.

*/
- (FMLiveSwitchSdpQualityAttribute*) qualityAttribute;
/**

    Removes a proposed bandwidth.

    @param bandwidth The proposed bandwidth to remove.
*/
- (bool) removeBandwidth:(FMLiveSwitchSdpBandwidth*)bandwidth;
/**

    Removes Bundle (i.e. Transport and Identical) Category Attributes.

*/
- (void) removeBundleCategoryAttributes;
/**

    Removes a media-level attribute.

    @param attribute The session-level attribute to remove.
*/
- (bool) removeMediaAttribute:(FMLiveSwitchSdpAttribute*)attribute;
/**

    Gets Rtcp Attributes associated with this media description.

*/
- (FMLiveSwitchSdpRtcpAttribute*) rtcpAttribute;
/**

    Gets a value indicating support for RTCP Multiplexing.

*/
- (bool) rtcpMultiplexingSupported;
/**

    Gets the Sctp Map Attribute, if it is present in the Media Description.

*/
- (FMLiveSwitchSdpSctpMapAttribute*) sctpMapAttribute;
/**

    Gets the Sctp Max Message Size Attribute, if it is present in the Media Description.

*/
- (FMLiveSwitchSdpSctpMaxMessageSizeAttribute*) sctpMaxMessageSizeAttribute;
/**

    Gets the Sctp Port Attribute, if it is present in the Media Description.

*/
- (FMLiveSwitchSdpSctpPortAttribute*) sctpPortAttribute;
/**

    Sets media-level connection data.

*/
- (void) setConnectionData:(FMLiveSwitchSdpConnectionData*)value;
/**

    Sets the media-level encryption key.

*/
- (void) setEncryptionKey:(FMLiveSwitchSdpEncryptionKey*)value;
/**

    Sets a format parameter value.

*/
- (bool) setFormatParameterValueWithPayloadType:(int)payloadType formatParameterName:(NSString*)formatParameterName formatParameterValue:(NSString*)formatParameterValue;
/**

    Sets a value indicating whether this stream is muted.
    Applies to only media streams.

*/
- (void) setIsMuted:(bool)value;
/**

    Sets the media title.

*/
- (void) setMediaTitle:(NSString*)value;
/**

    Sets the QualityAttribute associated with this MediaDescription.

*/
- (void) setQualityAttribute:(FMLiveSwitchSdpQualityAttribute*)value;
/**

    Sets Rtcp Attributes associated with this media description.

*/
- (void) setRtcpAttribute:(FMLiveSwitchSdpRtcpAttribute*)value;
/**

    Sets a value indicating support for RTCP Multiplexing.

*/
- (void) setRtcpMultiplexingSupported:(bool)value;
/**

    Sets the SetupAttribute associated with this MediaDescription.

*/
- (void) setSetupAttribute:(FMLiveSwitchSdpSetupAttribute*)value;
/**

    Sets the stream direction indicated in Media Description. Getter returns StreamDirection if DirectionAttribute is present; otherwise, returns StreamDirection.Unset.

*/
- (void) setStreamDirection:(FMLiveSwitchStreamDirection)value;
/**

    Gets the SetupAttribute associated with this MediaDescription.

*/
- (FMLiveSwitchSdpSetupAttribute*) setupAttribute;
/**

    Gets the stream direction indicated in Media Description. Getter returns StreamDirection if DirectionAttribute is present; otherwise, returns StreamDirection.Unset.

*/
- (FMLiveSwitchStreamDirection) streamDirection;
/**

    Gets a value indicating whether this SDP MediaDescription suggests support for ICE.

*/
- (bool) supportsIce;
/**

    Gets the attributes with Transport Multiplexing Category present in this description.

    @return Attributes with Transport Multiplexing Category present in this description.
*/
- (NSMutableArray*) transportCategoryAttributes;
/**

    Adds a content attribute if not already present.

    @param contentAttribute The content attribute.
*/
- (bool) tryAddContentAttribute:(FMLiveSwitchSdpContentAttribute*)contentAttribute;
/**

    Updates SDP Quality Attribute associated with this media description if one is present. Otherwise,
    creates a new one and inserts it into this media description.

    @param quality 
*/
- (void) updateQualityAttributeValueWithQuality:(int)quality;

@end

/**

    https://tools.ietf.org/html/rfc5888#page-4
    "Media stream identification" media attribute, which is used for identifying media streams within a session description.
    Its formatting in SDP [RFC4566] is described by
    the following Augmented Backus-Naur Form(ABNF) [RFC5234]:
    
    mid-attribute      = "a=mid:" identification-tag
    identification-tag = token
    ; token is defined in RFC 4566
    The identification-tag MUST be unique within an SDP session description.

*/
@interface FMLiveSwitchSdpMediaStreamIdAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpMediaStreamIdAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpMediaStreamIdAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Gets the identification tag.

*/
- (NSString*) identificationTag;
/**

    Initializes a new instance of the FMLiveSwitchSdpMediaStreamIdAttribute class.

    @param idValue The identifier.
*/
- (instancetype) initWithId:(NSString*)idValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpMediaStreamIdAttribute class.

    @param idValue The identifier.
*/
+ (FMLiveSwitchSdpMediaStreamIdAttribute*) mediaStreamIdAttributeWithId:(NSString*)idValue;

@end

/**

    https://tools.ietf.org/html/draft-ietf-mmusic-msid-08 - NB: Removed in subsequent drafts, most likely will not be used eventually.
    Used here for compatibility with Google Chrome and Mozilla Firefox.
    
    A session-level attribute is defined for signalling the semantics
    associated with an msid grouping.This allows msid groupings with
    different semantics to coexist.
    
    This OPTIONAL attribute gives the group identifier and its group
    semantic; it carries the same meaning as the ssrc-group-attr of RFC
    5576 section 4.2, but uses the identifier of the group rather than a
    list of SSRC values.
    
    This attribute MUST be present if "a=msid" is used.
    
    An empty list of identifiers is an indication that the sender
    supports the indicated semantic, but has no msid groupings of the
    given type in the present SDP.
    
    An identifier of "*" is an indication that all "a=msid" lines in the
    SDP have this specific semantic.  If "*" is not used, each msid-id in
    the SDP MUST appear in one and only one "msid-semantic" line.
    The name of the attribute is "msid-semantic".
    The value of the attribute is given by the following ABNF:
    
    msid-semantic-value = msid - semantic msid-list
    msid-semantic = token ; see RFC 4566
    msid-list = *(" " msid-id) / " *"
    
    The semantic field holds values from the IANA registriy "Semantics
    for the msid-semantic SDP attribute" (which is defined in Section 6 of https://tools.ietf.org/html/draft-ietf-mmusic-msid-08 ).
    
    An example msid-semantic might look like this, if a semantic LS was
    registered by IANA for the same purpose as the existing LS grouping
    semantic:
    
    a= msid-semantic:LS xyzzy forolow
    
    This means that the SDP description has two lip sync groups, with the
    group identifiers xyzzy and forolow, respectively.
    
    The msid-semantic attribute can occur more than once, but MUST NOT
    occur more than once with the same msid-semantic value.

*/
@interface FMLiveSwitchSdpMediaStreamIdSemanticAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpMediaStreamIdSemanticAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpMediaStreamIdSemanticAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpMediaStreamIdSemanticAttribute class.

    @param semanticToken The semantic token.
*/
- (instancetype) initWithSemanticToken:(FMLiveSwitchSdpMediaStreamIdSemanticToken)semanticToken;
/**

    Initializes a new instance of the FMLiveSwitchSdpMediaStreamIdSemanticAttribute class.

    @param semanticToken The semantic token.
    @param msidList The msid list for the given semantic token.
*/
- (instancetype) initWithSemanticToken:(FMLiveSwitchSdpMediaStreamIdSemanticToken)semanticToken msidList:(NSString*)msidList;
/**

    Initializes a new instance of the FMLiveSwitchSdpMediaStreamIdSemanticAttribute class.

    @param semanticToken The semantic token.
*/
+ (FMLiveSwitchSdpMediaStreamIdSemanticAttribute*) mediaStreamIdSemanticAttributeWithSemanticToken:(FMLiveSwitchSdpMediaStreamIdSemanticToken)semanticToken;
/**

    Initializes a new instance of the FMLiveSwitchSdpMediaStreamIdSemanticAttribute class.

    @param semanticToken The semantic token.
    @param msidList The msid list for the given semantic token.
*/
+ (FMLiveSwitchSdpMediaStreamIdSemanticAttribute*) mediaStreamIdSemanticAttributeWithSemanticToken:(FMLiveSwitchSdpMediaStreamIdSemanticToken)semanticToken msidList:(NSString*)msidList;
/**

    Gets the space-delimited list of msids for which a given semantic is used.
    An empty list of identifiers is an indication that the sender
    supports the indicated semantic, but has no msid groupings of the
    given type in the present SDP.
    
    An identifier of "*" is an indication that all "a=msid" lines in the
    SDP have this specific semantic.  If "*" is not used, each msid-id in
    the SDP MUST appear in one and only one "msid-semantic" line.

*/
- (NSString*) msIdList;
/**

    Sets the space-delimited list of msids for which a given semantic is used.
    An empty list of identifiers is an indication that the sender
    supports the indicated semantic, but has no msid groupings of the
    given type in the present SDP.
    
    An identifier of "*" is an indication that all "a=msid" lines in the
    SDP have this specific semantic.  If "*" is not used, each msid-id in
    the SDP MUST appear in one and only one "msid-semantic" line.

*/
- (void) setMsIdList:(NSString*)value;

@end

@interface FMLiveSwitchSdpMediaStreamIdSemanticTokenWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchSdpMediaStreamIdSemanticToken)value;

@end

/**

    Defines valid SDP media types.

*/
@interface FMLiveSwitchSdpMediaType : NSObject

/**

    Gets the SDP media type meaning "Application".

*/
+ (NSString*) application;
/**

    Gets the SDP media type meaning "Audio".

*/
+ (NSString*) audio;
/**

    Convert a StreamType enum to an SDP media type.

    @param streamType The StreamType enum.
*/
+ (NSString*) fromStreamType:(FMLiveSwitchStreamType)streamType;
/**

    Gets the SDP media type meaning "Message".

*/
+ (NSString*) message;
/**

    Gets the SDP media type meaning "Text".

*/
+ (NSString*) text;
/**

    Converts an SDP media type to a StreamType enum.

    @param mediaType The SDP media type.
*/
+ (FMLiveSwitchStreamType) toStreamTypeWithMediaType:(NSString*)mediaType;
/**

    Gets the SDP media type meaning "Video".

*/
+ (NSString*) video;

@end

/**

    An SDP message.

*/
@interface FMLiveSwitchSdpMessage : NSObject

/**

    Adds a proposed bandwidth.

    @param bandwidth The proposed bandwidth to add.
*/
- (void) addBandwidth:(FMLiveSwitchSdpBandwidth*)bandwidth;
/**

    Adds a media description.

    @param mediaDescription The media description to add.
*/
- (void) addMediaDescription:(FMLiveSwitchSdpMediaDescription*)mediaDescription;
/**

    Adds a session-level attribute.

    @param attribute The session-level attribute to add.
*/
- (void) addSessionAttribute:(FMLiveSwitchSdpAttribute*)attribute;
/**

    Adds a start, stop, and repeat time.

    @param timeDescription The start, stop, and repeat time to add.
*/
- (void) addTimeDescription:(FMLiveSwitchSdpTimeDescription*)timeDescription;
/**

    Gets the first media description of type "application".

*/
- (FMLiveSwitchSdpMediaDescription*) applicationDescription;
/**

    Gets any media descriptions of type "application".

*/
- (NSMutableArray*) applicationDescriptions;
/**

    Gets the first media description of type "audio".

*/
- (FMLiveSwitchSdpMediaDescription*) audioDescription;
/**

    Gets any media descriptions of type "audio".

*/
- (NSMutableArray*) audioDescriptions;
/**

    Gets the array of proposed bandwidths to be used by the session.

*/
- (NSMutableArray*) bandwidths;
/**

    Gets bundle groups in this media description.

*/
- (NSMutableArray*) bundleGroups;
/**

    Gets session-level connection data.

*/
- (FMLiveSwitchSdpConnectionData*) connectionData;
/**

    Converts this instance to a string.

*/
- (NSString*) description;
/**

    Gets the email address for the person responsible for the conference.

*/
- (NSString*) emailAddress;
/**

    Gets the session-level encryption key.

*/
- (FMLiveSwitchSdpEncryptionKey*) encryptionKey;
/**

    Obtains Crypto attributes from the session-level attributes in this message.
    Crypto attributes may also be sent as a media-level argument, so individual media descriptions must also be examined.

*/
- (NSMutableArray*) getSessionLevelCryptoAttributes;
/**

    Obtains the stream direction indicated as a session-level attribute in this message. If none is supplied, StreamDirection.Unset is returned.
    Stream Direction may also be (and most likely is) indicated as a media-level attribute, so individual media descriptions must also be examined.

*/
- (FMLiveSwitchStreamDirection) getSessionLevelDirection;
/**

    Obtains Fingerprint attribute from the session-level attributes in this message.
    Fingerprint attribute may also be sent as a media-level argument, so individual media descriptions must also be examined.

*/
- (FMLiveSwitchSdpIceFingerprintAttribute*) getSessionLevelFingerprintAttribute;
/**

    Obtains session-level Ice Options attributes associated with the Sdp Message.

*/
- (NSMutableArray*) getSessionLevelIceOptionAttributes;
/**

    Obtains Ice Password Attribute from the session-level attributes in this message.
    Ice Password attribute may also be sent as a media-level argument, so individual media descriptions must also be examined.

*/
- (FMLiveSwitchSdpIcePasswordAttribute*) getSessionLevelIcePasswordAttribute;
/**

    Obtains Ice Ufrag Attribute from the session-level attributes in this message.
    Ice Ufrag Attributes may also be sent as a media-level argument, so individual media descriptions must also be examined.

*/
- (FMLiveSwitchSdpIceUfragAttribute*) getSessionLevelIceUfragAttribute;
/**

    Returns a value stating whether Rtcp Multiplexing support is indicated  as a session-level attribute in this message.
    Rtcp Multiplexing support may also be indicated via a media-level argument, so individual media descriptions must also be examined.

*/
- (bool) getSessionLevelRtcpMultiplexingSupport;
/**

    Obtains session-level RTP ext-map attributes associated with the Sdp Message.

*/
- (NSMutableArray*) getSessionLevelRtpExtMapAttributes;
/**

    Obtains Setup Attribute from the session-level attributes in this message.
    Setup Attributes may also be sent as a media-level argument, so individual media descriptions must also be examined.

*/
- (FMLiveSwitchSdpSetupAttribute*) getSessionLevelSetupAttribute;
/**

    Initializes a new instance of the FMLiveSwitchSdpMessage class.

    @param origin The originator of the session plus a session identifier and version number.
*/
- (instancetype) initWithOrigin:(FMLiveSwitchSdpOrigin*)origin;
/**

    Initializes a new instance of the FMLiveSwitchSdpMessage class.

    @param origin The originator of the session plus a session identifier and version number.
    @param sessionName The textual session name.
*/
- (instancetype) initWithOrigin:(FMLiveSwitchSdpOrigin*)origin sessionName:(NSString*)sessionName;
/**

    Initializes a new instance of the FMLiveSwitchSdpMessage class.

    @param origin The originator of the session plus a session identifier and version number.
    @param sessionName The textual session name.
    @param timeDescriptions The array of start, stop, and repeat times for the session.
*/
- (instancetype) initWithOrigin:(FMLiveSwitchSdpOrigin*)origin sessionName:(NSString*)sessionName timeDescriptions:(NSMutableArray*)timeDescriptions;
/**

    Adds a media description at the given index.

    @param index The index at which to add the media description.
    @param mediaDescription The media description to add.
*/
- (void) insertMediaDescriptionWithIndex:(int)index mediaDescription:(FMLiveSwitchSdpMediaDescription*)mediaDescription;
/**

    Gets the array of media descriptions.

*/
- (NSMutableArray*) mediaDescriptions;
/**

    Gets the first media description of type "message".

*/
- (FMLiveSwitchSdpMediaDescription*) messageDescription;
/**

    Gets any media descriptions of type "message".

*/
- (NSMutableArray*) messageDescriptions;
/**

    Initializes a new instance of the FMLiveSwitchSdpMessage class.

    @param origin The originator of the session plus a session identifier and version number.
*/
+ (FMLiveSwitchSdpMessage*) messageWithOrigin:(FMLiveSwitchSdpOrigin*)origin;
/**

    Initializes a new instance of the FMLiveSwitchSdpMessage class.

    @param origin The originator of the session plus a session identifier and version number.
    @param sessionName The textual session name.
*/
+ (FMLiveSwitchSdpMessage*) messageWithOrigin:(FMLiveSwitchSdpOrigin*)origin sessionName:(NSString*)sessionName;
/**

    Initializes a new instance of the FMLiveSwitchSdpMessage class.

    @param origin The originator of the session plus a session identifier and version number.
    @param sessionName The textual session name.
    @param timeDescriptions The array of start, stop, and repeat times for the session.
*/
+ (FMLiveSwitchSdpMessage*) messageWithOrigin:(FMLiveSwitchSdpOrigin*)origin sessionName:(NSString*)sessionName timeDescriptions:(NSMutableArray*)timeDescriptions;
/**

    Gets the originator of the session plus a session identifier and version number.

*/
- (FMLiveSwitchSdpOrigin*) origin;
/**

    Creates an FMLiveSwitchSdpMessage instance from a string.

    @param s The string to parse.
*/
+ (FMLiveSwitchSdpMessage*) parseWithS:(NSString*)s;
/**

    Gets the phone number for the person responsible for the conference.

*/
- (NSString*) phoneNumber;
/**

    Gets the version of the Session Description Protocol.

*/
- (NSString*) protocolVersion;
/**

    Removes a proposed bandwidth.

    @param bandwidth The proposed bandwidth to remove.
*/
- (bool) removeBandwidth:(FMLiveSwitchSdpBandwidth*)bandwidth;
/**

    Removes a media description.

    @param mediaDescription The media description to remove.
*/
- (bool) removeMediaDescription:(FMLiveSwitchSdpMediaDescription*)mediaDescription;
/**

    Removes a session-level attribute.

    @param attributeType The session-level attribute type to remove.
*/
- (bool) removeSessionAttributeWithAttributeType:(FMLiveSwitchSdpAttributeType)attributeType;
/**

    Removes a start, stop, and repeat time.

    @param timeDescription The start, stop, and repeat time to remove.
*/
- (bool) removeTimeDescription:(FMLiveSwitchSdpTimeDescription*)timeDescription;
/**

    Removes all time descriptions.

*/
- (void) removeTimeDescriptions;
/**

    Gets the array of session-level attributes.

*/
- (NSMutableArray*) sessionAttributes;
/**

    Gets textual information about the session.

*/
- (NSString*) sessionInformation;
/**

    Gets the textual session name.

*/
- (NSString*) sessionName;
/**

    Sets session-level connection data.

*/
- (void) setConnectionData:(FMLiveSwitchSdpConnectionData*)value;
/**

    Sets the email address for the person responsible for the conference.

*/
- (void) setEmailAddress:(NSString*)value;
/**

    Sets the session-level encryption key.

*/
- (void) setEncryptionKey:(FMLiveSwitchSdpEncryptionKey*)value;
/**

    Sets the phone number for the person responsible for the conference.

*/
- (void) setPhoneNumber:(NSString*)value;
/**

    Sets textual information about the session.

*/
- (void) setSessionInformation:(NSString*)value;
/**

    Sets a value indicating whether Trickle-ICE is supported.

*/
- (void) setSupportsTrickleIce:(bool)value;
/**

    Sets the time zone adjustments.

*/
- (void) setTimeZoneAdjustments:(FMLiveSwitchSdpTimeZones*)value;
/**

    Sets the pointer to additional information about the session.

*/
- (void) setUri:(NSURL*)value;
/**

    Gets a value indicating whether the SDP Message implies RTP/RTCP Multiplexing Support.

*/
- (bool) supportsRtcpMultiplexing;
/**

    Gets a value indicating whether Trickle-ICE is supported.

*/
- (bool) supportsTrickleIce;
/**

    Gets the first media description of type "text".

*/
- (FMLiveSwitchSdpMediaDescription*) textDescription;
/**

    Gets any media descriptions of type "text".

*/
- (NSMutableArray*) textDescriptions;
/**

    Gets the array of start, stop, and repeat times for the session.

*/
- (NSMutableArray*) timeDescriptions;
/**

    Gets the time zone adjustments.

*/
- (FMLiveSwitchSdpTimeZones*) timeZoneAdjustments;
/**

    Updates SDP Setup Value associated with the session description.

    @param setupValue 
*/
- (void) updateSetupValue:(NSString*)setupValue;
/**

    Gets the pointer to additional information about the session.

*/
- (NSURL*) uri;
/**

    Gets the first media description of type "video".

*/
- (FMLiveSwitchSdpMediaDescription*) videoDescription;
/**

    Gets any media descriptions of type "video".

*/
- (NSMutableArray*) videoDescriptions;

@end

/**

    Defines valid SDP network types.

*/
@interface FMLiveSwitchSdpNetworkType : NSObject

/**

    Gets the SDP network type meaning "Internet".

*/
+ (NSString*) internet;

@end

/**

    Defines valid SDP orientations.

*/
@interface FMLiveSwitchSdpOrientation : NSObject

/**

    Gets the SDP orientation meaning "Landscape".

*/
+ (NSString*) landscape;
/**

    Gets the SDP orientation meaning "Portrait".

*/
+ (NSString*) portrait;
/**

    Gets the SDP orientation meaning "Upside-Down Landscape".

*/
+ (NSString*) seascape;

@end

/**

    Normally this is only used for a whiteboard or presentation
    tool.  It specifies the orientation of a the workspace on the
    screen.  It is a media-level attribute.  Permitted values are
    "portrait", "landscape", and "seascape" (upside-down
    landscape).  It is not dependent on charset.

*/
@interface FMLiveSwitchSdpOrientationAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpOrientationAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpOrientationAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpOrientationAttribute class.

    @param orientation The orientation of a workspace on the screen. See FMLiveSwitchSdpOrientationAttribute#orientation for possible values.
*/
- (instancetype) initWithOrientation:(NSString*)orientation;
/**

    Gets the orientation of a workspace on the screen. See FMLiveSwitchSdpOrientationAttribute#orientation for possible values.

*/
- (NSString*) orientation;
/**

    Initializes a new instance of the FMLiveSwitchSdpOrientationAttribute class.

    @param orientation The orientation of a workspace on the screen. See FMLiveSwitchSdpOrientationAttribute#orientation for possible values.
*/
+ (FMLiveSwitchSdpOrientationAttribute*) orientationAttributeWithOrientation:(NSString*)orientation;

@end

/**

    An SDP origin element.

*/
@interface FMLiveSwitchSdpOrigin : NSObject

/**

    Gets the type of the address. See FMLiveSwitchSdpOrigin#addressType for possible values.

*/
- (NSString*) addressType;
/**

    Converts this instance to a string.

*/
- (NSString*) description;
/**

    Initializes a new instance of the FMLiveSwitchSdpOrigin class.

    @param unicastAddress The address of the machine from which the session was created.
*/
- (instancetype) initWithUnicastAddress:(NSString*)unicastAddress;
/**

    Initializes a new instance of the FMLiveSwitchSdpOrigin class.

    @param unicastAddress The address of the machine from which the session was created.
    @param username The user's login on the originating host.
*/
- (instancetype) initWithUnicastAddress:(NSString*)unicastAddress username:(NSString*)username;
/**

    Gets the type of network. See FMLiveSwitchSdpOrigin#networkType for possible values.

*/
- (NSString*) networkType;
/**

    Initializes a new instance of the FMLiveSwitchSdpOrigin class.

    @param unicastAddress The address of the machine from which the session was created.
*/
+ (FMLiveSwitchSdpOrigin*) originWithUnicastAddress:(NSString*)unicastAddress;
/**

    Initializes a new instance of the FMLiveSwitchSdpOrigin class.

    @param unicastAddress The address of the machine from which the session was created.
    @param username The user's login on the originating host.
*/
+ (FMLiveSwitchSdpOrigin*) originWithUnicastAddress:(NSString*)unicastAddress username:(NSString*)username;
/**

    Creates an FMLiveSwitchSdpOrigin instance from a string.

    @param s The string to parse.
*/
+ (FMLiveSwitchSdpOrigin*) parseWithS:(NSString*)s;
/**

    Gets the globally unique identifier for the session.

*/
- (long long) sessionId;
/**

    Gets the version number for the session.

*/
- (long long) sessionVersion;
/**

    Sets the type of the address. See FMLiveSwitchSdpOrigin#addressType for possible values.

*/
- (void) setAddressType:(NSString*)value;
/**

    Sets the type of network. See FMLiveSwitchSdpOrigin#networkType for possible values.

*/
- (void) setNetworkType:(NSString*)value;
/**

    Sets the globally unique identifier for the session.

*/
- (void) setSessionId:(long long)value;
/**

    Sets the version number for the session.

*/
- (void) setSessionVersion:(long long)value;
/**

    Sets the address of the machine from which the session was created.

*/
- (void) setUnicastAddress:(NSString*)value;
/**

    Sets the user's login on the originating host.

*/
- (void) setUsername:(NSString*)value;
/**

    Gets the address of the machine from which the session was created.

*/
- (NSString*) unicastAddress;
/**

    Gets the user's login on the originating host.

*/
- (NSString*) username;

@end

/**

    This gives the length of time in milliseconds represented by
    the media in a packet.  This is probably only meaningful for
    audio data, but may be used with other media types if it makes
    sense.  It should not be necessary to know ptime to decode RTP
    or vat audio, and it is intended as a recommendation for the
    encoding/packetisation of audio.  It is a media-level
    attribute, and it is not dependent on charset.

*/
@interface FMLiveSwitchSdpPacketTimeAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpPacketTimeAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpPacketTimeAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpPacketTimeAttribute class.

    @param packetTime The length of time in milliseconds represented by
            the media in a packet.
*/
- (instancetype) initWithPacketTime:(int)packetTime;
/**

    Gets the length of time in milliseconds represented by
    the media in a packet.

*/
- (int) packetTime;
/**

    Initializes a new instance of the FMLiveSwitchSdpPacketTimeAttribute class.

    @param packetTime The length of time in milliseconds represented by
            the media in a packet.
*/
+ (FMLiveSwitchSdpPacketTimeAttribute*) packetTimeAttributeWithPacketTime:(int)packetTime;

@end

/**

    An SDP encryption key with a method of "prompt".

*/
@interface FMLiveSwitchSdpPromptEncryptionKey : FMLiveSwitchSdpEncryptionKey

- (instancetype) init;
+ (FMLiveSwitchSdpPromptEncryptionKey*) promptEncryptionKey;

@end

/**

    This gives a suggestion for the quality of the encoding as an
    integer value.  The intention of the quality attribute for
    video is to specify a non-default trade-off between frame-rate
    and still-image quality.  For video, the value is in the range
    0 to 10, with the following suggested meaning:
    
    10 - the best still-image quality the compression scheme can
    give.
    5  - the default behaviour given no quality suggestion.
    0  - the worst still-image quality the codec designer thinks
    is still usable.
    
    It is a media-level attribute, and it is not dependent on
    charset.

*/
@interface FMLiveSwitchSdpQualityAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpQualityAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpQualityAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpQualityAttribute class.

    @param quality The suggested quality of the encoding as an integer value from 0-10.
*/
- (instancetype) initWithQuality:(uint8_t)quality;
/**

    Gets the suggested quality of the encoding as an integer value from 0-10.

*/
- (uint8_t) quality;
/**

    Initializes a new instance of the FMLiveSwitchSdpQualityAttribute class.

    @param quality The suggested quality of the encoding as an integer value from 0-10.
*/
+ (FMLiveSwitchSdpQualityAttribute*) qualityAttributeWithQuality:(uint8_t)quality;

@end

/**

    This specifies that the tools should be started in receive-only
    mode where applicable.  It can be either a session- or media-
    level attribute, and it is not dependent on charset.  Note that
    recvonly applies to the media only, not to any associated
    control protocol (e.g., an RTP-based system in recvonly mode
    SHOULD still send RTCP packets).

*/
@interface FMLiveSwitchSdpReceiveOnlyAttribute : FMLiveSwitchSdpDirectionAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpReceiveOnlyAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpReceiveOnlyAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpReceiveOnlyAttribute class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchSdpReceiveOnlyAttribute class.

*/
+ (FMLiveSwitchSdpReceiveOnlyAttribute*) receiveOnlyAttribute;
/**

    Gets the stream direction.

*/
- (FMLiveSwitchStreamDirection) streamDirection;

@end

/**

    An SDP repeat time element.

*/
@interface FMLiveSwitchSdpRepeatTime : NSObject

/**

    Gets the active duration.

*/
- (FMLiveSwitchTimeSpan*) activeDuration;
/**

    Adds an offset from the start time.

    @param offset The offset from the start time to add.
*/
- (void) addOffset:(FMLiveSwitchTimeSpan*)offset;
/**

    Converts this instance to a string.

*/
- (NSString*) description;
/**

    Initializes a new instance of the FMLiveSwitchSdpRepeatTime class.

    @param repeatInterval The repeat interval.
    @param activeDuration The active duration.
*/
- (instancetype) initWithRepeatInterval:(FMLiveSwitchTimeSpan*)repeatInterval activeDuration:(FMLiveSwitchTimeSpan*)activeDuration;
/**

    Initializes a new instance of the FMLiveSwitchSdpRepeatTime class.

    @param repeatInterval The repeat interval.
    @param activeDuration The active duration.
    @param offsets The offsets from the start time.
*/
- (instancetype) initWithRepeatInterval:(FMLiveSwitchTimeSpan*)repeatInterval activeDuration:(FMLiveSwitchTimeSpan*)activeDuration offsets:(NSMutableArray*)offsets;
/**

    Gets the array of offsets from the start time.

*/
- (NSMutableArray*) offsets;
/**

    Creates an FMLiveSwitchSdpRepeatTime instance from a string.

    @param s The string to parse.
*/
+ (FMLiveSwitchSdpRepeatTime*) parseWithS:(NSString*)s;
/**

    Removes an offset from the start time.

    @param offset The offset from the start time to remove.
*/
- (bool) removeOffset:(FMLiveSwitchTimeSpan*)offset;
/**

    Gets the repeat interval.

*/
- (FMLiveSwitchTimeSpan*) repeatInterval;
/**

    Initializes a new instance of the FMLiveSwitchSdpRepeatTime class.

    @param repeatInterval The repeat interval.
    @param activeDuration The active duration.
*/
+ (FMLiveSwitchSdpRepeatTime*) repeatTimeWithRepeatInterval:(FMLiveSwitchTimeSpan*)repeatInterval activeDuration:(FMLiveSwitchTimeSpan*)activeDuration;
/**

    Initializes a new instance of the FMLiveSwitchSdpRepeatTime class.

    @param repeatInterval The repeat interval.
    @param activeDuration The active duration.
    @param offsets The offsets from the start time.
*/
+ (FMLiveSwitchSdpRepeatTime*) repeatTimeWithRepeatInterval:(FMLiveSwitchTimeSpan*)repeatInterval activeDuration:(FMLiveSwitchTimeSpan*)activeDuration offsets:(NSMutableArray*)offsets;

@end

/**

    The RTCP attribute is used to document the RTCP port used for media
    stream, when that port is not the next higher (odd) port number
    following the RTP port described in the media line.

*/
@interface FMLiveSwitchSdpRtcpAttribute : FMLiveSwitchSdpAttribute

/**

    Gets the type of the address. See FMLiveSwitchSdpRtcpAttribute#addressType for possible values.

*/
- (NSString*) addressType;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtcpAttribute class.

    @param port The RTCP port number.
    @param connectionAddress The RTCP connection address.
*/
+ (FMLiveSwitchSdpRtcpAttribute*) attributeWithPort:(int)port connectionAddress:(NSString*)connectionAddress;
/**

    Gets the RTCP connection address.

*/
- (NSString*) connectionAddress;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtcpAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpRtcpAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtcpAttribute class.

    @param port The RTCP port number.
    @param connectionAddress The RTCP connection address.
*/
- (instancetype) initWithPort:(int)port connectionAddress:(NSString*)connectionAddress;
/**

    Gets the type of network. See FMLiveSwitchSdpRtcpAttribute#networkType for possible values.

*/
- (NSString*) networkType;
/**

    Gets the RTCP port number.

*/
- (int) port;
/**

    Sets the type of the address. See FMLiveSwitchSdpRtcpAttribute#addressType for possible values.

*/
- (void) setAddressType:(NSString*)value;
/**

    Sets the RTCP connection address.

*/
- (void) setConnectionAddress:(NSString*)value;
/**

    Sets the type of network. See FMLiveSwitchSdpRtcpAttribute#networkType for possible values.

*/
- (void) setNetworkType:(NSString*)value;
/**

    Sets the RTCP port number.

*/
- (void) setPort:(int)value;
/**

    Updates the port and connection address.

    @param port The port.
    @param connectionAddress The connection address.
*/
- (void) updateWithPort:(int)port connectionAddress:(NSString*)connectionAddress;

@end

/**

    This attribute is used to indicate the capability of
    using RTCP feedback.

*/
@interface FMLiveSwitchSdpRtcpFeedbackAttribute : FMLiveSwitchSdpAttribute

/**

    Creates a "ccm fir" feedback attribute.

    @param payloadType The payload type.
*/
+ (FMLiveSwitchSdpRtcpFeedbackAttribute*) ccmFirAttributeWithPayloadType:(int)payloadType;
/**

    Creates a "ccm lrr" feedback attribute.

    @param payloadType The payload type.
*/
+ (FMLiveSwitchSdpRtcpFeedbackAttribute*) ccmLrrAttributeWithPayloadType:(int)payloadType;
/**

    Creates a "ccm tmmbn" feedback attribute.

    @param payloadType The payload type.
*/
+ (FMLiveSwitchSdpRtcpFeedbackAttribute*) ccmTmmbnAttributeWithPayloadType:(int)payloadType;
/**

    Creates a "ccm tmmbr" feedback attribute.

    @param payloadType The payload type.
*/
+ (FMLiveSwitchSdpRtcpFeedbackAttribute*) ccmTmmbrAttributeWithPayloadType:(int)payloadType;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtcpFeedbackAttribute class.

    @param payloadType The payload type.
    @param type The type.
*/
+ (FMLiveSwitchSdpRtcpFeedbackAttribute*) feedbackAttributeWithPayloadType:(int)payloadType type:(NSString*)type;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtcpFeedbackAttribute class.

    @param payloadType The payload type.
    @param type The type.
    @param subtype The subtype.
*/
+ (FMLiveSwitchSdpRtcpFeedbackAttribute*) feedbackAttributeWithPayloadType:(int)payloadType type:(NSString*)type subtype:(NSString*)subtype;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtcpFeedbackAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpRtcpFeedbackAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtcpFeedbackAttribute class.

    @param payloadType The payload type.
    @param type The type.
*/
- (instancetype) initWithPayloadType:(int)payloadType type:(NSString*)type;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtcpFeedbackAttribute class.

    @param payloadType The payload type.
    @param type The type.
    @param subtype The subtype.
*/
- (instancetype) initWithPayloadType:(int)payloadType type:(NSString*)type subtype:(NSString*)subtype;
/**

    Creates a "nack" feedback attribute.

    @param payloadType The payload type.
*/
+ (FMLiveSwitchSdpRtcpFeedbackAttribute*) nackAttributeWithPayloadType:(int)payloadType;
/**

    Creates a "nack pli" feedback attribute.

    @param payloadType The payload type.
*/
+ (FMLiveSwitchSdpRtcpFeedbackAttribute*) nackPliAttributeWithPayloadType:(int)payloadType;
/**

    Creates a "nack rpsi" feedback attribute.

    @param payloadType The payload type.
*/
+ (FMLiveSwitchSdpRtcpFeedbackAttribute*) nackRpsiAttributeWithPayloadType:(int)payloadType;
/**

    Creates a "nack sli" feedback attribute.

    @param payloadType The payload type.
*/
+ (FMLiveSwitchSdpRtcpFeedbackAttribute*) nackSliAttributeWithPayloadType:(int)payloadType;
/**

    Gets the payload type.

*/
- (int) payloadType;
/**

    Creates a "goog-remb" feedback attribute.

    @param payloadType The payload type.
*/
+ (FMLiveSwitchSdpRtcpFeedbackAttribute*) rembAttributeWithPayloadType:(int)payloadType;
/**

    Sets the payload type.

*/
- (void) setPayloadType:(int)value;
/**

    Sets the sub-type.

*/
- (void) setSubType:(NSString*)value;
/**

    Sets the type.

*/
- (void) setType:(NSString*)value;
/**

    Gets the sub-type.

*/
- (NSString*) subType;
/**

    Creates a "transport-cc" feedback attribute.

    @param payloadType The payload type.
*/
+ (FMLiveSwitchSdpRtcpFeedbackAttribute*) transportCCAttributeWithPayloadType:(int)payloadType;
/**

    Gets the type.

*/
- (NSString*) type;
/**

    Gets the payload type that represents
    wildcard feedback attributes ('*').

*/
+ (int) wildcardPayloadType;

@end

/**

    A feedback attribute sub type.

*/
@interface FMLiveSwitchSdpRtcpFeedbackAttributeSubType : NSObject

+ (FMLiveSwitchSdpRtcpFeedbackAttributeSubType*) feedbackAttributeSubType;
/**

    Gets the "full intraframe refresh" sub-type.

*/
+ (NSString*) fir;
- (instancetype) init;
/**

    Gets the "layer refresh request" sub-type.

*/
+ (NSString*) lrr;
/**

    Gets the "picture loss indication" sub-type.

*/
+ (NSString*) pli;
/**

    Gets the "reference picture selection indication" sub-type.

*/
+ (NSString*) rpsi;
/**

    Gets the "slice loss indication" sub-type.

*/
+ (NSString*) sli;
/**

    Gets the "temporary maximum media-stream bitrate notification" sub-type.

*/
+ (NSString*) tmmbn;
/**

    Gets the "temporary maximum media-stream bitrate request" sub-type.

*/
+ (NSString*) tmmbr;

@end

/**

    A feedback attribute type.

*/
@interface FMLiveSwitchSdpRtcpFeedbackAttributeType : NSObject

/**

    Gets the "positive acknowledgement" type.

*/
+ (NSString*) ack;
/**

    Gets the application-defined type.

*/
+ (NSString*) app;
/**

    Gets the "codec control message" type.

*/
+ (NSString*) ccm;
+ (FMLiveSwitchSdpRtcpFeedbackAttributeType*) feedbackAttributeType;
- (instancetype) init;
/**

    Gets the "negative acknowledgement" type.

*/
+ (NSString*) nack;
/**

    Gets the "receiver estimated maximum bitrate" type.

*/
+ (NSString*) remb;
/**

    Gets the "transport congestion control" type.

*/
+ (NSString*) transportCC;

@end

/**

    This attribute is used to signal that RTP and RTCP traffic should be
    multiplexed on a single port.  It is a property attribute, which does
    not take a value.

*/
@interface FMLiveSwitchSdpRtcpMuxAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpRtcpMuxAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpRtcpMuxAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtcpMuxAttribute class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtcpMuxAttribute class.

*/
+ (FMLiveSwitchSdpRtcpMuxAttribute*) muxAttribute;

@end

/**

    https://tools.ietf.org/html/rfc5285#section-5
    Stream or media-level attribute used to indicate the presence of RTP Header Extensions, and the mapping of
    local identifiers used in the header extension to a larger namespace.
    
    A usable mapping MUST use IDs in the valid range, and each ID in this
    range MUST be used only once for each media (or only once if the
    mappings are session level).  Mappings that do not conform to these
    rules MAY be presented, for instance, during offer/answer negotiation
    as described in the next section, but remapping to conformant values
    is necessary before they can be applied.
    
    Each extension is named by a URI. Each local identifier potentially used in the stream is mapped to a
    string using an attribute of the form:
    a=extmap:VALUE["/"DIRECTION] URI EXTENSIONATTRIBUTES
    Where URI is a URI, as above, VALUE is the local identifier (ID)
    of this extension and is an integer in the valid range inclusive (0
    is reserved for padding in both forms, and 15 is reserved in the one-byte header form),
    and direction is one of "sendonly", "recvonly", "sendrecv", or "inactive" (without the quotes).
    Example:
    
    a=extmap:1 http://example.com/082005/ext.htm#ttime
    a=extmap:2/sendrecv http://example.com/082005/ext.htm#xmeta short

*/
@interface FMLiveSwitchSdpRtpExtMapAttribute : FMLiveSwitchSdpAttribute

/**

    Gets the direction of this extension (optional). If not present, stream direction is assumed to be the direction of the extension.

*/
- (FMLiveSwitchStreamDirection) direction;
/**

    Gets extension attributes (optional).

*/
- (NSString*) extensionAttributes;
/**

    RTP Extension Map Attribute.

    @param idValue Local identifier of this extension and is an integer in the valid range inclusive (0 is reserved for padding in both forms, and 15 is reserved in the one-byte header form.
    @param uri Well known extension identifier.
*/
+ (FMLiveSwitchSdpRtpExtMapAttribute*) extMapAttributeWithId:(int)idValue uri:(NSString*)uri;
/**

    RTP Extension Map Attribute.

    @param idValue Local identifier of this extension and is an integer in the valid range inclusive (0 is reserved for padding in both forms, and 15 is reserved in the one-byte header form.
    @param uri Well known extension identifier.
    @param direction Disered direction of this RTP Extension Header.
*/
+ (FMLiveSwitchSdpRtpExtMapAttribute*) extMapAttributeWithId:(int)idValue uri:(NSString*)uri direction:(FMLiveSwitchStreamDirection)direction;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpMapAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpRtpExtMapAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Gets the local identifier of this extension.

*/
- (int) id;
/**

    RTP Extension Map Attribute.

    @param idValue Local identifier of this extension and is an integer in the valid range inclusive (0 is reserved for padding in both forms, and 15 is reserved in the one-byte header form.
    @param uri Well known extension identifier.
*/
- (instancetype) initWithId:(int)idValue uri:(NSString*)uri;
/**

    RTP Extension Map Attribute.

    @param idValue Local identifier of this extension and is an integer in the valid range inclusive (0 is reserved for padding in both forms, and 15 is reserved in the one-byte header form.
    @param uri Well known extension identifier.
    @param direction Disered direction of this RTP Extension Header.
*/
- (instancetype) initWithId:(int)idValue uri:(NSString*)uri direction:(FMLiveSwitchStreamDirection)direction;
/**

    Sets the direction of this extension (optional). If not present, stream direction is assumed to be the direction of the extension.

*/
- (void) setDirection:(FMLiveSwitchStreamDirection)value;
/**

    Sets extension attributes (optional).

*/
- (void) setExtensionAttributes:(NSString*)value;
/**

    Sets the local identifier of this extension.

*/
- (void) setId:(int)value;
/**

    Gets the well-known URI of this extension

*/
- (NSString*) uri;

@end

/**

    This attribute maps from an RTP payload type number (as used in
    an "m=" line) to an format name denoting the payload format
    to be used.  It also provides information on the clock rate and
    format parameters.  It is a media-level attribute that is not
    dependent on charset.

*/
@interface FMLiveSwitchSdpRtpMapAttribute : FMLiveSwitchSdpAttribute

/**

    Adds an Rtcp Feedback attribute associated with this Map Attribute.

    @param attribute 
*/
- (void) addRelatedRtcpFeedbackAttribute:(FMLiveSwitchSdpRtcpFeedbackAttribute*)attribute;
/**

    Gets the payload clock rate.

*/
- (int) clockRate;
/**

    Gets the format name denoting the payload format to be used.

*/
- (NSString*) formatName;
/**

    Gets format parameters for the payload.

*/
- (NSString*) formatParameters;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpMapAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpRtpMapAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Gets the RTP map attribute for an IANA-reserved payload type.

    @param payloadType The payload type.
*/
+ (FMLiveSwitchSdpRtpMapAttribute*) getIanaMapAttributeWithPayloadType:(int)payloadType;
/**

    Gets the RTCP "ccm fir" feedback attribute associated with this payload type.

*/
- (FMLiveSwitchSdpRtcpFeedbackAttribute*) getRelatedCcmFirFeedbackAttribute;
/**

    Gets the RTCP "ccm lrr" feedback attribute associated with this payload type.

*/
- (FMLiveSwitchSdpRtcpFeedbackAttribute*) getRelatedCcmLrrFeedbackAttribute;
/**

    Gets the RTCP "ccm tmmbn" feedback attribute associated with this payload type.

*/
- (FMLiveSwitchSdpRtcpFeedbackAttribute*) getRelatedCcmTmmbnFeedbackAttribute;
/**

    Gets the RTCP "ccm tmmbr" feedback attribute associated with this payload type.

*/
- (FMLiveSwitchSdpRtcpFeedbackAttribute*) getRelatedCcmTmmbrFeedbackAttribute;
/**

    Gets the RTCP "nack" feedback attribute associated with this payload type.

*/
- (FMLiveSwitchSdpRtcpFeedbackAttribute*) getRelatedNackFeedbackAttribute;
/**

    Gets the RTCP "nack pli" feedback attribute associated with this payload type.

*/
- (FMLiveSwitchSdpRtcpFeedbackAttribute*) getRelatedNackPliFeedbackAttribute;
/**

    Gets the RTCP "nack rpsi" feedback attribute associated with this payload type.

*/
- (FMLiveSwitchSdpRtcpFeedbackAttribute*) getRelatedNackRpsiFeedbackAttribute;
/**

    Gets the RTCP "nack sli" feedback attribute associated with this payload type.

*/
- (FMLiveSwitchSdpRtcpFeedbackAttribute*) getRelatedNackSliFeedbackAttribute;
/**

    Gets the RTCP "goog-remb" feedback attribute associated with this payload type.

*/
- (FMLiveSwitchSdpRtcpFeedbackAttribute*) getRelatedRembFeedbackAttribute;
/**

    Gets the RTCP feedback attribute for the given payload type, type and subtype associated with this payload type.

    @param payloadType The payload type.
    @param type The type.
    @param subType The sub-type.
*/
- (FMLiveSwitchSdpRtcpFeedbackAttribute*) getRelatedRtcpFeedbackAttributeWithPayloadType:(int)payloadType type:(NSString*)type subType:(NSString*)subType;
/**

    Gets the RTCP feedback attribute for the given type and subtype associated with this payload type.

    @param type The type.
    @param subType The sub-type.
*/
- (FMLiveSwitchSdpRtcpFeedbackAttribute*) getRelatedRtcpFeedbackAttributeWithType:(NSString*)type subType:(NSString*)subType;
/**

    Gets the RTCP "transport-cc" feedback attribute associated with this payload type.

*/
- (FMLiveSwitchSdpRtcpFeedbackAttribute*) getRelatedTransportCCFeedbackAttribute;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpMapAttribute class.

    @param payloadType The RTP payload type number.
    @param formatName The format name denoting the payload format to be used.
    @param clockRate The payload clock rate.
*/
- (instancetype) initWithPayloadType:(int)payloadType formatName:(NSString*)formatName clockRate:(int)clockRate;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpMapAttribute class.

    @param payloadType The RTP payload type number.
    @param formatName The format name denoting the payload format to be used.
    @param clockRate The payload clock rate.
    @param formatParameters The format parameters for the payload.
*/
- (instancetype) initWithPayloadType:(int)payloadType formatName:(NSString*)formatName clockRate:(int)clockRate formatParameters:(NSString*)formatParameters;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpMapAttribute class.

    @param payloadType The RTP payload type number.
    @param formatName The format name denoting the payload format to be used.
    @param clockRate The payload clock rate.
*/
+ (FMLiveSwitchSdpRtpMapAttribute*) mapAttributeWithPayloadType:(int)payloadType formatName:(NSString*)formatName clockRate:(int)clockRate;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpMapAttribute class.

    @param payloadType The RTP payload type number.
    @param formatName The format name denoting the payload format to be used.
    @param clockRate The payload clock rate.
    @param formatParameters The format parameters for the payload.
*/
+ (FMLiveSwitchSdpRtpMapAttribute*) mapAttributeWithPayloadType:(int)payloadType formatName:(NSString*)formatName clockRate:(int)clockRate formatParameters:(NSString*)formatParameters;
/**

    Gets the RTP payload type number.

*/
- (int) payloadType;
/**

    Gets Format Parameters attribute associated with this Map Attribute

*/
- (FMLiveSwitchSdpFormatParametersAttribute*) relatedFormatParametersAttribute;
/**

    Gets Rtcp Feedback attributes associated with this Map Attribute.

*/
- (NSMutableArray*) relatedRtcpFeedbackAttributes;
/**

    Removes an Rtcp Feedback attribute associated with this Map Attribute.
    Returns true if the attribute was reomved; if the attribute was not present, returns false.

    @param attribute 
*/
- (bool) removeRelatedRtcpFeedbackAttribute:(FMLiveSwitchSdpRtcpFeedbackAttribute*)attribute;
/**

    Resets Rtcp Feedback attributes associated with this Map Attribute.

*/
- (void) resetRtcpFeedbackAttributes:(NSMutableArray*)attributes;
/**

    Sets the RTP payload type number.

*/
- (void) setPayloadType:(int)value;
/**

    Sets Format Parameters attribute associated with this Map Attribute

*/
- (void) setRelatedFormatParametersAttribute:(FMLiveSwitchSdpFormatParametersAttribute*)value;

@end

/**

    An SDP media description with a transport protocol of "RTP/AVP" or "RTP/SAVP".

*/
@interface FMLiveSwitchSdpRtpMedia : FMLiveSwitchSdpMedia

/**

    Generates Rtp Prfile for a given combination of stream type, whjether or not RTCP-based feedback is supported, whether (D)TLS is in use and whether encryption is in use in general.

    @param type Stream type.
    @param rtcpFeedbackSupported Indicates whether Rtcp-based feedback is supported.
    @param useDtls Indicates whether (D)TLS is in use.
    @param useEncryption Indicates whether encryption is in use.
*/
+ (NSString*) generateRtpProfileWithType:(FMLiveSwitchStreamType)type rtcpFeedbackSupported:(bool)rtcpFeedbackSupported useDtls:(bool)useDtls useEncryption:(bool)useEncryption;
/**

    Gets the payload types.

    @param formatDesciption The media format desciption.
*/
+ (NSMutableArray*) getPayloadTypesWithFormatDesciption:(NSString*)formatDesciption;
/**

    Returns the clockrate of a well-known payload type.

    @param payloadType The well-known payload type to get the clockrate of.
*/
+ (int) getWellKnownPayloadClockRateWithPayloadType:(int)payloadType;
/**

    Returns the name of a well-known payload type.

    @param payloadType The well-known payload type to get the name of.
*/
+ (NSString*) getWellKnownPayloadNameWithPayloadType:(int)payloadType;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpMedia class.

    @param mediaType The media type. See FMLiveSwitchSdpMediaType for possible values.
    @param transportPort The transport port.
    @param transportProtocol The transport protocol.
    @param rtpPayloadTypeNumbers The RTP payload type numbers.
*/
- (instancetype) initWithMediaType:(NSString*)mediaType transportPort:(int)transportPort transportProtocol:(NSString*)transportProtocol rtpPayloadTypeNumbers:(NSMutableArray*)rtpPayloadTypeNumbers;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpMedia class.

    @param mediaType The media type. See FMLiveSwitchSdpMediaType for possible values.
    @param transportPort The transport port.
    @param transportProtocol The transport protocol.
    @param rtpPayloadTypeNumbers The RTP payload type numbers.
*/
+ (FMLiveSwitchSdpRtpMedia*) mediaWithMediaType:(NSString*)mediaType transportPort:(int)transportPort transportProtocol:(NSString*)transportProtocol rtpPayloadTypeNumbers:(NSMutableArray*)rtpPayloadTypeNumbers;
/**

    Gets the protocol keyword for the extended RTP audio/video profile.

*/
+ (NSString*) rtpAvpfTransportProtocol;
/**

    Gets the protocol keyword for the RTP audio/video profile.

*/
+ (NSString*) rtpAvpTransportProtocol;
/**

    Gets the protocol keyword for the extended Secure RTP audio/video profile.

*/
+ (NSString*) rtpSavpfTransportProtocol;
/**

    Gets the protocol keyword for the Secure RTP audio/video profile.

*/
+ (NSString*) rtpSavpTransportProtocol;
/**

    Returns a value indicating whther a given protocol supports encryption.

    @param protocol Protocol keyword.
    @return Value indicating whther a given protocol supports encryption.
*/
+ (bool) supportsEncryptionWithProtocol:(NSString*)protocol;
/**

    Returns a value indicating whther a given protocol supports encryption.

    @param protocol Protocol keyword.
    @return Value indicating whther a given protocol supports encryption.
*/
+ (bool) supportsRtcpBasedFeedbackWithProtocol:(NSString*)protocol;
/**

    Gets the protocol keyword for the extended Secure RTP audio/video profile with DTLS key exchange.

*/
+ (NSString*) udpTlsRtpSavpfTransportProtocol;
/**

    Gets the protocol keyword for the Secure RTP audio/video profile with DTLS key exchange.

*/
+ (NSString*) udpTlsRtpSavpTransportProtocol;

@end

/**

    A stream for a simulcast stream description.

*/
@interface FMLiveSwitchSdpRtpSimulcastStream : NSObject

/**

    Gets the identifiers.

*/
- (NSMutableArray*) ids;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpSimulcastStream class.

    @param idValue The identifier.
*/
- (instancetype) initWithId:(FMLiveSwitchSdpRtpSimulcastStreamId*)idValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpSimulcastStream class.

    @param ids The identifiers.
*/
- (instancetype) initWithIds:(NSMutableArray*)ids;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpSimulcastStream class.

    @param idValue The identifier.
*/
+ (FMLiveSwitchSdpRtpSimulcastStream*) simulcastStreamWithId:(FMLiveSwitchSdpRtpSimulcastStreamId*)idValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpSimulcastStream class.

    @param ids The identifiers.
*/
+ (FMLiveSwitchSdpRtpSimulcastStream*) simulcastStreamWithIds:(NSMutableArray*)ids;

@end

/**

    The allowed directions for a simulcast attribute.

*/
@interface FMLiveSwitchSdpRtpSimulcastDirection : NSObject

- (instancetype) init;
/**

    Gets the receive direction ("recv").

*/
+ (NSString*) receive;
/**

    Gets the send direction ("send").

*/
+ (NSString*) send;
+ (FMLiveSwitchSdpRtpSimulcastDirection*) simulcastDirection;

@end

/**

    A stream description for a simulcast attribute.

*/
@interface FMLiveSwitchSdpRtpSimulcastStreamDescription : NSObject

/**

    Gets the direction.

*/
- (NSString*) direction;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpSimulcastStreamDescription class.

    @param direction The direction.
    @param streams The streams.
*/
- (instancetype) initWithDirection:(NSString*)direction streams:(NSMutableArray*)streams;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpSimulcastStreamDescription class.

    @param direction The direction.
    @param streams The streams.
*/
+ (FMLiveSwitchSdpRtpSimulcastStreamDescription*) simulcastStreamDescriptionWithDirection:(NSString*)direction streams:(NSMutableArray*)streams;
/**

    Gets the streams.

*/
- (NSMutableArray*) streams;

@end

/**

    The allowed directions for an RID attribute.

*/
@interface FMLiveSwitchSdpRtpRidDirection : NSObject

- (instancetype) init;
/**

    Gets the receive direction ("recv").

*/
+ (NSString*) receive;
+ (FMLiveSwitchSdpRtpRidDirection*) ridDirection;
/**

    Gets the send direction ("send").

*/
+ (NSString*) send;

@end

/**

    A restriction for an RID attribute.

*/
@interface FMLiveSwitchSdpRtpRidRestriction : NSObject

/**

    Gets the "depend" key, for spatial resolution in pixels. The
    value is a comma-separated list of rid-ids.These rid-ids
    identify RTP streams that this stream depends on in order to allow
    for proper interpretation.  The mechanism defined in this document
    allows for such dependencies to be expressed only when the streams
    are in the same media section.

*/
+ (NSString*) dependKey;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpRidRestriction class.

    @param key The key.
*/
- (instancetype) initWithKey:(NSString*)key;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpRidRestriction class.

    @param key The key.
    @param value The value.
*/
- (instancetype) initWithKey:(NSString*)key value:(NSString*)value;
/**

    Gets the restriction key.

*/
- (NSString*) key;
/**

    Gets the "max-br" key, for bit rate in bits per second. The restriction applies
    to the media payload only, and does not include overhead
    introduced by other layers(e.g., RTP, UDP, IP, or Ethernet).  The
    exact means of keeping within this limit are left up to the
    implementation, and instantaneous excursions outside the limit are
    permissible. For any given one-second sliding window, however,
    the total number of bits in the payload portion of RTP SHOULD NOT
    exceed the value specified in "max-br."

*/
+ (NSString*) maxBitrateKey;
/**

    Gets the "max-bpp" key, for maximum number of bits per pixel, calculated as an
    average of all samples of any given coded picture. This is
    expressed as a floating point value, with an allowed range of
    0.0001 to 48.0.  These values MUST NOT be encoded with more than
    four digits to the right of the decimal point.

*/
+ (NSString*) maxBitsPerPixelKey;
/**

    Gets the "max-fs" key, for frame size in pixels per frame. This is the product
    of frame width and frame height, in pixels, for rectangular frames.

*/
+ (NSString*) maxFrameSizeKey;
/**

    Gets the "max-fps" key, for frame rate in frames per second. For encoders that
    do not use a fixed framerate for encoding, this value is used to
    restrict the minimum amount of time between frames: the time
    between any two consecutive frames SHOULD NOT be less than 1 / max -
    fps seconds.

*/
+ (NSString*) maxFramesPerSecondKey;
/**

    Gets the "max-height" key, for spatial resolution in pixels. In the case that
    stream orientation signaling is used to modify the intended
    display orientation, this attribute refers to the height of the
    stream when a rotation of zero degrees is encoded.

*/
+ (NSString*) maxHeightKey;
/**

    Gets the "max-pps" key, for pixel rate in pixels per second. This value SHOULD
    be handled identically to max-fps, after performing the following
    conversion: max-fps = max-pps / (width* height).  If the stream
    resolution changes, this value is recalculated. Due to this
    recalculation, excursions outside the specified maximum are
    possible near resolution change boundaries.

*/
+ (NSString*) maxPixelsPerSecondKey;
/**

    Gets the "max-width" key, for spatial resolution in pixels. In the case that
    stream orientation signaling is used to modify the intended
    display orientation, this attribute refers to the width of the
    stream when a rotation of zero degrees is encoded.

*/
+ (NSString*) maxWidthKey;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpRidRestriction class.

    @param key The key.
*/
+ (FMLiveSwitchSdpRtpRidRestriction*) ridRestrictionWithKey:(NSString*)key;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpRidRestriction class.

    @param key The key.
    @param value The value.
*/
+ (FMLiveSwitchSdpRtpRidRestriction*) ridRestrictionWithKey:(NSString*)key value:(NSString*)value;
/**

    Sets the restriction value.

*/
- (void) setValue:(NSString*)value;
/**

    Gets the restriction value.

*/
- (NSString*) value;

@end

/**

    The SDP media attribute "rid" specifies restrictions defining a
    unique RTP payload configuration.

*/
@interface FMLiveSwitchSdpRtpRidAttribute : FMLiveSwitchSdpAttribute

/**

    Gets the direction.

*/
- (NSString*) direction;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpRidAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpRtpRidAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Gets a restriction value.

    @param restrictionKey The restriction key.
*/
- (NSString*) getRestrictionValueWithRestrictionKey:(NSString*)restrictionKey;
/**

    Gets the identifier.

*/
- (NSString*) id;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpRidAttribute class.

    @param idValue The identifier.
    @param direction The direction.
*/
- (instancetype) initWithId:(NSString*)idValue direction:(NSString*)direction;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpRidAttribute class.

    @param idValue The identifier.
    @param direction The direction.
    @param payloadTypes The payload types.
*/
- (instancetype) initWithId:(NSString*)idValue direction:(NSString*)direction payloadTypes:(NSMutableArray*)payloadTypes;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpRidAttribute class.

    @param idValue The identifier.
    @param direction The direction.
    @param payloadTypes The payload types.
    @param restrictions The restrictions.
*/
- (instancetype) initWithId:(NSString*)idValue direction:(NSString*)direction payloadTypes:(NSMutableArray*)payloadTypes restrictions:(NSMutableArray*)restrictions;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpRidAttribute class.

    @param idValue The identifier.
    @param direction The direction.
    @param restrictions The restrictions.
*/
- (instancetype) initWithId:(NSString*)idValue direction:(NSString*)direction restrictions:(NSMutableArray*)restrictions;
/**

    Gets the payload types that can
    be used in the associated stream. This
    property is optional and may be null.

*/
- (NSMutableArray*) payloadTypes;
/**

    Gets the codec-agnostic restrictions
    to which the corresponding stream will conform.
    This property is optional and may be null.

*/
- (NSMutableArray*) restrictions;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpRidAttribute class.

    @param idValue The identifier.
    @param direction The direction.
*/
+ (FMLiveSwitchSdpRtpRidAttribute*) ridAttributeWithId:(NSString*)idValue direction:(NSString*)direction;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpRidAttribute class.

    @param idValue The identifier.
    @param direction The direction.
    @param payloadTypes The payload types.
*/
+ (FMLiveSwitchSdpRtpRidAttribute*) ridAttributeWithId:(NSString*)idValue direction:(NSString*)direction payloadTypes:(NSMutableArray*)payloadTypes;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpRidAttribute class.

    @param idValue The identifier.
    @param direction The direction.
    @param payloadTypes The payload types.
    @param restrictions The restrictions.
*/
+ (FMLiveSwitchSdpRtpRidAttribute*) ridAttributeWithId:(NSString*)idValue direction:(NSString*)direction payloadTypes:(NSMutableArray*)payloadTypes restrictions:(NSMutableArray*)restrictions;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpRidAttribute class.

    @param idValue The identifier.
    @param direction The direction.
    @param restrictions The restrictions.
*/
+ (FMLiveSwitchSdpRtpRidAttribute*) ridAttributeWithId:(NSString*)idValue direction:(NSString*)direction restrictions:(NSMutableArray*)restrictions;
/**

    Sets the payload types that can
    be used in the associated stream. This
    property is optional and may be null.

*/
- (void) setPayloadTypes:(NSMutableArray*)value;
/**

    Sets the codec-agnostic restrictions
    to which the corresponding stream will conform.
    This property is optional and may be null.

*/
- (void) setRestrictions:(NSMutableArray*)value;
/**

    Validates that the identifier conforms to RFC syntax,
    which means that it only contains alpha-numeric
    characters and/or the hyphen and underscore.
    See https://tools.ietf.org/html/draft-ietf-avtext-rid/ and
    https://tools.ietf.org/html/draft-ietf-mmusic-rid/ for more info.

    @param idValue The identifier
*/
+ (bool) validateId:(NSString*)idValue;

@end

/**

    The SDP media attribute "simulcast" describes, independently for send
    and receive directions, the number of simulcast RTP streams as well
    as potential alternative formats for each simulcast RTP stream.

*/
@interface FMLiveSwitchSdpRtpSimulcastAttribute : FMLiveSwitchSdpAttribute

/**

    Gets the first description.

*/
- (FMLiveSwitchSdpRtpSimulcastStreamDescription*) description1;
/**

    Gets the second description.

*/
- (FMLiveSwitchSdpRtpSimulcastStreamDescription*) description2;
/**

    Gets the version of the IETF draft to comply with.
    https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast

*/
- (int) draftVersion;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpSimulcastAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpRtpSimulcastAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpSimulcastAttribute class.

    @param description The description.
*/
- (instancetype) initWithDescription:(FMLiveSwitchSdpRtpSimulcastStreamDescription*)description;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpSimulcastAttribute class.

    @param description1 The first description.
    @param description2 The second description.
*/
- (instancetype) initWithDescription1:(FMLiveSwitchSdpRtpSimulcastStreamDescription*)description1 description2:(FMLiveSwitchSdpRtpSimulcastStreamDescription*)description2;
/**

    Gets the 'receive' description.

*/
- (FMLiveSwitchSdpRtpSimulcastStreamDescription*) receiveDescription;
/**

    Gets the 'send' description.

*/
- (FMLiveSwitchSdpRtpSimulcastStreamDescription*) sendDescription;
/**

    Sets the version of the IETF draft to comply with.
    https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast

*/
- (void) setDraftVersion:(int)value;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpSimulcastAttribute class.

    @param description The description.
*/
+ (FMLiveSwitchSdpRtpSimulcastAttribute*) simulcastAttributeWithDescription:(FMLiveSwitchSdpRtpSimulcastStreamDescription*)description;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpSimulcastAttribute class.

    @param description1 The first description.
    @param description2 The second description.
*/
+ (FMLiveSwitchSdpRtpSimulcastAttribute*) simulcastAttributeWithDescription1:(FMLiveSwitchSdpRtpSimulcastStreamDescription*)description1 description2:(FMLiveSwitchSdpRtpSimulcastStreamDescription*)description2;

@end

/**

    A simulcast stream identifier.

*/
@interface FMLiveSwitchSdpRtpSimulcastStreamId : NSObject

/**

    Gets the identifier.

*/
- (NSString*) id;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpSimulcastStreamId class.

    @param idValue The identifier.
*/
- (instancetype) initWithId:(NSString*)idValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpSimulcastStreamId class.

    @param idValue The identifier.
    @param paused Whether the stream is paused.
*/
- (instancetype) initWithId:(NSString*)idValue paused:(bool)paused;
/**

    Gets whether the stream is paused.

*/
- (bool) paused;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpSimulcastStreamId class.

    @param idValue The identifier.
*/
+ (FMLiveSwitchSdpRtpSimulcastStreamId*) simulcastStreamId:(NSString*)idValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpSimulcastStreamId class.

    @param idValue The identifier.
    @param paused Whether the stream is paused.
*/
+ (FMLiveSwitchSdpRtpSimulcastStreamId*) simulcastStreamId:(NSString*)idValue paused:(bool)paused;

@end

/**

    The SDP media attribute "ssrc-group" expresses a relationship among
    several sources of an RTP session.

*/
@interface FMLiveSwitchSdpRtpSsrcGroupAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpRtpSsrcGroupAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpRtpSsrcGroupAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpSsrcGroupAttribute class.

    @param semantics The semantics.
    @param synchronizationSources The synchronization sources.
*/
- (instancetype) initWithSemantics:(NSString*)semantics synchronizationSources:(NSMutableArray*)synchronizationSources;
/**

    Gets the semantics.

*/
- (NSString*) semantics;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpSsrcGroupAttribute class.

    @param semantics The semantics.
    @param synchronizationSources The synchronization sources.
*/
+ (FMLiveSwitchSdpRtpSsrcGroupAttribute*) ssrcGroupAttributeWithSemantics:(NSString*)semantics synchronizationSources:(NSMutableArray*)synchronizationSources;
/**

    Gets the synchronization sources.

*/
- (NSMutableArray*) synchronizationSources;

@end

/**

    The SDP media attribute "ssrc" indicates a property (known as a
    "source-level attribute") of a media source (RTP stream) within an
    RTP session.

*/
@interface FMLiveSwitchSdpRtpSsrcAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpRtpSsrcAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpRtpSsrcAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpSsrcAttribute class.

    @param synchronizationSource The synchronization source.
    @param attributeName Name of the attribute.
*/
- (instancetype) initWithSynchronizationSource:(long long)synchronizationSource attributeName:(NSString*)attributeName;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpSsrcAttribute class.

    @param synchronizationSource The synchronization source.
    @param attributeName Name of the attribute.
    @param attributeValue The attribute value.
*/
- (instancetype) initWithSynchronizationSource:(long long)synchronizationSource attributeName:(NSString*)attributeName attributeValue:(NSString*)attributeValue;
/**

    Gets the name of the attribute.

*/
- (NSString*) name;
/**

    Sets the attribute value.

*/
- (void) setValue:(NSString*)value;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpSsrcAttribute class.

    @param synchronizationSource The synchronization source.
    @param attributeName Name of the attribute.
*/
+ (FMLiveSwitchSdpRtpSsrcAttribute*) ssrcAttributeWithSynchronizationSource:(long long)synchronizationSource attributeName:(NSString*)attributeName;
/**

    Initializes a new instance of the FMLiveSwitchSdpRtpSsrcAttribute class.

    @param synchronizationSource The synchronization source.
    @param attributeName Name of the attribute.
    @param attributeValue The attribute value.
*/
+ (FMLiveSwitchSdpRtpSsrcAttribute*) ssrcAttributeWithSynchronizationSource:(long long)synchronizationSource attributeName:(NSString*)attributeName attributeValue:(NSString*)attributeValue;
/**

    Gets the synchronization source.

*/
- (long long) synchronizationSource;
/**

    Gets the attribute value.

*/
- (NSString*) value;

@end

/**

    SSRC atribute names.

*/
@interface FMLiveSwitchSdpRtpSsrcAttributeName : NSObject

/**

    Gets a value indicating canonical name.

*/
+ (NSString*) cName;
/**

    Gets a value indicating format parameters.

*/
+ (NSString*) formatParameters;
- (instancetype) init;
/**

    Gets a value indicating label.

*/
+ (NSString*) label;
/**

    Gets a value indicating media stream ID.

*/
+ (NSString*) mediaStreamId;
/**

    Gets a value indicating media stream label.

*/
+ (NSString*) mediaStreamLabel;
/**

    Gets a value indicating previous SSRC.

*/
+ (NSString*) previousSsrc;
+ (FMLiveSwitchSdpRtpSsrcAttributeName*) ssrcAttributeName;

@end

/**

    AB: Legacy attribute. To be removed when Firefox and Chrome stop using it.
    The sctpmap attribute maps from a port number (as used in an "m="
    line) to an encoding name denoting the payload format to be used on
    top of the SCTP association or the actual protocol running on top of it.
    Last appears in https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-06#page-6
    Has been replaced in subsequent drafts but is used in Firefox and Chrome for now.

*/
@interface FMLiveSwitchSdpSctpMapAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpSctpPortAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpSctpMapAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpSctpPortAttribute class.

    @param port The SCTP port.
    @param protocol The protocol.
    @param streams The streams.
*/
- (instancetype) initWithPort:(int)port protocol:(NSString*)protocol streams:(int)streams;
/**

    Initializes a new instance of the FMLiveSwitchSdpSctpPortAttribute class.

    @param port The SCTP port.
    @param protocol The protocol.
    @param streams The streams.
*/
+ (FMLiveSwitchSdpSctpMapAttribute*) mapAttributeWithPort:(int)port protocol:(NSString*)protocol streams:(int)streams;
/**

    Gets the SCTP port.

*/
- (int) port;
/**

    Gets the SCTP sub-protocol (association usage).

*/
- (NSString*) sctpProtocol;
/**

    Gets the number of incoming streams.

*/
- (int) streams;

@end

/**

    The attribute can be associated with an m- line to indicate
    the maximum message size (indicated in bytes) that an SCTP endpoint
    is willing to receive on the SCTP association associated with the m-
    line. Different attribute values can be used in each direction.

*/
@interface FMLiveSwitchSdpSctpMaxMessageSizeAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpSctpMaxMessageSizeAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpSctpMaxMessageSizeAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpSctpMaxMessageSizeAttribute class.

    @param maxMessageSize The maximum message size in bytes.
*/
- (instancetype) initWithMaxMessageSize:(long long)maxMessageSize;
/**

    Gets the maximum message size in bytes.

*/
- (long long) maxMessageSize;
/**

    Initializes a new instance of the FMLiveSwitchSdpSctpMaxMessageSizeAttribute class.

    @param maxMessageSize The maximum message size in bytes.
*/
+ (FMLiveSwitchSdpSctpMaxMessageSizeAttribute*) maxMessageSizeAttributeWithMaxMessageSize:(long long)maxMessageSize;

@end

/**

    An SDP media description with a transport protocol of "RTP/AVP" or "RTP/SAVP".

*/
@interface FMLiveSwitchSdpSctpMedia : FMLiveSwitchSdpMedia

/**

    Gets the protocol keyword for the SCTP over DTLS data profile.

*/
+ (NSString*) dtlsSctpTransportProtocol;
/**

    Initializes a new instance of the FMLiveSwitchSdpSctpMedia class.

    @param mediaType The media type. See FMLiveSwitchSdpMediaType for possible values.
    @param transportPort The transport port.
    @param transportProtocol The transport protocol.
    @param associationUsage The association usage.
*/
- (instancetype) initWithMediaType:(NSString*)mediaType transportPort:(int)transportPort transportProtocol:(NSString*)transportProtocol associationUsage:(NSString*)associationUsage;
/**

    Returns a value indicating whther a given protocol is supported.

    @param protocol Protocol keyword.
    @return Value indicating whther a given protocol is supported.
*/
+ (bool) isSupportedWithProtocol:(NSString*)protocol;
/**

    Initializes a new instance of the FMLiveSwitchSdpSctpMedia class.

    @param mediaType The media type. See FMLiveSwitchSdpMediaType for possible values.
    @param transportPort The transport port.
    @param transportProtocol The transport protocol.
    @param associationUsage The association usage.
*/
+ (FMLiveSwitchSdpSctpMedia*) mediaWithMediaType:(NSString*)mediaType transportPort:(int)transportPort transportProtocol:(NSString*)transportProtocol associationUsage:(NSString*)associationUsage;
/**

    Gets the protocol keyword for the DTLS over SCTP data profile.

*/
+ (NSString*) sctpDtlsTransportProtocol;
/**

    Gets the protocol keyword for the SCTP data profile.

*/
+ (NSString*) sctpTransportProtocol;
/**

    Returns a value indicating whther a given protocol supports encryption.

    @param protocol Protocol keyword.
    @return Value indicating whther a given protocol supports encryption.
*/
+ (bool) supportsEncryptionWithProtocol:(NSString*)protocol;
/**

    Gets the protocol keyword for the SCTP over DTLS over TCP data profile.

*/
+ (NSString*) tcpDtlsSctpTransportProtocol;
/**

    Gets the protocol keyword for the SCTP over DTLS over UDP data profile.

*/
+ (NSString*) udpDtlsSctpTransportProtocol;
/**

    Gets the Association Usage name registry for WebRTC Datachannel.

*/
+ (NSString*) webRtcDatachannelAssociationUsage;

@end

/**

    The attribute can be associated with an SDP media description (m-
    line) with a 'UDP/DTLS/SCTP' or a 'TCP/DTLS/SCTP' proto value, in
    which case the m- line port value indicates the port of the
    underlying transport-layer protocol (UDP or TCP), on which SCTP is
    carried, and the 'sctp-port' value indicates the SCTP port.

*/
@interface FMLiveSwitchSdpSctpPortAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpSctpPortAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpSctpPortAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpSctpPortAttribute class.

    @param port The SCTP port.
*/
- (instancetype) initWithPort:(int)port;
/**

    Gets the SCTP port.

*/
- (int) port;
/**

    Initializes a new instance of the FMLiveSwitchSdpSctpPortAttribute class.

    @param port The SCTP port.
*/
+ (FMLiveSwitchSdpSctpPortAttribute*) portAttributeWithPort:(int)port;

@end

/**

    This can be a session-level attribute or a media-level
    attribute.  As a session-level attribute, it specifies the
    language for the session description.  As a media-level
    attribute, it specifies the language for any media-level SDP
    information field associated with that media.  Multiple sdplang
    attributes can be provided either at session or media level if
    multiple languages in the session description or media use
    multiple languages, in which case the order of the attributes
    indicates the order of importance of the various languages in
    the session or media from most important to least important.

*/
@interface FMLiveSwitchSdpSdpLanguageAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpSdpLanguageAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpSdpLanguageAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpSdpLanguageAttribute class.

    @param languageTag The language for either the session description
            (if used as a session-level attribute) or any media-level SDP
            information field associated with that media (if used as a
            media-level attribute).
*/
- (instancetype) initWithLanguageTag:(NSString*)languageTag;
/**

    Gets the language for either the session description
    (if used as a session-level attribute) or any media-level SDP
    information field associated with that media (if used as a
    media-level attribute).

*/
- (NSString*) languageTag;
/**

    Initializes a new instance of the FMLiveSwitchSdpSdpLanguageAttribute class.

    @param languageTag The language for either the session description
            (if used as a session-level attribute) or any media-level SDP
            information field associated with that media (if used as a
            media-level attribute).
*/
+ (FMLiveSwitchSdpSdpLanguageAttribute*) sdpLanguageAttributeWithLanguageTag:(NSString*)languageTag;

@end

/**

    This specifies that the tools should be started in send-only
    mode.  An example may be where a different unicast address is
    to be used for a traffic destination than for a traffic source.
    In such a case, two media descriptions may be used, one
    sendonly and one recvonly.  It can be either a session- or
    media-level attribute, but would normally only be used as a
    media attribute.  It is not dependent on charset.  Note that
    sendonly applies only to the media, and any associated control
    protocol (e.g., RTCP) SHOULD still be received and processed as
    normal.

*/
@interface FMLiveSwitchSdpSendOnlyAttribute : FMLiveSwitchSdpDirectionAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpSendOnlyAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpSendOnlyAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpSendOnlyAttribute class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchSdpSendOnlyAttribute class.

*/
+ (FMLiveSwitchSdpSendOnlyAttribute*) sendOnlyAttribute;
/**

    Gets the stream direction.

*/
- (FMLiveSwitchStreamDirection) streamDirection;

@end

/**

    This specifies that the tools should be started in send and
    receive mode.  This is necessary for interactive conferences
    with tools that default to receive-only mode.  It can be either
    a session or media-level attribute, and it is not dependent on
    charset.

*/
@interface FMLiveSwitchSdpSendReceiveAttribute : FMLiveSwitchSdpDirectionAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpSendReceiveAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpSendReceiveAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpSendReceiveAttribute class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchSdpSendReceiveAttribute class.

*/
+ (FMLiveSwitchSdpSendReceiveAttribute*) sendReceiveAttribute;
/**

    Gets the stream direction.

*/
- (FMLiveSwitchStreamDirection) streamDirection;

@end

/**

    Defines valid SDP setups.

*/
@interface FMLiveSwitchSdpSetup : NSObject

/**

    Gets the SDP setup meaning "Active".

*/
+ (NSString*) active;
/**

    Gets the SDP setup meaning "Active or Passive".

*/
+ (NSString*) actPass;
/**

    Gets the SDP setup meaning "Passive".

*/
+ (NSString*) passive;

@end

/**

    The 'setup' attribute indicates which of the end points should
    initiate the TCP connection establishment (i.e., send the initial TCP
    SYN).  The 'setup' attribute is charset-independent and can be a
    session-level or a media-level attribute.

*/
@interface FMLiveSwitchSdpSetupAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpSetupAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpSetupAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpSetupAttribute class.

    @param setup Which end point should initiate the connection establishment. See FMLiveSwitchSdpSetupAttribute#setup for possible values.
*/
- (instancetype) initWithSetup:(NSString*)setup;
/**

    Gets which end point should initiate the connection establishment. See FMLiveSwitchSdpSetupAttribute#setup for possible values.

*/
- (NSString*) setup;
/**

    Initializes a new instance of the FMLiveSwitchSdpSetupAttribute class.

    @param setup Which end point should initiate the connection establishment. See FMLiveSwitchSdpSetupAttribute#setup for possible values.
*/
+ (FMLiveSwitchSdpSetupAttribute*) setupAttributeWithSetup:(NSString*)setup;

@end

/**

    An SDP time description element.

*/
@interface FMLiveSwitchSdpTimeDescription : NSObject

/**

    Adds a repeat time.

    @param repeatTime The repeat time to add.
*/
- (void) addRepeatTime:(FMLiveSwitchSdpRepeatTime*)repeatTime;
/**

    Converts this instance to a string.

*/
- (NSString*) description;
/**

    Initializes a new instance of the FMLiveSwitchSdpTimeDescription class.

    @param timing The start and stop time.
*/
- (instancetype) initWithTiming:(FMLiveSwitchSdpTiming*)timing;
/**

    Creates an FMLiveSwitchSdpTimeDescription instance from a string.

    @param s The string to parse.
*/
+ (FMLiveSwitchSdpTimeDescription*) parseWithS:(NSString*)s;
/**

    Removes a repeat time.

    @param repeatTime The repeat time to remove.
*/
- (bool) removeRepeatTime:(FMLiveSwitchSdpRepeatTime*)repeatTime;
/**

    Gets the array of repeat times.

*/
- (NSMutableArray*) repeatTimes;
/**

    Initializes a new instance of the FMLiveSwitchSdpTimeDescription class.

    @param timing The start and stop time.
*/
+ (FMLiveSwitchSdpTimeDescription*) timeDescriptionWithTiming:(FMLiveSwitchSdpTiming*)timing;
/**

    Gets the start and stop time.

*/
- (FMLiveSwitchSdpTiming*) timing;

@end

/**

    An SDP time zone element.

*/
@interface FMLiveSwitchSdpTimeZone : NSObject

/**

    Gets the time that a time zone adjustment happens (network time protocol).

*/
- (double) adjustmentTime;
/**

    Converts this instance to a string.

*/
- (NSString*) description;
/**

    Initializes a new instance of the FMLiveSwitchSdpTimeZone class.

    @param adjustmentTime The time that a time zone adjustment happens (network time protocol).
    @param offset The offset from the time when the session was first scheduled.
*/
- (instancetype) initWithAdjustmentTime:(double)adjustmentTime offset:(FMLiveSwitchTimeSpan*)offset;
/**

    Gets the offset from the time when the session was first scheduled.

*/
- (FMLiveSwitchTimeSpan*) offset;
/**

    Creates an FMLiveSwitchSdpTimeZone instance from a string.

    @param s The string to parse.
*/
+ (FMLiveSwitchSdpTimeZone*) parseWithS:(NSString*)s;
/**

    Initializes a new instance of the FMLiveSwitchSdpTimeZone class.

    @param adjustmentTime The time that a time zone adjustment happens (network time protocol).
    @param offset The offset from the time when the session was first scheduled.
*/
+ (FMLiveSwitchSdpTimeZone*) timeZoneWithAdjustmentTime:(double)adjustmentTime offset:(FMLiveSwitchTimeSpan*)offset;

@end

/**

    An SDP time zones element.

*/
@interface FMLiveSwitchSdpTimeZones : NSObject

/**

    Adds a time zone adjustment.

    @param value The time zone adjustment to add.
*/
- (void) addTimeZone:(FMLiveSwitchSdpTimeZone*)value;
/**

    Converts this instance to a string.

*/
- (NSString*) description;
/**

    Initializes a new instance of the FMLiveSwitchSdpTimeZones class.

    @param values The values.
*/
- (instancetype) initWithValues:(NSMutableArray*)values;
/**

    Creates an FMLiveSwitchSdpTimeZones instance from a string.

    @param s The string to parse.
*/
+ (FMLiveSwitchSdpTimeZones*) parseWithS:(NSString*)s;
/**

    Removes a time zone adjustment.

    @param value The time zone adjustment to remove.
*/
- (bool) removeTimeZone:(FMLiveSwitchSdpTimeZone*)value;
/**

    Initializes a new instance of the FMLiveSwitchSdpTimeZones class.

    @param values The values.
*/
+ (FMLiveSwitchSdpTimeZones*) timeZones:(NSMutableArray*)values;
/**

    Gets the array of time zone adjustments.

*/
- (NSMutableArray*) values;

@end

/**

    An SDP timing element.

*/
@interface FMLiveSwitchSdpTiming : NSObject

/**

    Converts this instance to a string.

*/
- (NSString*) description;
/**

    Initializes a new instance of the FMLiveSwitchSdpTiming class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchSdpTiming class.

    @param startTime The start time.
    @param stopTime The stop time.
*/
- (instancetype) initWithStartTime:(double)startTime stopTime:(double)stopTime;
/**

    Creates an FMLiveSwitchSdpTiming instance from a string.

    @param s The string to parse.
*/
+ (FMLiveSwitchSdpTiming*) parseWithS:(NSString*)s;
/**

    Sets the start time.

*/
- (void) setStartTime:(double)value;
/**

    Sets the stop time.

*/
- (void) setStopTime:(double)value;
/**

    Gets the start time.

*/
- (double) startTime;
/**

    Gets the stop time.

*/
- (double) stopTime;
/**

    Initializes a new instance of the FMLiveSwitchSdpTiming class.

*/
+ (FMLiveSwitchSdpTiming*) timing;
/**

    Initializes a new instance of the FMLiveSwitchSdpTiming class.

    @param startTime The start time.
    @param stopTime The stop time.
*/
+ (FMLiveSwitchSdpTiming*) timingWithStartTime:(double)startTime stopTime:(double)stopTime;

@end

/**

    This gives the name and version number of the tool used to
    create the session description.  It is a session-level
    attribute, and it is not dependent on charset.

*/
@interface FMLiveSwitchSdpToolAttribute : FMLiveSwitchSdpAttribute

/**

    Initializes a new instance of the FMLiveSwitchSdpToolAttribute class.

    @param value The attribute value.
*/
+ (FMLiveSwitchSdpToolAttribute*) fromAttributeValue:(NSString*)value;
/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpToolAttribute class.

    @param tool The name and version number of the
            tool used to create the session description.
*/
- (instancetype) initWithTool:(NSString*)tool;
/**

    Gets the name and version number of the
    tool used to create the session description.

*/
- (NSString*) tool;
/**

    Initializes a new instance of the FMLiveSwitchSdpToolAttribute class.

    @param tool The name and version number of the
            tool used to create the session description.
*/
+ (FMLiveSwitchSdpToolAttribute*) toolAttributeWithTool:(NSString*)tool;

@end

/**

    An SDP media description with a transport protocol of "udp".

*/
@interface FMLiveSwitchSdpUdpMedia : FMLiveSwitchSdpMedia

/**

    Initializes a new instance of the FMLiveSwitchSdpUdpMedia class.

    @param mediaType The media type. See FMLiveSwitchSdpMediaType for possible values.
    @param transportPort The transport port.
    @param formatDescription The format description.
*/
- (instancetype) initWithMediaType:(NSString*)mediaType transportPort:(int)transportPort formatDescription:(NSString*)formatDescription;
/**

    Initializes a new instance of the FMLiveSwitchSdpUdpMedia class.

    @param mediaType The media type. See FMLiveSwitchSdpMediaType for possible values.
    @param transportPort The transport port.
    @param formatDescription The format description.
*/
+ (FMLiveSwitchSdpUdpMedia*) udpMediaWithMediaType:(NSString*)mediaType transportPort:(int)transportPort formatDescription:(NSString*)formatDescription;
/**

    Gets the protocol keyword for UDP.

*/
+ (NSString*) udpTransportProtocol;

@end

/**

    This attribute is used to encapsulate unrecognized SDP attributes.

*/
@interface FMLiveSwitchSdpUnknownAttribute : FMLiveSwitchSdpAttribute

/**

    Gets the internal value of the attribute.

*/
- (NSString*) getAttributeValue;
/**

    Initializes a new instance of the FMLiveSwitchSdpUnknownAttribute class.

    @param name The name.
    @param value The value.
*/
- (instancetype) initWithName:(NSString*)name value:(NSString*)value;
/**

    Gets the attribute name.

*/
- (NSString*) name;
/**

    Initializes a new instance of the FMLiveSwitchSdpUnknownAttribute class.

    @param name The name.
    @param value The value.
*/
+ (FMLiveSwitchSdpUnknownAttribute*) unknownAttributeWithName:(NSString*)name value:(NSString*)value;
/**

    Gets the attribute value.

*/
- (NSString*) value;

@end

/**

    An SDP encryption key with a method of "uri".

*/
@interface FMLiveSwitchSdpUriEncryptionKey : FMLiveSwitchSdpEncryptionKey

/**

    Initializes a new instance of the FMLiveSwitchSdpUriEncryptionKey class.

    @param uri The URI referring to the data containing the key.
*/
- (instancetype) initWithUri:(NSURL*)uri;
/**

    Gets the URI referring to the data containing the key.

*/
- (NSURL*) uri;
/**

    Initializes a new instance of the FMLiveSwitchSdpUriEncryptionKey class.

    @param uri The URI referring to the data containing the key.
*/
+ (FMLiveSwitchSdpUriEncryptionKey*) uriEncryptionKeyWithUri:(NSURL*)uri;

@end

/**

    A session description.

*/
@interface FMLiveSwitchSessionDescription : NSObject

/**

    Deserializes an instance from JSON.

    @param sessionDescriptionJson The JSON to deserialize.
    @return The deserialized session description.
*/
+ (FMLiveSwitchSessionDescription*) fromJsonWithSessionDescriptionJson:(NSString*)sessionDescriptionJson;
/**

    Gets a value indicating whether an audio stream is described.

*/
- (bool) hasAudio;
/**

    Gets a value indicating whether a data stream is described.

*/
- (bool) hasData;
/**

    Gets a value indicating whether a video stream is described.

*/
- (bool) hasVideo;
- (instancetype) init;
/**

    Gets a value indicating whether this instance is offer.

*/
- (bool) isOffer;
/**

    Gets the SDP message.

*/
- (FMLiveSwitchSdpMessage*) sdpMessage;
+ (FMLiveSwitchSessionDescription*) sessionDescription;
/**

    Gets the session id of the remote description, if remote description is set. Returns null otherwise.

*/
- (long long) sessionId;
/**

    Gets the version of the remote description, if remote description is set. Returns null otherwise.

*/
- (long long) sessionVersion;
/**

    Sets the SDP message.

*/
- (void) setSdpMessage:(FMLiveSwitchSdpMessage*)value;
/**

    Sets the version of the remote description, if remote description is set. Returns null otherwise.

*/
- (void) setSessionVersion:(long long)value;
/**

    Sets the tie breaker in case of a role conflict.

*/
- (void) setTieBreaker:(NSString*)value;
/**

    Sets the type.

*/
- (void) setType:(FMLiveSwitchSessionDescriptionType)value;
/**

    Gets the tie breaker in case of a role conflict.

*/
- (NSString*) tieBreaker;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an instance to JSON.

    @param sessionDescription The session description.
    @return 
            The serialized JSON.
            
*/
+ (NSString*) toJsonWithSessionDescription:(FMLiveSwitchSessionDescription*)sessionDescription;
/**

    Gets the type.

*/
- (FMLiveSwitchSessionDescriptionType) type;

@end

@interface FMLiveSwitchSessionDescriptionTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchSessionDescriptionType)value;

@end

/**

    A size (width and height).

*/
@interface FMLiveSwitchSize : NSObject

/**

    Returns a string that represents this instance using format "{width}x{height}".

*/
- (NSString*) description;
/**

    Gets the empty size (0x0).

*/
+ (FMLiveSwitchSize*) empty;
/**

    Deserializes an instance from JSON.

    @param sizeJson The JSON to deserialize.
    @return The deserialized size.
*/
+ (FMLiveSwitchSize*) fromJsonWithSizeJson:(NSString*)sizeJson;
/**

    Gets the height.

*/
- (int) height;
/**

    Initializes a new instance of the FMLiveSwitchSize class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchSize class.

    @param width The width.
    @param height The height.
*/
- (instancetype) initWithWidth:(int)width height:(int)height;
/**

    Determines whether the specified size is equivalent.

    @param size The size.
*/
- (bool) isEquivalentWithSize:(FMLiveSwitchSize*)size;
/**

    Determines whether the two sizes are equivalent.

    @param size1 The first size.
    @param size2 The second size.
*/
+ (bool) isEquivalentWithSize1:(FMLiveSwitchSize*)size1 size2:(FMLiveSwitchSize*)size2;
/**

    Sets the height.

*/
- (void) setHeight:(int)value;
/**

    Sets the width.

*/
- (void) setWidth:(int)value;
/**

    Initializes a new instance of the FMLiveSwitchSize class.

*/
+ (FMLiveSwitchSize*) size;
/**

    Initializes a new instance of the FMLiveSwitchSize class.

    @param width The width.
    @param height The height.
*/
+ (FMLiveSwitchSize*) sizeWithWidth:(int)width height:(int)height;
/**

    Serializes this instance to JSON.

    @return 
            The serialized JSON.
            
*/
- (NSString*) toJson;
/**

    Serializes an instance to JSON.

    @param size The size.
    @return 
            The serialized JSON.
            
*/
+ (NSString*) toJsonWithSize:(FMLiveSwitchSize*)size;
/**

    Gets the width.

*/
- (int) width;

@end

@interface FMLiveSwitchStreamDirectionWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchStreamDirection)value;

@end

/**

    Class containing utility methods to manipulate FMLiveSwitchStreamDirection.

*/
@interface FMLiveSwitchStreamDirectionHelper : NSObject

/**

    Converts string representations of stream directions to FMLiveSwitchStreamDirection.

    @param directionString The direction string.
    @return The direction.
*/
+ (FMLiveSwitchStreamDirection) directionFromStringWithDirectionString:(NSString*)directionString;
/**

    Obtains the string representation of FMLiveSwitchStreamDirection.

    @param direction The direction.
    @return The direction string.
*/
+ (NSString*) directionToStringWithDirection:(FMLiveSwitchStreamDirection)direction;
- (instancetype) init;
/**

    Checks the receive flag.

    @param direction The direction.
    @return The receive flag.
*/
+ (bool) isReceiveDisabledWithDirection:(FMLiveSwitchStreamDirection)direction;
/**

    Checks the receive flag.

    @param directionString The direction string.
    @return The receive flag.
*/
+ (bool) isReceiveDisabledWithDirectionString:(NSString*)directionString;
/**

    Checks receive only.

    @param directionString 
*/
+ (bool) isReceiveOnlyWithDirectionString:(NSString*)directionString;
/**

    Checks the send flag.

    @param direction The direction.
    @return The send flag.
*/
+ (bool) isSendDisabledWithDirection:(FMLiveSwitchStreamDirection)direction;
/**

    Checks the send flag.

    @param directionString The direction string.
    @return The send flag.
*/
+ (bool) isSendDisabledWithDirectionString:(NSString*)directionString;
/**

    Checks send only.

    @param directionString 
*/
+ (bool) isSendOnlyWithDirectionString:(NSString*)directionString;
/**

    Sets the receive flag.

    @param direction The direction.
    @param disabled Whether to disable the receive flag.
    @return The new direction.
*/
+ (FMLiveSwitchStreamDirection) setReceiveDisabledWithDirection:(FMLiveSwitchStreamDirection)direction disabled:(bool)disabled;
/**

    Sets the receive flag.

    @param directionString The direction string.
    @param disabled Whether to disable the receive flag.
    @return The new direction.
*/
+ (NSString*) setReceiveDisabledWithDirectionString:(NSString*)directionString disabled:(bool)disabled;
/**

    Sets the send flag.

    @param direction The direction.
    @param disabled Whether to disable the send flag.
    @return The new direction.
*/
+ (FMLiveSwitchStreamDirection) setSendDisabledWithDirection:(FMLiveSwitchStreamDirection)direction disabled:(bool)disabled;
/**

    Sets the send flag.

    @param directionString The direction string.
    @param disabled Whether to disable the send flag.
    @return The new direction.
*/
+ (NSString*) setSendDisabledWithDirectionString:(NSString*)directionString disabled:(bool)disabled;
+ (FMLiveSwitchStreamDirectionHelper*) streamDirectionHelper;
/**

    Toggles the receive flag.

    @param direction The direction.
    @return The new direction.
*/
+ (FMLiveSwitchStreamDirection) toggleReceiveWithDirection:(FMLiveSwitchStreamDirection)direction;
/**

    Toggles the receive flag.

    @param directionString The direction string.
    @return The new direction.
*/
+ (NSString*) toggleReceiveWithDirectionString:(NSString*)directionString;
/**

    Toggles the send flag.

    @param direction The direction.
    @return The new direction.
*/
+ (FMLiveSwitchStreamDirection) toggleSendWithDirection:(FMLiveSwitchStreamDirection)direction;
/**

    Toggles the send flag.

    @param directionString The direction string.
    @return The new direction.
*/
+ (NSString*) toggleSendWithDirectionString:(NSString*)directionString;

@end

@interface FMLiveSwitchStreamStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchStreamState)value;

@end

@interface FMLiveSwitchStreamTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchStreamType)value;

@end

/**

    Transport Information.

*/
@interface FMLiveSwitchTransportInfo : FMLiveSwitchInfo

/**

    Gets the active candidate pair identifier.

*/
- (NSString*) activeCandidatePairId;
/**

    Gets the candidate pairs.

*/
- (NSMutableArray*) candidatePairs;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes an array from JSON.

    @param transportInfosJson The serialized JSON.
    @return The deserialized array.
*/
+ (NSMutableArray*) fromJsonArrayWithTransportInfosJson:(NSString*)transportInfosJson;
/**

    Deserializes Json to a TransportReport.

    @param transportReportJson The serialized Json.
    @return The deserialized TransportReport.
*/
+ (FMLiveSwitchTransportInfo*) fromJsonWithTransportReportJson:(NSString*)transportReportJson;
/**

    Initializes a new instance of the FMLiveSwitchTransportInfo class.

*/
- (instancetype) init;
/**

    Gets the local candidates.

*/
- (NSMutableArray*) localCandidates;
/**

    Gets the local certificate.

*/
- (FMLiveSwitchCertificateInfo*) localCertificate;
/**

    Gets the remote candidates.

*/
- (NSMutableArray*) remoteCandidates;
/**

    Gets the remote certificate.

*/
- (FMLiveSwitchCertificateInfo*) remoteCertificate;
/**

    Gets the transport report.

*/
- (FMLiveSwitchTransportReport*) report;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the active candidate pair identifier.

*/
- (void) setActiveCandidatePairId:(NSString*)value;
/**

    Sets the candidate pairs.

*/
- (void) setCandidatePairs:(NSMutableArray*)value;
/**

    Sets the local candidates.

*/
- (void) setLocalCandidates:(NSMutableArray*)value;
/**

    Sets the local certificate.

*/
- (void) setLocalCertificate:(FMLiveSwitchCertificateInfo*)value;
/**

    Sets the remote candidates.

*/
- (void) setRemoteCandidates:(NSMutableArray*)value;
/**

    Sets the remote certificate.

*/
- (void) setRemoteCertificate:(FMLiveSwitchCertificateInfo*)value;
/**

    Sets the transport report.

*/
- (void) setReport:(FMLiveSwitchTransportReport*)value;
/**

    Serializes this instance to Json.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param transportInfos The array to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonArrayWithTransportInfos:(NSMutableArray*)transportInfos;
/**

    Serializes an instance to Json.

    @param transportReport The instance to serialize.
    @return Serialized Json.
*/
+ (NSString*) toJsonWithTransportReport:(FMLiveSwitchTransportInfo*)transportReport;
/**

    Initializes a new instance of the FMLiveSwitchTransportInfo class.

*/
+ (FMLiveSwitchTransportInfo*) transportInfo;

@end

/**

    Transport stats.

*/
@interface FMLiveSwitchTransportStats : FMLiveSwitchBaseStats

/**

    Gets the active candidate pair's stats.

*/
- (FMLiveSwitchCandidatePairStats*) activeCandidatePair;
/**

    Gets the number of bytes received.

*/
- (long long) bytesReceived;
/**

    Gets the number of bytes sent.

*/
- (long long) bytesSent;
/**

    Gets the candidate pairs' stats.

*/
- (NSMutableArray*) candidatePairs;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Derializes transport stats from JSON.

    @param transportJson The transport's stats JSON.
*/
+ (FMLiveSwitchTransportStats*) fromJsonWithTransportJson:(NSString*)transportJson;
/**

    Gets a candidate pair by its identifier.

    @param candidatePairId The candidate pair identifier.
*/
- (FMLiveSwitchCandidatePairStats*) getCandidatePairWithCandidatePairId:(NSString*)candidatePairId;
/**

    Gets a local candidate by its identifier.

    @param candidateId The candidate identifier.
*/
- (FMLiveSwitchCandidateStats*) getLocalCandidateWithCandidateId:(NSString*)candidateId;
/**

    Gets a remote candidate by its identifier.

    @param candidateId The candidate identifier.
*/
- (FMLiveSwitchCandidateStats*) getRemoteCandidateWithCandidateId:(NSString*)candidateId;
- (instancetype) init;
/**

    Gets whether the active candidate pair has a host candidate.

*/
- (bool) isHost;
/**

    Gets whether the active candidate pair has a reflexive candidate.

*/
- (bool) isReflexive;
/**

    Gets whether the active candidate pair has a relayed candidate.

*/
- (bool) isRelayed;
/**

    Gets the local candidates' stats.

*/
- (NSMutableArray*) localCandidates;
/**

    Gets the local certificate's stats.

*/
- (FMLiveSwitchCertificateStats*) localCertificate;
/**

    Gets the remote candidates' stats.

*/
- (NSMutableArray*) remoteCandidates;
/**

    Gets the remote certificate's stats.

*/
- (FMLiveSwitchCertificateStats*) remoteCertificate;
/**

    Gets the RTCP transport's stats.

*/
- (FMLiveSwitchTransportStats*) rtcpTransport;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the active candidate pair's stats.

*/
- (void) setActiveCandidatePair:(FMLiveSwitchCandidatePairStats*)value;
/**

    Sets the number of bytes received.

*/
- (void) setBytesReceived:(long long)value;
/**

    Sets the number of bytes sent.

*/
- (void) setBytesSent:(long long)value;
/**

    Sets the candidate pairs' stats.

*/
- (void) setCandidatePairs:(NSMutableArray*)value;
/**

    Sets the local candidates' stats.

*/
- (void) setLocalCandidates:(NSMutableArray*)value;
/**

    Sets the local certificate's stats.

*/
- (void) setLocalCertificate:(FMLiveSwitchCertificateStats*)value;
/**

    Sets the remote candidates' stats.

*/
- (void) setRemoteCandidates:(NSMutableArray*)value;
/**

    Sets the remote certificate's stats.

*/
- (void) setRemoteCertificate:(FMLiveSwitchCertificateStats*)value;
/**

    Sets the RTCP transport's stats.

*/
- (void) setRtcpTransport:(FMLiveSwitchTransportStats*)value;
/**

    Serializes this to JSON.

*/
- (NSString*) toJson;
/**

    Serializes transport stats to JSON.

    @param transport The transport's stats.
*/
+ (NSString*) toJsonWithTransport:(FMLiveSwitchTransportStats*)transport;
+ (FMLiveSwitchTransportStats*) transportStats;

@end

/**

    Utility methods.

*/
@interface FMLiveSwitchUtility : NSObject

/**

    Clones an array of int values.

    @param intArray An array of int values.
*/
+ (NSMutableArray*) cloneIntArray:(NSMutableArray*)intArray;
/**

    Clones an array of long values.

    @param longArray An array of long values.
*/
+ (NSMutableArray*) cloneLongArray:(NSMutableArray*)longArray;
/**

    Clones an array of string values.

    @param stringArray An array of string values.
*/
+ (NSMutableArray*) cloneStringArray:(NSMutableArray*)stringArray;
/**

    Clones the specified list.

    @param list The list.
*/
+ (NSMutableArray<id>*) cloneWithList:(NSMutableArray<id>*)list;
/**

    Gets the first element in the array or the default
    value if the array is null or empty.

    @param array The array.
*/
+ (id) firstOrDefaultWithArray:(NSMutableArray*)array;
/**

    Gets the first element in the list or the default
    value if the list is null or empty.

    @param list The list.
*/
+ (id) firstOrDefaultWithList:(NSMutableArray<id>*)list;
/**

    Formats a double as a percentage string.

    @param value The value.
    @param decimalPlaces The number of decimal places to include.
*/
+ (NSString*) formatDoubleAsPercent:(double)value decimalPlaces:(int)decimalPlaces;
/**

    Generates a globally unique identifier with no hyphens.

    @return A globally unique identifier with no hyphens.
*/
+ (NSString*) generateId;
/**

    Generates a synchronization source.

*/
+ (long long) generateSynchronizationSource;
/**

    Generates a tie-breaker.

    @return A tie-breaker.
    @deprecated Use GenerateId instead.
*/
+ (NSString*) generateTieBreaker __deprecated_msg("Use GenerateId instead.");
/**

    Retrieves the difference between two RTP sequence numbers
    while accounting for overflow rollover.

    @param rtpSequenceNumber The current RTP sequence number.
    @param lastRtpSequenceNumber The last (previous) RTP sequence number.
    @return The difference between the two RTP sequence numbers.
*/
+ (int) getRtpSequenceNumberDeltaWithRtpSequenceNumber:(int)rtpSequenceNumber lastRtpSequenceNumber:(int)lastRtpSequenceNumber;
/**

    Retrieves the difference between two RTP timestamps
    while accounting for overflow rollover.

    @param rtpTimestamp The current RTP timestamp.
    @param lastRtpTimestamp The last (previous) RTP timestamp.
    @return The difference between the two RTP timestamps.
*/
+ (long long) getRtpTimestampDeltaWithRtpTimestamp:(long long)rtpTimestamp lastRtpTimestamp:(long long)lastRtpTimestamp;
- (instancetype) init;
/**

    Gets the last element in the array or the default
    value if the array is null or empty.

    @param array The array.
*/
+ (id) lastOrDefaultWithArray:(NSMutableArray*)array;
/**

    Gets the last element in the list or the default
    value if the list is null or empty.

    @param list The list.
*/
+ (id) lastOrDefaultWithList:(NSMutableArray<id>*)list;
/**

    Compares two nullable longs for equality.

    @param long1 The first long value.
    @param long2 The second long value.
*/
+ (bool) nullableLongEqualsWithLong1:(FMLiveSwitchNullableLong*)long1 long2:(FMLiveSwitchNullableLong*)long2;
/**

    Gets the only element in the array or the default value
    if the array is null or does not have exactly one value.

    @param array The array.
*/
+ (id) singleOrDefaultWithArray:(NSMutableArray*)array;
/**

    Gets the only element in the list or the default value
    if the list is null or does not have exactly one value.

    @param list The list.
*/
+ (id) singleOrDefaultWithList:(NSMutableArray<id>*)list;
/**

    Splices an array.

    @param array The array.
    @param index The splice index.
    @param addItems The items to add.
    @param createArray A function that creates an array of the given size.
*/
+ (NSMutableArray*) spliceWithArray:(NSMutableArray*)array index:(int)index addItems:(NSMutableArray*)addItems createArray:(FMLiveSwitchFunction1<id,NSMutableArray*>*)createArray;
/**

    Splices an array.

    @param array The array.
    @param index The splice index.
    @param addItems The items to add.
    @param createArrayBlock A function that creates an array of the given size.
*/
+ (NSMutableArray*) spliceWithArray:(NSMutableArray*)array index:(int)index addItems:(NSMutableArray*)addItems createArrayBlock:(NSMutableArray*(^)(int))createArrayBlock;
/**

    Splices an array.

    @param array The array.
    @param index The splice index.
    @param removeCount The number of items to remove.
    @param addItems The items to add.
    @param createArray A function that creates an array of the given size.
*/
+ (NSMutableArray*) spliceWithArray:(NSMutableArray*)array index:(int)index removeCount:(int)removeCount addItems:(NSMutableArray*)addItems createArray:(FMLiveSwitchFunction1<id,NSMutableArray*>*)createArray;
/**

    Splices an array.

    @param array The array.
    @param index The splice index.
    @param removeCount The number of items to remove.
    @param addItems The items to add.
    @param createArrayBlock A function that creates an array of the given size.
*/
+ (NSMutableArray*) spliceWithArray:(NSMutableArray*)array index:(int)index removeCount:(int)removeCount addItems:(NSMutableArray*)addItems createArrayBlock:(NSMutableArray*(^)(int))createArrayBlock;
/**

    Splices an array.

    @param array The array.
    @param index The splice index.
    @param removeCount The number of items to remove.
    @param createArray A function that creates an array of the given size.
*/
+ (NSMutableArray*) spliceWithArray:(NSMutableArray*)array index:(int)index removeCount:(int)removeCount createArray:(FMLiveSwitchFunction1<id,NSMutableArray*>*)createArray;
/**

    Splices an array.

    @param array The array.
    @param index The splice index.
    @param removeCount The number of items to remove.
    @param createArrayBlock A function that creates an array of the given size.
*/
+ (NSMutableArray*) spliceWithArray:(NSMutableArray*)array index:(int)index removeCount:(int)removeCount createArrayBlock:(NSMutableArray*(^)(int))createArrayBlock;
/**

    Splices an array.

    @inlineparam array The array.
    @inlineparam index The splice index.
    @inlineparam addItems The items to add.
    @inlineparam createArrayBlock A function that creates an array of the given size.
*/
+ (NSMutableArray* (^)(NSMutableArray*, int, NSMutableArray*, NSMutableArray*(^)(int))) spliceWithArrayAndIndexAndAddItemsAndCreateArrayBlock;
/**

    Splices an array.

    @inlineparam array The array.
    @inlineparam index The splice index.
    @inlineparam removeCount The number of items to remove.
    @inlineparam addItems The items to add.
    @inlineparam createArrayBlock A function that creates an array of the given size.
*/
+ (NSMutableArray* (^)(NSMutableArray*, int, int, NSMutableArray*, NSMutableArray*(^)(int))) spliceWithArrayAndIndexAndRemoveCountAndAddItemsAndCreateArrayBlock;
/**

    Splices an array.

    @inlineparam array The array.
    @inlineparam index The splice index.
    @inlineparam removeCount The number of items to remove.
    @inlineparam createArrayBlock A function that creates an array of the given size.
*/
+ (NSMutableArray* (^)(NSMutableArray*, int, int, NSMutableArray*(^)(int))) spliceWithArrayAndIndexAndRemoveCountAndCreateArrayBlock;
/**

    Converts a list of int values to an array of int values.

    @param intList A list of int values.
*/
+ (NSMutableArray*) toIntArrayWithIntList:(NSMutableArray<id>*)intList;
/**

    Converts an array to a list.

    @param array The array.
*/
+ (NSMutableArray<id>*) toListWithArray:(NSMutableArray*)array;
/**

    Converts a list of long values to an array of long values.

    @param longList A list of long values.
*/
+ (NSMutableArray*) toLongArrayWithLongList:(NSMutableArray<id>*)longList;
/**

    Converts a list of string values to an array of string values.

    @param stringList A list of string values.
*/
+ (NSMutableArray*) toStringArrayWithStringList:(NSMutableArray<NSString*>*)stringList;
/**

    Enumerates over all nodes in the tree, invoking the callback for each one.

    @param root The root.
    @param childrenCallback The children callback.
    @param nodeCallback The node callback.
*/
+ (void) treeFindLeavesWithRoot:(id)root childrenCallback:(FMLiveSwitchFunction1<id,NSMutableArray*>*)childrenCallback nodeCallback:(FMLiveSwitchAction1<id>*)nodeCallback;
/**

    Enumerates over all nodes in the tree, invoking the callback for each one.

    @param root The root.
    @param childrenCallbackBlock The children callback.
    @param nodeCallbackBlock The node callback.
*/
+ (void) treeFindLeavesWithRoot:(id)root childrenCallbackBlock:(NSMutableArray*(^)(id))childrenCallbackBlock nodeCallbackBlock:(void(^)(id))nodeCallbackBlock;
/**

    Enumerates over all nodes in the tree, invoking the callback for each one.

    @inlineparam root The root.
    @inlineparam childrenCallbackBlock The children callback.
    @inlineparam nodeCallbackBlock The node callback.
*/
+ (void (^)(id, NSMutableArray*(^)(id), void(^)(id))) treeFindLeavesWithRootAndChildrenCallbackBlockAndNodeCallbackBlock;
/**

    Enumerates over all nodes in the tree, invoking the callback for each one.

    @param root The root.
    @param childrenCallback The children callback.
    @param nodeCallback The node callback.
*/
+ (void) treeSearchWithRoot:(id)root childrenCallback:(FMLiveSwitchFunction1<id,NSMutableArray*>*)childrenCallback nodeCallback:(FMLiveSwitchAction1<id>*)nodeCallback;
/**

    Enumerates over all nodes in the tree, invoking the callback for each one.

    @param root The root.
    @param childrenCallbackBlock The children callback.
    @param nodeCallbackBlock The node callback.
*/
+ (void) treeSearchWithRoot:(id)root childrenCallbackBlock:(NSMutableArray*(^)(id))childrenCallbackBlock nodeCallbackBlock:(void(^)(id))nodeCallbackBlock;
/**

    Enumerates over all nodes in the tree, invoking the callback for each one.

    @inlineparam root The root.
    @inlineparam childrenCallbackBlock The children callback.
    @inlineparam nodeCallbackBlock The node callback.
*/
+ (void (^)(id, NSMutableArray*(^)(id), void(^)(id))) treeSearchWithRootAndChildrenCallbackBlockAndNodeCallbackBlock;
+ (FMLiveSwitchUtility*) utility;

@end

/**

    A screen configuration.

*/
@interface FMLiveSwitchScreenConfig : FMLiveSwitchMediaConfig<FMLiveSwitchScreenConfig*>

/**

    Returns a string that represents this instance.

*/
- (NSString*) description;
/**

    Gets the frame-rate.

*/
- (double) frameRate;
/**

    Gets the region size height.

*/
- (int) height;
/**

    Initializes a new instance of the FMLiveSwitchScreenConfig class.

    @param origin The region origin.
    @param size The region size.
    @param frameRate The frame rate.
*/
- (instancetype) initWithOrigin:(FMLiveSwitchPoint*)origin size:(FMLiveSwitchSize*)size frameRate:(double)frameRate;
/**

    Initializes a new instance of the FMLiveSwitchScreenConfig class.

    @param origin The region origin.
    @param size The region size.
    @param frameRate The frame rate.
    @param clockRate The clock rate.
*/
- (instancetype) initWithOrigin:(FMLiveSwitchPoint*)origin size:(FMLiveSwitchSize*)size frameRate:(double)frameRate clockRate:(int)clockRate;
/**

    Initializes a new instance of the FMLiveSwitchScreenConfig class.

    @param region The region.
    @param frameRate The frame rate.
*/
- (instancetype) initWithRegion:(FMLiveSwitchRectangle*)region frameRate:(double)frameRate;
/**

    Initializes a new instance of the FMLiveSwitchScreenConfig class.

    @param region The region.
    @param frameRate The frame rate.
    @param clockRate The clock rate.
*/
- (instancetype) initWithRegion:(FMLiveSwitchRectangle*)region frameRate:(double)frameRate clockRate:(int)clockRate;
/**

    Initializes a new instance of the FMLiveSwitchScreenConfig class.

    @param x The region origin X coordinate.
    @param y The region origin Y coordinate.
    @param width The region size width.
    @param height The region size height.
    @param frameRate The frame rate.
*/
- (instancetype) initWithX:(int)x y:(int)y width:(int)width height:(int)height frameRate:(double)frameRate;
/**

    Initializes a new instance of the FMLiveSwitchScreenConfig class.

    @param x The region origin X coordinate.
    @param y The region origin Y coordinate.
    @param width The region size width.
    @param height The region size height.
    @param frameRate The frame rate.
    @param clockRate The clock rate.
*/
- (instancetype) initWithX:(int)x y:(int)y width:(int)width height:(int)height frameRate:(double)frameRate clockRate:(int)clockRate;
/**

    Determines whether the specified configuration is equivalent.

    @param config The configuration.
*/
- (bool) isEquivalentWithConfig:(FMLiveSwitchScreenConfig*)config;
/**

    Gets the region origin.

*/
- (FMLiveSwitchPoint*) origin;
/**

    Gets the region.

*/
- (FMLiveSwitchRectangle*) region;
/**

    Initializes a new instance of the FMLiveSwitchScreenConfig class.

    @param origin The region origin.
    @param size The region size.
    @param frameRate The frame rate.
*/
+ (FMLiveSwitchScreenConfig*) screenConfigWithOrigin:(FMLiveSwitchPoint*)origin size:(FMLiveSwitchSize*)size frameRate:(double)frameRate;
/**

    Initializes a new instance of the FMLiveSwitchScreenConfig class.

    @param origin The region origin.
    @param size The region size.
    @param frameRate The frame rate.
    @param clockRate The clock rate.
*/
+ (FMLiveSwitchScreenConfig*) screenConfigWithOrigin:(FMLiveSwitchPoint*)origin size:(FMLiveSwitchSize*)size frameRate:(double)frameRate clockRate:(int)clockRate;
/**

    Initializes a new instance of the FMLiveSwitchScreenConfig class.

    @param region The region.
    @param frameRate The frame rate.
*/
+ (FMLiveSwitchScreenConfig*) screenConfigWithRegion:(FMLiveSwitchRectangle*)region frameRate:(double)frameRate;
/**

    Initializes a new instance of the FMLiveSwitchScreenConfig class.

    @param region The region.
    @param frameRate The frame rate.
    @param clockRate The clock rate.
*/
+ (FMLiveSwitchScreenConfig*) screenConfigWithRegion:(FMLiveSwitchRectangle*)region frameRate:(double)frameRate clockRate:(int)clockRate;
/**

    Initializes a new instance of the FMLiveSwitchScreenConfig class.

    @param x The region origin X coordinate.
    @param y The region origin Y coordinate.
    @param width The region size width.
    @param height The region size height.
    @param frameRate The frame rate.
*/
+ (FMLiveSwitchScreenConfig*) screenConfigWithX:(int)x y:(int)y width:(int)width height:(int)height frameRate:(double)frameRate;
/**

    Initializes a new instance of the FMLiveSwitchScreenConfig class.

    @param x The region origin X coordinate.
    @param y The region origin Y coordinate.
    @param width The region size width.
    @param height The region size height.
    @param frameRate The frame rate.
    @param clockRate The clock rate.
*/
+ (FMLiveSwitchScreenConfig*) screenConfigWithX:(int)x y:(int)y width:(int)width height:(int)height frameRate:(double)frameRate clockRate:(int)clockRate;
/**

    Sets the frame-rate.

*/
- (void) setFrameRate:(double)value;
/**

    Sets the region origin.

*/
- (void) setOrigin:(FMLiveSwitchPoint*)value;
/**

    Sets the region.

*/
- (void) setRegion:(FMLiveSwitchRectangle*)value;
/**

    Sets the region size.

*/
- (void) setSize:(FMLiveSwitchSize*)value;
/**

    Gets the region size.

*/
- (FMLiveSwitchSize*) size;
/**

    Gets the region size width.

*/
- (int) width;
/**

    Gets the region origin X coordinate.

*/
- (int) x;
/**

    Gets the region origin Y coordinate.

*/
- (int) y;

@end

/**

    A video configuration.

*/
@interface FMLiveSwitchVideoConfig : FMLiveSwitchMediaConfig<FMLiveSwitchVideoConfig*>

/**

    Returns a string that represents this instance.

*/
- (NSString*) description;
/**

    Gets the frame duration in milliseconds.

*/
- (double) frameDuration;
/**

    Gets the frame-rate.

*/
- (double) frameRate;
/**

    Gets the size height.

*/
- (int) height;
/**

    Initializes a new instance of the FMLiveSwitchVideoConfig class.

    @param size The size.
    @param frameRate The frame rate.
*/
- (instancetype) initWithSize:(FMLiveSwitchSize*)size frameRate:(double)frameRate;
/**

    Initializes a new instance of the FMLiveSwitchVideoConfig class.

    @param size The size.
    @param frameRate The frame rate.
    @param clockRate The clock rate.
*/
- (instancetype) initWithSize:(FMLiveSwitchSize*)size frameRate:(double)frameRate clockRate:(int)clockRate;
/**

    Initializes a new instance of the FMLiveSwitchVideoConfig class.

    @param width The width.
    @param height The height.
    @param frameRate The frame rate.
*/
- (instancetype) initWithWidth:(int)width height:(int)height frameRate:(double)frameRate;
/**

    Initializes a new instance of the FMLiveSwitchVideoConfig class.

    @param width The width.
    @param height The height.
    @param frameRate The frame rate.
    @param clockRate The clock rate.
*/
- (instancetype) initWithWidth:(int)width height:(int)height frameRate:(double)frameRate clockRate:(int)clockRate;
/**

    Determines whether the specified configuration is equivalent.

    @param config The configuration.
*/
- (bool) isEquivalentWithConfig:(FMLiveSwitchVideoConfig*)config;
/**

    Sets the frame-rate.

*/
- (void) setFrameRate:(double)value;
/**

    Sets the size.

*/
- (void) setSize:(FMLiveSwitchSize*)value;
/**

    Gets the size.

*/
- (FMLiveSwitchSize*) size;
/**

    Initializes a new instance of the FMLiveSwitchVideoConfig class.

    @param size The size.
    @param frameRate The frame rate.
*/
+ (FMLiveSwitchVideoConfig*) videoConfigWithSize:(FMLiveSwitchSize*)size frameRate:(double)frameRate;
/**

    Initializes a new instance of the FMLiveSwitchVideoConfig class.

    @param size The size.
    @param frameRate The frame rate.
    @param clockRate The clock rate.
*/
+ (FMLiveSwitchVideoConfig*) videoConfigWithSize:(FMLiveSwitchSize*)size frameRate:(double)frameRate clockRate:(int)clockRate;
/**

    Initializes a new instance of the FMLiveSwitchVideoConfig class.

    @param width The width.
    @param height The height.
    @param frameRate The frame rate.
*/
+ (FMLiveSwitchVideoConfig*) videoConfigWithWidth:(int)width height:(int)height frameRate:(double)frameRate;
/**

    Initializes a new instance of the FMLiveSwitchVideoConfig class.

    @param width The width.
    @param height The height.
    @param frameRate The frame rate.
    @param clockRate The clock rate.
*/
+ (FMLiveSwitchVideoConfig*) videoConfigWithWidth:(int)width height:(int)height frameRate:(double)frameRate clockRate:(int)clockRate;
/**

    Gets the size width.

*/
- (int) width;

@end

@interface FMLiveSwitchVideoTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchVideoType)value;

@end

/**

    An acoustic echo cancellation context.

*/
@interface FMLiveSwitchAecContext : NSObject

/**

    Initializes a new instance of the FMLiveSwitchAecContext class.

*/
+ (FMLiveSwitchAecContext*) aecContext;
/**

    Gets the configuration.

*/
- (FMLiveSwitchAudioConfig*) config;
/**

    Creates an echo cancellation output mixer sink.

    @param config The configuration.
*/
- (FMLiveSwitchAudioSink*) createOutputMixerSinkWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates an echo cancellation output mixer.

    @param config The configuration.
*/
- (FMLiveSwitchAudioPipe*) createOutputMixerWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates an echo cancellation processor.

*/
- (FMLiveSwitchAecPipe*) createProcessor;
/**

    Destroys this instance.

*/
- (bool) destroy;
/**

    Initializes a new instance of the FMLiveSwitchAecContext class.

*/
- (instancetype) init;
/**

    Gets the echo cancellation output mixer.

*/
- (FMLiveSwitchAudioPipe*) outputMixer;
/**

    Gets the echo cancellation output mixer sink.

*/
- (FMLiveSwitchAudioSink*) outputMixerSink;
/**

    Gets the echo cancellation processor.

*/
- (FMLiveSwitchAecPipe*) processor;

@end

/**

    A media pipe.

*/
@interface FMLiveSwitchMediaPipe<__covariant TIOutput, __covariant TIOutputCollection, __covariant TIInput, __covariant TIInputCollection, __covariant TPipe, __covariant TFrame, __covariant TBuffer, __covariant TBufferCollection, __covariant TFormat> : FMLiveSwitchDynamic<FMLiveSwitchIMediaOutput, FMLiveSwitchIOutput, FMLiveSwitchIMediaInput, FMLiveSwitchIInput, FMLiveSwitchIMediaElement, FMLiveSwitchIElement>

/**

    Adds an input.

    @param input The input.
*/
- (void) addInput:(TIOutput)input;
/**

    Adds some inputs.

    @param inputs The inputs.
*/
- (void) addInputs:(NSMutableArray*)inputs;
/**

    Adds a handler that is raised when the Disabled property changes state.

*/
- (void) addOnDisabledChange:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the Disabled property changes state.

*/
- (void) addOnDisabledChangeWithCaller:(FMLiveSwitchAction1<id>*)value;
/**

    Adds a handler that is raised when the Disabled property changes state.

*/
- (void (^)(void(^)(id))) addOnDisabledChangeWithCallerWithBlock;
/**

    Adds a handler that is raised when the Disabled property changes state.

*/
- (void) addOnDisabledChangeWithCallerWithBlock:(void(^)(id))valueBlock;
/**

    Adds a handler that is raised when the Paused property changes state.

*/
- (void) addOnPausedChange:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when control frame responses are processed.

*/
- (void) addOnProcessControlFrameResponses:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Adds a handler that is raised when control frame responses are processed.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnProcessControlFrameResponsesWithBlock;
/**

    Adds a handler that is raised when control frame responses are processed.

*/
- (void) addOnProcessControlFrameResponsesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Adds a handler that is raised when control frames are processed.

*/
- (void) addOnProcessControlFrames:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Adds a handler that is raised when control frames are processed.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnProcessControlFramesWithBlock;
/**

    Adds a handler that is raised when control frames are processed.

*/
- (void) addOnProcessControlFramesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Adds a handler that is raised when control frame responses have been processed.

*/
- (void) addOnProcessedControlFrameResponses:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Adds a handler that is raised when control frame responses have been processed.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnProcessedControlFrameResponsesWithBlock;
/**

    Adds a handler that is raised when control frame responses have been processed.

*/
- (void) addOnProcessedControlFrameResponsesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Adds a handler that is raised when control frames have been processed.

*/
- (void) addOnProcessedControlFrames:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Adds a handler that is raised when control frames have been processed.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnProcessedControlFramesWithBlock;
/**

    Adds a handler that is raised when control frames have been processed.

*/
- (void) addOnProcessedControlFramesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Adds a handler that is raised when a frame has been processed.

*/
- (void) addOnProcessedFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Adds a handler that is raised when a frame has been processed.

*/
- (void (^)(void(^)(TFrame))) addOnProcessedFrameWithBlock;
/**

    Adds a handler that is raised when a frame has been processed.

*/
- (void) addOnProcessedFrameWithBlock:(void(^)(TFrame))valueBlock;
/**

    Adds a handler that is raised when a frame is being processed.

*/
- (void) addOnProcessFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Adds a handler that is raised when an exception is thrown while processing a frame.

*/
- (void) addOnProcessFrameException:(FMLiveSwitchAction2<TFrame,NSException*>*)value;
/**

    Adds a handler that is raised when an exception is thrown while processing a frame.

*/
- (void (^)(void(^)(TFrame, NSException*))) addOnProcessFrameExceptionWithBlock;
/**

    Adds a handler that is raised when an exception is thrown while processing a frame.

*/
- (void) addOnProcessFrameExceptionWithBlock:(void(^)(TFrame, NSException*))valueBlock;
/**

    Adds a handler that is raised when a frame is being processed.

*/
- (void (^)(void(^)(TFrame))) addOnProcessFrameWithBlock;
/**

    Adds a handler that is raised when a frame is being processed.

*/
- (void) addOnProcessFrameWithBlock:(void(^)(TFrame))valueBlock;
/**

    Adds a handler that is raised when control frame responses are raised.

*/
- (void) addOnRaiseControlFrameResponses:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Adds a handler that is raised when control frame responses are raised.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnRaiseControlFrameResponsesWithBlock;
/**

    Adds a handler that is raised when control frame responses are raised.

*/
- (void) addOnRaiseControlFrameResponsesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Adds a handler that is raised when control frames are raised.

*/
- (void) addOnRaiseControlFrames:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Adds a handler that is raised when control frames are raised.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnRaiseControlFramesWithBlock;
/**

    Adds a handler that is raised when control frames are raised.

*/
- (void) addOnRaiseControlFramesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Adds a handler that is raised when control frame responses have been raised.

*/
- (void) addOnRaisedControlFrameResponses:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Adds a handler that is raised when control frame responses have been raised.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnRaisedControlFrameResponsesWithBlock;
/**

    Adds a handler that is raised when control frame responses have been raised.

*/
- (void) addOnRaisedControlFrameResponsesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Adds a handler that is raised when control frames have been raised.

*/
- (void) addOnRaisedControlFrames:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Adds a handler that is raised when control frames have been raised.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnRaisedControlFramesWithBlock;
/**

    Adds a handler that is raised when control frames have been raised.

*/
- (void) addOnRaisedControlFramesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Adds a handler that is raised when a frame has been raised.

*/
- (void) addOnRaisedFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Adds a handler that is raised when a frame has been raised.

*/
- (void (^)(void(^)(TFrame))) addOnRaisedFrameWithBlock;
/**

    Adds a handler that is raised when a frame has been raised.

*/
- (void) addOnRaisedFrameWithBlock:(void(^)(TFrame))valueBlock;
/**

    Adds a handler that is raised when a frame is being raised.

*/
- (void) addOnRaiseFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Adds a handler that is raised when a frame is being raised.

*/
- (void (^)(void(^)(TFrame))) addOnRaiseFrameWithBlock;
/**

    Adds a handler that is raised when a frame is being raised.

*/
- (void) addOnRaiseFrameWithBlock:(void(^)(TFrame))valueBlock;
/**

    Adds a handler that is raised when the state changes.

*/
- (void) addOnStateChange:(FMLiveSwitchAction1<TPipe>*)value;
/**

    Adds a handler that is raised when the state changes.

*/
- (void (^)(void(^)(TPipe))) addOnStateChangeWithBlock;
/**

    Adds a handler that is raised when the state changes.

*/
- (void) addOnStateChangeWithBlock:(void(^)(TPipe))valueBlock;
/**

    Adds an output.

    @param output The output.
*/
- (void) addOutput:(TIInput)output;
/**

    Adds some outputs.

    @param outputs The outputs.
*/
- (void) addOutputs:(NSMutableArray*)outputs;
/**

    Gets whether this media pipe is allowed to be timed.

*/
- (bool) allowDiagnosticTimer;
/**

    Gets whether this media pipe duration is allowed to be timed.

*/
- (bool) allowDurationTimer;
/**

    Gets whether this media pipe input rate is allowed to be timed.

*/
- (bool) allowInputRateTimer;
/**

    Gets whether this media pipe output rate is allowed to be timed.

*/
- (bool) allowOutputRateTimer;
/**

    Gets whether this pipe can change the output bitrate.

*/
- (bool) canChangeBitrate;
/**

    Gets whether this pipe can pause the output bitrate.

*/
- (bool) canPauseBitrate;
/**

    Gets the content descriptor.

*/
- (NSString*) content;
/**

    Creates a frame.

    @param buffer The buffer.
*/
- (TFrame) createFrameWithBuffer:(TBuffer)buffer;
/**

    Creates an input collection.

    @param output The output.
*/
- (TIInputCollection) createInputCollectionWithOutput:(TIOutput)output;
/**

    Creates an output collection.

    @param input The input.
*/
- (TIOutputCollection) createOutputCollectionWithInput:(TIInput)input;
/**

    Gets a value indicating whether this pipe is deactivated.
    A pipe is deactivated if it's input and output are deactivated.
    Alias for FMLiveSwitchMediaPipe`9#inputDeactivated and FMLiveSwitchMediaPipe`9#outputDeactivated.

*/
- (bool) deactivated;
/**

    Gets whether this pipe is deactivated
    because the application has requested it.

*/
- (bool) deactivatedByApplication;
/**

    Gets whether this pipe is deactivated
    because the server has requested it.

*/
- (bool) deactivatedByServer;
/**

    Returns a string that represents this instance.

*/
- (NSString*) description;
/**

    Destroys this instance.

*/
- (bool) destroy;
/**

    Gets a value indicating whether this pipe is disabled.
    A pipe is automatically disabled if it is deactivated or if all of its outputs are disabled.
    A disabled pipe will not accept frames raised by its inputs.

*/
- (bool) disabled;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Post-processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doPostProcessFrame:(TFrame)frame inputBuffer:(TBuffer)inputBuffer;
/**

    Pre-processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doPreProcessFrame:(TFrame)frame inputBuffer:(TBuffer)inputBuffer;
/**

    Processes control frame responses.

    @param controlFrameResponses The control frame responses.
*/
- (void) doProcessControlFrameResponses:(NSMutableArray*)controlFrameResponses;
/**

    Processes control frames.

    @param controlFrames The control frames.
*/
- (void) doProcessControlFrames:(NSMutableArray*)controlFrames;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(TFrame)frame inputBuffer:(TBuffer)inputBuffer;
/**

    Processes an SDP media description.

    @param mediaDescription The media description.
    @param isOffer if set to `true` [is offer].
    @param isLocalDescription if set to `true` [is local description].
*/
- (FMLiveSwitchError*) doProcessSdpMediaDescription:(FMLiveSwitchSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription;
/**

    Processes sink stats from an input.

    @param sinkStats The sink stats.
*/
- (void) doProcessSinkStatsFromInputWithSinkStats:(FMLiveSwitchMediaSinkStats*)sinkStats;
/**

    Processes source stats from an output.

    @param sourceStats The source stats.
*/
- (void) doProcessSourceStatsFromOutputWithSourceStats:(FMLiveSwitchMediaSourceStats*)sourceStats;
/**

    Processes track stats from an input.

    @param trackStats The track stats.
*/
- (void) doProcessTrackStatsFromInputWithTrackStats:(FMLiveSwitchMediaTrackStats*)trackStats;
/**

    Processes track stats from an output.

    @param trackStats The track stats.
*/
- (void) doProcessTrackStatsFromOutputWithTrackStats:(FMLiveSwitchMediaTrackStats*)trackStats;
/**

    Gets the external identifier.

*/
- (NSString*) externalId;
/**

    Gets the CCM sequence number.

*/
- (int) getCcmSequenceNumber;
/**

    Gets the total pipeline system delay in ticks for a given output format.

    @param outputFormat The output format.
    @return The total pipeline system delay in ticks.
*/
- (long long) getPipelineSystemDelayWithOutputFormat:(TFormat)outputFormat;
/**

    Determines whether this pipe has the specified input.

    @param input The input.
*/
- (bool) hasInput:(TIOutput)input;
/**

    Determines whether this pipe has the specified output.

    @param output The output.
*/
- (bool) hasOutput:(TIInput)output;
/**

    Gets the identifier.

*/
- (NSString*) id;
/**

    Increments the CCM sequence number.

*/
- (void) incrementCcmSequenceNumber;
/**

    Initializes a new instance of the FMLiveSwitchMediaPipe`9 class.

    @param inputFormat The input format.
    @param outputFormat The output format.
    @param logContext The log Ccontext.
*/
- (instancetype) initWithInputFormat:(TFormat)inputFormat outputFormat:(TFormat)outputFormat logContext:(FMLiveSwitchLogContext*)logContext;
/**

    Initializes a new instance of the FMLiveSwitchMediaPipe`9 class.

    @param outputFormat The output format.
*/
- (instancetype) initWithOutputFormat:(TFormat)outputFormat;
/**

    Gets the input.

*/
- (TIOutput) input;
/**

    Called when an input is added.

    @param input The input.
*/
- (void) inputAddedWithInput:(TIOutput)input;
/**

    Gets whether input is deactivated.

*/
- (bool) inputDeactivated;
/**

    Gets the input format.

*/
- (TFormat) inputFormat;
/**

    Gets whether input is muted.

*/
- (bool) inputMuted;
/**

    Called when an input is removed.

    @param input The input.
*/
- (void) inputRemovedWithInput:(TIOutput)input;
/**

    Gets the input RTP stream identifier.
    If the input RTP stream identifier is null (unset),
    then getting this property returns the first valid
    output RTP stream identifier from the array of
    FMLiveSwitchMediaPipe`9#inputs, or null if they are all unset.

*/
- (NSString*) inputRtpStreamId;
/**

    Gets the inputs.

*/
- (NSMutableArray*) inputs;
/**

    Gets the input synchronization source.
    If the input synchronization source is -1 (unset),
    then getting this property returns the first valid
    output synchronization source from the array of
    FMLiveSwitchMediaPipe`9#inputs, or -1 if they are all unset.

*/
- (long long) inputSynchronizationSource;
/**

    Gets whether this pipe processes media from different sources.

*/
- (bool) isMixer;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets the log context.

*/
- (FMLiveSwitchLogContext*) logContext;
/**

    Gets the maximum allowed input bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

*/
- (int) maxInputBitrate;
/**

    Gets the max input encoding.

*/
- (FMLiveSwitchEncodingInfo*) maxInputEncoding;
/**

    Gets the maximum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

*/
- (int) maxOutputBitrate;
/**

    Gets the max output encoding.

*/
- (FMLiveSwitchEncodingInfo*) maxOutputEncoding;
/**

    Initializes a new instance of the FMLiveSwitchMediaPipe`9 class.

    @param inputFormat The input format.
    @param outputFormat The output format.
    @param logContext The log Ccontext.
*/
+ (FMLiveSwitchMediaPipe*) mediaPipeWithInputFormat:(TFormat)inputFormat outputFormat:(TFormat)outputFormat logContext:(FMLiveSwitchLogContext*)logContext;
/**

    Initializes a new instance of the FMLiveSwitchMediaPipe`9 class.

    @param outputFormat The output format.
*/
+ (FMLiveSwitchMediaPipe*) mediaPipeWithOutputFormat:(TFormat)outputFormat;
/**

    Gets the minimum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

*/
- (int) minInputBitrate;
/**

    Gets the min input encoding.

*/
- (FMLiveSwitchEncodingInfo*) minInputEncoding;
/**

    Gets the minimum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

*/
- (int) minOutputBitrate;
/**

    Gets the min output encoding.

*/
- (FMLiveSwitchEncodingInfo*) minOutputEncoding;
/**

    Gets whether output is muted.
    Alias for FMLiveSwitchMediaPipe`9#outputMuted.

*/
- (bool) muted;
/**

    Gets the output.

*/
- (TIInput) output;
/**

    Called when an output is added.

    @param output The output.
*/
- (void) outputAddedWithOutput:(TIInput)output;
/**

    Determines whether an output can process a frame from this pipe.

    @param output The output.
*/
- (bool) outputCanProcessFrameWithOutput:(TIInput)output;
/**

    Gets whether output is deactivated.

*/
- (bool) outputDeactivated;
/**

    Gets the output format.

*/
- (TFormat) outputFormat;
/**

    Gets whether output is muted.

*/
- (bool) outputMuted;
/**

    Called when an output is removed.

    @param output The output.
*/
- (void) outputRemovedWithOutput:(TIInput)output;
/**

    Gets the output RTP stream identifier.
    If the output RTP stream identifier is null (unset),
    then getting this property returns the
    FMLiveSwitchMediaPipe`9#inputRtpStreamId.

*/
- (NSString*) outputRtpStreamId;
/**

    Gets the outputs.

*/
- (NSMutableArray*) outputs;
/**

    Gets whether output is synchronizable.

*/
- (bool) outputSynchronizable;
/**

    Gets the output synchronization source.
    If the output synchronization source is -1 (unset),
    then getting this property returns the
    FMLiveSwitchMediaPipe`9#inputSynchronizationSource.

*/
- (long long) outputSynchronizationSource;
/**

    Gets whether this pipe is over-constrained.
    A pipe is over-constrained if either it's
    input or output is over-constrained.

*/
- (bool) overConstrained;
/**

    Gets whether the pipe bitrate is over-constrained.
    A pipe bitrate is over-constrained if the input
    bitrate or output bitrate is over-constrained.

*/
- (bool) overConstrainedBitrate;
/**

    Gets whether the input is over-contrained.
    An input is over-constrained if it's
    input bitrate is over-contrained.

*/
- (bool) overConstrainedInput;
/**

    Gets whether the minimum allowed input bitrate exceeds the maximum allowed input bitrate.

*/
- (bool) overConstrainedInputBitrate;
/**

    Gets whether the output is over-constrained.
    An output is over-constrained if it's
    output bitrate is over-contrained.

*/
- (bool) overConstrainedOutput;
/**

    Gets whether the minimum allowed output bitrate exceeds the maximum allowed output bitrate.

*/
- (bool) overConstrainedOutputBitrate;
/**

    Gets a value indicating whether this pipe is paused.

*/
- (bool) paused;
/**

    Gets a value indicating whether this instance is persistent.
    If `true`, this instance will not be destroyed unless
    FMLiveSwitchMediaPipe`9#destroy is called explicitly on this instance.
    It will survive destruction of any parent elements that are
    being destroyed.

*/
- (bool) persistent;
/**

    Gets the pipeline JSON with this as the central point.

*/
- (NSString*) pipelineJson;
/**

    Gets the pipeline JSON base.

*/
- (NSString*) pipelineJsonBase;
/**

    Gets the pipeline JSON from an input.

*/
- (NSString*) pipelineJsonFromInput;
/**

    Gets the pipeline JSON from an output.

*/
- (NSString*) pipelineJsonFromOutput;
/**

    Gets the pipeline JSON inputs.

*/
- (NSString*) pipelineJsonInputs;
/**

    Gets the pipeline JSON outputs.

*/
- (NSString*) pipelineJsonOutputs;
/**

    Processes a buffer, returning a future that is resolved when processing is complete.
    The resolved future will contain a buffer that MUST be freed, as it is not known
    whether the underlying implementation is using data buffer pooling.

    @param buffer The buffer.
*/
- (FMLiveSwitchFuture<TBuffer>*) processBuffer:(TBuffer)buffer;
/**

    Processes a control frame.

    @param controlFrame The control frame.
*/
- (void) processControlFrame:(FMLiveSwitchMediaControlFrame*)controlFrame;
/**

    Processes a control frame response.

    @param controlFrameResponse The control frame response.
*/
- (void) processControlFrameResponse:(FMLiveSwitchMediaControlFrame*)controlFrameResponse;
/**

    Processes control frame responses.

    @param controlFrameResponses The control frame responses.
*/
- (void) processControlFrameResponses:(NSMutableArray*)controlFrameResponses;
/**

    Processes control frames.

    @param controlFrames The control frames.
*/
- (void) processControlFrames:(NSMutableArray*)controlFrames;
/**

    Processes a frame.

    @param frame The frame.
*/
- (bool) processFrame:(TFrame)frame;
/**

    Gets the ProcessFramePolicy for this media input.

*/
- (FMLiveSwitchProcessFramePolicy) processFramePolicy;
/**

    Processes an SDP media description from an input.

    @param mediaDescription The media description.
    @param isOffer if set to `true` [is offer].
    @param isLocalDescription if set to `true` [is local description].
*/
- (FMLiveSwitchError*) processSdpMediaDescriptionFromInputWithMediaDescription:(FMLiveSwitchSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription;
/**

    Processes an SDP media description from an output.

    @param mediaDescription The media description.
    @param isOffer if set to `true` [is offer].
    @param isLocalDescription if set to `true` [is local description].
*/
- (FMLiveSwitchError*) processSdpMediaDescriptionFromOutputWithMediaDescription:(FMLiveSwitchSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription;
/**

    Processes sink stats from an input.

    @param sinkStats The sink stats.
*/
- (void) processSinkStatsFromInputWithSinkStats:(FMLiveSwitchMediaSinkStats*)sinkStats;
/**

    Processes source stats from an output.

    @param sourceStats The source stats.
*/
- (void) processSourceStatsFromOutputWithSourceStats:(FMLiveSwitchMediaSourceStats*)sourceStats;
/**

    Processes track stats from an input.

    @param trackStats The track stats.
*/
- (void) processTrackStatsFromInputWithTrackStats:(FMLiveSwitchMediaTrackStats*)trackStats;
/**

    Processes track stats from an output.

    @param trackStats The track stats.
*/
- (void) processTrackStatsFromOutputWithTrackStats:(FMLiveSwitchMediaTrackStats*)trackStats;
/**

    Raises a control frame.

    @param controlFrame The control frame.
*/
- (void) raiseControlFrame:(FMLiveSwitchMediaControlFrame*)controlFrame;
/**

    Raises a control frame.

    @param controlFrame The control frame.
    @param inputs The inputs.
*/
- (void) raiseControlFrame:(FMLiveSwitchMediaControlFrame*)controlFrame inputs:(NSMutableArray*)inputs;
/**

    Raises a control frame response.

    @param controlFrameResponse The control frame response.
*/
- (void) raiseControlFrameResponse:(FMLiveSwitchMediaControlFrame*)controlFrameResponse;
/**

    Raises a control frame response.

    @param controlFrameResponse The control frame response.
    @param outputs The outputs.
*/
- (void) raiseControlFrameResponse:(FMLiveSwitchMediaControlFrame*)controlFrameResponse outputs:(NSMutableArray*)outputs;
/**

    Raises control frame responses.

    @param controlFrameResponses The control frame responses.
*/
- (void) raiseControlFrameResponses:(NSMutableArray*)controlFrameResponses;
/**

    Raises control frame responses.

    @param controlFrameResponses The control frame responses.
    @param outputs The outputs.
*/
- (void) raiseControlFrameResponses:(NSMutableArray*)controlFrameResponses outputs:(NSMutableArray*)outputs;
/**

    Raises control frames.

    @param controlFrames The control frames.
*/
- (void) raiseControlFrames:(NSMutableArray*)controlFrames;
/**

    Raises control frames.

    @param controlFrames The control frames.
    @param inputs The inputs.
*/
- (void) raiseControlFrames:(NSMutableArray*)controlFrames inputs:(NSMutableArray*)inputs;
/**

    Raises the OnDisabledChange event.

*/
- (void) raiseDisabledChange;
/**

    Raises a frame.

    @param frame The frame.
*/
- (void) raiseFrame:(TFrame)frame;
/**

    Removes an input.

    @param input The input.
*/
- (bool) removeInput:(TIOutput)input;
/**

    Removes all inputs.

*/
- (void) removeInputs;
/**

    Removes some inputs.

    @param inputs The inputs.
*/
- (void) removeInputs:(NSMutableArray*)inputs;
/**

    Removes a handler that is raised when the Disabled property changes state.

*/
- (void) removeOnDisabledChange:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the Disabled property changes state.

*/
- (void) removeOnDisabledChangeWithCaller:(FMLiveSwitchAction1<id>*)value;
/**

    Removes a handler that is raised when the Paused property changes state.

*/
- (void) removeOnPausedChange:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when control frame responses are processed.

*/
- (void) removeOnProcessControlFrameResponses:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Removes a handler that is raised when control frames are processed.

*/
- (void) removeOnProcessControlFrames:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Removes a handler that is raised when control frame responses have been processed.

*/
- (void) removeOnProcessedControlFrameResponses:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Removes a handler that is raised when control frames have been processed.

*/
- (void) removeOnProcessedControlFrames:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Removes a handler that is raised when a frame has been processed.

*/
- (void) removeOnProcessedFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Removes a handler that is raised when a frame is being processed.

*/
- (void) removeOnProcessFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Removes a handler that is raised when an exception is thrown while processing a frame.

*/
- (void) removeOnProcessFrameException:(FMLiveSwitchAction2<TFrame,NSException*>*)value;
/**

    Removes a handler that is raised when control frame responses are raised.

*/
- (void) removeOnRaiseControlFrameResponses:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Removes a handler that is raised when control frames are raised.

*/
- (void) removeOnRaiseControlFrames:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Removes a handler that is raised when control frame responses have been raised.

*/
- (void) removeOnRaisedControlFrameResponses:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Removes a handler that is raised when control frames have been raised.

*/
- (void) removeOnRaisedControlFrames:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Removes a handler that is raised when a frame has been raised.

*/
- (void) removeOnRaisedFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Removes a handler that is raised when a frame is being raised.

*/
- (void) removeOnRaiseFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Removes a handler that is raised when the state changes.

*/
- (void) removeOnStateChange:(FMLiveSwitchAction1<TPipe>*)value;
/**

    Removes an output.

    @param output The output.
*/
- (bool) removeOutput:(TIInput)output;
/**

    Removes all outputs.

*/
- (void) removeOutputs;
/**

    Removes some outputs.

    @param outputs The outputs.
*/
- (void) removeOutputs:(NSMutableArray*)outputs;
/**

    Sets a value indicating whether this pipe is deactivated.
    A pipe is deactivated if it's input and output are deactivated.
    Alias for FMLiveSwitchMediaPipe`9#inputDeactivated and FMLiveSwitchMediaPipe`9#outputDeactivated.

*/
- (void) setDeactivated:(bool)value;
/**

    Sets the external identifier.

*/
- (void) setExternalId:(NSString*)value;
/**

    Sets the input.

*/
- (void) setInput:(TIOutput)value;
/**

    Sets whether input is deactivated.

*/
- (void) setInputDeactivated:(bool)value;
/**

    Sets whether input is muted.

*/
- (void) setInputMuted:(bool)value;
/**

    Sets the input RTP stream identifier.
    If the input RTP stream identifier is null (unset),
    then getting this property returns the first valid
    output RTP stream identifier from the array of
    FMLiveSwitchMediaPipe`9#inputs, or null if they are all unset.

*/
- (void) setInputRtpStreamId:(NSString*)value;
/**

    Sets the inputs.

*/
- (void) setInputs:(NSMutableArray*)value;
/**

    Sets the input synchronization source.
    If the input synchronization source is -1 (unset),
    then getting this property returns the first valid
    output synchronization source from the array of
    FMLiveSwitchMediaPipe`9#inputs, or -1 if they are all unset.

*/
- (void) setInputSynchronizationSource:(long long)value;
/**

    Sets the log context.

*/
- (void) setLogContext:(FMLiveSwitchLogContext*)value;
/**

    Sets the maximum allowed input bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

*/
- (void) setMaxInputBitrate:(int)value;
/**

    Sets the max input encoding.

*/
- (void) setMaxInputEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Sets the maximum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

*/
- (void) setMaxOutputBitrate:(int)value;
/**

    Sets the max output encoding.

*/
- (void) setMaxOutputEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Sets the minimum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

*/
- (void) setMinInputBitrate:(int)value;
/**

    Sets the min input encoding.

*/
- (void) setMinInputEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Sets the minimum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

*/
- (void) setMinOutputBitrate:(int)value;
/**

    Sets the min output encoding.

*/
- (void) setMinOutputEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Sets whether output is muted.
    Alias for FMLiveSwitchMediaPipe`9#outputMuted.

*/
- (void) setMuted:(bool)value;
/**

    Sets the output.

*/
- (void) setOutput:(TIInput)value;
/**

    Sets whether output is deactivated.

*/
- (void) setOutputDeactivated:(bool)value;
/**

    Sets whether output is muted.

*/
- (void) setOutputMuted:(bool)value;
/**

    Sets the output RTP stream identifier.
    If the output RTP stream identifier is null (unset),
    then getting this property returns the
    FMLiveSwitchMediaPipe`9#inputRtpStreamId.

*/
- (void) setOutputRtpStreamId:(NSString*)value;
/**

    Sets the outputs.

*/
- (void) setOutputs:(NSMutableArray*)value;
/**

    Sets whether output is synchronizable.

*/
- (void) setOutputSynchronizable:(bool)value;
/**

    Sets the output synchronization source.
    If the output synchronization source is -1 (unset),
    then getting this property returns the
    FMLiveSwitchMediaPipe`9#inputSynchronizationSource.

*/
- (void) setOutputSynchronizationSource:(long long)value;
/**

    Sets a value indicating whether this instance is persistent.
    If `true`, this instance will not be destroyed unless
    FMLiveSwitchMediaPipe`9#destroy is called explicitly on this instance.
    It will survive destruction of any parent elements that are
    being destroyed.

*/
- (void) setPersistent:(bool)value;
/**

    Sets the ProcessFramePolicy for this media input.

*/
- (void) setProcessFramePolicy:(FMLiveSwitchProcessFramePolicy)value;
/**

    Sets the output synchronization source.
    Alias for FMLiveSwitchMediaPipe`9#outputSynchronizationSource.

*/
- (void) setSynchronizationSource:(long long)value;
/**

    Sets the system delay in ticks.

*/
- (void) setSystemDelay:(long long)value;
/**

    Sets optional data to associate with this instance.

*/
- (void) setTag:(NSString*)value;
/**

    Sets the target output bitrate, in kbps.
    A value of -1 indicates unset (no target).

*/
- (void) setTargetOutputBitrate:(int)value;
/**

    Sets the target output encoding.

*/
- (void) setTargetOutputEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Gets the state.

*/
- (FMLiveSwitchMediaPipeState) state;
/**

    Gets the output synchronization source.
    Alias for FMLiveSwitchMediaPipe`9#outputSynchronizationSource.

*/
- (long long) synchronizationSource;
/**

    Gets the system delay in ticks.

*/
- (long long) systemDelay;
/**

    Gets optional data to associate with this instance.

*/
- (NSString*) tag;
/**

    Gets the target output bitrate, in kbps.
    A value of -1 indicates unset (no target).

*/
- (int) targetOutputBitrate;
/**

    Gets the target output encoding.

*/
- (FMLiveSwitchEncodingInfo*) targetOutputEncoding;
/**

    Sets the input format, if not set,
    using the frame's last buffer format.

    @param frame The frame.
    @return `true` if the input format was set.
*/
- (bool) trySetInputFormatWithFrame:(TFrame)frame;
/**

    Updates the log context.

    @param context 
*/
- (void) updateLogContext:(FMLiveSwitchLogContext*)context;

@end

/**

    An audio pipe.

*/
@interface FMLiveSwitchAudioPipe : FMLiveSwitchMediaPipe<NSObject<FMLiveSwitchIAudioOutput>*,FMLiveSwitchIAudioOutputCollection*,NSObject<FMLiveSwitchIAudioInput>*,FMLiveSwitchIAudioInputCollection*,FMLiveSwitchAudioPipe*,FMLiveSwitchAudioFrame*,FMLiveSwitchAudioBuffer*,FMLiveSwitchAudioBufferCollection*,FMLiveSwitchAudioFormat*><FMLiveSwitchIAudioInput, FMLiveSwitchIMediaInput, FMLiveSwitchIInput, FMLiveSwitchIAudioOutput, FMLiveSwitchIMediaOutput, FMLiveSwitchIOutput, FMLiveSwitchIAudioElement, FMLiveSwitchIMediaElement, FMLiveSwitchIElement>

/**

    Initializes a new instance of the FMLiveSwitchAudioPipe class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
+ (FMLiveSwitchAudioPipe*) audioPipeWithInputFormat:(FMLiveSwitchAudioFormat*)inputFormat outputFormat:(FMLiveSwitchAudioFormat*)outputFormat;
/**

    Initializes a new instance of the FMLiveSwitchAudioPipe class.

    @param outputFormat The output format.
*/
+ (FMLiveSwitchAudioPipe*) audioPipeWithOutputFormat:(FMLiveSwitchAudioFormat*)outputFormat;
/**

    Gets the output configuration.
    (Alias for FMLiveSwitchAudioPipe#outputConfig.)

*/
- (FMLiveSwitchAudioConfig*) config;
/**

    Creates a frame.

    @param buffer The buffer.
*/
- (FMLiveSwitchAudioFrame*) createFrameWithBuffer:(FMLiveSwitchAudioBuffer*)buffer;
/**

    Creates an input collection.

    @param output The output.
*/
- (FMLiveSwitchIAudioInputCollection*) createInputCollectionWithOutput:(NSObject<FMLiveSwitchIAudioOutput>*)output;
/**

    Creates an output collection.

    @param input The input.
*/
- (FMLiveSwitchIAudioOutputCollection*) createOutputCollectionWithInput:(NSObject<FMLiveSwitchIAudioInput>*)input;
/**

    Gets a value indicating the gain
    (input amplification) of this sink.
    Any value greater than or equal to 0.0
    is acceptable.

*/
- (double) gain;
/**

    Initializes a new instance of the FMLiveSwitchAudioPipe class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
- (instancetype) initWithInputFormat:(FMLiveSwitchAudioFormat*)inputFormat outputFormat:(FMLiveSwitchAudioFormat*)outputFormat;
/**

    Initializes a new instance of the FMLiveSwitchAudioPipe class.

    @param outputFormat The output format.
*/
- (instancetype) initWithOutputFormat:(FMLiveSwitchAudioFormat*)outputFormat;
/**

    Gets the input configuration.

*/
- (FMLiveSwitchAudioConfig*) inputConfig;
/**

    Gets the output configuration.

*/
- (FMLiveSwitchAudioConfig*) outputConfig;
/**

    Processes a frame.

    @param frame The frame.
*/
- (bool) processFrame:(FMLiveSwitchAudioFrame*)frame;
/**

    Raises a frame.

    @param frame The frame.
*/
- (void) raiseFrame:(FMLiveSwitchAudioFrame*)frame;
/**

    Sets a value indicating the gain
    (input amplification) of this sink.
    Any value greater than or equal to 0.0
    is acceptable.

*/
- (void) setGain:(double)value;
/**

    Sets a value indicating the volume
    (output resistance) of this source.
    Valid value range is 0.0 to 1.0, inclusive.

*/
- (void) setVolume:(double)value;
/**

    Gets a value indicating the volume
    (output resistance) of this source.
    Valid value range is 0.0 to 1.0, inclusive.

*/
- (double) volume;

@end

/**

    An acoustic echo cancellation (AEC) pipe.

*/
@interface FMLiveSwitchAecPipe : FMLiveSwitchAudioPipe

/**

    Initializes a new instance of the FMLiveSwitchAecPipe class.

    @param format The format.
*/
+ (FMLiveSwitchAecPipe*) aecPipeWithFormat:(FMLiveSwitchAudioFormat*)format;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Initializes a new instance of the FMLiveSwitchAecPipe class.

    @param format The format.
*/
- (instancetype) initWithFormat:(FMLiveSwitchAudioFormat*)format;
/**

    Processes a speaker frame.

    @param frame The frame.
*/
- (void) processSpeakerFrame:(FMLiveSwitchAudioFrame*)frame;
/**

    Sets the speaker sink.

*/
- (void) setSpeaker:(NSObject<FMLiveSwitchIAudioInput>*)value;
/**

    Gets the speaker sink.

*/
- (NSObject<FMLiveSwitchIAudioInput>*) speaker;

@end

/**

    A media control frame.

*/
@interface FMLiveSwitchMediaControlFrame : FMLiveSwitchDynamic

/**

    Adds control frames to an array.

    @param controlFrames The control frames.
    @param addControlFrames The control frames to add.
    @param index The insert index.
    @return A new control frame array.
*/
+ (NSMutableArray*) addControlFrames:(NSMutableArray*)controlFrames addControlFrames:(NSMutableArray*)addControlFrames index:(int)index;
/**

    Adds a control frame to an array.

    @param controlFrames The control frames.
    @param addControlFrame The control frame to add.
    @param index The insert index.
    @return A new control frame array.
*/
+ (NSMutableArray*) addControlFrameWithControlFrames:(NSMutableArray*)controlFrames addControlFrame:(FMLiveSwitchMediaControlFrame*)addControlFrame index:(int)index;
/**

    Gets the last 5 bits of the first byte.

*/
- (int) byte1Last5Bits;
/**

    Gets the buffer.

*/
- (FMLiveSwitchDataBuffer*) dataBuffer;
/**

    Gets the length of the fixed header.

*/
+ (int) fixedHeaderLength;
/**

    Initializes a new instance of the FMLiveSwitchMediaControlFrame class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMediaControlFrame class.

    @param buffer The buffer.
*/
- (instancetype) initWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchMediaControlFrame class.

*/
+ (FMLiveSwitchMediaControlFrame*) mediaControlFrame;
/**

    Initializes a new instance of the FMLiveSwitchMediaControlFrame class.

    @param buffer The buffer.
*/
+ (FMLiveSwitchMediaControlFrame*) mediaControlFrameWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Parses a data buffer into an array of control frames.

    @param dataBuffer The data buffer.
*/
+ (NSMutableArray*) parseWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Gets the payload.

*/
- (FMLiveSwitchDataBuffer*) payload;
/**

    Gets the length of the payload, in bytes, with padding.

*/
- (int) payloadLengthWithPadding;
/**

    Gets the payload type.

*/
- (int) payloadType;
/**

    Removes a control frame from an array.

    @param controlFrames The control frames.
    @param index The delete index.
    @return A new control frame array.
*/
+ (NSMutableArray*) removeControlFrameWithControlFrames:(NSMutableArray*)controlFrames index:(int)index;
/**

    Sets the last 5 bits of the first byte.

*/
- (void) setByte1Last5Bits:(int)value;
/**

    Sets the buffer.

*/
- (void) setDataBuffer:(FMLiveSwitchDataBuffer*)value;
/**

    Sets the length of the payload, in bytes, with padding.

*/
- (void) setPayloadLengthWithPadding:(int)value;
/**

    Sets the payload type.

*/
- (void) setPayloadType:(int)value;
/**

    Sets the version.

*/
- (void) setVersion:(int)value;
/**

    Gets the stream ID.

*/
- (NSString*) streamId;
/**

    Gets the version.

*/
- (int) version;

@end

/**

    An RTCP Feedback packet.

*/
@interface FMLiveSwitchFeedbackControlFrame : FMLiveSwitchMediaControlFrame

/**

    Initializes a new instance of the FMLiveSwitchFeedbackControlFrame class.

    @param feedbackMessageType Type of the feedback message.
    @param payloadType Type of the payload.
*/
+ (FMLiveSwitchFeedbackControlFrame*) feedbackControlFrameWithFeedbackMessageType:(int)feedbackMessageType payloadType:(int)payloadType;
/**

    Initializes a new instance of the FMLiveSwitchFeedbackControlFrame class.

    @param feedbackMessageType The feedback message type.
    @param payloadType Payload type.
    @param buffer The backing data buffer.
*/
+ (FMLiveSwitchFeedbackControlFrame*) feedbackControlFrameWithFeedbackMessageType:(int)feedbackMessageType payloadType:(int)payloadType buffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchFeedbackControlFrame class.

    @param feedbackMessageType Type of the feedback message.
    @param payloadType Type of the payload.
    @param senderSynchronizationSource The sender synchronization source.
    @param mediaSynchronizationSource The media synchronization source.
*/
+ (FMLiveSwitchFeedbackControlFrame*) feedbackControlFrameWithFeedbackMessageType:(int)feedbackMessageType payloadType:(int)payloadType senderSynchronizationSource:(long long)senderSynchronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource;
/**

    Initializes a new instance of the FMLiveSwitchFeedbackControlFrame class.

    @param feedbackMessageType Type of the feedback message.
    @param payloadType Type of the payload.
    @param senderSynchronizationSource The sender synchronization source.
    @param mediaSynchronizationSource The media synchronization source.
    @param feedbackControlInformation The feedback control information.
*/
+ (FMLiveSwitchFeedbackControlFrame*) feedbackControlFrameWithFeedbackMessageType:(int)feedbackMessageType payloadType:(int)payloadType senderSynchronizationSource:(long long)senderSynchronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource feedbackControlInformation:(FMLiveSwitchDataBuffer*)feedbackControlInformation;
/**

    Gets the Feedback Control Information field.

*/
- (FMLiveSwitchDataBuffer*) feedbackControlInformation;
/**

    Gets the feedback control information offset.

*/
- (int) feedbackControlInformationOffset;
/**

    Gets the feedback message type.

*/
- (int) feedbackMessageType;
/**

    Gets the fixed payload header length of a Feedback Control packet.

*/
+ (int) fixedPayloadHeaderLength;
/**

    Initializes a new instance of the FMLiveSwitchFeedbackControlFrame class.

    @param feedbackMessageType Type of the feedback message.
    @param payloadType Type of the payload.
*/
- (instancetype) initWithFeedbackMessageType:(int)feedbackMessageType payloadType:(int)payloadType;
/**

    Initializes a new instance of the FMLiveSwitchFeedbackControlFrame class.

    @param feedbackMessageType The feedback message type.
    @param payloadType Payload type.
    @param buffer The backing data buffer.
*/
- (instancetype) initWithFeedbackMessageType:(int)feedbackMessageType payloadType:(int)payloadType buffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchFeedbackControlFrame class.

    @param feedbackMessageType Type of the feedback message.
    @param payloadType Type of the payload.
    @param senderSynchronizationSource The sender synchronization source.
    @param mediaSynchronizationSource The media synchronization source.
*/
- (instancetype) initWithFeedbackMessageType:(int)feedbackMessageType payloadType:(int)payloadType senderSynchronizationSource:(long long)senderSynchronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource;
/**

    Initializes a new instance of the FMLiveSwitchFeedbackControlFrame class.

    @param feedbackMessageType Type of the feedback message.
    @param payloadType Type of the payload.
    @param senderSynchronizationSource The sender synchronization source.
    @param mediaSynchronizationSource The media synchronization source.
    @param feedbackControlInformation The feedback control information.
*/
- (instancetype) initWithFeedbackMessageType:(int)feedbackMessageType payloadType:(int)payloadType senderSynchronizationSource:(long long)senderSynchronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource feedbackControlInformation:(FMLiveSwitchDataBuffer*)feedbackControlInformation;
/**

    Gets the SSRC of the media source that this
    piece of feedback information is related to.

*/
- (long long) mediaSourceSynchronizationSource;
/**

    Gets the SSRC of the packet sender - the synchronization source
    identifier for the originator of this packet.

*/
- (long long) packetSenderSynchronizationSource;
/**

    Sets the feedback message type.

*/
- (void) setFeedbackMessageType:(int)value;
/**

    Sets the SSRC of the media source that this
    piece of feedback information is related to.

*/
- (void) setMediaSourceSynchronizationSource:(long long)value;
/**

    Sets the SSRC of the packet sender - the synchronization source
    identifier for the originator of this packet.

*/
- (void) setPacketSenderSynchronizationSource:(long long)value;

@end

/**

    An RTCP Feedback PS packet.

*/
@interface FMLiveSwitchPayloadSpecificControlFrame : FMLiveSwitchFeedbackControlFrame

/**

    Initializes a new instance of the FMLiveSwitchPayloadSpecificControlFrame class.

    @param feedbackMessageType The feedback message type.
*/
- (instancetype) initWithFeedbackMessageType:(int)feedbackMessageType;
/**

    Initializes a new instance of the FMLiveSwitchPayloadSpecificControlFrame class.

    @param buffer The backing data buffer.
    @param feedbackMessageType The feedback message type.
*/
- (instancetype) initWithFeedbackMessageType:(int)feedbackMessageType buffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchFeedbackControlFrame class.

    @param feedbackMessageType Type of the feedback message.
    @param senderSynchronizationSource The sender synchronization source.
    @param mediaSynchronizationSource The media synchronization source.
*/
- (instancetype) initWithFeedbackMessageType:(int)feedbackMessageType senderSynchronizationSource:(long long)senderSynchronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource;
/**

    Initializes a new instance of the FMLiveSwitchFeedbackControlFrame class.

    @param feedbackMessageType Type of the feedback message.
    @param senderSynchronizationSource The sender synchronization source.
    @param mediaSynchronizationSource The media synchronization source.
    @param feedbackControlInformation The feedback control information.
*/
- (instancetype) initWithFeedbackMessageType:(int)feedbackMessageType senderSynchronizationSource:(long long)senderSynchronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource feedbackControlInformation:(FMLiveSwitchDataBuffer*)feedbackControlInformation;
/**

    Initializes a new instance of the FMLiveSwitchPayloadSpecificControlFrame class.

    @param feedbackMessageType The feedback message type.
*/
+ (FMLiveSwitchPayloadSpecificControlFrame*) payloadSpecificControlFrameWithFeedbackMessageType:(int)feedbackMessageType;
/**

    Initializes a new instance of the FMLiveSwitchPayloadSpecificControlFrame class.

    @param buffer The backing data buffer.
    @param feedbackMessageType The feedback message type.
*/
+ (FMLiveSwitchPayloadSpecificControlFrame*) payloadSpecificControlFrameWithFeedbackMessageType:(int)feedbackMessageType buffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchFeedbackControlFrame class.

    @param feedbackMessageType Type of the feedback message.
    @param senderSynchronizationSource The sender synchronization source.
    @param mediaSynchronizationSource The media synchronization source.
*/
+ (FMLiveSwitchPayloadSpecificControlFrame*) payloadSpecificControlFrameWithFeedbackMessageType:(int)feedbackMessageType senderSynchronizationSource:(long long)senderSynchronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource;
/**

    Initializes a new instance of the FMLiveSwitchFeedbackControlFrame class.

    @param feedbackMessageType Type of the feedback message.
    @param senderSynchronizationSource The sender synchronization source.
    @param mediaSynchronizationSource The media synchronization source.
    @param feedbackControlInformation The feedback control information.
*/
+ (FMLiveSwitchPayloadSpecificControlFrame*) payloadSpecificControlFrameWithFeedbackMessageType:(int)feedbackMessageType senderSynchronizationSource:(long long)senderSynchronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource feedbackControlInformation:(FMLiveSwitchDataBuffer*)feedbackControlInformation;
/**

    Gets the payload-specific payload type.

*/
+ (int) registeredPayloadType;

@end

/**

    An Application Layer Feedback control (RFC 4585).

*/
@interface FMLiveSwitchAfbControlFrame : FMLiveSwitchPayloadSpecificControlFrame

/**

    Initializes a new instance of the FMLiveSwitchAfbControlFrame class.

    @param buffer The backing data buffer.
*/
+ (FMLiveSwitchAfbControlFrame*) afbControlFrameWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchAfbControlFrame class.

    @param senderSyncronizationSource The sender syncronization source.
    @param mediaSynchronizationSource The media synchronization source.
*/
+ (FMLiveSwitchAfbControlFrame*) afbControlFrameWithSenderSyncronizationSource:(long long)senderSyncronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource;
/**

    Initializes a new instance of the FMLiveSwitchAfbControlFrame class.

    @param senderSyncronizationSource The sender syncronization source.
    @param mediaSynchronizationSource The media synchronization source.
    @param feedbackControlInformation The feedback control information.
*/
+ (FMLiveSwitchAfbControlFrame*) afbControlFrameWithSenderSyncronizationSource:(long long)senderSyncronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource feedbackControlInformation:(FMLiveSwitchDataBuffer*)feedbackControlInformation;
/**

    Initializes a new instance of the FMLiveSwitchAfbControlFrame class.

    @param buffer The backing data buffer.
*/
- (instancetype) initWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchAfbControlFrame class.

    @param senderSyncronizationSource The sender syncronization source.
    @param mediaSynchronizationSource The media synchronization source.
*/
- (instancetype) initWithSenderSyncronizationSource:(long long)senderSyncronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource;
/**

    Initializes a new instance of the FMLiveSwitchAfbControlFrame class.

    @param senderSyncronizationSource The sender syncronization source.
    @param mediaSynchronizationSource The media synchronization source.
    @param feedbackControlInformation The feedback control information.
*/
- (instancetype) initWithSenderSyncronizationSource:(long long)senderSyncronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource feedbackControlInformation:(FMLiveSwitchDataBuffer*)feedbackControlInformation;
/**

    Gets the type of the registered feedback message.

*/
+ (int) registeredFeedbackMessageType;

@end

/**

    An RTCP APP packet.

*/
@interface FMLiveSwitchAppControlFrame : FMLiveSwitchMediaControlFrame

/**

    Initializes a new instance of the FMLiveSwitchAppControlFrame class.

*/
+ (FMLiveSwitchAppControlFrame*) appControlFrame;
/**

    Initializes a new instance of the FMLiveSwitchAppControlFrame class.

    @param buffer The buffer.
*/
+ (FMLiveSwitchAppControlFrame*) appControlFrameWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchAppControlFrame class.

    @param subType Type of the sub.
    @param synchronizationSource The SSRC.
    @param name The name.
    @param data The data.
*/
+ (FMLiveSwitchAppControlFrame*) appControlFrameWithSubType:(int)subType synchronizationSource:(long long)synchronizationSource name:(NSString*)name data:(FMLiveSwitchDataBuffer*)data;
/**

    Gets optional application-dependent data.

*/
- (FMLiveSwitchDataBuffer*) data;
/**

    Gets the length of the FMLiveSwitchAppControlFrame#data.

*/
- (int) dataLength;
/**

    Gets the offset of the FMLiveSwitchAppControlFrame#data in the payload.

*/
- (int) dataPayloadOffset;
/**

    Gets the length of the fixed payload header.

*/
+ (int) fixedPayloadHeaderLength;
/**

    Initializes a new instance of the FMLiveSwitchAppControlFrame class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchAppControlFrame class.

    @param buffer The buffer.
*/
- (instancetype) initWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchAppControlFrame class.

    @param subType Type of the sub.
    @param synchronizationSource The SSRC.
    @param name The name.
    @param data The data.
*/
- (instancetype) initWithSubType:(int)subType synchronizationSource:(long long)synchronizationSource name:(NSString*)name data:(FMLiveSwitchDataBuffer*)data;
/**

    Gets the name.

*/
- (NSString*) name;
/**

    Gets the application-specific payload type.

*/
+ (int) registeredPayloadType;
/**

    Sets the name.

*/
- (void) setName:(NSString*)value;
/**

    Sets the subtype to allow a set of APP packets to be defined
    under one unique name, or for any application-dependent data.

*/
- (void) setSubType:(int)value;
/**

    Sets the synchronization source.

*/
- (void) setSynchronizationSource:(long long)value;
/**

    Gets the subtype to allow a set of APP packets to be defined
    under one unique name, or for any application-dependent data.

*/
- (int) subType;
/**

    Gets the synchronization source.

*/
- (long long) synchronizationSource;

@end

/**

    A media branch.

*/
@interface FMLiveSwitchMediaBranch<__covariant TIOutput, __covariant TIOutputCollection, __covariant TIInput, __covariant TIInputCollection, __covariant TIElement, __covariant TSource, __covariant TSink, __covariant TPipe, __covariant TTrack, __covariant TBranch, __covariant TFrame, __covariant TBuffer, __covariant TBufferCollection, __covariant TFormat> : FMLiveSwitchDynamic<FMLiveSwitchIMediaElement, FMLiveSwitchIElement>

/**

    Gets the first active track.

*/
- (TTrack) activeTrack;
/**

    Gets the active tracks.

*/
- (NSMutableArray*) activeTracks;
/**

    Creates an array of tracks from a list of tracks.

    @param tracks The list of tracks.
*/
- (NSMutableArray*) arrayFromTracks:(NSMutableArray<TTrack>*)tracks;
/**

    Gets a value indicating whether this branch is deactivated.
    A branch is deactivated if its active tracks are deactivated.

*/
- (bool) deactivated;
/**

    Returns a string that represents this instance.

*/
- (NSString*) description;
/**

    Destroys this instance.

*/
- (bool) destroy;
/**

    Gets a value indicating whether this branch is disabled.
    A branch is disabled if its active tracks are disabled.

*/
- (bool) disabled;
/**

    Gets the external identifier.

*/
- (NSString*) externalId;
/**

    Gets the identifier.

*/
- (NSString*) id;
/**

    Initializes a new instance of the FMLiveSwitchMediaBranch`14 class.

*/
- (instancetype) initWithTracks:(NSMutableArray*)tracks;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Initializes a new instance of the FMLiveSwitchMediaBranch`14 class.

*/
+ (FMLiveSwitchMediaBranch*) mediaBranchWithTracks:(NSMutableArray*)tracks;
/**

    Gets a value indicating whether any
    of the tracks in this branch are muted.
    Setting a value will apply to all elements.

*/
- (bool) muted;
/**

    Gets a value indicating whether this branch is paused.
    A branch is paused if its active tracks are paused.

*/
- (bool) paused;
/**

    Gets a value indicating whether this instance is persistent.
    If `true`, this instance will not be destroyed unless
    FMLiveSwitchMediaBranch`14#destroy is called explicitly on this instance.
    It will survive destruction of any parent elements that are
    being destroyed.

*/
- (bool) persistent;
/**

    Gets the pipeline JSON with this as the central point.

*/
- (NSString*) pipelineJson;
/**

    Sets a value indicating whether this branch is deactivated.
    A branch is deactivated if its active tracks are deactivated.

*/
- (void) setDeactivated:(bool)value;
/**

    Sets the external identifier.

*/
- (void) setExternalId:(NSString*)value;
/**

    Sets a value indicating whether any
    of the tracks in this branch are muted.
    Setting a value will apply to all elements.

*/
- (void) setMuted:(bool)value;
/**

    Sets a value indicating whether this instance is persistent.
    If `true`, this instance will not be destroyed unless
    FMLiveSwitchMediaBranch`14#destroy is called explicitly on this instance.
    It will survive destruction of any parent elements that are
    being destroyed.

*/
- (void) setPersistent:(bool)value;
/**

    Gets the first track.

*/
- (TTrack) track;
/**

    Gets the tracks.

*/
- (NSMutableArray*) tracks;

@end

/**

    An audio branch.

*/
@interface FMLiveSwitchAudioBranch : FMLiveSwitchMediaBranch<NSObject<FMLiveSwitchIAudioOutput>*,FMLiveSwitchIAudioOutputCollection*,NSObject<FMLiveSwitchIAudioInput>*,FMLiveSwitchIAudioInputCollection*,NSObject<FMLiveSwitchIAudioElement>*,FMLiveSwitchAudioSource*,FMLiveSwitchAudioSink*,FMLiveSwitchAudioPipe*,FMLiveSwitchAudioTrack*,FMLiveSwitchAudioBranch*,FMLiveSwitchAudioFrame*,FMLiveSwitchAudioBuffer*,FMLiveSwitchAudioBufferCollection*,FMLiveSwitchAudioFormat*><FMLiveSwitchIAudioElement, FMLiveSwitchIMediaElement, FMLiveSwitchIElement>

/**

    Creates an array of tracks from a list of tracks.

    @param tracks The list of tracks.
*/
- (NSMutableArray*) arrayFromTracks:(NSMutableArray<FMLiveSwitchAudioTrack*>*)tracks;
/**

    Initializes a new instance of the FMLiveSwitchAudioBranch class.

    @param tracks The tracks.
*/
+ (FMLiveSwitchAudioBranch*) audioBranchWithTracks:(NSMutableArray*)tracks;
/**

    Initializes a new instance of the FMLiveSwitchAudioBranch class.

    @param tracks The tracks.
*/
- (instancetype) initWithTracks:(NSMutableArray*)tracks;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;

@end

/**

    A media buffer.

*/
@interface FMLiveSwitchMediaBuffer<__covariant TFormat, __covariant TBuffer> : FMLiveSwitchDynamic

/**

    Clones this instance.

*/
- (TBuffer) clone;
/**

    Creates a new instance.

*/
- (TBuffer) createInstance;
/**

    Gets the data buffer.

*/
- (FMLiveSwitchDataBuffer*) dataBuffer;
/**

    Gets the data buffers.

*/
- (NSMutableArray*) dataBuffers;
/**

    Returns a string that represents this instance.

*/
- (NSString*) description;
/**

    Gets the approximate footprint of this media buffer
    by returning the sum of its data buffer lengths.

*/
- (int) footprint;
/**

    Gets the format.

*/
- (TFormat) format;
/**

    Frees the data buffers referenced by this instance.

    @return This instance.
*/
- (TBuffer) free;
/**

    Initializes a new instance of the FMLiveSwitchMediaBuffer`2 class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMediaBuffer`2 class.

    @param dataBuffer The data buffer.
    @param format The format.
*/
- (instancetype) initWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer format:(TFormat)format;
/**

    Initializes a new instance of the FMLiveSwitchMediaBuffer`2 class.

    @param dataBuffers The data buffers.
    @param format The format.
*/
- (instancetype) initWithDataBuffers:(NSMutableArray*)dataBuffers format:(TFormat)format;
/**

    Gets a value indicating whether this instance has been muted.

*/
- (bool) isMuted;
/**

    Keeps the data buffers referenced by this instance.

    @return This instance.
*/
- (TBuffer) keep;
/**

    Gets the last sequence number.

*/
- (long long) lastSequenceNumber;
/**

    Initializes a new instance of the FMLiveSwitchMediaBuffer`2 class.

*/
+ (FMLiveSwitchMediaBuffer*) mediaBuffer;
/**

    Initializes a new instance of the FMLiveSwitchMediaBuffer`2 class.

    @param dataBuffer The data buffer.
    @param format The format.
*/
+ (FMLiveSwitchMediaBuffer*) mediaBufferWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer format:(TFormat)format;
/**

    Initializes a new instance of the FMLiveSwitchMediaBuffer`2 class.

    @param dataBuffers The data buffers.
    @param format The format.
*/
+ (FMLiveSwitchMediaBuffer*) mediaBufferWithDataBuffers:(NSMutableArray*)dataBuffers format:(TFormat)format;
/**

    Mutes this instance. This is a one-way operation that clears
    the underlying data buffer. If the buffer has an unsupported
    format, this method will return `false`.

*/
- (bool) mute;
/**

    Gets a value indicating whether this buffer contains
    data recovered by forward error correction (FEC).

*/
- (bool) recoveredByFec;
/**

    Gets the Rtp Packet Header for this media buffer.

*/
- (FMLiveSwitchRtpPacketHeader*) rtpHeader;
/**

    Gets the RTP Packet Headers for this media buffer.

*/
- (NSMutableArray*) rtpHeaders;
/**

    Gets the RTP sequence number.

*/
- (int) rtpSequenceNumber;
/**

    Gets the RTP sequence numbers.

*/
- (NSMutableArray*) rtpSequenceNumbers;
/**

    Gets the sequence number.

*/
- (long long) sequenceNumber;
/**

    Gets the sequence numbers.

*/
- (NSMutableArray*) sequenceNumbers;
/**

    Sets the data buffer.

*/
- (void) setDataBuffer:(FMLiveSwitchDataBuffer*)value;
/**

    Sets the data buffers.

*/
- (void) setDataBuffers:(NSMutableArray*)value;
/**

    Sets the format.

*/
- (void) setFormat:(TFormat)value;
/**

    Sets a value indicating whether this buffer contains
    data recovered by forward error correction (FEC).

*/
- (void) setRecoveredByFec:(bool)value;
/**

    Sets the Rtp Packet Header for this media buffer.

*/
- (void) setRtpHeader:(FMLiveSwitchRtpPacketHeader*)value;
/**

    Sets the RTP Packet Headers for this media buffer.

*/
- (void) setRtpHeaders:(NSMutableArray*)value;
/**

    Sets the sequence number.

*/
- (void) setSequenceNumber:(long long)value;
/**

    Sets the sequence numbers.

*/
- (void) setSequenceNumbers:(NSMutableArray*)value;
/**

    Sets the source identifier.

*/
- (void) setSourceId:(NSString*)value;
/**

    Gets the source identifier.

*/
- (NSString*) sourceId;
/**

    Attempts to keep the data buffers referenced by this instance.

    @return True if succeeded.
*/
- (bool) tryKeep;

@end

/**

    An audio buffer.

*/
@interface FMLiveSwitchAudioBuffer : FMLiveSwitchMediaBuffer<FMLiveSwitchAudioFormat*,FMLiveSwitchAudioBuffer*>

/**

    Applies gain to this instance.

    @param gain The gain.
*/
- (void) applyGain:(double)gain;
/**

    Initializes a new instance of the FMLiveSwitchAudioBuffer class.

*/
+ (FMLiveSwitchAudioBuffer*) audioBuffer;
/**

    Initializes a new instance of the FMLiveSwitchAudioBuffer class.

    @param dataBuffer The data buffer.
    @param format The format.
*/
+ (FMLiveSwitchAudioBuffer*) audioBufferWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer format:(FMLiveSwitchAudioFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchAudioBuffer class.

    @param dataBuffers The data buffers.
    @param format The format.
*/
+ (FMLiveSwitchAudioBuffer*) audioBufferWithDataBuffers:(NSMutableArray*)dataBuffers format:(FMLiveSwitchAudioFormat*)format;
/**

    Calculates the level of this instance.

*/
- (double) calculateLevel;
/**

    Clones this instance.

*/
- (FMLiveSwitchAudioBuffer*) clone;
/**

    Creates a new instance.

*/
- (FMLiveSwitchAudioBuffer*) createInstance;
/**

    Creates a silent audio buffer with the specified duration, clock rate, and channel count.

    @param duration The duration in milliseconds.
    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
+ (FMLiveSwitchAudioBuffer*) createSilenceWithDuration:(int)duration clockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Creates a silent audio buffer with the specified duration and configuration.

    @param duration The duration in milliseconds.
    @param config The configuration.
*/
+ (FMLiveSwitchAudioBuffer*) createSilenceWithDuration:(int)duration config:(FMLiveSwitchAudioConfig*)config;
/**

    Creates an audio buffer with the specified duration, clock rate, and channel count, a frequency of 440Hz, and an amplitude of 16,384.

    @param timestamp The starting time of this buffer relative to the clock rate.
    @param duration The duration in milliseconds.
    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
+ (FMLiveSwitchAudioBuffer*) createSoundWithTimestamp:(long long)timestamp duration:(int)duration clockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Creates a silent audio buffer with the specified duration, clock rate, channel count, and frequency, and an amplitude of 16,384.

    @param timestamp The starting time of this buffer relative to the clock rate.
    @param duration The duration in milliseconds.
    @param clockRate The clock rate.
    @param channelCount The channel count.
    @param frequency The frequency.
*/
+ (FMLiveSwitchAudioBuffer*) createSoundWithTimestamp:(long long)timestamp duration:(int)duration clockRate:(int)clockRate channelCount:(int)channelCount frequency:(float)frequency;
/**

    Creates a silent audio buffer with the specified duration, clock rate, channel count, frequency, and amplitude.

    @param timestamp The starting time of this buffer relative to the clock rate.
    @param duration The duration in milliseconds.
    @param clockRate The clock rate.
    @param channelCount The channel count.
    @param frequency The frequency.
    @param amplitude The amplitude.
*/
+ (FMLiveSwitchAudioBuffer*) createSoundWithTimestamp:(long long)timestamp duration:(int)duration clockRate:(int)clockRate channelCount:(int)channelCount frequency:(float)frequency amplitude:(int)amplitude;
/**

    Creates an audio buffer with the specified duration and configuration, a frequency of 440Hz, and an amplitude of 16,384.

    @param timestamp The starting time of this buffer relative to the clock rate.
    @param duration The duration in milliseconds.
    @param config The configuration.
*/
+ (FMLiveSwitchAudioBuffer*) createSoundWithTimestamp:(long long)timestamp duration:(int)duration config:(FMLiveSwitchAudioConfig*)config;
/**

    Creates a silent audio buffer with the specified duration, configuration, and frequency, and an amplitude of 16,384.

    @param timestamp The starting time of this buffer relative to the clock rate.
    @param duration The duration in milliseconds.
    @param config The configuration.
    @param frequency The frequency.
*/
+ (FMLiveSwitchAudioBuffer*) createSoundWithTimestamp:(long long)timestamp duration:(int)duration config:(FMLiveSwitchAudioConfig*)config frequency:(float)frequency;
/**

    Creates a silent audio buffer with the specified duration, configuration, frequency, and amplitude.

    @param timestamp The starting time of this buffer relative to the clock rate.
    @param duration The duration in milliseconds.
    @param config The configuration.
    @param frequency The frequency.
    @param amplitude The amplitude.
*/
+ (FMLiveSwitchAudioBuffer*) createSoundWithTimestamp:(long long)timestamp duration:(int)duration config:(FMLiveSwitchAudioConfig*)config frequency:(float)frequency amplitude:(int)amplitude;
/**

    Deserializes an array of instances from JSON.

    @param audioBuffersJson The audio buffers JSON.
*/
+ (NSMutableArray*) fromJsonArrayWithAudioBuffersJson:(NSString*)audioBuffersJson;
/**

    Deserializes an instance from JSON.

    @param audioBufferJson The audio buffer JSON.
*/
+ (FMLiveSwitchAudioBuffer*) fromJsonWithAudioBufferJson:(NSString*)audioBufferJson;
/**

    Gets the gain.

*/
- (double) gain;
/**

    Gets a value indicating whether this buffer contains
    data generated by packet loss concealment (PLC).

*/
- (bool) generatedByPlc;
/**

    Gets the minimum data buffer length for a given duration, clock rate, and channel count.

    @param duration The duration.
    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
+ (int) getMinimumBufferLengthWithDuration:(int)duration clockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Gets the minimum data buffer length for a given duration and configuration.

    @param duration The duration.
    @param config The configuration.
*/
+ (int) getMinimumBufferLengthWithDuration:(int)duration config:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchAudioBuffer class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchAudioBuffer class.

    @param dataBuffer The data buffer.
    @param format The format.
*/
- (instancetype) initWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer format:(FMLiveSwitchAudioFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchAudioBuffer class.

    @param dataBuffers The data buffers.
    @param format The format.
*/
- (instancetype) initWithDataBuffers:(NSMutableArray*)dataBuffers format:(FMLiveSwitchAudioFormat*)format;
/**

    Gets a value indicating whether this buffer has DTMF data.

*/
- (bool) isDtmf;
/**

    Gets a value indicating whether this buffer has L16 audio.

*/
- (bool) isL16;
/**

    Gets a value indicating whether this instance has been muted.

*/
- (bool) isMuted;
/**

    Gets a value indicating whether this buffer has Opus audio.

*/
- (bool) isOpus;
/**

    Gets a value indicating whether this buffer has raw PCM audio.

*/
- (bool) isPcm;
/**

    Gets a value indicating whether this buffer has PCMA audio.

*/
- (bool) isPcma;
/**

    Gets a value indicating whether this buffer has PCMU audio.

*/
- (bool) isPcmu;
/**

    Mutes this instance. This is a one-way operation that clears
    the underlying data buffer.

*/
- (bool) mute;
/**

    Sets a value indicating whether this buffer contains
    data generated by packet loss concealment (PLC).

*/
- (void) setGeneratedByPlc:(bool)value;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array of instances to JSON.

    @param audioBuffers The audio buffers.
*/
+ (NSString*) toJsonArrayWithAudioBuffers:(NSMutableArray*)audioBuffers;
/**

    Serializes an instance to JSON.

    @param audioBuffer The audio buffer.
*/
+ (NSString*) toJsonWithAudioBuffer:(FMLiveSwitchAudioBuffer*)audioBuffer;

@end

/**

    A media buffer collection.

*/
@interface FMLiveSwitchMediaBufferCollection<__covariant TBuffer, __covariant TBufferCollection, __covariant TFormat> : FMLiveSwitchCollection<TBuffer,TBufferCollection>

- (instancetype) init;
+ (FMLiveSwitchMediaBufferCollection*) mediaBufferCollection;

@end

/**

    An audio buffer collection.

*/
@interface FMLiveSwitchAudioBufferCollection : FMLiveSwitchMediaBufferCollection<FMLiveSwitchAudioBuffer*,FMLiveSwitchAudioBufferCollection*,FMLiveSwitchAudioFormat*>

/**

    Creates an array from a list.

    @param list The list.
*/
- (NSMutableArray*) arrayFromList:(NSMutableArray<FMLiveSwitchAudioBuffer*>*)list;
+ (FMLiveSwitchAudioBufferCollection*) audioBufferCollection;
/**

    Creates a collection.

*/
- (FMLiveSwitchAudioBufferCollection*) createCollection;
- (instancetype) init;

@end

/**

    A clock used to raise audio data in appropriate intervals.

*/
@interface FMLiveSwitchAudioClock : NSObject

/**

    Creates a new AudioClock.

    @param clockRate The clock rate to use.
    @param channelCount How many channels the audio will have.
    @param blockAlign The block align of the source data.
    @param raiseCallback The callback that will be invoked when data is needed.
*/
+ (FMLiveSwitchAudioClock*) audioClockWithClockRate:(int)clockRate channelCount:(int)channelCount blockAlign:(int)blockAlign raiseCallback:(FMLiveSwitchAction2<id,id>*)raiseCallback;
/**

    Creates a new AudioClock.

    @param clockRate The clock rate to use.
    @param channelCount How many channels the audio will have.
    @param blockAlign The block align of the source data.
    @param raiseCallbackBlock The callback that will be invoked when data is needed.
*/
+ (FMLiveSwitchAudioClock*) audioClockWithClockRate:(int)clockRate channelCount:(int)channelCount blockAlign:(int)blockAlign raiseCallbackBlock:(void(^)(int, int))raiseCallbackBlock;
/**

    Creates a new AudioClock.

    @param clockRate The clock rate to use.
    @param channelCount How many channels the audio will have.
    @param raiseCallback The callback that will be invoked when data is needed.
*/
+ (FMLiveSwitchAudioClock*) audioClockWithClockRate:(int)clockRate channelCount:(int)channelCount raiseCallback:(FMLiveSwitchAction2<id,id>*)raiseCallback;
/**

    Creates a new AudioClock.

    @param clockRate The clock rate to use.
    @param channelCount How many channels the audio will have.
    @param raiseCallbackBlock The callback that will be invoked when data is needed.
*/
+ (FMLiveSwitchAudioClock*) audioClockWithClockRate:(int)clockRate channelCount:(int)channelCount raiseCallbackBlock:(void(^)(int, int))raiseCallbackBlock;
/**

    Gets the BlockAlign.

*/
- (int) blockAlign;
/**

    Gets the audio's channel count.

*/
- (int) channelCount;
/**

    Gets the audio's clock rate.

*/
- (int) clockRate;
/**

    Creates a new AudioClock.

    @param clockRate The clock rate to use.
    @param channelCount How many channels the audio will have.
    @param blockAlign The block align of the source data.
    @param raiseCallback The callback that will be invoked when data is needed.
*/
- (instancetype) initWithClockRate:(int)clockRate channelCount:(int)channelCount blockAlign:(int)blockAlign raiseCallback:(FMLiveSwitchAction2<id,id>*)raiseCallback;
/**

    Creates a new AudioClock.

    @param clockRate The clock rate to use.
    @param channelCount How many channels the audio will have.
    @param blockAlign The block align of the source data.
    @param raiseCallbackBlock The callback that will be invoked when data is needed.
*/
- (instancetype) initWithClockRate:(int)clockRate channelCount:(int)channelCount blockAlign:(int)blockAlign raiseCallbackBlock:(void(^)(int, int))raiseCallbackBlock;
/**

    Creates a new AudioClock.

    @param clockRate The clock rate to use.
    @param channelCount How many channels the audio will have.
    @param raiseCallback The callback that will be invoked when data is needed.
*/
- (instancetype) initWithClockRate:(int)clockRate channelCount:(int)channelCount raiseCallback:(FMLiveSwitchAction2<id,id>*)raiseCallback;
/**

    Creates a new AudioClock.

    @param clockRate The clock rate to use.
    @param channelCount How many channels the audio will have.
    @param raiseCallbackBlock The callback that will be invoked when data is needed.
*/
- (instancetype) initWithClockRate:(int)clockRate channelCount:(int)channelCount raiseCallbackBlock:(void(^)(int, int))raiseCallbackBlock;
/**

    Gets whether the clock is running.

*/
- (bool) running;
/**

    Sets the strict duration, in milliseconds.
    If 0, then variable duration is used. If greater
    than zero, then the clock will only raise frames
    of that duration.

*/
- (void) setStrictDuration:(int)value;
/**

    Starts the audio clock.

*/
- (void) start;
/**

    Stops the audio clock.

*/
- (void) stop;
/**

    Gets the strict duration, in milliseconds.
    If 0, then variable duration is used. If greater
    than zero, then the clock will only raise frames
    of that duration.

*/
- (int) strictDuration;

@end

/**

    An audio decoder.

*/
@interface FMLiveSwitchAudioDecoder : FMLiveSwitchAudioPipe

/**

    Initializes a new instance of the FMLiveSwitchAudioDecoder class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
+ (FMLiveSwitchAudioDecoder*) audioDecoderWithInputFormat:(FMLiveSwitchAudioFormat*)inputFormat outputFormat:(FMLiveSwitchAudioFormat*)outputFormat;
/**

    Gets a value indicating whether to disable
    packet loss concealment (PLC).

*/
- (bool) disablePlc;
/**

    Process track stats from an input.

    @param trackStats The track stats.
*/
- (void) doProcessTrackStatsFromInputWithTrackStats:(FMLiveSwitchMediaTrackStats*)trackStats;
/**

    Gets the number of decoded frames.

*/
- (long long) framesDecoded;
/**

    Generates a PLC buffer. This method
    uses the FMLiveSwitchDataBufferPool
    so the returned value MUST be freed.

    @param duration 
*/
- (FMLiveSwitchAudioBuffer*) generatePlcWithDuration:(int)duration;
/**

    Initializes a new instance of the FMLiveSwitchAudioDecoder class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
- (instancetype) initWithInputFormat:(FMLiveSwitchAudioFormat*)inputFormat outputFormat:(FMLiveSwitchAudioFormat*)outputFormat;
/**

    Gets the maximum allowed input bitrate, in kbps.
    A value of -1 indicates unset (no maximum).
    Returns -1 by default.

*/
- (int) maxInputBitrate;
/**

    Gets the maximum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no maximum).
    Returns -1 by default.

*/
- (int) maxOutputBitrate;
/**

    Gets the minimum allowed input bitrate, in kbps.
    A value of -1 indicates unset (no maximum).
    Returns -1 by default.

*/
- (int) minInputBitrate;
/**

    Gets the minimum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no minimum).
    Returns -1 by default.

*/
- (int) minOutputBitrate;
/**

    Gets the number of milliseconds missing in the stream between
    the last frame processed and the current frame. This value is
    updated constantly, just before a frame is processed.

*/
- (int) missingDuration;
/**

    Processes a frame.

    @param frame The frame.
*/
- (bool) processFrame:(FMLiveSwitchAudioFrame*)frame;
/**

    Raises a frame.

    @param frame The frame.
*/
- (void) raiseFrame:(FMLiveSwitchAudioFrame*)frame;
/**

    Sets a value indicating whether to disable
    packet loss concealment (PLC).

*/
- (void) setDisablePlc:(bool)value;
/**

    Sets the number of milliseconds missing in the stream between
    the last frame processed and the current frame. This value is
    updated constantly, just before a frame is processed.

*/
- (void) setMissingDuration:(int)value;

@end

/**

    An audio depacketizer.

*/
@interface FMLiveSwitchAudioDepacketizer : FMLiveSwitchAudioPipe

/**

    Gets whether this pipe is allowed to be timed.

*/
- (bool) allowDiagnosticTimer;
/**

    Initializes a new instance of the FMLiveSwitchAudioDepacketizer class.

    @param format The format.
*/
+ (FMLiveSwitchAudioDepacketizer*) audioDepacketizerWithFormat:(FMLiveSwitchAudioFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchAudioDepacketizer class.

    @param input The input.
*/
+ (FMLiveSwitchAudioDepacketizer*) audioDepacketizerWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchAudioDepacketizer class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
+ (FMLiveSwitchAudioDepacketizer*) audioDepacketizerWithInputFormat:(FMLiveSwitchAudioFormat*)inputFormat outputFormat:(FMLiveSwitchAudioFormat*)outputFormat;
/**

    Process track stats from an input.

    @param trackStats The track stats.
*/
- (void) doProcessTrackStatsFromInputWithTrackStats:(FMLiveSwitchMediaTrackStats*)trackStats;
/**

    Gets the number of received frames.

*/
- (long long) framesReceived;
/**

    Initializes a new instance of the FMLiveSwitchAudioDepacketizer class.

    @param format The format.
*/
- (instancetype) initWithFormat:(FMLiveSwitchAudioFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchAudioDepacketizer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchAudioDepacketizer class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
- (instancetype) initWithInputFormat:(FMLiveSwitchAudioFormat*)inputFormat outputFormat:(FMLiveSwitchAudioFormat*)outputFormat;
/**

    Raises the frame.

    @param frame The frame.
*/
- (void) raiseFrame:(FMLiveSwitchAudioFrame*)frame;

@end

/**

    An audio encoder.

*/
@interface FMLiveSwitchAudioEncoder : FMLiveSwitchAudioPipe

/**

    Adds a handler that is raised when the bitrate changes.

*/
- (void) addOnBitrateChange:(FMLiveSwitchAction0*)value;
/**

    Initializes a new instance of the FMLiveSwitchAudioEncoder class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
+ (FMLiveSwitchAudioEncoder*) audioEncoderWithInputFormat:(FMLiveSwitchAudioFormat*)inputFormat outputFormat:(FMLiveSwitchAudioFormat*)outputFormat;
/**

    Gets the current bitrate, in kbps.
    A value of -1 indicates unset.

*/
- (int) bitrate;
/**

    Gets whether this pipe can change the output bitrate.

*/
- (bool) canChangeBitrate;
/**

    Processes track stats from an output.

    @param trackStats The track stats.
*/
- (void) doProcessTrackStatsFromOutputWithTrackStats:(FMLiveSwitchMediaTrackStats*)trackStats;
/**

    Gets the number of encoded frames.

*/
- (long long) framesEncoded;
/**

    Initializes a new instance of the FMLiveSwitchAudioEncoder class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
- (instancetype) initWithInputFormat:(FMLiveSwitchAudioFormat*)inputFormat outputFormat:(FMLiveSwitchAudioFormat*)outputFormat;
/**

    Gets the maximum bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

*/
- (int) maxBitrate;
/**

    Gets the maximum possible codec bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

*/
- (int) maxCodecBitrate;
/**

    Gets the maximum output bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

*/
- (int) maxOutputBitrate;
/**

    Gets the minimum bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

*/
- (int) minBitrate;
/**

    Gets the minimum possible codec bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

*/
- (int) minCodecBitrate;
/**

    Gets the minimum output bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

*/
- (int) minOutputBitrate;
/**

    Raises the frame.

    @param frame The frame.
*/
- (void) raiseFrame:(FMLiveSwitchAudioFrame*)frame;
/**

    Removes a handler that is raised when the bitrate changes.

*/
- (void) removeOnBitrateChange:(FMLiveSwitchAction0*)value;
/**

    Sets the current bitrate, in kbps.
    A value of -1 indicates unset.

*/
- (void) setBitrate:(int)value;
/**

    Sets the maximum bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

*/
- (void) setMaxBitrate:(int)value;
/**

    Sets the maximum output bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

*/
- (void) setMaxOutputBitrate:(int)value;
/**

    Sets the minimum bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

*/
- (void) setMinBitrate:(int)value;
/**

    Sets the minimum output bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

*/
- (void) setMinOutputBitrate:(int)value;
/**

    Sets whether FMLiveSwitchAudioEncoder#minOutputBitrate and
    FMLiveSwitchAudioEncoder#maxOutputBitrate should return
    FMLiveSwitchAudioEncoder#minCodecBitrate and
    FMLiveSwitchAudioEncoder#maxCodecBitrate, respectively, or
    response to changes in FMLiveSwitchAudioEncoder#minBitrate and
    FMLiveSwitchAudioEncoder#maxBitrate.

*/
- (void) setStaticOutputBitrate:(bool)value;
/**

    Sets the target bitrate, in kbps.
    A value of -1 indicates unset (no target).

*/
- (void) setTargetBitrate:(int)value;
/**

    Sets the target output bitrate, in kbps.
    A value of -1 indicates unset (no target).

*/
- (void) setTargetOutputBitrate:(int)value;
/**

    Gets whether FMLiveSwitchAudioEncoder#minOutputBitrate and
    FMLiveSwitchAudioEncoder#maxOutputBitrate should return
    FMLiveSwitchAudioEncoder#minCodecBitrate and
    FMLiveSwitchAudioEncoder#maxCodecBitrate, respectively, or
    response to changes in FMLiveSwitchAudioEncoder#minBitrate and
    FMLiveSwitchAudioEncoder#maxBitrate.

*/
- (bool) staticOutputBitrate;
/**

    Gets the target bitrate, in kbps.
    A value of -1 indicates unset (no target).

*/
- (int) targetBitrate;
/**

    Gets the target output bitrate, in kbps.
    A value of -1 indicates unset (no target).

*/
- (int) targetOutputBitrate;

@end

/**

    A media format.

*/
@interface FMLiveSwitchMediaFormat<__covariant TFormat> : NSObject

/**

    Gets the clock rate.

*/
- (int) clockRate;
/**

    Clones this instance.

*/
- (TFormat) clone;
/**

    Creates a new instance.

*/
- (TFormat) createInstance;
/**

    Returns a string that represents this instance.

*/
- (NSString*) description;
/**

    Gets the full name, including clock rate and encoding parameters.

*/
- (NSString*) fullName;
/**

    Gets the maximum level.

    @param level1 The first level.
    @param level2 The second level.
    @return The maximum level.
*/
- (NSString*) getMaxLevelWithLevel1:(NSString*)level1 level2:(NSString*)level2;
/**

    Gets the minimum level.

    @param level1 The first level.
    @param level2 The second level.
    @return The minimum level.
*/
- (NSString*) getMinLevelWithLevel1:(NSString*)level1 level2:(NSString*)level2;
/**

    Gets this format as an info object.

*/
- (FMLiveSwitchFormatInfo*) info;
/**

    Initializes a new instance of the FMLiveSwitchMediaFormat`1 class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMediaFormat`1 class.

    @param name The name.
    @param clockRate The clock rate.
*/
- (instancetype) initWithName:(NSString*)name clockRate:(int)clockRate;
/**

    Initializes a new instance of the FMLiveSwitchMediaFormat`1 class.

    @param name The name.
    @param clockRate The clock rate.
    @param packetizationMode The packetization mode.
*/
- (instancetype) initWithName:(NSString*)name clockRate:(int)clockRate packetizationMode:(NSString*)packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchMediaFormat`1 class.

    @param name The name.
    @param clockRate The clock rate.
    @param level The media format level.
    @param profile The media format profile.
*/
- (instancetype) initWithName:(NSString*)name clockRate:(int)clockRate profile:(NSString*)profile level:(NSString*)level;
/**

    Initializes a new instance of the FMLiveSwitchMediaFormat`1 class.

    @param name The name.
    @param clockRate The clock rate.
    @param level The media format level
    @param profile The media format profile
    @param packetizationMode The packetization mode.
*/
- (instancetype) initWithName:(NSString*)name clockRate:(int)clockRate profile:(NSString*)profile level:(NSString*)level packetizationMode:(NSString*)packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchMediaFormat`1 class.

    @param name The name.
    @param clockRate The clock rate.
    @param level The media format level
    @param profile The media format profile
    @param packetizationMode The packetization mode.
    @param tier The media format tier.
*/
- (instancetype) initWithName:(NSString*)name clockRate:(int)clockRate profile:(NSString*)profile level:(NSString*)level packetizationMode:(NSString*)packetizationMode tier:(NSString*)tier;
/**

    Determines whether the specified format is compatible.

    @param format The format.
*/
- (bool) isCompatibleWithFormat:(TFormat)format;
/**

    Gets whether this is a compressed format.

*/
- (bool) isCompressed;
/**

    Gets a value indicating that the data is encrypted.

*/
- (bool) isEncrypted;
/**

    Determines whether the specified format is equivalent.

    @param format The format.
*/
- (bool) isEquivalentWithFormat:(TFormat)format;
/**

    Determines whether the specified format is equivalent.

    @param format The format.
    @param ignoreIsPacketized Whether to ignore if the two formats differ in whether they are packetized.
*/
- (bool) isEquivalentWithFormat:(TFormat)format ignoreIsPacketized:(bool)ignoreIsPacketized;
/**

    Gets a value indicating whether a format only supports fixed bitrate.

*/
- (bool) isFixedBitrate;
/**

    Gets a value indicating that the data is injected
    into the primary media stream (e.g. DTMF).

*/
- (bool) isInjected;
/**

    Gets whether a level is compatible.

    @param level The level.
*/
- (bool) isLevelCompatibleWithLevel:(NSString*)level;
/**

    Gets a value indicating whether the data is packetized.

*/
- (bool) isPacketized;
/**

    Gets whether a profile is compatible.

    @param profile The profile.
*/
- (bool) isProfileCompatibleWithProfile:(NSString*)profile;
/**

    Gets the level.

*/
- (NSString*) level;
/**

    Gets a value indicating whether the level is strict.

*/
- (bool) levelIsStrict;
/**

    Gets the maximum bitrate supported by this format, in kbps.

*/
- (int) maxBitrate;
/**

    Initializes a new instance of the FMLiveSwitchMediaFormat`1 class.

*/
+ (FMLiveSwitchMediaFormat*) mediaFormat;
/**

    Initializes a new instance of the FMLiveSwitchMediaFormat`1 class.

    @param name The name.
    @param clockRate The clock rate.
*/
+ (FMLiveSwitchMediaFormat*) mediaFormatWithName:(NSString*)name clockRate:(int)clockRate;
/**

    Initializes a new instance of the FMLiveSwitchMediaFormat`1 class.

    @param name The name.
    @param clockRate The clock rate.
    @param packetizationMode The packetization mode.
*/
+ (FMLiveSwitchMediaFormat*) mediaFormatWithName:(NSString*)name clockRate:(int)clockRate packetizationMode:(NSString*)packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchMediaFormat`1 class.

    @param name The name.
    @param clockRate The clock rate.
    @param level The media format level.
    @param profile The media format profile.
*/
+ (FMLiveSwitchMediaFormat*) mediaFormatWithName:(NSString*)name clockRate:(int)clockRate profile:(NSString*)profile level:(NSString*)level;
/**

    Initializes a new instance of the FMLiveSwitchMediaFormat`1 class.

    @param name The name.
    @param clockRate The clock rate.
    @param level The media format level
    @param profile The media format profile
    @param packetizationMode The packetization mode.
*/
+ (FMLiveSwitchMediaFormat*) mediaFormatWithName:(NSString*)name clockRate:(int)clockRate profile:(NSString*)profile level:(NSString*)level packetizationMode:(NSString*)packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchMediaFormat`1 class.

    @param name The name.
    @param clockRate The clock rate.
    @param level The media format level
    @param profile The media format profile
    @param packetizationMode The packetization mode.
    @param tier The media format tier.
*/
+ (FMLiveSwitchMediaFormat*) mediaFormatWithName:(NSString*)name clockRate:(int)clockRate profile:(NSString*)profile level:(NSString*)level packetizationMode:(NSString*)packetizationMode tier:(NSString*)tier;
/**

    Gets the minimum bitrate supported by this format, in kbps.

*/
- (int) minBitrate;
/**

    Gets the name.

*/
- (NSString*) name;
/**

    Gets the packetization mode.

*/
- (NSString*) packetizationMode;
/**

    Gets the parameters.

*/
- (NSString*) parameters;
/**

    Gets the profile.

*/
- (NSString*) profile;
/**

    Gets the name of the RED media format.

*/
+ (NSString*) redName;
/**

    Sets the clock rate.

*/
- (void) setClockRate:(int)value;
/**

    Sets a value indicating that the data is encrypted.

*/
- (void) setIsEncrypted:(bool)value;
/**

    Sets a value indicating whether a format only supports fixed bitrate.

*/
- (void) setIsFixedBitrate:(bool)value;
/**

    Sets a value indicating that the data is injected
    into the primary media stream (e.g. DTMF).

*/
- (void) setIsInjected:(bool)value;
/**

    Sets a value indicating whether the data is packetized.

*/
- (void) setIsPacketized:(bool)value;
/**

    Sets the level.

*/
- (void) setLevel:(NSString*)value;
/**

    Sets a value indicating whether the level is strict.

*/
- (void) setLevelIsStrict:(bool)value;
/**

    Sets the name.

*/
- (void) setName:(NSString*)value;
/**

    Sets the packetization mode.

*/
- (void) setPacketizationMode:(NSString*)value;
/**

    Sets the profile.

*/
- (void) setProfile:(NSString*)value;
/**

    Sets the static payload type, if this format
    has a static payload type registered with IANA.

*/
- (void) setStaticPayloadType:(int)value;
/**

    Sets the tier.

*/
- (void) setTier:(NSString*)value;
/**

    Gets the static payload type, if this format
    has a static payload type registered with IANA.

*/
- (int) staticPayloadType;
/**

    Gets the tier.

*/
- (NSString*) tier;
/**

    Gets the name of the ULPFEC media format.

*/
+ (NSString*) ulpFecName;
/**

    Updates the level-is-strict flag to a compatible value.

    @param format The format.
*/
- (void) updateLevelIsStrictToCompatibleWithFormat:(TFormat)format;
/**

    Updates the level to a compatible value.

    @param format The format.
*/
- (void) updateLevelToCompatibleWithFormat:(TFormat)format;
/**

    Updates the profile to a compatible value.

    @param format The format.
*/
- (void) updateProfileToCompatibleWithFormat:(TFormat)format;
/**

    Updates the tier to a compatible value.

    @param format The format.
*/
- (void) updateTierToCompatibleWithFormat:(TFormat)format;

@end

/**

    An audio format.

*/
@interface FMLiveSwitchAudioFormat : FMLiveSwitchMediaFormat<FMLiveSwitchAudioFormat*>

/**

    Gets the name of the AAC audio format ("aac").

*/
+ (NSString*) aacName;
/**

    Initializes a new instance of the FMLiveSwitchAudioFormat class.

*/
+ (FMLiveSwitchAudioFormat*) audioFormat;
/**

    Initializes a new instance of the FMLiveSwitchAudioFormat class.

    @param name The name.
    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
+ (FMLiveSwitchAudioFormat*) audioFormatWithName:(NSString*)name clockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Initializes a new instance of the FMLiveSwitchAudioFormat class.

    @param name The name.
    @param config The configuration.
*/
+ (FMLiveSwitchAudioFormat*) audioFormatWithName:(NSString*)name config:(FMLiveSwitchAudioConfig*)config;
/**

    Gets the channel count.

*/
- (int) channelCount;
/**

    Clones this instance.

*/
- (FMLiveSwitchAudioFormat*) clone;
/**

    Gets the clock rate and channel count as a configuration.

*/
- (FMLiveSwitchAudioConfig*) config;
/**

    Creates a new instance.

*/
- (FMLiveSwitchAudioFormat*) createInstance;
/**

    Gets the name of the DTMF audio format ("telephone-event").

*/
+ (NSString*) dtmfName;
/**

    Transforms a FormatInfo into an AudioFormat.

    @param info The format info.
*/
+ (FMLiveSwitchAudioFormat*) fromFormatInfo:(FMLiveSwitchFormatInfo*)info;
/**

    Deserializes an instance from JSON.

    @param audioFormatJson The audio format JSON.
*/
+ (FMLiveSwitchAudioFormat*) fromJsonWithAudioFormatJson:(NSString*)audioFormatJson;
/**

    Gets the name of the G.722 audio format ("G722").

*/
+ (NSString*) g722Name;
/**

    Gets this format as an info object.

*/
- (FMLiveSwitchFormatInfo*) info;
/**

    Initializes a new instance of the FMLiveSwitchAudioFormat class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchAudioFormat class.

    @param name The name.
    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
- (instancetype) initWithName:(NSString*)name clockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Initializes a new instance of the FMLiveSwitchAudioFormat class.

    @param name The name.
    @param config The configuration.
*/
- (instancetype) initWithName:(NSString*)name config:(FMLiveSwitchAudioConfig*)config;
/**

    Gets a value indicating whether this format is AAC.

*/
- (bool) isAac;
/**

    Determines whether the specified format is compatible.

    @param format The format.
*/
- (bool) isCompatibleWithFormat:(FMLiveSwitchAudioFormat*)format;
/**

    Gets whether this is a compressed format.

*/
- (bool) isCompressed;
/**

    Gets a value indicating whether this format is DTMF.

*/
- (bool) isDtmf;
/**

    Determines whether the specified format is equivalent.

    @param format The format.
    @param ignoreIsPacketized Whether to ignore if the two formats differ in whether they are packetized.
*/
- (bool) isEquivalentWithFormat:(FMLiveSwitchAudioFormat*)format ignoreIsPacketized:(bool)ignoreIsPacketized;
/**

    Gets a value indicating whether this format is G.722.

*/
- (bool) isG722;
/**

    Gets a value indicating whether this format is L16.

*/
- (bool) isL16;
/**

    Gets a value indicating whether this format is Opus.

*/
- (bool) isOpus;
/**

    Gets a value indicating whether this format is PCM.

*/
- (bool) isPcm;
/**

    Gets a value indicating whether this format is PCMA.

*/
- (bool) isPcma;
/**

    Gets a value indicating whether this format is PCMU.

*/
- (bool) isPcmu;
/**

    Gets the name of the Linear PCM 16-bit audio (PCM Uncompressed).

*/
+ (NSString*) l16Name;
/**

    Gets whether the format uses little endian byte order.

*/
- (bool) littleEndian;
/**

    Gets the name of the Opus audio format ("opus").

*/
+ (NSString*) opusName;
/**

    Gets the parameters.

*/
- (NSString*) parameters;
/**

    Gets the name of the PCMA audio format ("PCMA").

*/
+ (NSString*) pcmaName;
/**

    Gets the name of the PCM audio format ("PCM").

*/
+ (NSString*) pcmName;
/**

    Gets the name of the PCMU audio format ("PCMU").

*/
+ (NSString*) pcmuName;
/**

    Sets the channel count.

*/
- (void) setChannelCount:(int)value;
/**

    Sets whether the format uses little endian byte order.

*/
- (void) setLittleEndian:(bool)value;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an instance to JSON.

    @param audioFormat The audio format.
*/
+ (NSString*) toJsonWithAudioFormat:(FMLiveSwitchAudioFormat*)audioFormat;

@end

/**

    A media format collection.

*/
@interface FMLiveSwitchMediaFormatCollection<__covariant TFormat, __covariant TFormatCollection> : FMLiveSwitchCollection<TFormat,TFormatCollection>

/**

    Invoked when an element is added to the collection.

    @param value The format.
*/
- (void) addSuccess:(TFormat)value;
/**

    Gets a format by compatibility to another format.

    @param format The format.
*/
- (NSMutableArray*) getCompatiblesWithFormat:(TFormat)format;
/**

    Gets a format by compatibility to another format.

    @param format The format.
*/
- (TFormat) getCompatibleWithFormat:(TFormat)format;
/**

    Gets a format by equivalence to another format.

    @param format The format.
*/
- (TFormat) getEquivalentWithFormat:(TFormat)format;
/**

    Gets a format by equivalence to another format, ignoring whether the format is packetized.

    @param format The format.
    @param ignoreIsPacketized if set to `true` [ignore `IsPacketized`].
*/
- (TFormat) getEquivalentWithFormat:(TFormat)format ignoreIsPacketized:(bool)ignoreIsPacketized;
/**

    Determines if the collection has a compatible format.

    @param format The format.
*/
- (bool) hasCompatibleWithFormat:(TFormat)format;
/**

    Determines if the collection has an equivalent format.

    @param format The format.
*/
- (bool) hasEquivalentWithFormat:(TFormat)format;
- (instancetype) init;
+ (FMLiveSwitchMediaFormatCollection*) mediaFormatCollection;
/**

    Invoked when an element is removed from the collection.

    @param value The format.
*/
- (void) removeSuccess:(TFormat)value;

@end

/**

    A collection of audio formats.

*/
@interface FMLiveSwitchAudioFormatCollection : FMLiveSwitchMediaFormatCollection<FMLiveSwitchAudioFormat*,FMLiveSwitchAudioFormatCollection*>

/**

    Creates an array from a list.

    @param list The list.
*/
- (NSMutableArray*) arrayFromList:(NSMutableArray<FMLiveSwitchAudioFormat*>*)list;
+ (FMLiveSwitchAudioFormatCollection*) audioFormatCollection;
/**

    Creates a collection.

*/
- (FMLiveSwitchAudioFormatCollection*) createCollection;
- (instancetype) init;

@end

/**

    A  media frame.

*/
@interface FMLiveSwitchMediaFrame<__covariant TBuffer, __covariant TBufferCollection, __covariant TFormat, __covariant TFrame> : FMLiveSwitchDynamic

/**

    Adds a buffer.

    @param buffer The buffer.
*/
- (void) addBuffer:(TBuffer)buffer;
/**

    Adds some buffers.

    @param buffers The buffers.
*/
- (void) addBuffers:(NSMutableArray*)buffers;
/**

    Gets the buffer.

*/
- (TBuffer) buffer;
/**

    Gets the buffers.

*/
- (NSMutableArray*) buffers;
/**

    Calculates a system timestamp given a base system timestamp,
    the current timestamp, a clock rate, and a base timestamp.

    @param baseSystemTimestamp The base system timestamp (offset).
    @param timestamp The current timestamp.
    @param clockRate The clock rate of the media.
    @param baseTimestamp The base timestamp (offset).
*/
+ (long long) calculateSystemTimestampWithBaseSystemTimestamp:(long long)baseSystemTimestamp timestamp:(long long)timestamp clockRate:(int)clockRate baseTimestamp:(long long)baseTimestamp;
/**

    Calculates a timestamp given a base system timestamp,
    the current system timestamp, and a clock rate. This
    method assumes the base timestamp is zero.

    @param baseSystemTimestamp The base system timestamp (offset).
    @param systemTimestamp The current system timestamp.
    @param clockRate The clock rate of the media.
*/
+ (long long) calculateTimestampWithBaseSystemTimestamp:(long long)baseSystemTimestamp systemTimestamp:(long long)systemTimestamp clockRate:(int)clockRate;
/**

    Calculates a timestamp given a base system timestamp,
    the current system timestamp, a clock rate, and a base
    timestamp.

    @param baseSystemTimestamp The base system timestamp (offset).
    @param systemTimestamp The current system timestamp.
    @param clockRate The clock rate of the media.
    @param baseTimestamp The base timestamp (offset).
*/
+ (long long) calculateTimestampWithBaseSystemTimestamp:(long long)baseSystemTimestamp systemTimestamp:(long long)systemTimestamp clockRate:(int)clockRate baseTimestamp:(long long)baseTimestamp;
/**

    Clones this instance.

*/
- (TFrame) clone;
/**

    Gets the contributing sources.

*/
- (NSMutableArray*) contributingSources;
/**

    Creates a new instance.

*/
- (TFrame) createInstance;
/**

    Creates a media buffer collection.

*/
- (TBufferCollection) createMediaBufferCollection;
/**

    Gets whether this frame should be discarded.

*/
- (bool) discard;
/**

    Gets the approximate footprint of this media frame
    by returning the sum of its media buffer footprints.

*/
- (int) footprint;
/**

    Frees the buffers referenced by this instance.

    @return This instance.
*/
- (TFrame) free;
/**

    Gets the last buffer whose format is compatible with the specified format.

    @param format The format.
*/
- (TBuffer) getBufferWithFormat:(TFormat)format;
/**

    Gets the last buffer whose format is compatible with the specified format
    and whose source ID matches the specified source ID.

    @param format The format.
    @param sourceId The source identifier.
*/
- (TBuffer) getBufferWithFormat:(TFormat)format sourceId:(NSString*)sourceId;
/**

    Gets the last buffer whose format name matches the specified format name.

    @param formatName The format name.
*/
- (TBuffer) getBufferWithFormatName:(NSString*)formatName;
/**

    Gets the last buffer whose format packetization flag matches the specified flag.

    @param isPacketized Whether the buffer is packetized.
*/
- (TBuffer) getBufferWithIsPacketized:(bool)isPacketized;
/**

    Gets the last buffer whose format packetization and encryption flags
    matches the specified flags.

    @param isPacketized Whether the buffer is packetized.
    @param isEncrypted Whether the buffer is encrypted.
*/
- (TBuffer) getBufferWithIsPacketized:(bool)isPacketized isEncrypted:(bool)isEncrypted;
/**

    Checks if a buffer exists with format equivalence.

    @param format The format.
    @return `true` if the buffer exists; otherwise, `false`.
            
*/
- (bool) hasBufferWithFormat:(TFormat)format;
/**

    Checks if a buffer exists with format equivalence and source ID.

    @param format The format.
    @param sourceId The source identifier.
    @return `true` if the buffer exists; otherwise, `false`.
            
*/
- (bool) hasBufferWithFormat:(TFormat)format sourceId:(NSString*)sourceId;
/**

    Initializes a new instance of the FMLiveSwitchMediaFrame`4 class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMediaFrame`4 class.

    @param buffer The buffer.
*/
- (instancetype) initWithBuffer:(TBuffer)buffer;
/**

    Initializes a new instance of the FMLiveSwitchMediaFrame`4 class.

    @param buffers The buffers.
*/
- (instancetype) initWithBuffers:(NSMutableArray*)buffers;
/**

    Keeps the buffers referenced by this instance.

    @return This instance.
*/
- (TFrame) keep;
/**

    Gets the most recent buffer.

*/
- (TBuffer) lastBuffer;
/**

    Initializes a new instance of the FMLiveSwitchMediaFrame`4 class.

*/
+ (FMLiveSwitchMediaFrame*) mediaFrame;
/**

    Initializes a new instance of the FMLiveSwitchMediaFrame`4 class.

    @param buffer The buffer.
*/
+ (FMLiveSwitchMediaFrame*) mediaFrameWithBuffer:(TBuffer)buffer;
/**

    Initializes a new instance of the FMLiveSwitchMediaFrame`4 class.

    @param buffers The buffers.
*/
+ (FMLiveSwitchMediaFrame*) mediaFrameWithBuffers:(NSMutableArray*)buffers;
/**

    Gets the MID.

*/
- (NSString*) mid;
/**

    Gets the network system timestamp. For
    inbound media, this value is calculated in the
    network layer as soon as the packet payload is
    determined to contain media.

*/
- (long long) networkSystemTimestamp;
/**

    Gets the NTP timestamp ticks matching
    FMLiveSwitchMediaFrame`4#timestamp, set by RTP receivers
    for synchronization of inbound media streams.

    @deprecated Use SystemTimestamp instead.
*/
- (long long) ntpTimestampTicks __deprecated_msg("Use SystemTimestamp instead.");
/**

    Removes a buffer.

    @param buffer The buffer.
*/
- (void) removeBuffer:(TBuffer)buffer;
/**

    Removes all buffers.

*/
- (void) removeBuffers;
/**

    Removes some buffers.

    @param buffers The buffers.
*/
- (void) removeBuffers:(NSMutableArray*)buffers;
/**

    Gets the repaired RTP stream identifier.

*/
- (NSString*) repairedRtpStreamId;
/**

    Gets the RTP sequence number.

*/
- (int) rtpSequenceNumber;
/**

    Gets the RTP stream identifier.

*/
- (NSString*) rtpStreamId;
/**

    Gets the RTP timestamp.

*/
- (long long) rtpTimestamp;
/**

    Gets the sequence number.

*/
- (long long) sequenceNumber;
/**

    Sets the buffer.

*/
- (void) setBuffer:(TBuffer)value;
/**

    Sets the buffers.

*/
- (void) setBuffers:(NSMutableArray*)value;
/**

    Sets the contributing sources.

*/
- (void) setContributingSources:(NSMutableArray*)value;
/**

    Sets whether this frame should be discarded.

*/
- (void) setDiscard:(bool)value;
/**

    Sets the MID.

*/
- (void) setMid:(NSString*)value;
/**

    Sets the network system timestamp. For
    inbound media, this value is calculated in the
    network layer as soon as the packet payload is
    determined to contain media.

*/
- (void) setNetworkSystemTimestamp:(long long)value;
/**

    Sets the NTP timestamp ticks matching
    FMLiveSwitchMediaFrame`4#timestamp, set by RTP receivers
    for synchronization of inbound media streams.

    @deprecated Use SystemTimestamp instead.
*/
- (void) setNtpTimestampTicks:(long long)value __deprecated_msg("Use SystemTimestamp instead.");
/**

    Sets the repaired RTP stream identifier.

*/
- (void) setRepairedRtpStreamId:(NSString*)value;
/**

    Sets the RTP sequence number.

*/
- (void) setRtpSequenceNumber:(int)value;
/**

    Sets the RTP stream identifier.

*/
- (void) setRtpStreamId:(NSString*)value;
/**

    Sets the RTP timestamp.

*/
- (void) setRtpTimestamp:(long long)value;
/**

    Sets the sequence number.

*/
- (void) setSequenceNumber:(long long)value;
/**

    Sets the synchronization source.

*/
- (void) setSynchronizationSource:(long long)value;
/**

    Sets whether this frame has a
    FMLiveSwitchMediaFrame`4#systemTimestamp that is
    actively synchronized with other streams.

*/
- (void) setSynchronized:(bool)value;
/**

    Sets the system timestamp matching
    FMLiveSwitchMediaFrame`4#timestamp but measured in system ticks.
    For local frames, this value uses the same
    clock as FMLiveSwitchManagedStopwatch.
    For remote frames, this value uses a clock
    known only to the remote sender.

*/
- (void) setSystemTimestamp:(long long)value;
/**

    Sets the timestamp, measured according
    to the last buffer format's clock rate.

*/
- (void) setTimestamp:(long long)value;
/**

    Sets the transport system timestamp. For
    inbound media, this value is calculated after the
    network layer in the transport layer when the
    packet payload is picked up for processing
    (decryption, dejitter, track routing, etc.).

*/
- (void) setTransportSystemTimestamp:(long long)value;
/**

    Gets the synchronization source.

*/
- (long long) synchronizationSource;
/**

    Gets whether this frame has a
    FMLiveSwitchMediaFrame`4#systemTimestamp that is
    actively synchronized with other streams.

*/
- (bool) synchronized;
/**

    Gets the system timestamp matching
    FMLiveSwitchMediaFrame`4#timestamp but measured in system ticks.
    For local frames, this value uses the same
    clock as FMLiveSwitchManagedStopwatch.
    For remote frames, this value uses a clock
    known only to the remote sender.

*/
- (long long) systemTimestamp;
/**

    Gets the timestamp, measured according
    to the last buffer format's clock rate.

*/
- (long long) timestamp;
/**

    Gets the transport system timestamp. For
    inbound media, this value is calculated after the
    network layer in the transport layer when the
    packet payload is picked up for processing
    (decryption, dejitter, track routing, etc.).

*/
- (long long) transportSystemTimestamp;
/**

    Updates the timestamp to match resampling.

    @param baseTimestamp The base timestamp, captured once for the first frame.
    @param baseRtpTimestamp The base RTP timestamp, captured once for the first frame.
    @param inputClockRate The input clock rate.
    @param outputClockRate The output clock rate.
*/
- (void) updateTimestampWithBaseTimestamp:(long long)baseTimestamp baseRtpTimestamp:(long long)baseRtpTimestamp inputClockRate:(int)inputClockRate outputClockRate:(int)outputClockRate;

@end

/**

    An audio frame.

*/
@interface FMLiveSwitchAudioFrame : FMLiveSwitchMediaFrame<FMLiveSwitchAudioBuffer*,FMLiveSwitchAudioBufferCollection*,FMLiveSwitchAudioFormat*,FMLiveSwitchAudioFrame*>

/**

    Initializes a new instance of the FMLiveSwitchAudioFrame class.

    @param duration The duration.
*/
+ (FMLiveSwitchAudioFrame*) audioFrameWithDuration:(int)duration;
/**

    Initializes a new instance of the FMLiveSwitchAudioFrame class.

    @param duration The duration.
    @param buffer The buffer.
*/
+ (FMLiveSwitchAudioFrame*) audioFrameWithDuration:(int)duration buffer:(FMLiveSwitchAudioBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchAudioFrame class.

    @param duration The duration.
    @param buffers The buffers.
*/
+ (FMLiveSwitchAudioFrame*) audioFrameWithDuration:(int)duration buffers:(NSMutableArray*)buffers;
/**

    Calculates a timestamp delta given a duration and clock rate.

    @param duration The duration in milliseconds.
    @param clockRate The clock rate.
*/
+ (int) calculateTimestampDeltaWithDuration:(int)duration clockRate:(int)clockRate;
/**

    Clones this instance.

*/
- (FMLiveSwitchAudioFrame*) clone;
/**

    Creates a new instance.

*/
- (FMLiveSwitchAudioFrame*) createInstance;
/**

    Creates a media buffer collection.

*/
- (FMLiveSwitchAudioBufferCollection*) createMediaBufferCollection;
/**

    Returns a string that represents this instance.

*/
- (NSString*) description;
/**

    Gets the duration.

*/
- (int) duration;
/**

    Generates a silent audio frame for the given duration and configuration.

    @param duration The duration.
    @param config The configuration.
*/
+ (FMLiveSwitchAudioFrame*) generatePcmFrameWithDuration:(int)duration config:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchAudioFrame class.

    @param duration The duration.
*/
- (instancetype) initWithDuration:(int)duration;
/**

    Initializes a new instance of the FMLiveSwitchAudioFrame class.

    @param duration The duration.
    @param buffer The buffer.
*/
- (instancetype) initWithDuration:(int)duration buffer:(FMLiveSwitchAudioBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchAudioFrame class.

    @param duration The duration.
    @param buffers The buffers.
*/
- (instancetype) initWithDuration:(int)duration buffers:(NSMutableArray*)buffers;
/**

    Sets the duration.

*/
- (void) setDuration:(int)value;

@end

/**

    A mixer that mixes multiple audio inputs into a single output.

*/
@interface FMLiveSwitchAudioMixer : FMLiveSwitchAudioPipe

/**

    Gets whether this media pipe output rate is allowed to be timed.

*/
- (bool) allowDurationTimer;
/**

    Gets whether this media pipe input rate is allowed to be timed.

*/
- (bool) allowInputRateTimer;
/**

    Initializes a new instance of the FMLiveSwitchAudioMixer class.

    @param config The configuration.
*/
+ (FMLiveSwitchAudioMixer*) audioMixerWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchAudioMixer class.

    @param config The configuration.
    @param latency The latency in milliseconds.
*/
+ (FMLiveSwitchAudioMixer*) audioMixerWithConfig:(FMLiveSwitchAudioConfig*)config latency:(int)latency;
/**

    Initializes a new instance of the FMLiveSwitchAudioMixer class.

    @param config The configuration.
    @param latency The latency in milliseconds.
    @param frameDuration The output frame duration in milliseconds.
*/
+ (FMLiveSwitchAudioMixer*) audioMixerWithConfig:(FMLiveSwitchAudioConfig*)config latency:(int)latency frameDuration:(int)frameDuration;
/**

    Initializes a new instance of the FMLiveSwitchAudioMixer class.

    @param format The format.
*/
+ (FMLiveSwitchAudioMixer*) audioMixerWithFormat:(FMLiveSwitchAudioFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchAudioMixer class.

    @param format The format.
    @param latency The latency in milliseconds.
*/
+ (FMLiveSwitchAudioMixer*) audioMixerWithFormat:(FMLiveSwitchAudioFormat*)format latency:(int)latency;
/**

    Initializes a new instance of the FMLiveSwitchAudioMixer class.

    @param format The format.
    @param latency The latency in milliseconds.
    @param frameDuration The output frame duration in milliseconds.
*/
+ (FMLiveSwitchAudioMixer*) audioMixerWithFormat:(FMLiveSwitchAudioFormat*)format latency:(int)latency frameDuration:(int)frameDuration;
/**

    Initializes a new instance of the FMLiveSwitchAudioMixer class.

    @param input The input.
*/
+ (FMLiveSwitchAudioMixer*) audioMixerWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchAudioMixer class.

    @param input The input.
    @param latency The latency in milliseconds.
*/
+ (FMLiveSwitchAudioMixer*) audioMixerWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input latency:(int)latency;
/**

    Initializes a new instance of the FMLiveSwitchAudioMixer class.

    @param input The input.
    @param latency The latency in milliseconds.
    @param frameDuration The output frame duration in milliseconds.
*/
+ (FMLiveSwitchAudioMixer*) audioMixerWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input latency:(int)latency frameDuration:(int)frameDuration;
/**

    Initializes a new instance of the FMLiveSwitchAudioMixer class.

    @param inputs The inputs.
*/
+ (FMLiveSwitchAudioMixer*) audioMixerWithInputs:(NSMutableArray*)inputs;
/**

    Initializes a new instance of the FMLiveSwitchAudioMixer class.

    @param inputs The inputs.
    @param latency The latency in milliseconds.
*/
+ (FMLiveSwitchAudioMixer*) audioMixerWithInputs:(NSMutableArray*)inputs latency:(int)latency;
/**

    Initializes a new instance of the FMLiveSwitchAudioMixer class.

    @param inputs The inputs.
    @param latency The latency in milliseconds.
    @param frameDuration The output frame duration in milliseconds.
*/
+ (FMLiveSwitchAudioMixer*) audioMixerWithInputs:(NSMutableArray*)inputs latency:(int)latency frameDuration:(int)frameDuration;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchAudioFrame*)frame inputBuffer:(FMLiveSwitchAudioBuffer*)inputBuffer;
/**

    Gets the frame duration in milliseconds.
    Defaults to 20.

*/
- (int) frameDuration;
/**

    Initializes a new instance of the FMLiveSwitchAudioMixer class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchAudioMixer class.

    @param config The configuration.
    @param latency The latency in milliseconds.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config latency:(int)latency;
/**

    Initializes a new instance of the FMLiveSwitchAudioMixer class.

    @param config The configuration.
    @param latency The latency in milliseconds.
    @param frameDuration The output frame duration in milliseconds.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config latency:(int)latency frameDuration:(int)frameDuration;
/**

    Initializes a new instance of the FMLiveSwitchAudioMixer class.

    @param format The format.
*/
- (instancetype) initWithFormat:(FMLiveSwitchAudioFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchAudioMixer class.

    @param format The format.
    @param latency The latency in milliseconds.
*/
- (instancetype) initWithFormat:(FMLiveSwitchAudioFormat*)format latency:(int)latency;
/**

    Initializes a new instance of the FMLiveSwitchAudioMixer class.

    @param format The format.
    @param latency The latency in milliseconds.
    @param frameDuration The output frame duration in milliseconds.
*/
- (instancetype) initWithFormat:(FMLiveSwitchAudioFormat*)format latency:(int)latency frameDuration:(int)frameDuration;
/**

    Initializes a new instance of the FMLiveSwitchAudioMixer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchAudioMixer class.

    @param input The input.
    @param latency The latency in milliseconds.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input latency:(int)latency;
/**

    Initializes a new instance of the FMLiveSwitchAudioMixer class.

    @param input The input.
    @param latency The latency in milliseconds.
    @param frameDuration The output frame duration in milliseconds.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input latency:(int)latency frameDuration:(int)frameDuration;
/**

    Initializes a new instance of the FMLiveSwitchAudioMixer class.

    @param inputs The inputs.
*/
- (instancetype) initWithInputs:(NSMutableArray*)inputs;
/**

    Initializes a new instance of the FMLiveSwitchAudioMixer class.

    @param inputs The inputs.
    @param latency The latency in milliseconds.
*/
- (instancetype) initWithInputs:(NSMutableArray*)inputs latency:(int)latency;
/**

    Initializes a new instance of the FMLiveSwitchAudioMixer class.

    @param inputs The inputs.
    @param latency The latency in milliseconds.
    @param frameDuration The output frame duration in milliseconds.
*/
- (instancetype) initWithInputs:(NSMutableArray*)inputs latency:(int)latency frameDuration:(int)frameDuration;
/**

    Gets whether this pipe processes media from different sources.

*/
- (bool) isMixer;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets the latency.

*/
- (int) latency;

@end

/**

    An audio packetizer.

*/
@interface FMLiveSwitchAudioPacketizer : FMLiveSwitchAudioPipe

/**

    Gets whether this pipe is allowed to be timed.

*/
- (bool) allowDiagnosticTimer;
/**

    Initializes a new instance of the FMLiveSwitchAudioPacketizer class.

    @param format The format.
*/
+ (FMLiveSwitchAudioPacketizer*) audioPacketizerWithFormat:(FMLiveSwitchAudioFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchAudioPacketizer class.

    @param input The input.
*/
+ (FMLiveSwitchAudioPacketizer*) audioPacketizerWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchAudioPacketizer class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
+ (FMLiveSwitchAudioPacketizer*) audioPacketizerWithInputFormat:(FMLiveSwitchAudioFormat*)inputFormat outputFormat:(FMLiveSwitchAudioFormat*)outputFormat;
/**

    Gets whether this pipe can pause the output bitrate.

*/
- (bool) canPauseBitrate;
/**

    Processes track stats from an output.

    @param trackStats The track stats.
*/
- (void) doProcessTrackStatsFromOutputWithTrackStats:(FMLiveSwitchMediaTrackStats*)trackStats;
/**

    Gets the number of sent frames.

*/
- (long long) framesSent;
/**

    Initializes a new instance of the FMLiveSwitchAudioPacketizer class.

    @param format The format.
*/
- (instancetype) initWithFormat:(FMLiveSwitchAudioFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchAudioPacketizer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchAudioPacketizer class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
- (instancetype) initWithInputFormat:(FMLiveSwitchAudioFormat*)inputFormat outputFormat:(FMLiveSwitchAudioFormat*)outputFormat;
/**

    Processes the frame.

    @param frame The frame.
*/
- (bool) processFrame:(FMLiveSwitchAudioFrame*)frame;

@end

/**

    A recorder.

*/
@interface FMLiveSwitchMediaRecorder<__covariant TBuffer, __covariant TFormat> : NSObject

/**

    Updates the header and closes the file.

*/
- (void) close;
/**

    Updates the file header.

*/
- (void) doUpdateHeader;
/**

    Writes the file header.

*/
- (void) doWriteHeader;
/**

    Write an encoded video frame.

    @param buffer The encoded buffer.
    @param presentationTimestamp The presentation timestamp.
    @return `true` if the encoded frame was written successfully; otherwise, `false`
*/
- (bool) doWriteWithBuffer:(TBuffer)buffer presentationTimestamp:(long long)presentationTimestamp;
/**

    Gets the file.

*/
- (FMLiveSwitchFileStream*) file;
/**

    Gets the recorder stream.

*/
- (FMLiveSwitchFileAssistant*) fileStream;
/**

    Gets the format.

*/
- (TFormat) format;
/**

    Initializes a new instance of the FMLiveSwitchMediaRecorder`2 class.

    @param path The path.
*/
- (instancetype) initWithPath:(NSString*)path;
/**

    Initializes a new instance of the FMLiveSwitchMediaRecorder`2 class.

    @param path The path.
*/
+ (FMLiveSwitchMediaRecorder*) mediaRecorderWithPath:(NSString*)path;
/**

    Opens the file and writes the initial header.

*/
- (void) open;
/**

    Gets whether the recorder has been opened or not.

*/
- (bool) opened;
/**

    Gets the currently open path.

*/
- (NSString*) openPath;
/**

    Gets the path.

*/
- (NSString*) path;
/**

    Sets the file.

*/
- (void) setFile:(FMLiveSwitchFileStream*)value;
/**

    Sets the recorder stream.

*/
- (void) setFileStream:(FMLiveSwitchFileAssistant*)value;
/**

    Sets a value indicating whether the file was opened.

*/
- (void) setWasOpened:(bool)value;
/**

    Gets a value indicating whether the file was opened.

*/
- (bool) wasOpened;
/**

    Write an encoded video frame using the width
    and height parameters from the first keyframe.
    This method will discard non-keyframes until
    the first keyframe arrives.

    @param buffer The encoded buffer.
    @param presentationTimestamp The presentation timestamp.
    @return `true` if the encoded frame was written successfully; otherwise, `false`
*/
- (bool) writeWithBuffer:(TBuffer)buffer presentationTimestamp:(long long)presentationTimestamp;

@end

/**

    An audio recorder.

*/
@interface FMLiveSwitchAudioRecorder : FMLiveSwitchMediaRecorder<FMLiveSwitchAudioBuffer*,FMLiveSwitchAudioFormat*>

/**

    Initializes a new instance of the FMLiveSwitchAudioRecorder class.

    @param path The path.
*/
+ (FMLiveSwitchAudioRecorder*) audioRecorderWithPath:(NSString*)path;
/**

    Initializes a new instance of the FMLiveSwitchAudioRecorder class.

    @param path The path.
*/
- (instancetype) initWithPath:(NSString*)path;

@end

/**

    Media sink base properties/methods.

*/
@interface FMLiveSwitchMediaSinkBase : FMLiveSwitchDynamic

/**

    Gets the external identifier.

*/
- (NSString*) externalId;
/**

    Gets the identifier.

*/
- (NSString*) id;
- (instancetype) init;
/**

    Gets the log context.

*/
- (FMLiveSwitchLogContext*) logContext;
+ (FMLiveSwitchMediaSinkBase*) mediaSinkBase;
/**

    Sets the external identifier.

*/
- (void) setExternalId:(NSString*)value;
/**

    Sets the log context.

*/
- (void) setLogContext:(FMLiveSwitchLogContext*)value;
/**

    Sets optional data to associate with this instance.

*/
- (void) setTag:(NSString*)value;
/**

    Gets optional data to associate with this instance.

*/
- (NSString*) tag;
/**

    Updates the log context.

    @param context 
*/
- (void) updateLogContext:(FMLiveSwitchLogContext*)context;

@end

/**

    A media sink.

*/
@interface FMLiveSwitchMediaSink<__covariant TIOutput, __covariant TIOutputCollection, __covariant TIInput, __covariant TSink, __covariant TFrame, __covariant TBuffer, __covariant TBufferCollection, __covariant TFormat> : FMLiveSwitchMediaSinkBase<FMLiveSwitchIMediaInput, FMLiveSwitchIInput, FMLiveSwitchIMediaElement, FMLiveSwitchIElement>

/**

    Adds an input.

    @param input The input.
*/
- (void) addInput:(TIOutput)input;
/**

    Adds some inputs.

    @param inputs The inputs.
*/
- (void) addInputs:(NSMutableArray*)inputs;
/**

    Adds a handler that is raised when the Disabled property changes state.

*/
- (void) addOnDisabledChange:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the Paused property changes state.

*/
- (void) addOnPausedChange:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when control frame responses are processed.

*/
- (void) addOnProcessControlFrameResponses:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Adds a handler that is raised when control frame responses are processed.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnProcessControlFrameResponsesWithBlock;
/**

    Adds a handler that is raised when control frame responses are processed.

*/
- (void) addOnProcessControlFrameResponsesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Adds a handler that is raised when control frame responses have been processed.

*/
- (void) addOnProcessedControlFrameResponses:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Adds a handler that is raised when control frame responses have been processed.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnProcessedControlFrameResponsesWithBlock;
/**

    Adds a handler that is raised when control frame responses have been processed.

*/
- (void) addOnProcessedControlFrameResponsesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Adds a handler that is raised when a frame has been processed.

*/
- (void) addOnProcessedFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Adds a handler that is raised when a frame has been processed.

*/
- (void (^)(void(^)(TFrame))) addOnProcessedFrameWithBlock;
/**

    Adds a handler that is raised when a frame has been processed.

*/
- (void) addOnProcessedFrameWithBlock:(void(^)(TFrame))valueBlock;
/**

    Adds a handler that is raised when a frame is being processed.

*/
- (void) addOnProcessFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Adds a handler that is raised when an exception is thrown while processing a frame.

*/
- (void) addOnProcessFrameException:(FMLiveSwitchAction2<TFrame,NSException*>*)value;
/**

    Adds a handler that is raised when an exception is thrown while processing a frame.

*/
- (void (^)(void(^)(TFrame, NSException*))) addOnProcessFrameExceptionWithBlock;
/**

    Adds a handler that is raised when an exception is thrown while processing a frame.

*/
- (void) addOnProcessFrameExceptionWithBlock:(void(^)(TFrame, NSException*))valueBlock;
/**

    Adds a handler that is raised when a frame is being processed.

*/
- (void (^)(void(^)(TFrame))) addOnProcessFrameWithBlock;
/**

    Adds a handler that is raised when a frame is being processed.

*/
- (void) addOnProcessFrameWithBlock:(void(^)(TFrame))valueBlock;
/**

    Adds a handler that is raised when a frame is being processed.

*/
- (void) addOnProcessFrameWithCaller:(FMLiveSwitchAction2<id,TFrame>*)value;
/**

    Adds a handler that is raised when a frame is being processed.

*/
- (void (^)(void(^)(id, TFrame))) addOnProcessFrameWithCallerWithBlock;
/**

    Adds a handler that is raised when a frame is being processed.

*/
- (void) addOnProcessFrameWithCallerWithBlock:(void(^)(id, TFrame))valueBlock;
/**

    Adds a handler that is raised when control frames are raised.

*/
- (void) addOnRaiseControlFrames:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Adds a handler that is raised when control frames are raised.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnRaiseControlFramesWithBlock;
/**

    Adds a handler that is raised when control frames are raised.

*/
- (void) addOnRaiseControlFramesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Adds a handler that is raised when control frames have been raised.

*/
- (void) addOnRaisedControlFrames:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Adds a handler that is raised when control frames have been raised.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnRaisedControlFramesWithBlock;
/**

    Adds a handler that is raised when control frames have been raised.

*/
- (void) addOnRaisedControlFramesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Adds a handler that is raised when the state changes.

*/
- (void) addOnStateChange:(FMLiveSwitchAction1<TSink>*)value;
/**

    Adds a handler that is raised when the state changes.

*/
- (void (^)(void(^)(TSink))) addOnStateChangeWithBlock;
/**

    Adds a handler that is raised when the state changes.

*/
- (void) addOnStateChangeWithBlock:(void(^)(TSink))valueBlock;
/**

    Gets whether this media sink is allowed to be timed.

*/
- (bool) allowDiagnosticTimer;
/**

    Gets whether this media pipe input rate is allowed to be timed.

*/
- (bool) allowInputRateTimer;
/**

    Changes the current output.

    @param output The output.
*/
- (FMLiveSwitchFuture<id>*) changeOutput:(FMLiveSwitchSinkOutput*)output;
/**

    Gets the content descriptor.

*/
- (NSString*) content;
/**

    Creates an output collection.

    @param input The input.
*/
- (TIOutputCollection) createOutputCollectionWithInput:(TIInput)input;
/**

    Gets a value indicating whether this sink is deactivated.
    Deactivating a sink disables it until it is activated again.
    A deactivated sink will not process any frames.
    Alias for FMLiveSwitchMediaSink`8#inputDeactivated.

*/
- (bool) deactivated;
/**

    Returns a string that represents this instance.

*/
- (NSString*) description;
/**

    Destroys this instance.

*/
- (bool) destroy;
/**

    Gets a value indicating whether this sink is disabled.
    A sink is automatically disabled if it is deactivated.
    A disabled sink will not accept frames raised by its inputs.
    Setting the value of MediaSink.Disabled is deprecated. Set MediaSink.Deactivated instead.

*/
- (bool) disabled;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Post-processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doPostProcessFrame:(TFrame)frame inputBuffer:(TBuffer)inputBuffer;
/**

    Pre-processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doPreProcessFrame:(TFrame)frame inputBuffer:(TBuffer)inputBuffer;
/**

    Processes control frame responses.

    @param controlFrameResponses The control frame responses.
*/
- (void) doProcessControlFrameResponses:(NSMutableArray*)controlFrameResponses;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(TFrame)frame inputBuffer:(TBuffer)inputBuffer;
/**

    Processes a remote SDP media description.

    @param mediaDescription The media description.
    @param isOffer if set to `true` [is offer].
    @param isLocalDescription if set to `true` [is local description].
*/
- (FMLiveSwitchError*) doProcessSdpMediaDescription:(FMLiveSwitchSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription;
/**

    Processes sink stats from an input.

    @param sinkStats The stats.
*/
- (void) doProcessSinkStatsFromInputWithSinkStats:(FMLiveSwitchMediaSinkStats*)sinkStats;
/**

    Processes track stats from an input.

    @param trackStats The track stats.
*/
- (void) doProcessTrackStatsFromInputWithTrackStats:(FMLiveSwitchMediaTrackStats*)trackStats;
/**

    Gets the CCM sequence number.

*/
- (int) getCcmSequenceNumber;
/**

    Gets the available outputs.

*/
- (FMLiveSwitchFuture<NSMutableArray*>*) getOutputs;
/**

    Gets the total pipeline system delay in ticks for a given output format.

    @param outputFormat The output format.
    @return The total pipeline system delay in ticks.
*/
- (long long) getPipelineSystemDelayWithOutputFormat:(TFormat)outputFormat;
/**

    Determines whether this pipe has the specified input.

    @param input The input.
*/
- (bool) hasInput:(TIOutput)input;
/**

    Increments the CCM sequence number.

*/
- (void) incrementCcmSequenceNumber;
/**

    Initializes a new instance of the FMLiveSwitchMediaSink`8 class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMediaSink`8 class.

    @param inputFormat The input format.
*/
- (instancetype) initWithInputFormat:(TFormat)inputFormat;
/**

    Gets the input.

*/
- (TIOutput) input;
/**

    Called when an input is added.

    @param input The input.
*/
- (void) inputAddedWithInput:(TIOutput)input;
/**

    Gets whether input is deactivated.

*/
- (bool) inputDeactivated;
/**

    Gets the input format.

*/
- (TFormat) inputFormat;
/**

    Gets whether input is muted.

*/
- (bool) inputMuted;
/**

    Called when an input is removed.

    @param input The input.
*/
- (void) inputRemovedWithInput:(TIOutput)input;
/**

    Gets the input RTP stream identifier.
    If the input RTP stream identifier is null (unset),
    then getting this property returns the first valid
    output RTP stream identifier from the array of
    FMLiveSwitchMediaSink`8#inputs, or null if they are all unset.

*/
- (NSString*) inputRtpStreamId;
/**

    Gets the inputs.

*/
- (NSMutableArray*) inputs;
/**

    Gets the input synchronization source.
    If the input synchronization source is -1 (unset),
    then getting this property returns the first valid
    output synchronization source from the array of
    FMLiveSwitchMediaSink`8#inputs, or -1 if they are all unset.

*/
- (long long) inputSynchronizationSource;
/**

    Gets whether this sink processes media from different sources.

*/
- (bool) isMixer;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets the maximum allowed input bitrate, in kbps.
    A value of -1 indicates unset (no maximum).
    Returns -1 by default.

*/
- (int) maxInputBitrate;
/**

    Gets the maximum allowed input encoding.

*/
- (FMLiveSwitchEncodingInfo*) maxInputEncoding;
/**

    Initializes a new instance of the FMLiveSwitchMediaSink`8 class.

*/
+ (FMLiveSwitchMediaSink*) mediaSink;
/**

    Initializes a new instance of the FMLiveSwitchMediaSink`8 class.

    @param inputFormat The input format.
*/
+ (FMLiveSwitchMediaSink*) mediaSinkWithInputFormat:(TFormat)inputFormat;
/**

    Gets the minimum allowed input bitrate, in kbps.
    A value of -1 indicates unset (no minimum).
    Returns -1 by default.

*/
- (int) minInputBitrate;
/**

    Gets the minimum allowed input encoding.

*/
- (FMLiveSwitchEncodingInfo*) minInputEncoding;
/**

    Gets whether input is muted.
    Alias for FMLiveSwitchMediaSink`8#inputMuted.

*/
- (bool) muted;
/**

    Gets the current output.

*/
- (FMLiveSwitchSinkOutput*) output;
/**

    Gets whether this sink is over-constrained.
    A sink is over-constrained if it's
    input is over-constrained.

*/
- (bool) overConstrained;
/**

    Gets whether the sink bitrate is over-constrained.
    A sink bitrate is over-constrained if the input
    bitrate is over-constrained.

*/
- (bool) overConstrainedBitrate;
/**

    Gets whether the input is over-contrained.
    An input is over-constrained if it's
    input bitrate is over-contrained.

*/
- (bool) overConstrainedInput;
/**

    Gets whether the minimum allowed input bitrate exceeds the maximum allowed input bitrate.

*/
- (bool) overConstrainedInputBitrate;
/**

    Gets a value indicating whether this sink is paused.

*/
- (bool) paused;
/**

    Gets a value indicating whether this instance is persistent.
    If `true`, this instance will not be destroyed unless
    FMLiveSwitchMediaSink`8#destroy is called explicitly on this instance.
    It will survive destruction of any parent elements that are
    being destroyed.

*/
- (bool) persistent;
/**

    Gets the pipeline JSON with this as the central point.

*/
- (NSString*) pipelineJson;
/**

    Gets the pipeline JSON from an input.

*/
- (NSString*) pipelineJsonFromInput;
/**

    Processes a control frame response.

    @param controlFrameResponse The control frame response.
*/
- (void) processControlFrameResponse:(FMLiveSwitchMediaControlFrame*)controlFrameResponse;
/**

    Processes control frame responses.

    @param controlFrameResponses The control frame responses.
*/
- (void) processControlFrameResponses:(NSMutableArray*)controlFrameResponses;
/**

    Processes a frame.

    @param frame The frame.
*/
- (bool) processFrame:(TFrame)frame;
/**

    Gets the ProcessFramePolicy for this media input.

*/
- (FMLiveSwitchProcessFramePolicy) processFramePolicy;
/**

    Processes a remote SDP media description from an output.

    @param mediaDescription The media description.
    @param isOffer if set to `true` [is offer].
    @param isLocalDescription if set to `true` [is local description].
*/
- (FMLiveSwitchError*) processSdpMediaDescriptionFromInputWithMediaDescription:(FMLiveSwitchSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription;
/**

    Processes sink stats from an input.

    @param sinkStats The sink stats.
*/
- (void) processSinkStatsFromInputWithSinkStats:(FMLiveSwitchMediaSinkStats*)sinkStats;
/**

    Processes track stats from an input.

    @param trackStats The track stats.
*/
- (void) processTrackStatsFromInputWithTrackStats:(FMLiveSwitchMediaTrackStats*)trackStats;
/**

    Raises a control frame.

    @param controlFrame The control frame.
*/
- (void) raiseControlFrame:(FMLiveSwitchMediaControlFrame*)controlFrame;
/**

    Raises a control frame.

    @param controlFrame The control frame.
    @param inputs The inputs.
*/
- (void) raiseControlFrame:(FMLiveSwitchMediaControlFrame*)controlFrame inputs:(NSMutableArray*)inputs;
/**

    Raises control frames.

    @param controlFrames The control frames.
*/
- (void) raiseControlFrames:(NSMutableArray*)controlFrames;
/**

    Raises control frames.

    @param controlFrames The control frames.
    @param inputs The inputs.
*/
- (void) raiseControlFrames:(NSMutableArray*)controlFrames inputs:(NSMutableArray*)inputs;
/**

    Raises the OnDisabledChange event.

*/
- (void) raiseDisabledChange;
/**

    Removes an input.

    @param input The input.
*/
- (bool) removeInput:(TIOutput)input;
/**

    Removes all inputs.

*/
- (void) removeInputs;
/**

    Removes some inputs.

    @param inputs The inputs.
*/
- (void) removeInputs:(NSMutableArray*)inputs;
/**

    Removes a handler that is raised when the Disabled property changes state.

*/
- (void) removeOnDisabledChange:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the Paused property changes state.

*/
- (void) removeOnPausedChange:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when control frame responses are processed.

*/
- (void) removeOnProcessControlFrameResponses:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Removes a handler that is raised when control frame responses have been processed.

*/
- (void) removeOnProcessedControlFrameResponses:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Removes a handler that is raised when a frame has been processed.

*/
- (void) removeOnProcessedFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Removes a handler that is raised when a frame is being processed.

*/
- (void) removeOnProcessFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Removes a handler that is raised when an exception is thrown while processing a frame.

*/
- (void) removeOnProcessFrameException:(FMLiveSwitchAction2<TFrame,NSException*>*)value;
/**

    Removes a handler that is raised when a frame is being processed.

*/
- (void) removeOnProcessFrameWithCaller:(FMLiveSwitchAction2<id,TFrame>*)value;
/**

    Removes a handler that is raised when control frames are raised.

*/
- (void) removeOnRaiseControlFrames:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Removes a handler that is raised when control frames have been raised.

*/
- (void) removeOnRaisedControlFrames:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Removes a handler that is raised when the state changes.

*/
- (void) removeOnStateChange:(FMLiveSwitchAction1<TSink>*)value;
/**

    Sets a value indicating whether this sink is deactivated.
    Deactivating a sink disables it until it is activated again.
    A deactivated sink will not process any frames.
    Alias for FMLiveSwitchMediaSink`8#inputDeactivated.

*/
- (void) setDeactivated:(bool)value;
/**

    Sets a value indicating whether this sink is disabled.
    A sink is automatically disabled if it is deactivated.
    A disabled sink will not accept frames raised by its inputs.
    Setting the value of MediaSink.Disabled is deprecated. Set MediaSink.Deactivated instead.

*/
- (void) setDisabled:(bool)value;
/**

    Sets the input.

*/
- (void) setInput:(TIOutput)value;
/**

    Sets whether input is deactivated.

*/
- (void) setInputDeactivated:(bool)value;
/**

    Sets whether input is muted.

*/
- (void) setInputMuted:(bool)value;
/**

    Sets the input RTP stream identifier.
    If the input RTP stream identifier is null (unset),
    then getting this property returns the first valid
    output RTP stream identifier from the array of
    FMLiveSwitchMediaSink`8#inputs, or null if they are all unset.

*/
- (void) setInputRtpStreamId:(NSString*)value;
/**

    Sets the inputs.

*/
- (void) setInputs:(NSMutableArray*)value;
/**

    Sets the input synchronization source.
    If the input synchronization source is -1 (unset),
    then getting this property returns the first valid
    output synchronization source from the array of
    FMLiveSwitchMediaSink`8#inputs, or -1 if they are all unset.

*/
- (void) setInputSynchronizationSource:(long long)value;
/**

    Sets the maximum allowed input bitrate, in kbps.
    A value of -1 indicates unset (no maximum).
    Returns -1 by default.

*/
- (void) setMaxInputBitrate:(int)value;
/**

    Sets the maximum allowed input encoding.

*/
- (void) setMaxInputEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Sets the minimum allowed input bitrate, in kbps.
    A value of -1 indicates unset (no minimum).
    Returns -1 by default.

*/
- (void) setMinInputBitrate:(int)value;
/**

    Sets the minimum allowed input encoding.

*/
- (void) setMinInputEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Sets whether input is muted.
    Alias for FMLiveSwitchMediaSink`8#inputMuted.

*/
- (void) setMuted:(bool)value;
/**

    Sets the current output.

*/
- (void) setOutput:(FMLiveSwitchSinkOutput*)value;
/**

    Sets a value indicating whether this instance is persistent.
    If `true`, this instance will not be destroyed unless
    FMLiveSwitchMediaSink`8#destroy is called explicitly on this instance.
    It will survive destruction of any parent elements that are
    being destroyed.

*/
- (void) setPersistent:(bool)value;
/**

    Sets the ProcessFramePolicy for this media input.

*/
- (void) setProcessFramePolicy:(FMLiveSwitchProcessFramePolicy)value;
/**

    Sets the system delay in ticks.

*/
- (void) setSystemDelay:(long long)value;
/**

    Gets the state.

*/
- (FMLiveSwitchMediaSinkState) state;
/**

    Gets the system delay in ticks.

*/
- (long long) systemDelay;
/**

    Sets the input format, if not set,
    using the frame's last buffer format.

    @param frame The frame.
    @return `true` if the input format was set.
*/
- (bool) trySetInputFormatWithFrame:(TFrame)frame;
/**

    Updates the disabled property.

*/
- (bool) updateDisabled;

@end

/**

    An audio sink.

*/
@interface FMLiveSwitchAudioSink : FMLiveSwitchMediaSink<NSObject<FMLiveSwitchIAudioOutput>*,FMLiveSwitchIAudioOutputCollection*,NSObject<FMLiveSwitchIAudioInput>*,FMLiveSwitchAudioSink*,FMLiveSwitchAudioFrame*,FMLiveSwitchAudioBuffer*,FMLiveSwitchAudioBufferCollection*,FMLiveSwitchAudioFormat*><FMLiveSwitchIAudioInput, FMLiveSwitchIMediaInput, FMLiveSwitchIInput, FMLiveSwitchIAudioElement, FMLiveSwitchIMediaElement, FMLiveSwitchIElement>

/**

    Initializes a new instance of the FMLiveSwitchAudioSink class.

*/
+ (FMLiveSwitchAudioSink*) audioSink;
/**

    Initializes a new instance of the FMLiveSwitchAudioSink class.

    @param inputFormat The input format.
*/
+ (FMLiveSwitchAudioSink*) audioSinkWithInputFormat:(FMLiveSwitchAudioFormat*)inputFormat;
/**

    Gets the input configuration.

*/
- (FMLiveSwitchAudioConfig*) config;
/**

    Creates an output collection.

    @param input The input.
*/
- (FMLiveSwitchIAudioOutputCollection*) createOutputCollectionWithInput:(NSObject<FMLiveSwitchIAudioInput>*)input;
/**

    Gets a value indicating the gain
    (input amplification) of this sink.
    Any value greater than or equal to 0.0
    is acceptable.

*/
- (double) gain;
/**

    Initializes a new instance of the FMLiveSwitchAudioSink class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchAudioSink class.

    @param inputFormat The input format.
*/
- (instancetype) initWithInputFormat:(FMLiveSwitchAudioFormat*)inputFormat;
/**

    Processes a frame.

    @param frame The frame.
*/
- (bool) processFrame:(FMLiveSwitchAudioFrame*)frame;
/**

    Sets a value indicating the gain
    (input amplification) of this sink.
    Any value greater than or equal to 0.0
    is acceptable.

*/
- (void) setGain:(double)value;

@end

/**

    Media source base properties/methods.

*/
@interface FMLiveSwitchMediaSourceBase : FMLiveSwitchDynamic

/**

    Gets the external identifier.

*/
- (NSString*) externalId;
/**

    Gets the identifier.

*/
- (NSString*) id;
- (instancetype) init;
+ (FMLiveSwitchMediaSourceBase*) mediaSourceBase;
/**

    Sets the external identifier.

*/
- (void) setExternalId:(NSString*)value;
/**

    Sets optional data to associate with this instance.

*/
- (void) setTag:(NSString*)value;
/**

    Starts this instance.

*/
- (FMLiveSwitchFuture<id>*) start;
/**

    Stops this instance.

*/
- (FMLiveSwitchFuture<id>*) stop;
/**

    Gets optional data to associate with this instance.

*/
- (NSString*) tag;

@end

/**

    A media source.

*/
@interface FMLiveSwitchMediaSource<__covariant TIOutput, __covariant TIInput, __covariant TIInputCollection, __covariant TSource, __covariant TFrame, __covariant TBuffer, __covariant TBufferCollection, __covariant TFormat> : FMLiveSwitchMediaSourceBase<FMLiveSwitchIMediaOutput, FMLiveSwitchIOutput, FMLiveSwitchIMediaElement, FMLiveSwitchIElement>

/**

    Adds a handler that is raised when the Disabled property changes state.

*/
- (void) addOnDisabledChange:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the Disabled property changes state.

*/
- (void) addOnDisabledChangeWithCaller:(FMLiveSwitchAction1<id>*)value;
/**

    Adds a handler that is raised when the Disabled property changes state.

*/
- (void (^)(void(^)(id))) addOnDisabledChangeWithCallerWithBlock;
/**

    Adds a handler that is raised when the Disabled property changes state.

*/
- (void) addOnDisabledChangeWithCallerWithBlock:(void(^)(id))valueBlock;
/**

    Adds a handler that is raised when the source is muted.

*/
- (void) addOnMuted:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the Paused property changes state.

*/
- (void) addOnPausedChange:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when control frames are processed.

*/
- (void) addOnProcessControlFrames:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Adds a handler that is raised when control frames are processed.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnProcessControlFramesWithBlock;
/**

    Adds a handler that is raised when control frames are processed.

*/
- (void) addOnProcessControlFramesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Adds a handler that is raised when control frames have been processed.

*/
- (void) addOnProcessedControlFrames:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Adds a handler that is raised when control frames have been processed.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnProcessedControlFramesWithBlock;
/**

    Adds a handler that is raised when control frames have been processed.

*/
- (void) addOnProcessedControlFramesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Adds a handler that is raised when control frame responses are raised.

*/
- (void) addOnRaiseControlFrameResponses:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Adds a handler that is raised when control frame responses are raised.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnRaiseControlFrameResponsesWithBlock;
/**

    Adds a handler that is raised when control frame responses are raised.

*/
- (void) addOnRaiseControlFrameResponsesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Adds a handler that is raised when control frame responses have been raised.

*/
- (void) addOnRaisedControlFrameResponses:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Adds a handler that is raised when control frame responses have been raised.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnRaisedControlFrameResponsesWithBlock;
/**

    Adds a handler that is raised when control frame responses have been raised.

*/
- (void) addOnRaisedControlFrameResponsesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Adds a handler that is raised when a frame has been raised.

*/
- (void) addOnRaisedFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Adds a handler that is raised when a frame has been raised.

*/
- (void (^)(void(^)(TFrame))) addOnRaisedFrameWithBlock;
/**

    Adds a handler that is raised when a frame has been raised.

*/
- (void) addOnRaisedFrameWithBlock:(void(^)(TFrame))valueBlock;
/**

    Adds a handler that is raised when a frame is being raised.

*/
- (void) addOnRaiseFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Adds a handler that is raised when a frame is being raised.

*/
- (void (^)(void(^)(TFrame))) addOnRaiseFrameWithBlock;
/**

    Adds a handler that is raised when a frame is being raised.

*/
- (void) addOnRaiseFrameWithBlock:(void(^)(TFrame))valueBlock;
/**

    Adds a handler that is raised when the state changes.

*/
- (void) addOnStateChange:(FMLiveSwitchAction1<TSource>*)value;
/**

    Adds a handler that is raised when the state changes.

*/
- (void (^)(void(^)(TSource))) addOnStateChangeWithBlock;
/**

    Adds a handler that is raised when the state changes.

*/
- (void) addOnStateChangeWithBlock:(void(^)(TSource))valueBlock;
/**

    Adds a handler that is raised when the source is unmuted.

*/
- (void) addOnUnmuted:(FMLiveSwitchAction0*)value;
/**

    Adds an output.

    @param output The output.
*/
- (void) addOutput:(TIInput)output;
/**

    Adds some outputs.

    @param outputs The outputs.
*/
- (void) addOutputs:(NSMutableArray*)outputs;
/**

    Gets whether this media pipe is allowed to be timed.

*/
- (bool) allowDiagnosticTimer;
/**

    Gets whether this media pipe output rate is allowed to be timed.

*/
- (bool) allowOutputRateTimer;
/**

    Gets whether this source can change the output bitrate.

*/
- (bool) canChangeBitrate;
/**

    Gets whether this source can pause the output bitrate.

*/
- (bool) canPauseBitrate;
/**

    Changes the current input.

    @param input The input.
*/
- (FMLiveSwitchFuture<id>*) changeInput:(FMLiveSwitchSourceInput*)input;
/**

    Gets the content descriptor.

*/
- (NSString*) content;
/**

    Creates an input collection.

    @param output The output.
*/
- (TIInputCollection) createInputCollectionWithOutput:(TIOutput)output;
/**

    Gets a value indicating whether this source is deactivated.
    Deactivating a source disables it until it is activated again.
    Upon reactivation, a pipe may remain disabled if its outputs are disabled.
    A deactivated source will not raise any frames.
    Alias for FMLiveSwitchMediaSource`8#outputDeactivated.

*/
- (bool) deactivated;
/**

    Gets whether this source is deactivated
    because the application has requested it.

*/
- (bool) deactivatedByApplication;
/**

    Gets whether this source is deactivated
    because the server has requested it.

*/
- (bool) deactivatedByServer;
/**

    Returns a string that represents this instance.

*/
- (NSString*) description;
/**

    Destroys this instance.

*/
- (bool) destroy;
/**

    Gets a value indicating whether this source is disabled.
    A source is automatically disabled if it is deactivated or if all of its outputs are disabled.

*/
- (bool) disabled;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes control frames.

    @param controlFrames The control frames.
*/
- (void) doProcessControlFrames:(NSMutableArray*)controlFrames;
/**

    Processes a local SDP media description.

    @param mediaDescription The media description.
    @param isOffer if set to `true` [is offer].
    @param isLocalDescription if set to `true` [is local description].
*/
- (FMLiveSwitchError*) doProcessSdpMediaDescription:(FMLiveSwitchSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription;
/**

    Processes source stats from an output.

    @param sourceStats The source stats.
*/
- (void) doProcessSourceStatsFromOutputWithSourceStats:(FMLiveSwitchMediaSourceStats*)sourceStats;
/**

    Processes track stats from an output.

    @param trackStats The track stats.
*/
- (void) doProcessTrackStatsFromOutputWithTrackStats:(FMLiveSwitchMediaTrackStats*)trackStats;
/**

    Starts this instance.

*/
- (FMLiveSwitchFuture<id>*) doStart;
/**

    Stops this instance.

*/
- (FMLiveSwitchFuture<id>*) doStop;
/**

    Gets the CCM sequence number.

*/
- (int) getCcmSequenceNumber;
/**

    Gets the available inputs.

*/
- (FMLiveSwitchFuture<NSMutableArray*>*) getInputs;
/**

    Gets the total pipeline system delay in ticks for a given output format.

    @param outputFormat The output format.
    @return The total pipeline system delay in ticks.
*/
- (long long) getPipelineSystemDelayWithOutputFormat:(TFormat)outputFormat;
/**

    Determines whether this source has the specified output.

    @param output The output.
*/
- (bool) hasOutput:(TIInput)output;
/**

    Increments the CCM sequence number.

*/
- (void) incrementCcmSequenceNumber;
/**

    Initializes a new instance of the FMLiveSwitchMediaSource`8 class.

    @param outputFormat The output format.
*/
- (instancetype) initWithOutputFormat:(TFormat)outputFormat;
/**

    Gets the current input.

*/
- (FMLiveSwitchSourceInput*) input;
/**

    Gets whether the current state is Destroyed.

*/
- (bool) isDestroyed;
/**

    Gets whether the current state is Started.

*/
- (bool) isStarted;
/**

    Gets whether the current state is Stopped.

*/
- (bool) isStopped;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets the maximum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

*/
- (int) maxOutputBitrate;
/**

    Gets the maximum allowed output encoding.

*/
- (FMLiveSwitchEncodingInfo*) maxOutputEncoding;
/**

    Initializes a new instance of the FMLiveSwitchMediaSource`8 class.

    @param outputFormat The output format.
*/
+ (FMLiveSwitchMediaSource*) mediaSourceWithOutputFormat:(TFormat)outputFormat;
/**

    Gets the minimum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

*/
- (int) minOutputBitrate;
/**

    Gets the minimum allowed output encoding.

*/
- (FMLiveSwitchEncodingInfo*) minOutputEncoding;
/**

    Gets whether output is muted.
    Alias for FMLiveSwitchMediaSource`8#outputMuted.

*/
- (bool) muted;
/**

    Gets the output.

*/
- (TIInput) output;
/**

    Called when an output is added.

    @param output The output.
*/
- (void) outputAddedWithOutput:(TIInput)output;
/**

    Determines whether an output can process a frame from this pipe.

    @param output The output.
*/
- (bool) outputCanProcessFrameWithOutput:(TIInput)output;
/**

    Gets whether output is deactivated.

*/
- (bool) outputDeactivated;
/**

    Gets the output format.

*/
- (TFormat) outputFormat;
/**

    Gets whether output is muted.

*/
- (bool) outputMuted;
/**

    Called when an output is removed.

    @param output The output.
*/
- (void) outputRemovedWithOutput:(TIInput)output;
/**

    Gets the output RTP stream identifier.

*/
- (NSString*) outputRtpStreamId;
/**

    Gets the outputs.

*/
- (NSMutableArray*) outputs;
/**

    Gets whether output is synchronizable.

*/
- (bool) outputSynchronizable;
/**

    Gets the output synchronization source.

*/
- (long long) outputSynchronizationSource;
/**

    Gets whether this source is over-constrained.
    A source is over-constrained if it's
    output is over-constrained.

*/
- (bool) overConstrained;
/**

    Gets whether the source bitrate is over-constrained.
    A source bitrate is over-constrained if the output
    bitrate is over-constrained.

*/
- (bool) overConstrainedBitrate;
/**

    Gets whether the output is over-constrained.
    An output is over-constrained if it's
    output bitrate is over-contrained.

*/
- (bool) overConstrainedOutput;
/**

    Gets whether the minimum allowed output bitrate exceeds the maximum allowed output bitrate.

*/
- (bool) overConstrainedOutputBitrate;
/**

    Gets a value indicating whether this source is paused.

*/
- (bool) paused;
/**

    Gets a value indicating whether this instance is persistent.
    If `true`, this instance will not be destroyed unless
    FMLiveSwitchMediaSource`8#destroy is called explicitly on this instance.
    It will survive destruction of any parent elements that are
    being destroyed.

*/
- (bool) persistent;
/**

    Gets the pipeline JSON with this as the central point.

*/
- (NSString*) pipelineJson;
/**

    Gets the pipeline JSON from an output.

*/
- (NSString*) pipelineJsonFromOutput;
/**

    Processes a control frame.

    @param controlFrame The control frame.
*/
- (void) processControlFrame:(FMLiveSwitchMediaControlFrame*)controlFrame;
/**

    Processes control frames.

    @param controlFrames The control frames.
*/
- (void) processControlFrames:(NSMutableArray*)controlFrames;
/**

    Processes a local SDP media description from an output.

    @param mediaDescription The media description.
    @param isOffer if set to `true` [is offer].
    @param isLocalDescription if set to `true` [is local description].
*/
- (FMLiveSwitchError*) processSdpMediaDescriptionFromOutputWithMediaDescription:(FMLiveSwitchSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription;
/**

    Processes source stats from an output.

    @param sourceStats The source stats.
*/
- (void) processSourceStatsFromOutputWithSourceStats:(FMLiveSwitchMediaSourceStats*)sourceStats;
/**

    Processes track stats from an output.

    @param trackStats The track stats.
*/
- (void) processTrackStatsFromOutputWithTrackStats:(FMLiveSwitchMediaTrackStats*)trackStats;
/**

    Raises a control frame response.

    @param controlFrameResponse The control frame response.
*/
- (void) raiseControlFrameResponse:(FMLiveSwitchMediaControlFrame*)controlFrameResponse;
/**

    Raises a control frame response.

    @param controlFrameResponse The control frame response.
    @param outputs The outputs.
*/
- (void) raiseControlFrameResponse:(FMLiveSwitchMediaControlFrame*)controlFrameResponse outputs:(NSMutableArray*)outputs;
/**

    Raises control frame responses.

    @param controlFrameResponses The control frame responses.
*/
- (void) raiseControlFrameResponses:(NSMutableArray*)controlFrameResponses;
/**

    Raises control frame responses.

    @param controlFrameResponses The control frame responses.
    @param outputs The outputs.
*/
- (void) raiseControlFrameResponses:(NSMutableArray*)controlFrameResponses outputs:(NSMutableArray*)outputs;
/**

    Raises the OnDisabledChange event.

*/
- (void) raiseDisabledChange;
/**

    Raises a frame.

    @param frame The frame.
*/
- (void) raiseFrame:(TFrame)frame;
/**

    Removes a handler that is raised when the Disabled property changes state.

*/
- (void) removeOnDisabledChange:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the Disabled property changes state.

*/
- (void) removeOnDisabledChangeWithCaller:(FMLiveSwitchAction1<id>*)value;
/**

    Removes a handler that is raised when the source is muted.

*/
- (void) removeOnMuted:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the Paused property changes state.

*/
- (void) removeOnPausedChange:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when control frames are processed.

*/
- (void) removeOnProcessControlFrames:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Removes a handler that is raised when control frames have been processed.

*/
- (void) removeOnProcessedControlFrames:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Removes a handler that is raised when control frame responses are raised.

*/
- (void) removeOnRaiseControlFrameResponses:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Removes a handler that is raised when control frame responses have been raised.

*/
- (void) removeOnRaisedControlFrameResponses:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Removes a handler that is raised when a frame has been raised.

*/
- (void) removeOnRaisedFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Removes a handler that is raised when a frame is being raised.

*/
- (void) removeOnRaiseFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Removes a handler that is raised when the state changes.

*/
- (void) removeOnStateChange:(FMLiveSwitchAction1<TSource>*)value;
/**

    Removes a handler that is raised when the source is unmuted.

*/
- (void) removeOnUnmuted:(FMLiveSwitchAction0*)value;
/**

    Removes an output.

    @param output The output.
*/
- (bool) removeOutput:(TIInput)output;
/**

    Removes all outputs.

*/
- (void) removeOutputs;
/**

    Removes some outputs.

    @param outputs The outputs.
*/
- (void) removeOutputs:(NSMutableArray*)outputs;
/**

    Sets a value indicating whether this source is deactivated.
    Deactivating a source disables it until it is activated again.
    Upon reactivation, a pipe may remain disabled if its outputs are disabled.
    A deactivated source will not raise any frames.
    Alias for FMLiveSwitchMediaSource`8#outputDeactivated.

*/
- (void) setDeactivated:(bool)value;
/**

    Sets the current input.

*/
- (void) setInput:(FMLiveSwitchSourceInput*)value;
/**

    Sets the maximum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

*/
- (void) setMaxOutputBitrate:(int)value;
/**

    Sets the maximum allowed output encoding.

*/
- (void) setMaxOutputEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Sets the minimum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

*/
- (void) setMinOutputBitrate:(int)value;
/**

    Sets the minimum allowed output encoding.

*/
- (void) setMinOutputEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Sets whether output is muted.
    Alias for FMLiveSwitchMediaSource`8#outputMuted.

*/
- (void) setMuted:(bool)value;
/**

    Sets the output.

*/
- (void) setOutput:(TIInput)value;
/**

    Sets whether output is deactivated.

*/
- (void) setOutputDeactivated:(bool)value;
/**

    Sets whether output is muted.

*/
- (void) setOutputMuted:(bool)value;
/**

    Sets the output RTP stream identifier.

*/
- (void) setOutputRtpStreamId:(NSString*)value;
/**

    Sets the outputs.

*/
- (void) setOutputs:(NSMutableArray*)value;
/**

    Sets whether output is synchronizable.

*/
- (void) setOutputSynchronizable:(bool)value;
/**

    Sets the output synchronization source.

*/
- (void) setOutputSynchronizationSource:(long long)value;
/**

    Sets a value indicating whether this instance is persistent.
    If `true`, this instance will not be destroyed unless
    FMLiveSwitchMediaSource`8#destroy is called explicitly on this instance.
    It will survive destruction of any parent elements that are
    being destroyed.

*/
- (void) setPersistent:(bool)value;
/**

    Sets the output synchronization source.
    Alias for FMLiveSwitchMediaSource`8#outputSynchronizationSource.

*/
- (void) setSynchronizationSource:(long long)value;
/**

    Sets the system delay in ticks.

*/
- (void) setSystemDelay:(long long)value;
/**

    Sets the target output bitrate, in kbps.
    A value of -1 indicates unset (no target).

*/
- (void) setTargetOutputBitrate:(int)value;
/**

    Sets the target output encoding.

*/
- (void) setTargetOutputEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Starts this instance.

*/
- (FMLiveSwitchFuture<id>*) start;
/**

    Gets the state.

*/
- (FMLiveSwitchMediaSourceState) state;
/**

    Stops this instance.

*/
- (FMLiveSwitchFuture<id>*) stop;
/**

    Gets the output synchronization source.
    Alias for FMLiveSwitchMediaSource`8#outputSynchronizationSource.

*/
- (long long) synchronizationSource;
/**

    Gets the system delay in ticks.

*/
- (long long) systemDelay;
/**

    Gets the target output bitrate, in kbps.
    A value of -1 indicates unset (no target).

*/
- (int) targetOutputBitrate;
/**

    Gets the target output encoding.

*/
- (FMLiveSwitchEncodingInfo*) targetOutputEncoding;
/**

    Updates the disabled property.

*/
- (bool) updateDisabled;

@end

/**

    An audio source.

*/
@interface FMLiveSwitchAudioSource : FMLiveSwitchMediaSource<NSObject<FMLiveSwitchIAudioOutput>*,NSObject<FMLiveSwitchIAudioInput>*,FMLiveSwitchIAudioInputCollection*,FMLiveSwitchAudioSource*,FMLiveSwitchAudioFrame*,FMLiveSwitchAudioBuffer*,FMLiveSwitchAudioBufferCollection*,FMLiveSwitchAudioFormat*><FMLiveSwitchIAudioOutput, FMLiveSwitchIMediaOutput, FMLiveSwitchIOutput, FMLiveSwitchIAudioElement, FMLiveSwitchIMediaElement, FMLiveSwitchIElement>

/**

    Initializes a new instance of the FMLiveSwitchAudioSource class.

    @param outputFormat The output format.
*/
+ (FMLiveSwitchAudioSource*) audioSourceWithOutputFormat:(FMLiveSwitchAudioFormat*)outputFormat;
/**

    Initializes a new instance of the FMLiveSwitchAudioSource class.

    @param outputFormat The output format.
    @param frameDuration The frame duration in milliseconds.
*/
+ (FMLiveSwitchAudioSource*) audioSourceWithOutputFormat:(FMLiveSwitchAudioFormat*)outputFormat frameDuration:(int)frameDuration;
/**

    Calculates the duration of an audio chunk given its data
    length (the number of bytes) and assuming that the clock
    rate and channel count match the output format.

    @param dataLength The length of the audio chunk.
*/
- (int) calculateDurationFloatWithDataLength:(int)dataLength;
/**

    Calculates the duration of an audio chunk given its data
    length (the number of bytes), clock rate, and channel count.

    @param dataLength The length of the audio chunk.
    @param clockRate The clock rate.
    @param channelCount The channel count.
    @deprecated Use SoundUtility.CalculateDurationFloat instead.
*/
+ (int) calculateDurationFloatWithDataLength:(int)dataLength clockRate:(int)clockRate channelCount:(int)channelCount __deprecated_msg("Use SoundUtility.CalculateDurationFloat instead.");
/**

    Calculates the duration of an audio chunk given its data
    length (the number of bytes) and assuming that the clock
    rate and channel count match the output format.

    @param dataLength The length of the audio chunk.
*/
- (int) calculateDurationWithDataLength:(int)dataLength;
/**

    Calculates the duration of an audio chunk given its data
    length (the number of bytes), clock rate, and channel count.

    @param dataLength The length of the audio chunk.
    @param clockRate The clock rate.
    @param channelCount The channel count.
    @deprecated Use SoundUtility.CalculateDuration instead.
*/
+ (int) calculateDurationWithDataLength:(int)dataLength clockRate:(int)clockRate channelCount:(int)channelCount __deprecated_msg("Use SoundUtility.CalculateDuration instead.");
/**

    Calculates the duration of an audio chunk given its data
    length (the number of bytes), clock rate, and channel count.

    @param dataLength The length of the audio chunk.
    @param config The configuration.
    @deprecated Use SoundUtility.CalculateDuration instead.
*/
+ (int) calculateDurationWithDataLength:(int)dataLength config:(FMLiveSwitchAudioConfig*)config __deprecated_msg("Use SoundUtility.CalculateDuration instead.");
/**

    Gets the output configuration.

*/
- (FMLiveSwitchAudioConfig*) config;
/**

    Creates an input collection.

    @param output The output.
*/
- (FMLiveSwitchIAudioInputCollection*) createInputCollectionWithOutput:(NSObject<FMLiveSwitchIAudioOutput>*)output;
/**

    Gets whether the timestamp should be reset
    using the wall clock after FMLiveSwitchAudioSource#timestampResetInterval
    milliseconds elapse between frames.

*/
- (bool) disableTimestampReset;
/**


*/
- (void) doDestroy;
/**

    Gets whether the timestamp should be reset
    before the next frame is processed.

*/
- (bool) forceTimestampReset;
/**

    Gets the frame duration in milliseconds.
    Defaults to 20.

*/
- (int) frameDuration;
/**

    Initializes a new instance of the FMLiveSwitchAudioSource class.

    @param outputFormat The output format.
*/
- (instancetype) initWithOutputFormat:(FMLiveSwitchAudioFormat*)outputFormat;
/**

    Initializes a new instance of the FMLiveSwitchAudioSource class.

    @param outputFormat The output format.
    @param frameDuration The frame duration in milliseconds.
*/
- (instancetype) initWithOutputFormat:(FMLiveSwitchAudioFormat*)outputFormat frameDuration:(int)frameDuration;
/**

    Raises a frame.

    @param frame The frame.
*/
- (void) raiseFrame:(FMLiveSwitchAudioFrame*)frame;
/**

    Sets whether the timestamp should be reset
    using the wall clock after FMLiveSwitchAudioSource#timestampResetInterval
    milliseconds elapse between frames.

*/
- (void) setDisableTimestampReset:(bool)value;
/**

    Sets whether the timestamp should be reset
    before the next frame is processed.

*/
- (void) setForceTimestampReset:(bool)value;
/**

    Sets the amount of time in milliseconds
    between audio frames that will trigger a reset of
    the timestamp to the wall clock.

*/
- (void) setTimestampResetInterval:(int)value;
/**

    Sets a value indicating the volume
    (output resistance) of this source.
    Valid value range is 0.0 to 1.0, inclusive.

*/
- (void) setVolume:(double)value;
/**

    Gets the amount of time in milliseconds
    between audio frames that will trigger a reset of
    the timestamp to the wall clock.

*/
- (int) timestampResetInterval;
/**

    Tries to set the system timestamp on an audio frame.
    This will succeed if the system timestamp is already
    set or if the system timestamp can be calculated off
    the timestamp.

    @param frame The frame.
*/
- (bool) trySetSystemTimestampWithFrame:(FMLiveSwitchAudioFrame*)frame;
/**

    Tries to set the timestamp on an audio frame.
    This will succeed if the timestamp is already
    set or if the timestamp can be calculated off
    the system timestamp.

    @param frame The frame.
*/
- (bool) trySetTimestampWithFrame:(FMLiveSwitchAudioFrame*)frame;
/**

    Gets a value indicating the volume
    (output resistance) of this source.
    Valid value range is 0.0 to 1.0, inclusive.

*/
- (double) volume;

@end

/**

    Stream base properties/methods.

*/
@interface FMLiveSwitchStreamBase : FMLiveSwitchDynamic<FMLiveSwitchIStream>

/**

    Adds a handler that is raised when the stream direction changes.<br />
    Stream direction indicates the direction of media flow. For example:<br /><ul><li>A stream in an SFU upstream connection has a direction of <b>SendOnly</b>.</li><li>A stream in an SFU downstream connection has a direction of <b>ReceiveOnly</b>.</li><li>A stream in an MCU connection has a direction of <b>SendReceive</b> if it is attached to both local and remote media. If it is only attached to local media, it has a direction of <b>SendOnly</b>. If it is only attached to remote media, it has a direction of <b>ReceiveOnly</b>.</li></ul>
    The direction of a stream can change over its lifecycle. For example:<br /><ul><li>An update to an SFU upstream connection might instruct the stream to stop sending audio or video frames. In this case, the direction of the stream changes to <b>Inactive</b>.</li><li>An update to an SFU downstream connection might cause it to stop receiving audio or video frames. In this case, the direction of the stream changes to <b>Inactive</b>.</li><li>An update to an MCU upstream connection might instruct the stream to stop sending audio or video frames. In this case, the following occurs:
    <ul><li>If the direction of the stream was <b>SendOnly</b>, then the direction changes to <b>Inactive</b>.</li><li>If the direction of the stream was <b>ReceiveOnly</b>, then the direction changes to <b>SendReceive</b>.</li></ul></li><li>An update to an MCU upstream connection might instruct it to stop receiving audio or video frames. In this case, the following occurs:
    <ul><li>If the direction of the stream was <b>ReceiveOnly</b>, then the direction changes to <b>Inactive</b>.</li><li>If the direction of the stream was <b>SendReceive</b>, then the direction changes to <b>SendOnly</b>.</li></ul></li></ul>
    An event handler bound to the change in direction can be used to update the UI accordingly so the user is aware of the change in the state of the application.

*/
- (void) addOnDirectionChange:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the connection state changes.<br />
    This method can track the state of the connection and can be used to display the current status of the connection to the user, add or remove media views in the UI, and handle retry logic if the connection fails.<br />

*/
- (void) addOnStateChange:(FMLiveSwitchAction0*)value;
/**

    Changes this stream's direction.

*/
- (FMLiveSwitchError*) changeDirectionWithNewDirection:(FMLiveSwitchStreamDirection)newDirection;
/**

    Gets the ManagedStopwatch.GetTimestamp() value representing the ticks that
    passed when this stream's connection state changed to connected.

*/
- (long long) connectedTimestamp;
/**

    Gets the connection identifier.

*/
- (NSString*) connectionId;
/**

    Returns a string that represents this instance.

*/
- (NSString*) description;
/**

    Gets the current direction.

*/
- (FMLiveSwitchStreamDirection) direction;
/**

    Gets the external identifier.

*/
- (NSString*) externalId;
/**

    Gets the identifier.

*/
- (NSString*) id;
/**

    Initializes a new instance of the FMLiveSwitchStreamBase class.

    @param type The type.
*/
- (instancetype) initWithType:(FMLiveSwitchStreamType)type;
/**

    Gets a value indicating whether the stream is currently closed or failed.

*/
- (bool) isTerminated;
/**

    Gets a value indicating whether the stream is currently closing or failing.

*/
- (bool) isTerminating;
/**

    Gets a value indicating whether the stream is currently closing, failing, closed, or failed.

*/
- (bool) isTerminatingOrTerminated;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets current direction indicated by the local description.

*/
- (FMLiveSwitchStreamDirection) localDirection;
/**

    Gets a value indicating whether the local peer supports receiving media on this stream.<br />
    Use this method to determine if a stream is used for sending media or only receiving media.

*/
- (bool) localReceive;
/**

    Gets a value indicating whether the local peer on this stream supports sending media on this stream.<br />
    Use this property to determine if a stream is used for sending media or only receiving media.

*/
- (bool) localSend;
/**

    Gets the media description ID of this stream.<br />
    The media description ID is only available once a connection is opened with this stream, because it is obtained from the local SDP description of this stream.

*/
- (NSString*) mediaDescriptionId;
/**

    Processes a state change.

*/
- (void) processStateChange;
/**

    Processes a state lock change.

*/
- (void) processStateLockChange;
/**

    Gets current direction indicated by the remote description.

*/
- (FMLiveSwitchStreamDirection) remoteDirection;
/**

    Gets a value indicating whether receiving media is supported by the remote peer on this stream. Returns false if the remote stream direction has not been received.

*/
- (bool) remoteReceive;
/**

    Gets a value indicating whether sending media is supported by the remote peer on this stream. Returns false if the remote stream direction has not been received.

*/
- (bool) remoteSend;
/**

    Removes a handler that is raised when the stream direction changes.<br />
    Stream direction indicates the direction of media flow. For example:<br /><ul><li>A stream in an SFU upstream connection has a direction of <b>SendOnly</b>.</li><li>A stream in an SFU downstream connection has a direction of <b>ReceiveOnly</b>.</li><li>A stream in an MCU connection has a direction of <b>SendReceive</b> if it is attached to both local and remote media. If it is only attached to local media, it has a direction of <b>SendOnly</b>. If it is only attached to remote media, it has a direction of <b>ReceiveOnly</b>.</li></ul>
    The direction of a stream can change over its lifecycle. For example:<br /><ul><li>An update to an SFU upstream connection might instruct the stream to stop sending audio or video frames. In this case, the direction of the stream changes to <b>Inactive</b>.</li><li>An update to an SFU downstream connection might cause it to stop receiving audio or video frames. In this case, the direction of the stream changes to <b>Inactive</b>.</li><li>An update to an MCU upstream connection might instruct the stream to stop sending audio or video frames. In this case, the following occurs:
    <ul><li>If the direction of the stream was <b>SendOnly</b>, then the direction changes to <b>Inactive</b>.</li><li>If the direction of the stream was <b>ReceiveOnly</b>, then the direction changes to <b>SendReceive</b>.</li></ul></li><li>An update to an MCU upstream connection might instruct it to stop receiving audio or video frames. In this case, the following occurs:
    <ul><li>If the direction of the stream was <b>ReceiveOnly</b>, then the direction changes to <b>Inactive</b>.</li><li>If the direction of the stream was <b>SendReceive</b>, then the direction changes to <b>SendOnly</b>.</li></ul></li></ul>
    An event handler bound to the change in direction can be used to update the UI accordingly so the user is aware of the change in the state of the application.

*/
- (void) removeOnDirectionChange:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the connection state changes.<br />
    This method can track the state of the connection and can be used to display the current status of the connection to the user, add or remove media views in the UI, and handle retry logic if the connection fails.<br />

*/
- (void) removeOnStateChange:(FMLiveSwitchAction0*)value;
/**

    Sets the external identifier.

*/
- (void) setExternalId:(NSString*)value;
/**

    Sets current direction indicated by the local description.

*/
- (void) setLocalDirection:(FMLiveSwitchStreamDirection)value;
/**

    Sets a value indicating whether the local peer supports receiving media on this stream.<br />
    Use this method to determine if a stream is used for sending media or only receiving media.

*/
- (void) setLocalReceive:(bool)value;
/**

    Sets a value indicating whether the local peer on this stream supports sending media on this stream.<br />
    Use this property to determine if a stream is used for sending media or only receiving media.

*/
- (void) setLocalSend:(bool)value;
/**

    Sets optional data to associate with this instance.

*/
- (void) setTag:(NSString*)value;
/**

    Sets a value indicating whether W

*/
- (void) setUseWssForMedia:(bool)value;
/**

    Gets the state of the stream.

*/
- (FMLiveSwitchStreamState) state;
/**

    Initializes a new instance of the FMLiveSwitchStreamBase class.

    @param type The type.
*/
+ (FMLiveSwitchStreamBase*) streamBaseWithType:(FMLiveSwitchStreamType)type;
/**

    Gets optional data to associate with this instance.

*/
- (NSString*) tag;
/**

    Gets the stream transport info.

*/
- (FMLiveSwitchTransportInfo*) transportInfo;
/**

    Gets the type.

*/
- (FMLiveSwitchStreamType) type;
/**

    Gets a value indicating whether W

*/
- (bool) useWssForMedia;

@end

/**

    A peer-to-peer stream.

*/
@interface FMLiveSwitchStream : FMLiveSwitchStreamBase

/**

    Adds a handler that is raised when the Disabled property changes state.

*/
- (void) addOnDisabledChange:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the Disabled property changes state.

*/
- (void) addOnDisabledChangeWithCaller:(FMLiveSwitchAction1<id>*)value;
/**

    Adds a handler that is raised when the Disabled property changes state.

*/
- (void (^)(void(^)(id))) addOnDisabledChangeWithCallerWithBlock;
/**

    Adds a handler that is raised when the Disabled property changes state.

*/
- (void) addOnDisabledChangeWithCallerWithBlock:(void(^)(id))valueBlock;
/**

    Gets a value indicating whether this stream is deactivated.
    A stream is deactivated if its direction is unset or inactive.

*/
- (bool) deactivated;
/**

    Gets a value indicating whether this stream is disabled.
    A stream is disabled if session negotiation failed or if the
    underlying transport could not be started.

*/
- (bool) disabled;
/**

    Gets the encryption mode.

*/
- (FMLiveSwitchEncryptionMode) encryptionMode;
/**

    Gets the encryption modes.

*/
- (NSMutableArray*) encryptionModes;
/**

    Gets a value indicating Encryption Policy

*/
- (FMLiveSwitchEncryptionPolicy) encryptionPolicy;
/**

    Gets the index.

*/
- (int) index;
/**

    Initializes a new instance of the FMLiveSwitchStream class.

    @param type The type.
*/
- (instancetype) initWithType:(FMLiveSwitchStreamType)type;
/**

    Gets the local ICE parameters.

*/
- (FMLiveSwitchIceParameters*) localIceParameters;
/**

    Raises the OnDisabledChange event.

*/
- (void) raiseDisabledChange;
/**

    Gets the remote ICE parameters.

*/
- (FMLiveSwitchIceParameters*) remoteIceParameters;
/**

    Removes a handler that is raised when the Disabled property changes state.

*/
- (void) removeOnDisabledChange:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the Disabled property changes state.

*/
- (void) removeOnDisabledChangeWithCaller:(FMLiveSwitchAction1<id>*)value;
/**

    Gets Sdes policy for stream.

*/
- (FMLiveSwitchSdesPolicy) sdesPolicy;
/**

    Sets a value indicating whether this stream is deactivated.
    A stream is deactivated if its direction is unset or inactive.

*/
- (void) setDeactivated:(bool)value;
/**

    Sets a value indicating whether this stream is disabled.
    A stream is disabled if session negotiation failed or if the
    underlying transport could not be started.

*/
- (void) setDisabled:(bool)value;
/**

    Sets the encryption mode.

*/
- (void) setEncryptionMode:(FMLiveSwitchEncryptionMode)value;
/**

    Sets the encryption modes.

*/
- (void) setEncryptionModes:(NSMutableArray*)value;
/**

    Sets a value indicating Encryption Policy

*/
- (void) setEncryptionPolicy:(FMLiveSwitchEncryptionPolicy)value;
/**

    Sets Sdes policy for stream.

*/
- (void) setSdesPolicy:(FMLiveSwitchSdesPolicy)value;
/**

    Sets a value indicating whether DTLS encryption is in use for this stream.

*/
- (void) setUseDtls:(bool)value;
/**

    Sets a value indicating whether SDES encryption is in use for this stream.

*/
- (void) setUseSdes:(bool)value;
/**

    Initializes a new instance of the FMLiveSwitchStream class.

    @param type The type.
*/
+ (FMLiveSwitchStream*) streamWithType:(FMLiveSwitchStreamType)type;
/**

    Gets a value indicating whether DTLS encryption is in use for this stream.

*/
- (bool) useDtls;
/**

    Gets a value indicating whether SDES encryption is in use for this stream.

*/
- (bool) useSdes;

@end

/**

    Media stream base properties/methods.

*/
@interface FMLiveSwitchMediaStreamBase : FMLiveSwitchStream

/**

    Adds a handler that is raised when a local encoding is disabled.

*/
- (void) addOnLocalEncodingDisabled:(FMLiveSwitchAction1<FMLiveSwitchEncodingInfo*>*)value;
/**

    Adds a handler that is raised when a local encoding is disabled.

*/
- (void (^)(void(^)(FMLiveSwitchEncodingInfo*))) addOnLocalEncodingDisabledWithBlock;
/**

    Adds a handler that is raised when a local encoding is disabled.

*/
- (void) addOnLocalEncodingDisabledWithBlock:(void(^)(FMLiveSwitchEncodingInfo*))valueBlock;
/**

    Adds a handler that is raised when a local encoding is enabled.

*/
- (void) addOnLocalEncodingEnabled:(FMLiveSwitchAction1<FMLiveSwitchEncodingInfo*>*)value;
/**

    Adds a handler that is raised when a local encoding is enabled.

*/
- (void (^)(void(^)(FMLiveSwitchEncodingInfo*))) addOnLocalEncodingEnabledWithBlock;
/**

    Adds a handler that is raised when a local encoding is enabled.

*/
- (void) addOnLocalEncodingEnabledWithBlock:(void(^)(FMLiveSwitchEncodingInfo*))valueBlock;
/**


*/
- (void) addOnMaxSendBitrateChange:(FMLiveSwitchAction1<id>*)value;
/**


*/
- (void (^)(void(^)(int))) addOnMaxSendBitrateChangeWithBlock;
/**


*/
- (void) addOnMaxSendBitrateChangeWithBlock:(void(^)(int))valueBlock;
/**

    Gets Cached Local Direction for this Media Stream. Internal use.

*/
- (FMLiveSwitchStreamDirection) cachedLocalDirection;
/**

    Gets the canonical name.

    @deprecated Use LocalCanonicalName instead.
*/
- (NSString*) canonicalName __deprecated_msg("Use LocalCanonicalName instead.");
/**

    Records the pending direction of this stream. The LocalDirection of this stream will be updated when the connection renegotiation commences.

*/
- (FMLiveSwitchError*) changeDirectionWithNewDirection:(FMLiveSwitchStreamDirection)newDirection;
/**

    Gets control transport info.

*/
- (FMLiveSwitchTransportInfo*) controlTransportInfo;
/**


    @return 
            The Media Direction as a StreamDirection enumerator.
            
*/
- (FMLiveSwitchStreamDirection) direction;
/**

    Gets whether a codec is disabled.

    @param name The codec name.
    @return Whether the codec is disabled.
*/
- (bool) getCodecDisabledWithName:(NSString*)name;
/**

    Gets the media stream info.

*/
- (FMLiveSwitchMediaStreamInfo*) info;
/**

    Initializes a new instance of the FMLiveSwitchMediaStreamBase class.

    @param type The type.
*/
- (instancetype) initWithType:(FMLiveSwitchStreamType)type;
/**

    Gets the input content descriptor.

*/
- (NSString*) inputContent;
/**

    Gets whether the input track is muted.

*/
- (bool) inputMuted;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets the local bandwidth, in kbps.
    This value is signalled in the local session description sent
    to the remote endpoint so it can limit its outbound media bitrate.
    Use FMLiveSwitchMediaStreamBase#maxReceiveBitrate to control inbound media
    bitrate once the session has been negotiated.

*/
- (int) localBandwidth;
/**

    Gets the local canonical end-point identifier (CNAME) used by RTCP.<br />
    The CNAME is a unique identifier for endpoints across an application instance and can be used for third-party monitoring.

*/
- (NSString*) localCanonicalName;
/**

    Gets current direction indicated by the local description.

*/
- (FMLiveSwitchStreamDirection) localDirection;
/**

    Gets a value indicating whether the local stream is muted.<br />
    A muted stream does not show or play media, but the stream is not disabled and its data continues to flow through the processing pipeline.
    Alias for FMLiveSwitchMediaStreamBase#muted.

*/
- (bool) localMuted;
/**

    Gets the maximum bitrate that the connection receives in Kbps.<br />
    This value must be less than or equal to FMLiveSwitchMediaStreamBase#localBandwidth.

*/
- (int) maxReceiveBitrate;
/**

    Gets the maximum bitrate that the upstream connection sends in Kbps.
    This value must be less than or equal to FMLiveSwitchMediaStreamBase#remoteBandwidth.

*/
- (int) maxSendBitrate;
/**

    Initializes a new instance of the FMLiveSwitchMediaStreamBase class.

    @param type The type.
*/
+ (FMLiveSwitchMediaStreamBase*) mediaStreamBaseWithType:(FMLiveSwitchStreamType)type;
/**

    Gets whether the stream is muted.<br />
    A muted stream does not show or play media, but the stream is not disabled and its data continues to flow through the processing pipeline.<br />
    Alias for FMLiveSwitchMediaStreamBase#inputMuted.

*/
- (bool) muted;
/**

    Gets the output content descriptor.

*/
- (NSString*) outputContent;
/**

    Gets whether the output track is muted.<br />
    A muted stream does not show or play media, but the source is not disabled and its data continues to flow through the processing pipeline.

*/
- (bool) outputMuted;
/**

    Populates the media stream info.

    @param info 
*/
- (void) populateInfo:(FMLiveSwitchMediaStreamInfo*)info;
/**

    Gets any preferred codecs, in order of preference.

*/
- (NSMutableArray*) preferredCodecs;
/**

    Raises a bitrate request to the local track.

    @param bitrateRequest The bitrate request.
*/
- (bool) raiseBitrateRequest:(FMLiveSwitchBitrateRequest*)bitrateRequest;
/**

    Raises the OnLocalEncodingDisabled event.

    @param encoding The encoding.
*/
- (void) raiseLocalEncodingDisabledWithEncoding:(FMLiveSwitchEncodingInfo*)encoding;
/**

    Raises the OnLocalEncodingEnabled event.

    @param encoding The encoding.
*/
- (void) raiseLocalEncodingEnabledWithEncoding:(FMLiveSwitchEncodingInfo*)encoding;
/**

    Gets related SDP Media Description

*/
- (FMLiveSwitchSdpMediaDescription*) relatedMediaDescription;
/**

    Gets the remote bandwidth in Kbps.<br />
    This value is signalled in the remote session description received from the remote endpoint.<br />
    Use FMLiveSwitchMediaStreamBase#maxSendBitrate to control outbound media bitrate once the session has been negotiated.

*/
- (int) remoteBandwidth;
/**

    Gets the remote canonical name.

*/
- (NSString*) remoteCanonicalName;
/**

    Gets current direction indicated by the remote description.

*/
- (FMLiveSwitchStreamDirection) remoteDirection;
/**

    Gets the remote encoding.

*/
- (FMLiveSwitchEncodingInfo*) remoteEncoding;
/**

    Gets a value indicating if remote is muted.

*/
- (bool) remoteMuted;
/**

    Gets Boolean value set when the server is currently requesting a 0 bitrate. This is to highlight the difference between when a stream is deactivated locally or by a control mechanism on the server. Internal Use

*/
- (bool) remoteRequestedDeactivation;
/**

    Removes a handler that is raised when a local encoding is disabled.

*/
- (void) removeOnLocalEncodingDisabled:(FMLiveSwitchAction1<FMLiveSwitchEncodingInfo*>*)value;
/**

    Removes a handler that is raised when a local encoding is enabled.

*/
- (void) removeOnLocalEncodingEnabled:(FMLiveSwitchAction1<FMLiveSwitchEncodingInfo*>*)value;
/**


*/
- (void) removeOnMaxSendBitrateChange:(FMLiveSwitchAction1<id>*)value;
/**

    Gets whether there exist changes that are pending SDP renegotiation.

*/
- (bool) renegotiationPending;
/**

    Sets whether a codec is disabled.

    @param name The codec name.
    @param disabled Whether to disable the codec.
*/
- (void) setCodecDisabledWithName:(NSString*)name disabled:(bool)disabled;
/**

    Sets the input content descriptor.

*/
- (void) setInputContent:(NSString*)value;
/**

    Sets whether the input track is muted.

*/
- (void) setInputMuted:(bool)value;
/**

    Sets the local bandwidth, in kbps.
    This value is signalled in the local session description sent
    to the remote endpoint so it can limit its outbound media bitrate.
    Use FMLiveSwitchMediaStreamBase#maxReceiveBitrate to control inbound media
    bitrate once the session has been negotiated.

*/
- (void) setLocalBandwidth:(int)value;
/**

    Sets current direction indicated by the local description.

*/
- (void) setLocalDirection:(FMLiveSwitchStreamDirection)value;
/**

    Sets a value indicating whether the local stream is muted.<br />
    A muted stream does not show or play media, but the stream is not disabled and its data continues to flow through the processing pipeline.
    Alias for FMLiveSwitchMediaStreamBase#muted.

*/
- (void) setLocalMuted:(bool)value;
/**

    Sets the maximum bitrate that the connection receives in Kbps.<br />
    This value must be less than or equal to FMLiveSwitchMediaStreamBase#localBandwidth.

*/
- (void) setMaxReceiveBitrate:(int)value;
/**

    Sets the maximum bitrate that the upstream connection sends in Kbps.
    This value must be less than or equal to FMLiveSwitchMediaStreamBase#remoteBandwidth.

*/
- (void) setMaxSendBitrate:(int)value;
/**

    Sets whether the stream is muted.<br />
    A muted stream does not show or play media, but the stream is not disabled and its data continues to flow through the processing pipeline.<br />
    Alias for FMLiveSwitchMediaStreamBase#inputMuted.

*/
- (void) setMuted:(bool)value;
/**

    Sets the output content descriptor.

*/
- (void) setOutputContent:(NSString*)value;
/**

    Sets whether the output track is muted.<br />
    A muted stream does not show or play media, but the source is not disabled and its data continues to flow through the processing pipeline.

*/
- (void) setOutputMuted:(bool)value;
/**

    Sets any preferred codecs, in order of preference.

*/
- (void) setPreferredCodecs:(NSMutableArray*)value;
/**

    Sets related SDP Media Description

*/
- (void) setRelatedMediaDescription:(FMLiveSwitchSdpMediaDescription*)value;
/**

    Sets the remote bandwidth in Kbps.<br />
    This value is signalled in the remote session description received from the remote endpoint.<br />
    Use FMLiveSwitchMediaStreamBase#maxSendBitrate to control outbound media bitrate once the session has been negotiated.

*/
- (void) setRemoteBandwidth:(int)value;
/**

    Sets the remote encoding.

*/
- (void) setRemoteEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Sets a value indicating if remote is muted.

*/
- (void) setRemoteMuted:(bool)value;
/**

    Sets whether there exist changes that are pending SDP renegotiation.

*/
- (void) setRenegotiationPending:(bool)value;
/**

    Sets the simulcast mode.

*/
- (void) setSimulcastMode:(FMLiveSwitchSimulcastMode)value;
/**

    Gets the simulcast mode.

*/
- (FMLiveSwitchSimulcastMode) simulcastMode;

@end

/**

    A media stream.

*/
@interface FMLiveSwitchMediaStream<__covariant TIOutput, __covariant TIOutputCollection, __covariant TIInput, __covariant TIInputCollection, __covariant TIElement, __covariant TSource, __covariant TSink, __covariant TPipe, __covariant TTrack, __covariant TBranch, __covariant TFrame, __covariant TBuffer, __covariant TBufferCollection, __covariant TFormat, __covariant TFormatCollection> : FMLiveSwitchMediaStreamBase<FMLiveSwitchIMediaOutput, FMLiveSwitchIOutput, FMLiveSwitchIMediaInput, FMLiveSwitchIInput, FMLiveSwitchIMediaElement, FMLiveSwitchIElement, FMLiveSwitchIMediaStream, FMLiveSwitchIStream, FMLiveSwitchISynchronizableStream>

/**

    Gets the current direction for the RTP Header Extension for Absolute Sender Time. See https://webrtc.org/experiments/rtp-hdrext/abs-send-time/ .
    If the remote capability has not yet been receieved, only local requirements are taken into consideration.

*/
- (FMLiveSwitchStreamDirection) absoluteSenderTimeDirection;
/**

    Gets the current local direction for the RTP Header Extension for Absolute Sender Time. See https://webrtc.org/experiments/rtp-hdrext/abs-send-time/ .
    If the remote capability has not yet been received, only local requirements are taken into consideration.

*/
- (FMLiveSwitchStreamDirection) absoluteSenderTimeLocalDirection;
/**

    Gets the current remote direction for the RTP Header Extension for Absolute Sender Time. See https://webrtc.org/experiments/rtp-hdrext/abs-send-time/ .
    If the remote capability has not yet been receieved, only local requirements are taken into consideration.

*/
- (FMLiveSwitchStreamDirection) absoluteSenderTimeRemoteDirection;
/**

    Adds an input.

    @param input The input.
*/
- (void) addInput:(TIOutput)input;
/**

    Adds some inputs.

    @param inputs The inputs.
*/
- (void) addInputs:(NSMutableArray*)inputs;
/**

    Adds a handler that is raised when a bitrate notification is discarded due to policy
    restrictions or lack of support by the remote endpoint.

*/
- (void) addOnDiscardBitrateNotification:(FMLiveSwitchAction1<FMLiveSwitchBitrateNotification*>*)value;
/**

    Adds a handler that is raised when a bitrate notification is discarded due to policy
    restrictions or lack of support by the remote endpoint.

*/
- (void (^)(void(^)(FMLiveSwitchBitrateNotification*))) addOnDiscardBitrateNotificationWithBlock;
/**

    Adds a handler that is raised when a bitrate notification is discarded due to policy
    restrictions or lack of support by the remote endpoint.

*/
- (void) addOnDiscardBitrateNotificationWithBlock:(void(^)(FMLiveSwitchBitrateNotification*))valueBlock;
/**

    Adds a handler that is raised when a bitrate notification message is discarded by the internal in-band messaging mechanism because the peer does not support bitrate notifications.<br />
    In this case, the bitrate notification needs to be transported out of band. LiveSwitch handles this internally by sending the message over Data Streams. No further action is required by application developers.<br />
    Use this event for for diagnostics and debugging.

*/
- (void) addOnDiscardBitrateRequest:(FMLiveSwitchAction1<FMLiveSwitchBitrateRequest*>*)value;
/**

    Adds a handler that is raised when a bitrate notification message is discarded by the internal in-band messaging mechanism because the peer does not support bitrate notifications.<br />
    In this case, the bitrate notification needs to be transported out of band. LiveSwitch handles this internally by sending the message over Data Streams. No further action is required by application developers.<br />
    Use this event for for diagnostics and debugging.

*/
- (void (^)(void(^)(FMLiveSwitchBitrateRequest*))) addOnDiscardBitrateRequestWithBlock;
/**

    Adds a handler that is raised when a bitrate notification message is discarded by the internal in-band messaging mechanism because the peer does not support bitrate notifications.<br />
    In this case, the bitrate notification needs to be transported out of band. LiveSwitch handles this internally by sending the message over Data Streams. No further action is required by application developers.<br />
    Use this event for for diagnostics and debugging.

*/
- (void) addOnDiscardBitrateRequestWithBlock:(void(^)(FMLiveSwitchBitrateRequest*))valueBlock;
/**

    Adds a handler that is raised when an outbound control frame is discarded due to policy
    restrictions or lack of support by the remote endpoint.

*/
- (void) addOnDiscardOutboundControlFrame:(FMLiveSwitchAction1<FMLiveSwitchMediaControlFrame*>*)value;
/**

    Adds a handler that is raised when an outbound control frame is discarded due to policy
    restrictions or lack of support by the remote endpoint.

*/
- (void (^)(void(^)(FMLiveSwitchMediaControlFrame*))) addOnDiscardOutboundControlFrameWithBlock;
/**

    Adds a handler that is raised when an outbound control frame is discarded due to policy
    restrictions or lack of support by the remote endpoint.

*/
- (void) addOnDiscardOutboundControlFrameWithBlock:(void(^)(FMLiveSwitchMediaControlFrame*))valueBlock;
/**

    Adds a handler that is raised by master streams when the synchronize context is ready.

*/
- (void) addOnMasterSynchronizeContextReady:(FMLiveSwitchAction1<FMLiveSwitchSynchronizeContext*>*)value;
/**

    Adds a handler that is raised by master streams when the synchronize context is ready.

*/
- (void (^)(void(^)(FMLiveSwitchSynchronizeContext*))) addOnMasterSynchronizeContextReadyWithBlock;
/**

    Adds a handler that is raised by master streams when the synchronize context is ready.

*/
- (void) addOnMasterSynchronizeContextReadyWithBlock:(void(^)(FMLiveSwitchSynchronizeContext*))valueBlock;
/**

    Adds a handler that is raised when the Paused property changes state.

*/
- (void) addOnPausedChange:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when control frame responses are processed.

*/
- (void) addOnProcessControlFrameResponses:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Adds a handler that is raised when control frame responses are processed.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnProcessControlFrameResponsesWithBlock;
/**

    Adds a handler that is raised when control frame responses are processed.

*/
- (void) addOnProcessControlFrameResponsesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Adds a handler that is raised when control frames are processed.

*/
- (void) addOnProcessControlFrames:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Adds a handler that is raised when control frames are processed.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnProcessControlFramesWithBlock;
/**

    Adds a handler that is raised when control frames are processed.

*/
- (void) addOnProcessControlFramesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Adds a handler that is raised when a frame has been processed.

*/
- (void) addOnProcessedFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Adds a handler that is raised when a frame has been processed.

*/
- (void (^)(void(^)(TFrame))) addOnProcessedFrameWithBlock;
/**

    Adds a handler that is raised when a frame has been processed.

*/
- (void) addOnProcessedFrameWithBlock:(void(^)(TFrame))valueBlock;
/**

    Adds a handler that is raised when a frame is being processed.

*/
- (void) addOnProcessFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Adds a handler that is raised when a frame is being processed.

*/
- (void (^)(void(^)(TFrame))) addOnProcessFrameWithBlock;
/**

    Adds a handler that is raised when a frame is being processed.

*/
- (void) addOnProcessFrameWithBlock:(void(^)(TFrame))valueBlock;
/**

    Adds a handler that is raised when control frame responses are raised.

*/
- (void) addOnRaiseControlFrameResponses:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Adds a handler that is raised when control frame responses are raised.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnRaiseControlFrameResponsesWithBlock;
/**

    Adds a handler that is raised when control frame responses are raised.

*/
- (void) addOnRaiseControlFrameResponsesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Adds a handler that is raised when control frames are raised.

*/
- (void) addOnRaiseControlFrames:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Adds a handler that is raised when control frames are raised.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnRaiseControlFramesWithBlock;
/**

    Adds a handler that is raised when control frames are raised.

*/
- (void) addOnRaiseControlFramesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Adds a handler that is raised when a frame has been raised.

*/
- (void) addOnRaisedFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Adds a handler that is raised when a frame has been raised.

*/
- (void (^)(void(^)(TFrame))) addOnRaisedFrameWithBlock;
/**

    Adds a handler that is raised when a frame has been raised.

*/
- (void) addOnRaisedFrameWithBlock:(void(^)(TFrame))valueBlock;
/**

    Adds a handler that is raised when a frame is being raised.

*/
- (void) addOnRaiseFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Adds a handler that is raised when a frame is being raised.

*/
- (void (^)(void(^)(TFrame))) addOnRaiseFrameWithBlock;
/**

    Adds a handler that is raised when a frame is being raised.

*/
- (void) addOnRaiseFrameWithBlock:(void(^)(TFrame))valueBlock;
/**

    Adds a handler that is raised when a frame is received.

*/
- (void) addOnReceiveFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Adds a handler that is raised when a frame is received.

*/
- (void (^)(void(^)(TFrame))) addOnReceiveFrameWithBlock;
/**

    Adds a handler that is raised when a frame is received.

*/
- (void) addOnReceiveFrameWithBlock:(void(^)(TFrame))valueBlock;
/**

    Adds a handler that is raised when a frame is sent.

*/
- (void) addOnSendFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Adds a handler that is raised when a frame is sent.

*/
- (void (^)(void(^)(TFrame))) addOnSendFrameWithBlock;
/**

    Adds a handler that is raised when a frame is sent.

*/
- (void) addOnSendFrameWithBlock:(void(^)(TFrame))valueBlock;
/**

    Adds an output.

    @param output The output.
*/
- (void) addOutput:(TIInput)output;
/**

    Adds some outputs.

    @param outputs The outputs.
*/
- (void) addOutputs:(NSMutableArray*)outputs;
/**

    Gets bandwidth adapation policy for this stream.

*/
- (FMLiveSwitchBandwidthAdaptationPolicy) bandwidthAdaptationPolicy;
/**

    Gets whether CCM FIRs are allowed.

*/
- (bool) ccmFirEnabled;
/**

    Gets the CCM FIR Policy.

*/
- (FMLiveSwitchCcmFirPolicy) ccmFirPolicy;
/**

    Gets whether CCM LRRs are allowed.

*/
- (bool) ccmLrrEnabled;
/**

    Gets the CCM LRR Policy.

*/
- (FMLiveSwitchCcmLrrPolicy) ccmLrrPolicy;
/**

    Gets whether CCM TMMBNs are allowed.

*/
- (bool) ccmTmmbnEnabled;
/**

    Gets the CCM TMMBR Policy.

*/
- (FMLiveSwitchCcmTmmbnPolicy) ccmTmmbnPolicy;
/**

    Gets whether CCM TMMBRs are allowed.

*/
- (bool) ccmTmmbrEnabled;
/**

    Gets the CCM TMMBR Policy.

*/
- (FMLiveSwitchCcmTmmbrPolicy) ccmTmmbrPolicy;
/**

    Changes the current input format (switches codecs).

    @param inputFormat The input format.
*/
- (FMLiveSwitchFuture<id>*) changeInputFormat:(TFormat)inputFormat;
/**

    Gets the content descriptor.

*/
- (NSString*) content;
/**

    Gets control transport information.

*/
- (FMLiveSwitchTransportInfo*) controlTransportInfo;
/**

    Creates a format.

    @param attribute The attribute.
    @param formatParametersAttribute The format parameters attribute.
*/
- (TFormat) createFormatWithAttribute:(FMLiveSwitchSdpRtpMapAttribute*)attribute formatParametersAttribute:(FMLiveSwitchSdpFormatParametersAttribute*)formatParametersAttribute;
/**

    Creates a format.

    @param name The format name.
    @param clockRate The clock rate.
    @param parameters The parameters.
    @param payloadType The payload type.
*/
- (TFormat) createFormatWithName:(NSString*)name clockRate:(int)clockRate parameters:(NSString*)parameters payloadType:(int)payloadType;
/**

    Creates an input collection.

    @param output The output.
*/
- (TIInputCollection) createInputCollectionWithOutput:(TIOutput)output;
/**

    Creates a media format collection.

*/
- (TFormatCollection) createMediaFormatCollection;
/**

    Creates an output collection.

    @param input The input.
*/
- (TIOutputCollection) createOutputCollectionWithInput:(TIInput)input;
/**

    Creates a RED format.

*/
- (TFormat) createRedFormat;
/**

    Creates a ulpfec format.

*/
- (TFormat) createUlpFecFormat;
/**

    Gets default local synchronization source (SSRC) associated with a local sender.
    If the local SDP offer or answer has not yet been set on the Connection, this will return -1.
    Please wait till the local description has been set on the Connection before accessing this value.

*/
- (long long) defaultLocalSynchronizationSource;
/**

    Destroys this instance.

*/
- (bool) destroy;
/**

    Gets a value indicating whether to disable automatic RTCP sender/receiver reports.

*/
- (bool) disableAutomaticReports;
/**

    Gets the disabled input formats.

*/
- (NSMutableArray*) disabledInputFormats;
/**

    Disables an input format. This will trigger a codec
    switch if disabling the current input format. This
    may disable the stream

    @param inputFormat The input format.
*/
- (FMLiveSwitchFuture<id>*) disableInputFormat:(TFormat)inputFormat;
/**

    Enables an input format. This will NOT trigger a
    codec switch.

    @param inputFormat The input format.
*/
- (FMLiveSwitchFuture<id>*) enableInputFormat:(TFormat)inputFormat;
/**

    Creates a format array from a format list.

    @param formatList The format list.
*/
- (NSMutableArray*) formatArrayFromListWithFormatList:(NSMutableArray<TFormat>*)formatList;
/**

    Gets the FIR sequence number.

*/
- (int) getCcmSequenceNumber;
/**

    Gets whether an input source is muted.

    @param input The input.
*/
- (bool) getInputSourceMutedWithInput:(TIOutput)input;
/**

    Gets whether an input source is muted.

    @param inputs The inputs.
*/
- (bool) getInputSourceMutedWithInputs:(NSMutableArray*)inputs;
/**

    Gets the local RTP stream identifier for a given local synchronization source.

    @param localSynchronizationSource The local synchronization source.
*/
- (NSString*) getLocalRtpStreamIdWithLocalSynchronizationSource:(long long)localSynchronizationSource;
/**

    Gets the local synchronization source for a given local RTP stream identifier.

    @param rtpStreamId The RTP stream identifier.
*/
- (long long) getLocalSynchronizationSourceWithRtpStreamId:(NSString*)rtpStreamId;
/**

    Gets whether an output source is muted.

    @param output The output.
*/
- (bool) getOutputSinkMutedWithOutput:(TIInput)output;
/**

    Gets whether an output sink is muted.

    @param outputs The outputs.
*/
- (bool) getOutputSinkMutedWithOutputs:(NSMutableArray*)outputs;
/**

    Gets the total pipeline system delay in ticks for a given output format.

    @param outputFormat The output format.
    @return The total pipeline system delay in ticks.
*/
- (long long) getPipelineSystemDelayWithOutputFormat:(TFormat)outputFormat;
/**

    Gets the remote RTP stream identifier for a given remote synchronization source.

    @param remoteSynchronizationSource The remote synchronization source.
*/
- (NSString*) getRemoteRtpStreamIdWithRemoteSynchronizationSource:(long long)remoteSynchronizationSource;
/**

    Gets the remote synchronization source for a given remote RTP stream identifier.

    @param rtpStreamId The RTP stream identifier.
*/
- (long long) getRemoteSynchronizationSourceWithRtpStreamId:(NSString*)rtpStreamId;
/**

    Increments the FIR sequence number.

*/
- (void) incrementCcmSequenceNumber;
/**

    Initializes a new instance of the FMLiveSwitchMediaStream`15 class.

    @param type The type.
    @param jitterConfig The jitter configuration.
*/
- (instancetype) initWithType:(FMLiveSwitchStreamType)type jitterConfig:(FMLiveSwitchJitterConfig*)jitterConfig;
/**

    Gets whether at least one frame has
    been successfully processed.

*/
- (bool) injectionAllowed;
/**

    Gets the input.

*/
- (TIOutput) input;
/**

    Creates an input array from an input list.

    @param inputList The input list.
*/
- (NSMutableArray*) inputArrayFromListWithInputList:(NSMutableArray<TIInput>*)inputList;
/**

    Gets whether input is deactivated.
    Input is deactivated if the stream direction is unset, inactive, or recvonly.

*/
- (bool) inputDeactivated;
/**

    Gets the current input format.

*/
- (TFormat) inputFormat;
/**

    Gets the available input formats.

*/
- (NSMutableArray*) inputFormats;
/**

    Gets the sum of the bitrates from FMLiveSwitchMediaStream`15#inputMaxOutputEncodings.

*/
- (int) inputMaxOutputBitrate;
/**

    Gets the inputs' maximum allowed output encodings.

*/
- (NSMutableArray*) inputMaxOutputEncodings;
/**

    Gets the sum of the bitrates from FMLiveSwitchMediaStream`15#inputMinOutputEncodings.

*/
- (int) inputMinOutputBitrate;
/**

    Gets the inputs' minimum allowed output encodings.

*/
- (NSMutableArray*) inputMinOutputEncodings;
/**

    Gets whether the input track is muted.

*/
- (bool) inputMuted;
/**

    Gets null to satisfy interface requirements.

*/
- (NSString*) inputRtpStreamId;
/**

    Gets the inputs.

*/
- (NSMutableArray*) inputs;
/**

    Gets whether input synchronization is disabled.

*/
- (bool) inputSynchronizationDisabled;
/**

    Gets -1 to satisfy interface requirements.

*/
- (long long) inputSynchronizationSource;
/**

    Gets the input synchronization sources.

*/
- (NSMutableArray*) inputSynchronizationSources;
/**

    Gets the sum of the bitrates from FMLiveSwitchMediaStream`15#inputTargetOutputEncodings.

*/
- (int) inputTargetOutputBitrate;
/**

    Gets the inputs' target output encodings.

*/
- (NSMutableArray*) inputTargetOutputEncodings;
/**

    Gets the jitter configuration.

*/
- (FMLiveSwitchJitterConfig*) jitterConfig;
/**

    Gets whether to use legacy receiver processing.
    Legacy receiver processing uses a fixed-size jitter buffer
    and processes forward error correction pre-jitter.

*/
- (bool) legacyReceiver;
/**

    Gets the local description media identifier.
    If not set, defaults to the FMLiveSwitchMediaStream`15#localMedia
    identifier, if one exists.

*/
- (NSString*) localDescriptionMediaId;
/**

    Gets the local description track identifier.
    If not set, defaults to the FMLiveSwitchMediaStream`15#localTrack
    identifier, if one exists.

*/
- (NSString*) localDescriptionTrackId;
/**

    Gets the local media, if one was specified.

*/
- (FMLiveSwitchLocalMedia*) localMedia;
/**

    Gets the local track from this media. Returns null if there are no tracks.

*/
- (TTrack) localTrack;
/**

    Gets the maximum allowed input bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

*/
- (int) maxInputBitrate;
/**

    Gets the max input encoding.

*/
- (FMLiveSwitchEncodingInfo*) maxInputEncoding;
/**

    Gets the maximum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

*/
- (int) maxOutputBitrate;
/**

    Gets the max output encoding.

*/
- (FMLiveSwitchEncodingInfo*) maxOutputEncoding;
/**

    Gets the maximum desired receive bitrate, in kbps.

*/
- (int) maxReceiveBitrate;
/**

    Initializes a new instance of the FMLiveSwitchMediaStream`15 class.

    @param type The type.
    @param jitterConfig The jitter configuration.
*/
+ (FMLiveSwitchMediaStream*) mediaStreamWithType:(FMLiveSwitchStreamType)type jitterConfig:(FMLiveSwitchJitterConfig*)jitterConfig;
/**

    Gets the minimum allowed input bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

*/
- (int) minInputBitrate;
/**

    Gets the min input encoding.

*/
- (FMLiveSwitchEncodingInfo*) minInputEncoding;
/**

    Gets the minimum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

*/
- (int) minOutputBitrate;
/**

    Gets the min output encoding.

*/
- (FMLiveSwitchEncodingInfo*) minOutputEncoding;
/**

    Gets a value indicating whether Rtp and Rtcp components for this stream are multiplexed on the same port.

*/
- (bool) multiplexed;
/**

    Gets a value indicating whether so far negotiation with the peer indicates that Rtp and Rtcp component multiplexing on the same port is supported.

*/
- (bool) multiplexingSupported;
/**

    Gets Nack config.

*/
- (FMLiveSwitchNackConfig*) nackConfig;
/**

    Gets whether NACKs are allowed.

*/
- (bool) nackEnabled;
/**

    Gets whether NACK PLIs are allowed.

*/
- (bool) nackPliEnabled;
/**

    Gets the NACK PLI Policy.

*/
- (FMLiveSwitchNackPliPolicy) nackPliPolicy;
/**

    Gets the NACK Policy.

*/
- (FMLiveSwitchNackPolicy) nackPolicy;
/**

    Gets the output.

*/
- (TIInput) output;
/**

    Creates an output array from an output list.

    @param outputList The output list.
*/
- (NSMutableArray*) outputArrayFromListWithOutputList:(NSMutableArray<TIOutput>*)outputList;
/**

    Gets whether output is deactivated.
    Output is deactivated if the stream direction is unset, inactive, or sendonly.

*/
- (bool) outputDeactivated;
/**

    Gets the output format.

*/
- (TFormat) outputFormat;
/**

    Gets the sum of the bitrates from FMLiveSwitchMediaStream`15#outputMaxInputEncodings.

*/
- (int) outputMaxInputBitrate;
/**

    Gets the outputs' maximum allowed input encodings.

*/
- (NSMutableArray*) outputMaxInputEncodings;
/**

    Gets the sum of the bitrates from FMLiveSwitchMediaStream`15#outputMinInputEncodings.

*/
- (int) outputMinInputBitrate;
/**

    Gets the outputs' minimum allowed input encodings.

*/
- (NSMutableArray*) outputMinInputEncodings;
/**

    Gets whether the output track is muted.

*/
- (bool) outputMuted;
/**

    Gets null to satisfy interface requirements.

*/
- (NSString*) outputRtpStreamId;
/**

    Gets the outputs.

*/
- (NSMutableArray*) outputs;
/**

    Gets whether output is synchronizable.

*/
- (bool) outputSynchronizable;
/**

    Gets whether output synchronization is disabled.

*/
- (bool) outputSynchronizationDisabled;
/**

    Gets -1 to satisfy interface requirements.

*/
- (long long) outputSynchronizationSource;
/**

    Gets the output synchronization sources.

*/
- (NSMutableArray*) outputSynchronizationSources;
/**

    Gets whether this stream is over-constrained.
    A stream is over-constrained if either it's
    input or output is over-constrained.

*/
- (bool) overConstrained;
/**

    Gets whether the stream bitrate is over-constrained.
    A stream bitrate is over-constrained if the input
    bitrate or output bitrate is over-constrained.

*/
- (bool) overConstrainedBitrate;
/**

    Gets whether the input is over-contrained.
    An input is over-constrained if it's
    input bitrate is over-contrained.

*/
- (bool) overConstrainedInput;
/**

    Gets whether the minimum allowed input bitrate exceeds the maximum allowed input bitrate.

*/
- (bool) overConstrainedInputBitrate;
/**

    Gets whether the output is over-constrained.
    An output is over-constrained if it's
    output bitrate is over-contrained.

*/
- (bool) overConstrainedOutput;
/**

    Gets whether the minimum allowed output bitrate exceeds the maximum allowed output bitrate.

*/
- (bool) overConstrainedOutputBitrate;
/**

    Gets a value indicating whether this stream is paused.

*/
- (bool) paused;
/**

    Gets a value indicating whether this instance is persistent.
    Always returns `false`.

*/
- (bool) persistent;
/**

    Gets the pipeline JSON with this as the central point.

*/
- (NSString*) pipelineJson;
/**

    Gets the pipeline JSON from an input.

*/
- (NSString*) pipelineJsonFromInput;
/**

    Gets the pipeline JSON from an output.

*/
- (NSString*) pipelineJsonFromOutput;
/**

    Populates the media stream info.

    @param info 
*/
- (void) populateInfo:(FMLiveSwitchMediaStreamInfo*)info;
/**

    Processes a control frame.

    @param controlFrame The control frame.
*/
- (void) processControlFrame:(FMLiveSwitchMediaControlFrame*)controlFrame;
/**

    Processes a control frame response.

    @param controlFrameResponse The control frame response.
*/
- (void) processControlFrameResponse:(FMLiveSwitchMediaControlFrame*)controlFrameResponse;
/**

    Processes control frame responses.

    @param controlFrameResponses The control frame responses.
*/
- (void) processControlFrameResponses:(NSMutableArray*)controlFrameResponses;
/**

    Processes control frames.

    @param controlFrames The control frames.
*/
- (void) processControlFrames:(NSMutableArray*)controlFrames;
/**

    Processes a frame.

    @param frame The frame.
*/
- (bool) processFrame:(TFrame)frame;
/**

    Gets the ProcessFramePolicy for this media input.

*/
- (FMLiveSwitchProcessFramePolicy) processFramePolicy;
/**

    Processes an SDP content attribute.

    @param sdpContentAttribute The SDP content attribute.
    @param isLocalDescription Whether the SDP content attribute comes from a local description.
*/
- (void) processSdpContentAttribute:(FMLiveSwitchSdpContentAttribute*)sdpContentAttribute isLocalDescription:(bool)isLocalDescription;
/**

    Processes a local SDP media description from an input.

    @param mediaDescription The media description.
    @param isOffer if set to `true` [is offer].
    @param isLocalDescription if set to `true` [is local description].
*/
- (FMLiveSwitchError*) processSdpMediaDescriptionFromInputWithMediaDescription:(FMLiveSwitchSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription;
/**

    Processes a local SDP media description from an output.

    @param mediaDescription The media description.
    @param isOffer if set to `true` [is offer].
    @param isLocalDescription if set to `true` [is local description].
*/
- (FMLiveSwitchError*) processSdpMediaDescriptionFromOutputWithMediaDescription:(FMLiveSwitchSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription;
/**

    Processes sink stats from an input.

    @param sinkStats The sink stats.
*/
- (void) processSinkStatsFromInputWithSinkStats:(FMLiveSwitchMediaSinkStats*)sinkStats;
/**

    Processes source stats from an output.

    @param sourceStats The source stats.
*/
- (void) processSourceStatsFromOutputWithSourceStats:(FMLiveSwitchMediaSourceStats*)sourceStats;
/**

    Processes a state change.

*/
- (void) processStateChange;
/**

    Processes stats from an input.

    @param trackStats The track stats.
*/
- (void) processTrackStatsFromInputWithTrackStats:(FMLiveSwitchMediaTrackStats*)trackStats;
/**

    Processes stats from an output.

    @param trackStats The track stats.
*/
- (void) processTrackStatsFromOutputWithTrackStats:(FMLiveSwitchMediaTrackStats*)trackStats;
/**

    Raises a bitrate notification to the remote track.

    @param bitrateNotification The bitrate notification.
*/
- (bool) raiseBitrateNotification:(FMLiveSwitchBitrateNotification*)bitrateNotification;
/**

    Raises a bitrate request to the local track.

    @param bitrateRequest The bitrate request.
*/
- (bool) raiseBitrateRequest:(FMLiveSwitchBitrateRequest*)bitrateRequest;
/**

    Raises a frame.

    @param frame The frame.
*/
- (void) raiseFrame:(TFrame)frame;
/**

    Gets Fec Config.

*/
- (FMLiveSwitchRedFecConfig*) redFecConfig;
/**

    Gets True if Red Fec is negotiated.

*/
- (bool) redFecEnabled;
/**

    Gets the Fec Policy.

*/
- (FMLiveSwitchRedFecPolicy) redFecPolicy;
/**

    Gets True if goog-remb is negotiated.

*/
- (bool) rembEnabled;
/**

    Gets the goog-remb policy.

*/
- (FMLiveSwitchRembPolicy) rembPolicy;
/**

    Gets the remote description media identifier.

*/
- (NSString*) remoteDescriptionMediaId;
/**

    Gets the remote description track identifier.

*/
- (NSString*) remoteDescriptionTrackId;
/**

    Gets the remote encoding.

*/
- (FMLiveSwitchEncodingInfo*) remoteEncoding;
/**

    Gets the remote media, if one was specified.

*/
- (FMLiveSwitchRemoteMedia*) remoteMedia;
/**

    Gets the remote track, if one was specified.

*/
- (TTrack) remoteTrack;
/**

    Removes an input.

    @param input The input.
*/
- (bool) removeInput:(TIOutput)input;
/**

    Removes all inputs.

*/
- (void) removeInputs;
/**

    Removes some inputs.

    @param inputs The inputs.
*/
- (void) removeInputs:(NSMutableArray*)inputs;
/**

    Removes a handler that is raised when a bitrate notification is discarded due to policy
    restrictions or lack of support by the remote endpoint.

*/
- (void) removeOnDiscardBitrateNotification:(FMLiveSwitchAction1<FMLiveSwitchBitrateNotification*>*)value;
/**

    Removes a handler that is raised when a bitrate notification message is discarded by the internal in-band messaging mechanism because the peer does not support bitrate notifications.<br />
    In this case, the bitrate notification needs to be transported out of band. LiveSwitch handles this internally by sending the message over Data Streams. No further action is required by application developers.<br />
    Use this event for for diagnostics and debugging.

*/
- (void) removeOnDiscardBitrateRequest:(FMLiveSwitchAction1<FMLiveSwitchBitrateRequest*>*)value;
/**

    Removes a handler that is raised when an outbound control frame is discarded due to policy
    restrictions or lack of support by the remote endpoint.

*/
- (void) removeOnDiscardOutboundControlFrame:(FMLiveSwitchAction1<FMLiveSwitchMediaControlFrame*>*)value;
/**

    Removes a handler that is raised by master streams when the synchronize context is ready.

*/
- (void) removeOnMasterSynchronizeContextReady:(FMLiveSwitchAction1<FMLiveSwitchSynchronizeContext*>*)value;
/**

    Removes a handler that is raised when the Paused property changes state.

*/
- (void) removeOnPausedChange:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when control frame responses are processed.

*/
- (void) removeOnProcessControlFrameResponses:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Removes a handler that is raised when control frames are processed.

*/
- (void) removeOnProcessControlFrames:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Removes a handler that is raised when a frame has been processed.

*/
- (void) removeOnProcessedFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Removes a handler that is raised when a frame is being processed.

*/
- (void) removeOnProcessFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Removes a handler that is raised when control frame responses are raised.

*/
- (void) removeOnRaiseControlFrameResponses:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Removes a handler that is raised when control frames are raised.

*/
- (void) removeOnRaiseControlFrames:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Removes a handler that is raised when a frame has been raised.

*/
- (void) removeOnRaisedFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Removes a handler that is raised when a frame is being raised.

*/
- (void) removeOnRaiseFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Removes a handler that is raised when a frame is received.

*/
- (void) removeOnReceiveFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Removes a handler that is raised when a frame is sent.

*/
- (void) removeOnSendFrame:(FMLiveSwitchAction1<TFrame>*)value;
/**

    Removes an output.

    @param output The output.
*/
- (bool) removeOutput:(TIInput)output;
/**

    Removes all outputs.

*/
- (void) removeOutputs;
/**

    Removes some outputs.

    @param outputs The outputs.
*/
- (void) removeOutputs:(NSMutableArray*)outputs;
/**

    Gets the current direction for the RTP Header Extension for Transport-wide CC. See https://datatracker.ietf.org/doc/html/draft-holmer-rmcat-transport-wide-cc-extensions-01 .
    If the remote capability has not yet been received, only local requirements are taken into consideration.

*/
- (FMLiveSwitchStreamDirection) rtpTransportWideCCDirection;
/**

    Gets the current local direction for the RTP Header Extension for Transport-wide CC. See https://datatracker.ietf.org/doc/html/draft-holmer-rmcat-transport-wide-cc-extensions-01 .
    If the remote capability has not yet been received, only local requirements are taken into consideration.

*/
- (FMLiveSwitchStreamDirection) rtpTransportWideCCLocalDirection;
/**

    Gets the remote local direction for the RTP Header Extension for Transport-wide CC. See https://datatracker.ietf.org/doc/html/draft-holmer-rmcat-transport-wide-cc-extensions-01 .

*/
- (FMLiveSwitchStreamDirection) rtpTransportWideCCRemoteDirection;
/**

    Sets bandwidth adapation policy for this stream.

*/
- (void) setBandwidthAdaptationPolicy:(FMLiveSwitchBandwidthAdaptationPolicy)value;
/**

    Sets the CCM FIR Policy.

*/
- (void) setCcmFirPolicy:(FMLiveSwitchCcmFirPolicy)value;
/**

    Sets the CCM LRR Policy.

*/
- (void) setCcmLrrPolicy:(FMLiveSwitchCcmLrrPolicy)value;
/**

    Sets the CCM TMMBR Policy.

*/
- (void) setCcmTmmbnPolicy:(FMLiveSwitchCcmTmmbnPolicy)value;
/**

    Sets the CCM TMMBR Policy.

*/
- (void) setCcmTmmbrPolicy:(FMLiveSwitchCcmTmmbrPolicy)value;
/**

    Sets a value indicating whether to disable automatic RTCP sender/receiver reports.

*/
- (void) setDisableAutomaticReports:(bool)value;
/**

    Sets whether the input track is muted.

*/
- (void) setInputMuted:(bool)value;
/**

    Sets null to satisfy interface requirements.

*/
- (void) setInputRtpStreamId:(NSString*)value;
/**

    Sets whether an input source is muted.

    @param input The input.
    @param value The value.
*/
- (void) setInputSourceMutedWithInput:(TIOutput)input value:(bool)value;
/**

    Sets whether an input source is muted.

    @param inputs The inputs.
    @param value The value.
*/
- (void) setInputSourceMutedWithInputs:(NSMutableArray*)inputs value:(bool)value;
/**

    Sets whether input synchronization is disabled.

*/
- (void) setInputSynchronizationDisabled:(bool)value;
/**

    Sets -1 to satisfy interface requirements.

*/
- (void) setInputSynchronizationSource:(long long)value;
/**

    Sets whether to use legacy receiver processing.
    Legacy receiver processing uses a fixed-size jitter buffer
    and processes forward error correction pre-jitter.

*/
- (void) setLegacyReceiver:(bool)value;
/**

    Sets the local description media identifier.
    If not set, defaults to the FMLiveSwitchMediaStream`15#localMedia
    identifier, if one exists.

*/
- (void) setLocalDescriptionMediaId:(NSString*)value;
/**

    Sets the local description track identifier.
    If not set, defaults to the FMLiveSwitchMediaStream`15#localTrack
    identifier, if one exists.

*/
- (void) setLocalDescriptionTrackId:(NSString*)value;
/**

    Sets the local media, if one was specified.

*/
- (void) setLocalMedia:(FMLiveSwitchLocalMedia*)value;
/**

    Sets the local track from this media. Returns null if there are no tracks.

*/
- (void) setLocalTrack:(TTrack)value;
/**

    Sets the maximum desired receive bitrate, in kbps.

*/
- (void) setMaxReceiveBitrate:(int)value;
/**

    Sets the NACK PLI Policy.

*/
- (void) setNackPliPolicy:(FMLiveSwitchNackPliPolicy)value;
/**

    Sets the NACK Policy.

*/
- (void) setNackPolicy:(FMLiveSwitchNackPolicy)value;
/**

    Sets the output format.

*/
- (void) setOutputFormat:(TFormat)value;
/**

    Sets whether the output track is muted.

*/
- (void) setOutputMuted:(bool)value;
/**

    Sets whether an output source is muted.

    @param output The output.
    @param value The value.
*/
- (void) setOutputSinkMutedWithOutput:(TIInput)output value:(bool)value;
/**

    Sets whether an output sink is muted.

    @param outputs The outputs.
    @param value The value.
*/
- (void) setOutputSinkMutedWithOutputs:(NSMutableArray*)outputs value:(bool)value;
/**

    Sets whether output synchronization is disabled.

*/
- (void) setOutputSynchronizationDisabled:(bool)value;
/**

    Sets the ProcessFramePolicy for this media input.

*/
- (void) setProcessFramePolicy:(FMLiveSwitchProcessFramePolicy)value;
/**

    Sets the Fec Policy.

*/
- (void) setRedFecPolicy:(FMLiveSwitchRedFecPolicy)value;
/**

    Sets the remote encoding.

*/
- (void) setRemoteEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Sets the remote media, if one was specified.

*/
- (void) setRemoteMedia:(FMLiveSwitchRemoteMedia*)value;
/**

    Sets the remote track, if one was specified.

*/
- (void) setRemoteTrack:(TTrack)value;
/**

    Sets the simulcast mode.

*/
- (void) setSimulcastMode:(FMLiveSwitchSimulcastMode)value;
/**

    Sets the synchronize context.

*/
- (void) setSynchronizeContext:(FMLiveSwitchSynchronizeContext*)value;
/**

    Sets the system delay in ticks.

*/
- (void) setSystemDelay:(long long)value;
/**

    Gets the simulcast mode.

*/
- (FMLiveSwitchSimulcastMode) simulcastMode;
/**

    Gets the synchronize context.

*/
- (FMLiveSwitchSynchronizeContext*) synchronizeContext;
/**

    Gets all synchronizers in the stream output tracks.

*/
- (NSMutableArray*) synchronizers;
/**

    Initializes synchronization.

    @param master Whether this is a master stream.
*/
- (void) synchronizeWithMaster:(bool)master;
/**

    Gets the system delay in ticks.

*/
- (long long) systemDelay;
/**

    Gets the target output bitrate, in kbps.
    A value of -1 indicates unset (no target).

*/
- (int) targetOutputBitrate;
/**

    Gets the target output encoding.

*/
- (FMLiveSwitchEncodingInfo*) targetOutputEncoding;
/**

    Gets transport information.

*/
- (FMLiveSwitchTransportInfo*) transportInfo;

@end

/**

    An audio stream.

*/
@interface FMLiveSwitchAudioStream : FMLiveSwitchMediaStream<NSObject<FMLiveSwitchIAudioOutput>*,FMLiveSwitchIAudioOutputCollection*,NSObject<FMLiveSwitchIAudioInput>*,FMLiveSwitchIAudioInputCollection*,NSObject<FMLiveSwitchIAudioElement>*,FMLiveSwitchAudioSource*,FMLiveSwitchAudioSink*,FMLiveSwitchAudioPipe*,FMLiveSwitchAudioTrack*,FMLiveSwitchAudioBranch*,FMLiveSwitchAudioFrame*,FMLiveSwitchAudioBuffer*,FMLiveSwitchAudioBufferCollection*,FMLiveSwitchAudioFormat*,FMLiveSwitchAudioFormatCollection*><FMLiveSwitchIAudioStream, FMLiveSwitchIMediaStream, FMLiveSwitchIStream, FMLiveSwitchIAudioInput, FMLiveSwitchIMediaInput, FMLiveSwitchIInput, FMLiveSwitchIAudioOutput, FMLiveSwitchIMediaOutput, FMLiveSwitchIOutput, FMLiveSwitchIAudioElement, FMLiveSwitchIMediaElement, FMLiveSwitchIElement>

/**

    Adds a handler that is raised when outbound DTMF tones are discarded
    due to policy restrictions or lack of support.

*/
- (void) addOnDiscardOutboundDtmfTones:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Adds a handler that is raised when outbound DTMF tones are discarded
    due to policy restrictions or lack of support.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnDiscardOutboundDtmfTonesWithBlock;
/**

    Adds a handler that is raised when outbound DTMF tones are discarded
    due to policy restrictions or lack of support.

*/
- (void) addOnDiscardOutboundDtmfTonesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Adds a handler that is raised when a DTMF packet is received.

*/
- (void) addOnReceiveDtmfTone:(FMLiveSwitchAction1<FMLiveSwitchDtmfTone*>*)value;
/**

    Adds a handler that is raised when the received DTMF tone changes.

*/
- (void) addOnReceiveDtmfToneChange:(FMLiveSwitchAction1<FMLiveSwitchDtmfTone*>*)value;
/**

    Adds a handler that is raised when the received DTMF tone changes.

*/
- (void (^)(void(^)(FMLiveSwitchDtmfTone*))) addOnReceiveDtmfToneChangeWithBlock;
/**

    Adds a handler that is raised when the received DTMF tone changes.

*/
- (void) addOnReceiveDtmfToneChangeWithBlock:(void(^)(FMLiveSwitchDtmfTone*))valueBlock;
/**

    Adds a handler that is raised when a DTMF packet is received.

*/
- (void (^)(void(^)(FMLiveSwitchDtmfTone*))) addOnReceiveDtmfToneWithBlock;
/**

    Adds a handler that is raised when a DTMF packet is received.

*/
- (void) addOnReceiveDtmfToneWithBlock:(void(^)(FMLiveSwitchDtmfTone*))valueBlock;
/**

    Adds a handler that is raised when a DTMF packet is sent.

*/
- (void) addOnSendDtmfTone:(FMLiveSwitchAction1<FMLiveSwitchDtmfTone*>*)value;
/**

    Adds a handler that is raised when the sent DTMF tone changes.

*/
- (void) addOnSendDtmfToneChange:(FMLiveSwitchAction1<FMLiveSwitchDtmfTone*>*)value;
/**

    Adds a handler that is raised when the sent DTMF tone changes.

*/
- (void (^)(void(^)(FMLiveSwitchDtmfTone*))) addOnSendDtmfToneChangeWithBlock;
/**

    Adds a handler that is raised when the sent DTMF tone changes.

*/
- (void) addOnSendDtmfToneChangeWithBlock:(void(^)(FMLiveSwitchDtmfTone*))valueBlock;
/**

    Adds a handler that is raised when a DTMF packet is sent.

*/
- (void (^)(void(^)(FMLiveSwitchDtmfTone*))) addOnSendDtmfToneWithBlock;
/**

    Adds a handler that is raised when a DTMF packet is sent.

*/
- (void) addOnSendDtmfToneWithBlock:(void(^)(FMLiveSwitchDtmfTone*))valueBlock;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

*/
+ (FMLiveSwitchAudioStream*) audioStream;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param discardOutboundDtmfTones Whether to discard outbound DTMF tones.
*/
+ (FMLiveSwitchAudioStream*) audioStreamWithDiscardOutboundDtmfTones:(bool)discardOutboundDtmfTones;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param input The input.
*/
+ (FMLiveSwitchAudioStream*) audioStreamWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param input The input.
    @param discardOutboundDtmfTones Whether to discard outbound DTMF tones.
*/
+ (FMLiveSwitchAudioStream*) audioStreamWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input discardOutboundDtmfTones:(bool)discardOutboundDtmfTones;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param input The input.
    @param output The output.
*/
+ (FMLiveSwitchAudioStream*) audioStreamWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input output:(NSObject<FMLiveSwitchIAudioInput>*)output;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param input The input.
    @param output The output.
    @param discardOutboundDtmfTones Whether to discard outbound DTMF tones.
*/
+ (FMLiveSwitchAudioStream*) audioStreamWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input output:(NSObject<FMLiveSwitchIAudioInput>*)output discardOutboundDtmfTones:(bool)discardOutboundDtmfTones;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param inputs The inputs.
*/
+ (FMLiveSwitchAudioStream*) audioStreamWithInputs:(NSMutableArray*)inputs;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param inputs The inputs.
    @param discardOutboundDtmfTones Whether to discard outbound DTMF tones.
*/
+ (FMLiveSwitchAudioStream*) audioStreamWithInputs:(NSMutableArray*)inputs discardOutboundDtmfTones:(bool)discardOutboundDtmfTones;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param inputs The inputs.
    @param outputs The outputs.
*/
+ (FMLiveSwitchAudioStream*) audioStreamWithInputs:(NSMutableArray*)inputs outputs:(NSMutableArray*)outputs;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param inputs The inputs.
    @param outputs The outputs.
    @param discardOutboundDtmfTones Whether to discard outbound DTMF tones.
*/
+ (FMLiveSwitchAudioStream*) audioStreamWithInputs:(NSMutableArray*)inputs outputs:(NSMutableArray*)outputs discardOutboundDtmfTones:(bool)discardOutboundDtmfTones;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param localMedia The local media.
*/
+ (FMLiveSwitchAudioStream*) audioStreamWithLocalMedia:(FMLiveSwitchLocalMedia*)localMedia;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param localMedia The local media.
    @param discardOutboundDtmfTones Whether to discard outbound DTMF tones.
*/
+ (FMLiveSwitchAudioStream*) audioStreamWithLocalMedia:(FMLiveSwitchLocalMedia*)localMedia discardOutboundDtmfTones:(bool)discardOutboundDtmfTones;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param localMedia The local media.
    @param remoteMedia The remote media.
*/
+ (FMLiveSwitchAudioStream*) audioStreamWithLocalMedia:(FMLiveSwitchLocalMedia*)localMedia remoteMedia:(FMLiveSwitchRemoteMedia*)remoteMedia;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param localMedia The local media.
    @param remoteMedia The remote media.
    @param discardOutboundDtmfTones Whether to discard outbound DTMF tones.
*/
+ (FMLiveSwitchAudioStream*) audioStreamWithLocalMedia:(FMLiveSwitchLocalMedia*)localMedia remoteMedia:(FMLiveSwitchRemoteMedia*)remoteMedia discardOutboundDtmfTones:(bool)discardOutboundDtmfTones;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param localTrack The local track.
*/
+ (FMLiveSwitchAudioStream*) audioStreamWithLocalTrack:(FMLiveSwitchAudioTrack*)localTrack;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param localTrack The local track.
    @param discardOutboundDtmfTones Whether to discard outbound DTMF tones.
*/
+ (FMLiveSwitchAudioStream*) audioStreamWithLocalTrack:(FMLiveSwitchAudioTrack*)localTrack discardOutboundDtmfTones:(bool)discardOutboundDtmfTones;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param localTrack The local track.
    @param remoteTrack The remote track.
*/
+ (FMLiveSwitchAudioStream*) audioStreamWithLocalTrack:(FMLiveSwitchAudioTrack*)localTrack remoteTrack:(FMLiveSwitchAudioTrack*)remoteTrack;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param localTrack The local track.
    @param remoteTrack The remote track.
    @param discardOutboundDtmfTones Whether to discard outbound DTMF tones.
*/
+ (FMLiveSwitchAudioStream*) audioStreamWithLocalTrack:(FMLiveSwitchAudioTrack*)localTrack remoteTrack:(FMLiveSwitchAudioTrack*)remoteTrack discardOutboundDtmfTones:(bool)discardOutboundDtmfTones;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param output The output.
*/
+ (FMLiveSwitchAudioStream*) audioStreamWithOutput:(NSObject<FMLiveSwitchIAudioInput>*)output;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param output The output.
    @param discardOutboundDtmfTones Whether to discard outbound DTMF tones.
*/
+ (FMLiveSwitchAudioStream*) audioStreamWithOutput:(NSObject<FMLiveSwitchIAudioInput>*)output discardOutboundDtmfTones:(bool)discardOutboundDtmfTones;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param outputs The outputs.
*/
+ (FMLiveSwitchAudioStream*) audioStreamWithOutputs:(NSMutableArray*)outputs;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param outputs The outputs.
    @param discardOutboundDtmfTones Whether to discard outbound DTMF tones.
*/
+ (FMLiveSwitchAudioStream*) audioStreamWithOutputs:(NSMutableArray*)outputs discardOutboundDtmfTones:(bool)discardOutboundDtmfTones;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param remoteMedia The remote media.
*/
+ (FMLiveSwitchAudioStream*) audioStreamWithRemoteMedia:(FMLiveSwitchRemoteMedia*)remoteMedia;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param remoteMedia The remote media.
    @param discardOutboundDtmfTones Whether to discard outbound DTMF tones.
*/
+ (FMLiveSwitchAudioStream*) audioStreamWithRemoteMedia:(FMLiveSwitchRemoteMedia*)remoteMedia discardOutboundDtmfTones:(bool)discardOutboundDtmfTones;
/**

    Gets the output configuration.
    (Alias for FMLiveSwitchAudioStream#outputConfig.)

*/
- (FMLiveSwitchAudioConfig*) config;
/**

    Creates a format.

    @param attribute The attribute.
    @param formatParametersAttribute The format parameters attribute.
*/
- (FMLiveSwitchAudioFormat*) createFormatWithAttribute:(FMLiveSwitchSdpRtpMapAttribute*)attribute formatParametersAttribute:(FMLiveSwitchSdpFormatParametersAttribute*)formatParametersAttribute;
/**

    Creates a format.

    @param name The format name.
    @param clockRate The clock rate.
    @param parameters The parameters.
    @param payloadType The payload type.
*/
- (FMLiveSwitchAudioFormat*) createFormatWithName:(NSString*)name clockRate:(int)clockRate parameters:(NSString*)parameters payloadType:(int)payloadType;
/**

    Creates an input collection.

    @param output The output.
*/
- (FMLiveSwitchIAudioInputCollection*) createInputCollectionWithOutput:(NSObject<FMLiveSwitchIAudioOutput>*)output;
/**

    Creates a media format collection.

*/
- (FMLiveSwitchAudioFormatCollection*) createMediaFormatCollection;
/**

    Creates an output collection.

    @param input The input.
*/
- (FMLiveSwitchIAudioOutputCollection*) createOutputCollectionWithInput:(NSObject<FMLiveSwitchIAudioInput>*)input;
/**

    Creates a RED format.

*/
- (FMLiveSwitchAudioFormat*) createRedFormat;
/**

    Creates a ulpfec format.

*/
- (FMLiveSwitchAudioFormat*) createUlpFecFormat;
/**

    Gets whether outbound DTMF tones should be discarded.

*/
- (bool) discardOutboundDtmfTones;
/**

    Gets the DTMF mode.

*/
- (FMLiveSwitchDtmfMode) dtmfMode;
/**

    Creates a format array from a format list.

    @param formatList The format list.
*/
- (NSMutableArray*) formatArrayFromListWithFormatList:(NSMutableArray<FMLiveSwitchAudioFormat*>*)formatList;
/**

    Gets whether G.722 is disabled.

*/
- (bool) g722Disabled;
/**

    Gets a value indicating the gain
    (input amplification) of this sink.
    Any value greater than or equal to 0.0
    is acceptable.
    Currently, this value is not used since audio streams require
    packetized input/output formats.

*/
- (double) gain;
/**

    Gets whether an input source is muted.

    @param input The input.
*/
- (bool) getInputSourceMutedWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Gets whether an output sink is muted.

    @param output The output.
*/
- (bool) getOutputSinkMutedWithOutput:(NSObject<FMLiveSwitchIAudioInput>*)output;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param discardOutboundDtmfTones Whether to discard outbound DTMF tones.
*/
- (instancetype) initWithDiscardOutboundDtmfTones:(bool)discardOutboundDtmfTones;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param input The input.
    @param discardOutboundDtmfTones Whether to discard outbound DTMF tones.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input discardOutboundDtmfTones:(bool)discardOutboundDtmfTones;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param input The input.
    @param output The output.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input output:(NSObject<FMLiveSwitchIAudioInput>*)output;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param input The input.
    @param output The output.
    @param discardOutboundDtmfTones Whether to discard outbound DTMF tones.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input output:(NSObject<FMLiveSwitchIAudioInput>*)output discardOutboundDtmfTones:(bool)discardOutboundDtmfTones;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param inputs The inputs.
*/
- (instancetype) initWithInputs:(NSMutableArray*)inputs;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param inputs The inputs.
    @param discardOutboundDtmfTones Whether to discard outbound DTMF tones.
*/
- (instancetype) initWithInputs:(NSMutableArray*)inputs discardOutboundDtmfTones:(bool)discardOutboundDtmfTones;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param inputs The inputs.
    @param outputs The outputs.
*/
- (instancetype) initWithInputs:(NSMutableArray*)inputs outputs:(NSMutableArray*)outputs;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param inputs The inputs.
    @param outputs The outputs.
    @param discardOutboundDtmfTones Whether to discard outbound DTMF tones.
*/
- (instancetype) initWithInputs:(NSMutableArray*)inputs outputs:(NSMutableArray*)outputs discardOutboundDtmfTones:(bool)discardOutboundDtmfTones;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param localMedia The local media.
*/
- (instancetype) initWithLocalMedia:(FMLiveSwitchLocalMedia*)localMedia;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param localMedia The local media.
    @param discardOutboundDtmfTones Whether to discard outbound DTMF tones.
*/
- (instancetype) initWithLocalMedia:(FMLiveSwitchLocalMedia*)localMedia discardOutboundDtmfTones:(bool)discardOutboundDtmfTones;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param localMedia The local media.
    @param remoteMedia The remote media.
*/
- (instancetype) initWithLocalMedia:(FMLiveSwitchLocalMedia*)localMedia remoteMedia:(FMLiveSwitchRemoteMedia*)remoteMedia;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param localMedia The local media.
    @param remoteMedia The remote media.
    @param discardOutboundDtmfTones Whether to discard outbound DTMF tones.
*/
- (instancetype) initWithLocalMedia:(FMLiveSwitchLocalMedia*)localMedia remoteMedia:(FMLiveSwitchRemoteMedia*)remoteMedia discardOutboundDtmfTones:(bool)discardOutboundDtmfTones;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param localTrack The local track.
*/
- (instancetype) initWithLocalTrack:(FMLiveSwitchAudioTrack*)localTrack;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param localTrack The local track.
    @param discardOutboundDtmfTones Whether to discard outbound DTMF tones.
*/
- (instancetype) initWithLocalTrack:(FMLiveSwitchAudioTrack*)localTrack discardOutboundDtmfTones:(bool)discardOutboundDtmfTones;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param localTrack The local track.
    @param remoteTrack The remote track.
*/
- (instancetype) initWithLocalTrack:(FMLiveSwitchAudioTrack*)localTrack remoteTrack:(FMLiveSwitchAudioTrack*)remoteTrack;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param localTrack The local track.
    @param remoteTrack The remote track.
    @param discardOutboundDtmfTones Whether to discard outbound DTMF tones.
*/
- (instancetype) initWithLocalTrack:(FMLiveSwitchAudioTrack*)localTrack remoteTrack:(FMLiveSwitchAudioTrack*)remoteTrack discardOutboundDtmfTones:(bool)discardOutboundDtmfTones;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param output The output.
*/
- (instancetype) initWithOutput:(NSObject<FMLiveSwitchIAudioInput>*)output;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param output The output.
    @param discardOutboundDtmfTones Whether to discard outbound DTMF tones.
*/
- (instancetype) initWithOutput:(NSObject<FMLiveSwitchIAudioInput>*)output discardOutboundDtmfTones:(bool)discardOutboundDtmfTones;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param outputs The outputs.
*/
- (instancetype) initWithOutputs:(NSMutableArray*)outputs;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param outputs The outputs.
    @param discardOutboundDtmfTones Whether to discard outbound DTMF tones.
*/
- (instancetype) initWithOutputs:(NSMutableArray*)outputs discardOutboundDtmfTones:(bool)discardOutboundDtmfTones;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param remoteMedia The remote media.
*/
- (instancetype) initWithRemoteMedia:(FMLiveSwitchRemoteMedia*)remoteMedia;
/**

    Initializes a new instance of the FMLiveSwitchAudioStream class.

    @param remoteMedia The remote media.
    @param discardOutboundDtmfTones Whether to discard outbound DTMF tones.
*/
- (instancetype) initWithRemoteMedia:(FMLiveSwitchRemoteMedia*)remoteMedia discardOutboundDtmfTones:(bool)discardOutboundDtmfTones;
/**

    Creates an input array from an input list.

    @param inputList The input list.
*/
- (NSMutableArray*) inputArrayFromListWithInputList:(NSMutableArray<NSObject<FMLiveSwitchIAudioInput>*>*)inputList;
/**

    Gets the input configuration.

*/
- (FMLiveSwitchAudioConfig*) inputConfig;
/**

    Inserts a DTMF tone.

    @param dtmfTone The DTMF tone.
*/
- (bool) insertDtmfTone:(FMLiveSwitchDtmfTone*)dtmfTone;
/**

    Inserts DTMF tones.

    @param dtmfTones The DTMF tones.
*/
- (bool) insertDtmfTones:(NSMutableArray*)dtmfTones;
/**

    Gets whether L16 is disabled.

*/
- (bool) l16Disabled;
/**

    Gets whether Opus is disabled.

*/
- (bool) opusDisabled;
/**

    Creates an output array from an output list.

    @param outputList The output list.
*/
- (NSMutableArray*) outputArrayFromListWithOutputList:(NSMutableArray<NSObject<FMLiveSwitchIAudioOutput>*>*)outputList;
/**

    Gets the output configuration.

*/
- (FMLiveSwitchAudioConfig*) outputConfig;
/**

    Gets whether PCMA is disabled.

*/
- (bool) pcmaDisabled;
/**

    Gets whether PCMU is disabled.

*/
- (bool) pcmuDisabled;
/**

    Processes an SDP content attribute.

    @param sdpContentAttribute The SDP content attribute.
    @param isLocalDescription Whether the SDP content attribute comes from a local description.
*/
- (void) processSdpContentAttribute:(FMLiveSwitchSdpContentAttribute*)sdpContentAttribute isLocalDescription:(bool)isLocalDescription;
/**

    Removes a handler that is raised when outbound DTMF tones are discarded
    due to policy restrictions or lack of support.

*/
- (void) removeOnDiscardOutboundDtmfTones:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Removes a handler that is raised when a DTMF packet is received.

*/
- (void) removeOnReceiveDtmfTone:(FMLiveSwitchAction1<FMLiveSwitchDtmfTone*>*)value;
/**

    Removes a handler that is raised when the received DTMF tone changes.

*/
- (void) removeOnReceiveDtmfToneChange:(FMLiveSwitchAction1<FMLiveSwitchDtmfTone*>*)value;
/**

    Removes a handler that is raised when a DTMF packet is sent.

*/
- (void) removeOnSendDtmfTone:(FMLiveSwitchAction1<FMLiveSwitchDtmfTone*>*)value;
/**

    Removes a handler that is raised when the sent DTMF tone changes.

*/
- (void) removeOnSendDtmfToneChange:(FMLiveSwitchAction1<FMLiveSwitchDtmfTone*>*)value;
/**

    Sets whether outbound DTMF tones should be discarded.

*/
- (void) setDiscardOutboundDtmfTones:(bool)value;
/**

    Sets the DTMF mode.

*/
- (void) setDtmfMode:(FMLiveSwitchDtmfMode)value;
/**

    Sets whether G.722 is disabled.

*/
- (void) setG722Disabled:(bool)value;
/**

    Sets a value indicating the gain
    (input amplification) of this sink.
    Any value greater than or equal to 0.0
    is acceptable.
    Currently, this value is not used since audio streams require
    packetized input/output formats.

*/
- (void) setGain:(double)value;
/**

    Sets whether an input source is muted.

    @param input The input.
    @param value The value.
*/
- (void) setInputSourceMutedWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input value:(bool)value;
/**

    Sets whether L16 is disabled.

*/
- (void) setL16Disabled:(bool)value;
/**

    Sets whether Opus is disabled.

*/
- (void) setOpusDisabled:(bool)value;
/**

    Sets whether an output sink is muted.

    @param output The output.
    @param value The value.
*/
- (void) setOutputSinkMutedWithOutput:(NSObject<FMLiveSwitchIAudioInput>*)output value:(bool)value;
/**

    Sets whether PCMA is disabled.

*/
- (void) setPcmaDisabled:(bool)value;
/**

    Sets whether PCMU is disabled.

*/
- (void) setPcmuDisabled:(bool)value;
/**

    Sets a value indicating the volume
    (output resistance) of this source.
    Valid value range is 0.0 to 1.0, inclusive.
    Currently, this value is not used since audio streams require
    packetized input/output formats.

*/
- (void) setVolume:(double)value;
/**

    Gets a value indicating the volume
    (output resistance) of this source.
    Valid value range is 0.0 to 1.0, inclusive.
    Currently, this value is not used since audio streams require
    packetized input/output formats.

*/
- (double) volume;

@end

@interface FMLiveSwitchCcmTmmbnPolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchCcmTmmbnPolicy)value;

@end

@interface FMLiveSwitchCcmTmmbrPolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchCcmTmmbrPolicy)value;

@end

/**

    Maintains a ledger of connection state transitions with timestamps.
    Tracks the history of state changes for a specific connection.

*/
@interface FMLiveSwitchConnectionStateLedger : NSObject

/**

    Initializes a new instance of the ConnectionStateLedger class.

    @param connectionId The unique identifier for the connection to track.
    @param client Indicates whether this ledger is for the client rather than for a server.
    @param connectionType Indicates the connection type.
    @param clientId The unique identifier for the client.
    @param mediaProtocol The mediaprotocol of this connection.
*/
+ (FMLiveSwitchConnectionStateLedger*) connectionStateLedgerWithConnectionId:(NSString*)connectionId client:(bool)client connectionType:(NSString*)connectionType clientId:(NSString*)clientId mediaProtocol:(FMLiveSwitchMediaProtocol)mediaProtocol;
/**

    Provides a string representation of all recorded state transitions.

    @return A formatted string showing all state transitions with timestamps and durations.
*/
- (NSString*) description;
/**

    Initializes a new instance of the ConnectionStateLedger class.

    @param connectionId The unique identifier for the connection to track.
    @param client Indicates whether this ledger is for the client rather than for a server.
    @param connectionType Indicates the connection type.
    @param clientId The unique identifier for the client.
    @param mediaProtocol The mediaprotocol of this connection.
*/
- (instancetype) initWithConnectionId:(NSString*)connectionId client:(bool)client connectionType:(NSString*)connectionType clientId:(NSString*)clientId mediaProtocol:(FMLiveSwitchMediaProtocol)mediaProtocol;
/**

    Records an offer.

*/
- (void) recordAnswerWithState:(FMLiveSwitchConnectionState)state sent:(bool)sent renegotiation:(bool)renegotiation;
/**

    Records a new connection state transition with current timestamp.

    @param state The new connection state to record.
*/
- (void) recordConnectionState:(FMLiveSwitchConnectionState)state;
/**

    Records an error.

*/
- (void) recordErrorWithState:(FMLiveSwitchConnectionState)state error:(NSString*)error;
/**

    Records a media intent with current timestamp.

*/
- (void) recordMediaIntentWithState:(FMLiveSwitchConnectionState)state sent:(bool)sent;
/**

    Records an offer.

*/
- (void) recordOfferWithState:(FMLiveSwitchConnectionState)state sent:(bool)sent renegotiation:(bool)renegotiation;

@end

/**

    RTCP frame entry.

*/
@interface FMLiveSwitchControlFrameEntry : NSObject

+ (FMLiveSwitchControlFrameEntry*) controlFrameEntry;
- (instancetype) init;
/**

    Sets the synchronization source.

*/
- (void) setSynchronizationSource:(long long)value;
/**

    Gets the synchronization source.

*/
- (long long) synchronizationSource;

@end

/**

    A config for Diagnostics

*/
@interface FMLiveSwitchDiagnosticsConfigDiagnosticsConfig : NSObject

/**

    Constructor.

*/
+ (FMLiveSwitchDiagnosticsConfigDiagnosticsConfig*) diagnosticsConfig;
/**

    Constructor.

*/
- (instancetype) init;
/**

    Gets the Rtp Config.

*/
- (FMLiveSwitchDiagnosticsConfigRtpConfig*) rtp;

@end

/**

    A config for Receiver

*/
@interface FMLiveSwitchDiagnosticsConfigJitterBufferConfig : NSObject

/**

    Gets if Jitter Buffer Diagnostics are enabled.

*/
- (bool) enabled;
/**

    Constructor.

*/
- (instancetype) init;
/**

    Gets the interval in ms for Jitter Buffer Diagnostics.

*/
- (int) intervalMs;
/**

    Constructor.

*/
+ (FMLiveSwitchDiagnosticsConfigJitterBufferConfig*) jitterBufferConfig;
/**

    Sets if Jitter Buffer Diagnostics are enabled.

*/
- (void) setEnabled:(bool)value;
/**

    Sets the interval in ms for Jitter Buffer Diagnostics.

*/
- (void) setIntervalMs:(int)value;

@end

/**

    A config for Receiver

*/
@interface FMLiveSwitchDiagnosticsConfigReceiverConfig : NSObject

/**

    Constructor.

*/
- (instancetype) init;
/**

    Gets the JitterBuffer config.

*/
- (FMLiveSwitchDiagnosticsConfigJitterBufferConfig*) jitterBuffer;
/**

    Constructor.

*/
+ (FMLiveSwitchDiagnosticsConfigReceiverConfig*) receiverConfig;

@end

/**

    A config for Rtp

*/
@interface FMLiveSwitchDiagnosticsConfigRtpConfig : NSObject

/**

    Constructor.

*/
- (instancetype) init;
/**

    Gets the Receiver config.

*/
- (FMLiveSwitchDiagnosticsConfigReceiverConfig*) receiver;
/**

    Constructor.

*/
+ (FMLiveSwitchDiagnosticsConfigRtpConfig*) rtpConfig;

@end

@interface FMLiveSwitchSchedulerTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchSchedulerType)value;

@end

/**

    A PCM Uncompressed (L16) decoder.

*/
@interface FMLiveSwitchL16Decoder : FMLiveSwitchAudioDecoder

/**

    Initializes a new instance of the FMLiveSwitchL16Decoder class.

*/
+ (FMLiveSwitchL16Decoder*) decoder;
/**

    Initializes a new instance of the FMLiveSwitchL16Decoder class.

    @param config The configuration.
*/
+ (FMLiveSwitchL16Decoder*) decoderWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchL16Decoder class.

    @param input The input.
*/
+ (FMLiveSwitchL16Decoder*) decoderWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchAudioFrame*)frame inputBuffer:(FMLiveSwitchAudioBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchL16Decoder class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchL16Decoder class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchL16Decoder class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;

@end

/**

    A basic audio depacketizer.

*/
@interface FMLiveSwitchBasicAudioDepacketizer : FMLiveSwitchAudioDepacketizer

/**

    Initializes a new instance of the FMLiveSwitchBasicAudioDepacketizer class.

    @param format The format.
*/
+ (FMLiveSwitchBasicAudioDepacketizer*) basicAudioDepacketizerWithFormat:(FMLiveSwitchAudioFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchBasicAudioDepacketizer class.

    @param input The input.
*/
+ (FMLiveSwitchBasicAudioDepacketizer*) basicAudioDepacketizerWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchBasicAudioDepacketizer class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
+ (FMLiveSwitchBasicAudioDepacketizer*) basicAudioDepacketizerWithInputFormat:(FMLiveSwitchAudioFormat*)inputFormat outputFormat:(FMLiveSwitchAudioFormat*)outputFormat;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchAudioFrame*)frame inputBuffer:(FMLiveSwitchAudioBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchBasicAudioDepacketizer class.

    @param format The format.
*/
- (instancetype) initWithFormat:(FMLiveSwitchAudioFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchBasicAudioDepacketizer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchBasicAudioDepacketizer class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
- (instancetype) initWithInputFormat:(FMLiveSwitchAudioFormat*)inputFormat outputFormat:(FMLiveSwitchAudioFormat*)outputFormat;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;

@end

/**

    A L16 depacketizer.

*/
@interface FMLiveSwitchL16Depacketizer : FMLiveSwitchBasicAudioDepacketizer

/**

    Initializes a new instance of the FMLiveSwitchL16Depacketizer class.

*/
+ (FMLiveSwitchL16Depacketizer*) depacketizer;
/**

    Initializes a new instance of the FMLiveSwitchL16Depacketizer class.

    @param config The configuration.
*/
+ (FMLiveSwitchL16Depacketizer*) depacketizerWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchL16Depacketizer class.

    @param input The input.
*/
+ (FMLiveSwitchL16Depacketizer*) depacketizerWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchL16Depacketizer class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchL16Depacketizer class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchL16Depacketizer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;

@end

/**

    A PCM Uncompressed (L16) encoder.

*/
@interface FMLiveSwitchL16Encoder : FMLiveSwitchAudioEncoder

/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchAudioFrame*)frame inputBuffer:(FMLiveSwitchAudioBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchL16Encoder class.

*/
+ (FMLiveSwitchL16Encoder*) encoder;
/**

    Initializes a new instance of the FMLiveSwitchL16Encoder class.

    @param config The configuration.
*/
+ (FMLiveSwitchL16Encoder*) encoderWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchL16Encoder class.

    @param input The input.
*/
+ (FMLiveSwitchL16Encoder*) encoderWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchL16Encoder class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchL16Encoder class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchL16Encoder class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;

@end

/**

    Linear PCM 16-bit audio (PCM Uncompressed).

*/
@interface FMLiveSwitchL16Format : FMLiveSwitchAudioFormat

/**

    Gets the default clock rate (2).

*/
+ (int) defaultChannelCount;
/**

    Gets the default clock rate (48000).

*/
+ (int) defaultClockRate;
/**

    Gets the default configuration (48000/2).

*/
+ (FMLiveSwitchAudioConfig*) defaultConfig;
/**

    Initializes a new instance of the FMLiveSwitchL16Format class.

*/
+ (FMLiveSwitchL16Format*) format;
/**

    Initializes a new instance of the FMLiveSwitchL16Format class.

    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
+ (FMLiveSwitchL16Format*) formatWithClockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Initializes a new instance of the FMLiveSwitchL16Format class.

    @param config The configuration.
*/
+ (FMLiveSwitchL16Format*) formatWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchL16Format class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchL16Format class.

    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
- (instancetype) initWithClockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Initializes a new instance of the FMLiveSwitchL16Format class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Gets the maximum bitrate supported by this format, in kbps.

*/
- (int) maxBitrate;
/**

    Gets the minimum bitrate supported by this format, in kbps.

*/
- (int) minBitrate;

@end

/**

    A basic audio packetizer.

*/
@interface FMLiveSwitchBasicAudioPacketizer : FMLiveSwitchAudioPacketizer

/**

    Initializes a new instance of the FMLiveSwitchBasicAudioPacketizer class.

    @param format The format.
*/
+ (FMLiveSwitchBasicAudioPacketizer*) basicAudioPacketizerWithFormat:(FMLiveSwitchAudioFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchBasicAudioPacketizer class.

    @param input The input.
*/
+ (FMLiveSwitchBasicAudioPacketizer*) basicAudioPacketizerWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchBasicAudioPacketizer class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
+ (FMLiveSwitchBasicAudioPacketizer*) basicAudioPacketizerWithInputFormat:(FMLiveSwitchAudioFormat*)inputFormat outputFormat:(FMLiveSwitchAudioFormat*)outputFormat;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchAudioFrame*)frame inputBuffer:(FMLiveSwitchAudioBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchBasicAudioPacketizer class.

    @param format The format.
*/
- (instancetype) initWithFormat:(FMLiveSwitchAudioFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchBasicAudioPacketizer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchBasicAudioPacketizer class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
- (instancetype) initWithInputFormat:(FMLiveSwitchAudioFormat*)inputFormat outputFormat:(FMLiveSwitchAudioFormat*)outputFormat;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;

@end

/**

    A L16 packetizer.

*/
@interface FMLiveSwitchL16Packetizer : FMLiveSwitchBasicAudioPacketizer

/**

    Initializes a new instance of the FMLiveSwitchL16Packetizer class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchL16Packetizer class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchL16Packetizer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchL16Packetizer class.

*/
+ (FMLiveSwitchL16Packetizer*) packetizer;
/**

    Initializes a new instance of the FMLiveSwitchL16Packetizer class.

    @param config The configuration.
*/
+ (FMLiveSwitchL16Packetizer*) packetizerWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchL16Packetizer class.

    @param input The input.
*/
+ (FMLiveSwitchL16Packetizer*) packetizerWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;

@end

/**

    A Matroska element.

*/
@interface FMLiveSwitchMatroskaElement : NSObject

/**

    Compares two byte arrays for equality.

    @param bytes1 The first byte array.
    @param bytes2 The second byte array.
*/
+ (bool) compareWithBytes1:(NSMutableData*)bytes1 bytes2:(NSMutableData*)bytes2;
+ (FMLiveSwitchMatroskaElement*) element;
/**

    Serializes to a byte array.

*/
- (NSMutableData*) getBytes;
/**

    Gets the inner bytes.

*/
- (NSMutableData*) getInnerBytes;
/**

    Gets the EBML ID.

*/
- (NSMutableData*) id;
- (instancetype) init;
/**

    Gets the total length of the element (including ID/size field), set after calling FMLiveSwitchMatroskaElement#getBytes.

*/
- (int) length;
/**

    Reads a boolean element from the stream.

    @param value The value.
*/
+ (bool) readBool:(NSMutableData*)value;
/**

    Reads a date string element from the stream.

    @param value The value.
*/
+ (NSDate*) readDate:(NSMutableData*)value;
/**

    Reads a double element from the stream.

    @param value The value.
*/
+ (double) readDouble:(NSMutableData*)value;
/**

    Reads a float element from the stream.

    @param value The value.
*/
+ (float) readFloat:(NSMutableData*)value;
/**

    Reads a GUID element from the stream.

    @param value The value.
*/
+ (FMLiveSwitchGuid*) readGuid:(NSMutableData*)value;
/**

    Reads a binary ID from the stream.

    @param bytes The byte array.
    @param offset The offset into the byte array.
    @param offsetPlus The offset plus the amount read.
*/
+ (NSMutableData*) readIdWithBytes:(NSMutableData*)bytes offset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Reads a signed integer element from the byte array.

    @param value The value.
*/
+ (long long) readSignedInteger:(NSMutableData*)value;
/**

    Reads an ASCII string element from the stream.

    @param value The value.
*/
+ (NSString*) readString:(NSMutableData*)value;
/**

    Reads an unsigned integer element from the byte array.

    @param value The value.
*/
+ (long long) readUnsignedInteger:(NSMutableData*)value;
/**

    Reads a UTF-8 string element from the stream.

    @param value The value.
*/
+ (NSString*) readUtf8:(NSMutableData*)value;
/**

    Reads a binary value from the stream.

    @param bytes The byte array.
    @param offset The offset into the byte array.
    @param offsetPlus The offset plus the amount read.
*/
+ (NSMutableData*) readValueWithBytes:(NSMutableData*)bytes offset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Reads a variable integer ("vint") from the byte array.

    @param bytes The byte array.
    @param offset The offset into the byte array.
    @param offsetPlus The offset plus the amount read.
*/
+ (long long) readVariableIntegerWithBytes:(NSMutableData*)bytes offset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Serializes a variable integer.

    @param value The value.
*/
+ (NSMutableData*) serializeVariableInteger:(long long)value;
/**

    Serializes a variable integer using a fixed length.

    @param value The value.
    @param length The length to use.
*/
+ (NSMutableData*) serializeVariableInteger:(long long)value length:(int)length;
/**

    Sets the length of the size field, in bytes.
    Defaults to zero (variable size).

*/
- (void) setSizeLength:(int)value;
/**

    Sets whether to include default values
    when serializing.

*/
- (void) setWriteDefaultValues:(bool)value;
/**

    Gets the size of the element (excluding ID/size field), set after calling FMLiveSwitchMatroskaElement#getBytes.

*/
- (int) size;
/**

    Gets the length of the size field, in bytes.
    Defaults to zero (variable size).

*/
- (int) sizeLength;
/**

    Writes a binary element to the stream.

    @param value The value to write.
    @param idValue The ID of the value.
    @param stream The stream to write.
*/
- (void) write:(NSMutableData*)value id:(NSMutableData*)idValue stream:(FMLiveSwitchByteOutputStream*)stream;
/**

    Writes a boolean element to the stream.

    @param value The value to write.
    @param idValue The ID of the value.
    @param stream The stream to write.
*/
- (void) writeBool:(bool)value id:(NSMutableData*)idValue stream:(FMLiveSwitchByteOutputStream*)stream;
/**

    Writes a date element to the stream.

    @param value The value to write.
    @param idValue The ID of the value.
    @param stream The stream to write.
*/
- (void) writeDate:(NSDate*)value id:(NSMutableData*)idValue stream:(FMLiveSwitchByteOutputStream*)stream;
/**

    Gets whether to include default values
    when serializing.

*/
- (bool) writeDefaultValues;
/**

    Writes a double element to the stream.

    @param value The value to write.
    @param idValue The ID of the value.
    @param stream The stream to write.
*/
- (void) writeDouble:(double)value id:(NSMutableData*)idValue stream:(FMLiveSwitchByteOutputStream*)stream;
/**

    Writes a float element to the stream.

    @param value The value to write.
    @param idValue The ID of the value.
    @param stream The stream to write.
*/
- (void) writeFloat:(float)value id:(NSMutableData*)idValue stream:(FMLiveSwitchByteOutputStream*)stream;
/**

    Writes a GUID element to the stream.

    @param value The value to write.
    @param idValue The ID of the value.
    @param stream The stream to write.
*/
- (void) writeGuid:(FMLiveSwitchGuid*)value id:(NSMutableData*)idValue stream:(FMLiveSwitchByteOutputStream*)stream;
/**

    Writes an signed integer element to the stream.

    @param value The value to write.
    @param idValue The ID of the value.
    @param stream The stream to write.
*/
- (void) writeSignedInteger:(long long)value id:(NSMutableData*)idValue stream:(FMLiveSwitchByteOutputStream*)stream;
/**

    Writes an ASCII string element to the stream.

    @param value The value to write.
    @param idValue The ID of the value.
    @param stream The stream to write.
*/
- (void) writeString:(NSString*)value id:(NSMutableData*)idValue stream:(FMLiveSwitchByteOutputStream*)stream;
/**

    Writes an unsigned integer element to the stream.

    @param value The value to write.
    @param idValue The ID of the value.
    @param stream The stream to write.
*/
- (void) writeUnsignedInteger:(long long)value id:(NSMutableData*)idValue stream:(FMLiveSwitchByteOutputStream*)stream;
/**

    Writes a UTF-8 string element to the stream.

    @param value The value to write.
    @param idValue The ID of the value.
    @param stream The stream to write.
*/
- (void) writeUtf8:(NSString*)value id:(NSMutableData*)idValue stream:(FMLiveSwitchByteOutputStream*)stream;
/**

    Writes a variable integer ("vint") to the stream.

    @param value The value to write.
    @param stream The stream to write.
*/
- (void) writeVariableInteger:(long long)value stream:(FMLiveSwitchByteOutputStream*)stream;
/**

    Writes a variable integer ("vint") to the stream using a fixed length.

    @param value The value to write.
    @param stream The stream to write.
    @param length The length to use.
*/
- (void) writeVariableInteger:(long long)value stream:(FMLiveSwitchByteOutputStream*)stream length:(int)length;

@end

/**

    A Matroska EBML Block Additions element.

*/
@interface FMLiveSwitchMatroskaBlockAdditions : FMLiveSwitchMatroskaElement

+ (FMLiveSwitchMatroskaBlockAdditions*) blockAdditions;
/**

    Gets the EBML ID.

*/
+ (NSMutableData*) ebmlId;
/**

    Gets the inner bytes.

*/
- (NSMutableData*) getInnerBytes;
/**

    Gets the EBML ID.

*/
- (NSMutableData*) id;
- (instancetype) init;

@end

@interface FMLiveSwitchMediaProtocolWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchMediaProtocol)value;

@end

/**

    Represents a single connection state transition record with timing information.

*/
@interface FMLiveSwitchConnectionStateRecord : NSObject

/**

    Gets the value indicating that an answer was processed.

*/
- (bool) answer;
+ (FMLiveSwitchConnectionStateRecord*) connectionStateRecord;
/**

    Gets the string representation of the connection state.

*/
- (NSString*) connectionStateString;
/**

    Gets the UTC datetime when the state transition occurred.

*/
- (NSDate*) dateTime;
/**

    Gets the error.

*/
- (NSString*) error;
- (instancetype) init;
/**

    Gets the value indicating that a media intent was processed.

*/
- (bool) mediaIntent;
/**

    Gets the value indicating that an offer was processed.

*/
- (bool) offer;
/**

    Gets the value indicating whether a message was sent or received.

*/
- (bool) sent;
/**

    Sets the value indicating that an answer was processed.

*/
- (void) setAnswer:(bool)value;
/**

    Sets the UTC datetime when the state transition occurred.

*/
- (void) setDateTime:(NSDate*)value;
/**

    Sets the error.

*/
- (void) setError:(NSString*)value;
/**

    Sets the value indicating that a media intent was processed.

*/
- (void) setMediaIntent:(bool)value;
/**

    Sets the value indicating that an offer was processed.

*/
- (void) setOffer:(bool)value;
/**

    Sets the value indicating whether a message was sent or received.

*/
- (void) setSent:(bool)value;
/**

    Sets the connection state.

*/
- (void) setState:(FMLiveSwitchConnectionState)value;
/**

    Sets the millisecond timestamp when the state transition occurred.

*/
- (void) setTimeStamp:(long long)value;
/**

    Gets the connection state.

*/
- (FMLiveSwitchConnectionState) state;
/**

    Gets the millisecond timestamp when the state transition occurred.

*/
- (long long) timeStamp;

@end

@interface FMLiveSwitchVideoRetentionPolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchVideoRetentionPolicy)value;

@end

/**

    A sample for the duration timer.

*/
@interface FMLiveSwitchDiagnosticsDurationSample : NSObject

/**

    Gets the stopwatch value in milliseconds when the sample started.

*/
- (long long) beginMillis;
/**

    Creates a new instance of the FMLiveSwitchDiagnosticsDurationSample class.

    @param beginMillis The stopwatch value in milliseconds when the sample started.
*/
+ (FMLiveSwitchDiagnosticsDurationSample*) durationSampleWithBeginMillis:(long long)beginMillis;
/**

    Gets the stopwatch value in milliseconds when the sample stopped.

*/
- (long long) endMillis;
/**

    Ends the sample.

    @param endMillis The stopwatch value in milliseconds when the sample stopped.
*/
- (void) endWithEndMillis:(long long)endMillis;
/**

    Creates a new instance of the FMLiveSwitchDiagnosticsDurationSample class.

    @param beginMillis The stopwatch value in milliseconds when the sample started.
*/
- (instancetype) initWithBeginMillis:(long long)beginMillis;

@end

@interface FMLiveSwitchDtmfModeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchDtmfMode)value;

@end

/**

    A video pipe.

*/
@interface FMLiveSwitchVideoPipe : FMLiveSwitchMediaPipe<NSObject<FMLiveSwitchIVideoOutput>*,FMLiveSwitchIVideoOutputCollection*,NSObject<FMLiveSwitchIVideoInput>*,FMLiveSwitchIVideoInputCollection*,FMLiveSwitchVideoPipe*,FMLiveSwitchVideoFrame*,FMLiveSwitchVideoBuffer*,FMLiveSwitchVideoBufferCollection*,FMLiveSwitchVideoFormat*><FMLiveSwitchIVideoInput, FMLiveSwitchIMediaInput, FMLiveSwitchIInput, FMLiveSwitchIVideoOutput, FMLiveSwitchIMediaOutput, FMLiveSwitchIOutput, FMLiveSwitchIVideoElement, FMLiveSwitchIMediaElement, FMLiveSwitchIElement>

/**

    Adds a handler that is raised when a frame is about to be processed with
    a size that does not match the prior frame.

*/
- (void) addOnProcessSizeChange:(FMLiveSwitchAction1<FMLiveSwitchSize*>*)value;
/**

    Adds a handler that is raised when a frame is about to be processed with
    a size that does not match the prior frame.

*/
- (void (^)(void(^)(FMLiveSwitchSize*))) addOnProcessSizeChangeWithBlock;
/**

    Adds a handler that is raised when a frame is about to be processed with
    a size that does not match the prior frame.

*/
- (void) addOnProcessSizeChangeWithBlock:(void(^)(FMLiveSwitchSize*))valueBlock;
/**

    Adds a handler that is raised when a frame is about to be raised with
    a size that does not match the prior frame.

*/
- (void) addOnRaiseSizeChange:(FMLiveSwitchAction1<FMLiveSwitchSize*>*)value;
/**

    Adds a handler that is raised when a frame is about to be raised with
    a size that does not match the prior frame.

*/
- (void (^)(void(^)(FMLiveSwitchSize*))) addOnRaiseSizeChangeWithBlock;
/**

    Adds a handler that is raised when a frame is about to be raised with
    a size that does not match the prior frame.

*/
- (void) addOnRaiseSizeChangeWithBlock:(void(^)(FMLiveSwitchSize*))valueBlock;
/**

    Gets the content descriptor.

*/
- (NSString*) content;
/**

    Creates a frame.

    @param buffer The buffer.
*/
- (FMLiveSwitchVideoFrame*) createFrameWithBuffer:(FMLiveSwitchVideoBuffer*)buffer;
/**

    Creates an input collection.

    @param output The output.
*/
- (FMLiveSwitchIVideoInputCollection*) createInputCollectionWithOutput:(NSObject<FMLiveSwitchIVideoOutput>*)output;
/**

    Creates an output collection.

    @param input The input.
*/
- (FMLiveSwitchIVideoOutputCollection*) createOutputCollectionWithInput:(NSObject<FMLiveSwitchIVideoInput>*)input;
/**

    Pre-processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doPreProcessFrame:(FMLiveSwitchVideoFrame*)frame inputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchVideoPipe class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
- (instancetype) initWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat outputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Initializes a new instance of the FMLiveSwitchVideoPipe class.

    @param outputFormat The output format.
*/
- (instancetype) initWithOutputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Gets the maximum allowed input encoding.

*/
- (FMLiveSwitchEncodingInfo*) maxInputEncoding;
/**

    Gets the maximum allowed input frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxInputFrameRate;
/**

    Gets the maximum allowed input height.
    A value of -1 indicates unset (no minimum).

*/
- (int) maxInputHeight;
/**

    Gets the maximum allowed input scale.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxInputScale;
/**

    Gets the maximum allowed input size.
    A value of null indicates unset (no maximum).

*/
- (FMLiveSwitchSize*) maxInputSize;
/**

    Gets the maximum allowed input width.
    A value of -1 indicates unset (no minimum).

*/
- (int) maxInputWidth;
/**

    Gets the maximum allowed output encoding.

*/
- (FMLiveSwitchEncodingInfo*) maxOutputEncoding;
/**

    Gets the maximum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxOutputFrameRate;
/**

    Gets the maximum allowed output height.
    A value of -1 indicates unset (no minimum).

*/
- (int) maxOutputHeight;
/**

    Gets the maximum allowed output scale.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxOutputScale;
/**

    Gets the maximum allowed output size.
    A value of null indicates unset (no maximum).

*/
- (FMLiveSwitchSize*) maxOutputSize;
/**

    Gets the maximum allowed output width.
    A value of -1 indicates unset (no minimum).

*/
- (int) maxOutputWidth;
/**

    Gets the minimum allowed input encoding.

*/
- (FMLiveSwitchEncodingInfo*) minInputEncoding;
/**

    Gets the minimum allowed input frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (double) minInputFrameRate;
/**

    Gets the minimum allowed input height.
    A value of -1 indicates unset (no minimum).

*/
- (int) minInputHeight;
/**

    Gets the minimum allowed input scale.
    A value of -1 indicates unset (no minimum).

*/
- (double) minInputScale;
/**

    Gets the minimum allowed input size.
    A value of null indicates unset (no minimum).

*/
- (FMLiveSwitchSize*) minInputSize;
/**

    Gets the minimum allowed input width.
    A value of -1 indicates unset (no minimum).

*/
- (int) minInputWidth;
/**

    Gets the minimum allowed output encoding.

*/
- (FMLiveSwitchEncodingInfo*) minOutputEncoding;
/**

    Gets the minimum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (double) minOutputFrameRate;
/**

    Gets the minimum allowed output height.
    A value of -1 indicates unset (no minimum).

*/
- (int) minOutputHeight;
/**

    Gets the minimum allowed output scale.
    A value of -1 indicates unset (no minimum).

*/
- (double) minOutputScale;
/**

    Gets the minimum allowed output size.
    A value of null indicates unset (no minimum).

*/
- (FMLiveSwitchSize*) minOutputSize;
/**

    Gets the minimum allowed output width.
    A value of -1 indicates unset (no minimum).

*/
- (int) minOutputWidth;
/**

    Determines whether an output can process a frame from this pipe.

    @param output The output.
*/
- (bool) outputCanProcessFrameWithOutput:(NSObject<FMLiveSwitchIVideoInput>*)output;
/**

    Gets whether the pipe frame-rate is over-constrained.
    A pipe frame-rate is over-constrained if the input
    frame-rate or output frame-rate is over-constrained.

*/
- (bool) overConstrainedFrameRate;
/**

    Gets whether the pipe height is over-constrained.
    A pipe height is over-constrained if the input
    height or output height is over-constrained.

*/
- (bool) overConstrainedHeight;
/**

    Gets whether the input is over-contrained.
    An input is over-constrained if it's
    input bitrate, input scale, input frame-rate,
    input size is over-contrained.

*/
- (bool) overConstrainedInput;
/**

    Gets whether the minimum allowed input frame-rate exceeds the maximum allowed input frame-rate.

*/
- (bool) overConstrainedInputFrameRate;
/**

    Gets whether the minimum allowed input height exceeds the maximum allowed input height.

*/
- (bool) overConstrainedInputHeight;
/**

    Gets whether the minimum allowed input scale exceeds the maximum allowed input scale.

*/
- (bool) overConstrainedInputScale;
/**

    Gets whether the minimum allowed input size exceeds the maximum allowed input size.

*/
- (bool) overConstrainedInputSize;
/**

    Gets whether the minimum allowed input width exceeds the maximum allowed input width.

*/
- (bool) overConstrainedInputWidth;
/**

    Gets whether the output is over-contrained.
    An output is over-constrained if it's
    output bitrate, output scale, output frame-rate,
    output size is over-contrained.

*/
- (bool) overConstrainedOutput;
/**

    Gets whether the minimum allowed output frame-rate exceeds the maximum allowed output frame-rate.

*/
- (bool) overConstrainedOutputFrameRate;
/**

    Gets whether the minimum allowed output height exceeds the maximum allowed output height.

*/
- (bool) overConstrainedOutputHeight;
/**

    Gets whether the minimum allowed output scale exceeds the maximum allowed output scale.

*/
- (bool) overConstrainedOutputScale;
/**

    Gets whether the minimum allowed output size exceeds the maximum allowed output size.

*/
- (bool) overConstrainedOutputSize;
/**

    Gets whether the minimum allowed output width exceeds the maximum allowed output width.

*/
- (bool) overConstrainedOutputWidth;
/**

    Gets whether the pipe scale is over-constrained.
    A pipe scale is over-constrained if the input
    scale or output scale is over-constrained.

*/
- (bool) overConstrainedScale;
/**

    Gets whether the pipe size is over-constrained.
    A pipe size is over-constrained if the input
    size or output size is over-constrained.

*/
- (bool) overConstrainedSize;
/**

    Gets whether the pipe width is over-constrained.
    A pipe width is over-constrained if the input
    width or output width is over-constrained.

*/
- (bool) overConstrainedWidth;
/**

    Raises a frame.

    @param frame The frame.
*/
- (void) raiseFrame:(FMLiveSwitchVideoFrame*)frame;
/**

    Removes a handler that is raised when a frame is about to be processed with
    a size that does not match the prior frame.

*/
- (void) removeOnProcessSizeChange:(FMLiveSwitchAction1<FMLiveSwitchSize*>*)value;
/**

    Removes a handler that is raised when a frame is about to be raised with
    a size that does not match the prior frame.

*/
- (void) removeOnRaiseSizeChange:(FMLiveSwitchAction1<FMLiveSwitchSize*>*)value;
/**

    Sets the maximum allowed input encoding.

*/
- (void) setMaxInputEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Sets the maximum allowed input frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (void) setMaxInputFrameRate:(double)value;
/**

    Sets the maximum allowed input scale.
    A value of -1 indicates unset (no maximum).

*/
- (void) setMaxInputScale:(double)value;
/**

    Sets the maximum allowed input size.
    A value of null indicates unset (no maximum).

*/
- (void) setMaxInputSize:(FMLiveSwitchSize*)value;
/**

    Sets the maximum allowed output encoding.

*/
- (void) setMaxOutputEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Sets the maximum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (void) setMaxOutputFrameRate:(double)value;
/**

    Sets the maximum allowed output scale.
    A value of -1 indicates unset (no maximum).

*/
- (void) setMaxOutputScale:(double)value;
/**

    Sets the maximum allowed output size.
    A value of null indicates unset (no maximum).

*/
- (void) setMaxOutputSize:(FMLiveSwitchSize*)value;
/**

    Sets the minimum allowed input encoding.

*/
- (void) setMinInputEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Sets the minimum allowed input frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (void) setMinInputFrameRate:(double)value;
/**

    Sets the minimum allowed input scale.
    A value of -1 indicates unset (no minimum).

*/
- (void) setMinInputScale:(double)value;
/**

    Sets the minimum allowed input size.
    A value of null indicates unset (no minimum).

*/
- (void) setMinInputSize:(FMLiveSwitchSize*)value;
/**

    Sets the minimum allowed output encoding.

*/
- (void) setMinOutputEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Sets the minimum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (void) setMinOutputFrameRate:(double)value;
/**

    Sets the minimum allowed output scale.
    A value of -1 indicates unset (no minimum).

*/
- (void) setMinOutputScale:(double)value;
/**

    Sets the minimum allowed output size.
    A value of null indicates unset (no minimum).

*/
- (void) setMinOutputSize:(FMLiveSwitchSize*)value;
/**

    Sets the target output encoding.

*/
- (void) setTargetOutputEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Sets the target output frame-rate, in fps.
    A value of -1 indicates unset (no target).

*/
- (void) setTargetOutputFrameRate:(double)value;
/**

    Sets the target output scale.
    A value of -1 indicates unset (no target).

*/
- (void) setTargetOutputScale:(double)value;
/**

    Sets the target output size.
    A value of null indicates unset (no target).

*/
- (void) setTargetOutputSize:(FMLiveSwitchSize*)value;
/**

    Sets the video type.

*/
- (void) setVideoType:(FMLiveSwitchVideoType)value;
/**

    Gets the target output encoding.

*/
- (FMLiveSwitchEncodingInfo*) targetOutputEncoding;
/**

    Gets the target output frame-rate, in fps.
    A value of -1 indicates unset (no target).

*/
- (double) targetOutputFrameRate;
/**

    Gets the target output height.
    A value of -1 indicates unset (no minimum).

*/
- (int) targetOutputHeight;
/**

    Gets the target output scale.
    A value of -1 indicates unset (no target).

*/
- (double) targetOutputScale;
/**

    Gets the target output size.
    A value of null indicates unset (no target).

*/
- (FMLiveSwitchSize*) targetOutputSize;
/**

    Gets the target output width.
    A value of -1 indicates unset (no minimum).

*/
- (int) targetOutputWidth;
/**

    Initializes a new instance of the FMLiveSwitchVideoPipe class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
+ (FMLiveSwitchVideoPipe*) videoPipeWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat outputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Initializes a new instance of the FMLiveSwitchVideoPipe class.

    @param outputFormat The output format.
*/
+ (FMLiveSwitchVideoPipe*) videoPipeWithOutputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Gets the video type.

*/
- (FMLiveSwitchVideoType) videoType;

@end

/**

    A video depacketizer.

*/
@interface FMLiveSwitchVideoDepacketizer<__covariant TFragment> : FMLiveSwitchVideoPipe

/**

    Gets whether this pipe is allowed to be timed.

*/
- (bool) allowDiagnosticTimer;
/**

    Gets a value indicating whether depacketizing should be delayed.

*/
- (bool) delayDepacketize;
/**

    Gets a flag indicating whether depacketizing should be bypassed for
    incoming media packets when a key frame request has been made via
    a PLI message. Default is true.

*/
- (bool) delayDepacketizeOnPendingKeyFrame;
/**

    Creates a fragment from a data buffer.

    @param header The RTP header for this packet.
    @param dataBuffer The data buffer.
    @return A fragment.
*/
- (TFragment) doCreateFragmentWithHeader:(FMLiveSwitchRtpPacketHeader*)header dataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchVideoFrame*)frame inputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Process track stats from an input.

    @param trackStats The track stats.
*/
- (void) doProcessTrackStatsFromInputWithTrackStats:(FMLiveSwitchMediaTrackStats*)trackStats;
/**

    Gets the number of corrupted frames.

*/
- (long long) framesCorrupted;
/**

    Gets the number of dropped frames.

*/
- (long long) framesDropped;
/**

    Gets the number of received frames.

*/
- (long long) framesReceived;
/**

    Initializes a new instance of the FMLiveSwitchVideoDepacketizer`1 class.

    @param format The format.
*/
- (instancetype) initWithFormat:(FMLiveSwitchVideoFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchVideoDepacketizer`1 class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchVideoDepacketizer`1 class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
- (instancetype) initWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat outputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Determines whether a gap between two fragments is allowed.

    @param fragment The fragment.
    @param lastFragment The last fragment.
    @return `true` if the gap is allowed; otherwise, `false`.
*/
- (bool) isGapAllowedWithFragment:(TFragment)fragment lastFragment:(TFragment)lastFragment;
/**

    Determines whether a buffer represents the start of a keyframe.

    @param inputBuffer The buffer.
    @return `true` if the buffer represents the start of a keyframe; otherwise, `false`.
*/
- (bool) isKeyFrameWithInputBuffer:(FMLiveSwitchDataBuffer*)inputBuffer;
/**

    Sends a key-frame request.

*/
- (void) sendKeyFrameRequestWithReason:(NSString*)reason;
/**

    Sets a flag indicating whether depacketizing should be bypassed for
    incoming media packets when a key frame request has been made via
    a PLI message. Default is true.

*/
- (void) setDelayDepacketizeOnPendingKeyFrame:(bool)value;
/**

    Initializes a new instance of the FMLiveSwitchVideoDepacketizer`1 class.

    @param format The format.
*/
+ (FMLiveSwitchVideoDepacketizer*) videoDepacketizerWithFormat:(FMLiveSwitchVideoFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchVideoDepacketizer`1 class.

    @param input The input.
*/
+ (FMLiveSwitchVideoDepacketizer*) videoDepacketizerWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchVideoDepacketizer`1 class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
+ (FMLiveSwitchVideoDepacketizer*) videoDepacketizerWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat outputFormat:(FMLiveSwitchVideoFormat*)outputFormat;

@end

/**

    An H.265 depacketizer.

*/
@interface FMLiveSwitchH265Depacketizer : FMLiveSwitchVideoDepacketizer<FMLiveSwitchH265Fragment*>

/**

    Initializes a new instance of the FMLiveSwitchH265Depacketizer class.

*/
+ (FMLiveSwitchH265Depacketizer*) depacketizer;
/**

    Creates a fragment from a data buffer.

    @param header The rtp header for this packet.
    @param dataBuffer The data buffer.
*/
- (FMLiveSwitchH265Fragment*) doCreateFragmentWithHeader:(FMLiveSwitchRtpPacketHeader*)header dataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Initializes a new instance of the FMLiveSwitchH265Depacketizer class.

*/
- (instancetype) init;
/**

    Checks if the databuffer contains a keyframe.

    @param inputBuffer VideoBuffer containing video data.
*/
- (bool) isKeyFrameWithInputBuffer:(FMLiveSwitchDataBuffer*)inputBuffer;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;

@end

/**

    A fragment of a video frame.

*/
@interface FMLiveSwitchVideoFragment : NSObject

/**

    Gets the data.

*/
- (FMLiveSwitchDataBuffer*) buffer;
/**

    Destroys this fragment.

*/
- (void) destroy;
/**

    Gets whether this is the first packet.

*/
- (bool) first;
/**

    Frees the underlying data buffer.

*/
- (void) free;
- (instancetype) init;
/**

    Keeps the underlying data buffer.

*/
- (void) keep;
/**

    Gets whether this is the last packet.

*/
- (bool) last;
/**

    Sets the data.

*/
- (void) setBuffer:(FMLiveSwitchDataBuffer*)value;
/**

    Sets whether this is the first packet.

*/
- (void) setFirst:(bool)value;
/**

    Sets whether this is the last packet.

*/
- (void) setLast:(bool)value;
+ (FMLiveSwitchVideoFragment*) videoFragment;

@end

/**

    An H.265 packet fragment.

*/
@interface FMLiveSwitchH265Fragment : FMLiveSwitchVideoFragment

/**

    Destroys this fragment.

*/
- (void) destroy;
/**

    Initializes a new instance of the FMLiveSwitchH265Fragment class.

    @param header The rtp packet header.
    @param dataBuffer The data buffer.
*/
+ (FMLiveSwitchH265Fragment*) fragmentWithHeader:(FMLiveSwitchRtpPacketHeader*)header dataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Initializes a new instance of the FMLiveSwitchH265Fragment class.

    @param header The rtp packet header.
    @param dataBuffer The data buffer.
*/
- (instancetype) initWithHeader:(FMLiveSwitchRtpPacketHeader*)header dataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;

@end

/**

    An H.265 packet for RTP.

*/
@interface FMLiveSwitchH265Packet : NSObject

/**

    Gets the Packet as a DataBuffer.

*/
- (FMLiveSwitchDataBuffer*) buffer;
/**

    Creates an Aggregation Packet (AP).

    @param nalus The NALUs.
*/
+ (FMLiveSwitchH265Packet*) createAggregationPacketWithNalus:(NSMutableArray*)nalus;
/**

    Creates Fragmentation Unit Packets (FUs).

    @param nalu The NALU.
*/
+ (NSMutableArray*) createFragmentationUnitsWithNalu:(FMLiveSwitchH265Nalu*)nalu;
/**

    Creates a Single NAL Unit packet.

    @param nalu The NALU.
*/
+ (FMLiveSwitchH265Packet*) createSingleNaluPacketWithNalu:(FMLiveSwitchH265Nalu*)nalu;
/**

    Gets if this is the end of a Fragmented Unit.

*/
- (bool) fragmentEnd;
/**

    Gets if this is the start of a Fragmented Unit.

*/
- (bool) fragmentStart;
/**

    Gets the Fragmentation Unit header end bit mask

*/
+ (int) fuHeaderEBitMask;
/**

    Gets the Fragmentation Unit header start bit mask

*/
+ (int) fuHeaderSBitMask;
/**

    Gets the Fragmentation Unit header type mask

*/
+ (int) fuHeaderTypeBitMask;
/**

    Default constuctor.

*/
- (instancetype) init;
/**

    Gets the maximum packet size (affects packetization).

*/
+ (int) maxPacketSize;
/**

    Gets the NAL Units.

*/
- (NSMutableArray*) nalus;
/**

    Gets the type of Payload that is in this packet.

*/
- (int) naluType;
/**

    Default constuctor.

*/
+ (FMLiveSwitchH265Packet*) packet;
/**

    Packetizes a single encoded data frame into one or more H265 packets.
    Only non-interleaved is supported. (sprop-max-don-diff = 0)

    @param encodedData The encoded data.
*/
+ (NSMutableArray*) packetizeWithEncodedData:(FMLiveSwitchDataBuffer*)encodedData;
/**

    Sets the NAL Units.

*/
- (void) setNalus:(NSMutableArray*)value;
/**

    Parses the specified packet bytes.

    @param buffer The packet bytes.
*/
+ (FMLiveSwitchH265Packet*) wrapWithBuffer:(FMLiveSwitchDataBuffer*)buffer;

@end

/**

    A video packetizer.

*/
@interface FMLiveSwitchVideoPacketizer : FMLiveSwitchVideoPipe

/**

    Gets whether this pipe is allowed to be timed.

*/
- (bool) allowDiagnosticTimer;
/**

    Gets whether this pipe can pause the output bitrate.

*/
- (bool) canPauseBitrate;
/**

    Processes track stats from an output.

    @param trackStats The track stats.
*/
- (void) doProcessTrackStatsFromOutputWithTrackStats:(FMLiveSwitchMediaTrackStats*)trackStats;
/**

    Gets the number of sent frames.

*/
- (long long) framesSent;
/**

    Initializes a new instance of the FMLiveSwitchVideoPacketizer class.

    @param format The format.
*/
- (instancetype) initWithFormat:(FMLiveSwitchVideoFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchVideoPacketizer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchVideoPacketizer class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
- (instancetype) initWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat outputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Processes the frame.

    @param frame The frame.
*/
- (bool) processFrame:(FMLiveSwitchVideoFrame*)frame;
/**

    Initializes a new instance of the FMLiveSwitchVideoPacketizer class.

    @param format The format.
*/
+ (FMLiveSwitchVideoPacketizer*) videoPacketizerWithFormat:(FMLiveSwitchVideoFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchVideoPacketizer class.

    @param input The input.
*/
+ (FMLiveSwitchVideoPacketizer*) videoPacketizerWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchVideoPacketizer class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
+ (FMLiveSwitchVideoPacketizer*) videoPacketizerWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat outputFormat:(FMLiveSwitchVideoFormat*)outputFormat;

@end

/**

    An H.265 packetizer.

*/
@interface FMLiveSwitchH265Packetizer : FMLiveSwitchVideoPacketizer

/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchVideoFrame*)frame inputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchH265Packetizer class.

*/
- (instancetype) init;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Initializes a new instance of the FMLiveSwitchH265Packetizer class.

*/
+ (FMLiveSwitchH265Packetizer*) packetizer;

@end

/**

    An RTCP Feedback RTP control frame.

*/
@interface FMLiveSwitchRtpControlFrame : FMLiveSwitchFeedbackControlFrame

/**

    Initializes a new instance of the FMLiveSwitchRtpControlFrame class.

    @param feedbackMessageType The feedback message type.
*/
- (instancetype) initWithFeedbackMessageType:(int)feedbackMessageType;
/**

    Initializes a new instance of the FMLiveSwitchRtpControlFrame class.

    @param feedbackMessageType The feedback message type.
    @param buffer The backing data buffer.
*/
- (instancetype) initWithFeedbackMessageType:(int)feedbackMessageType buffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchRtpControlFrame class.

    @param feedbackMessageType Type of the feedback message.
    @param payloadType Type of the payload.
    @param senderSynchronizationSource The sender synchronization source.
    @param mediaSynchronizationSource The media synchronization source.
*/
- (instancetype) initWithFeedbackMessageType:(int)feedbackMessageType payloadType:(int)payloadType senderSynchronizationSource:(long long)senderSynchronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource;
/**

    Initializes a new instance of the FMLiveSwitchRtpControlFrame class.

    @param feedbackMessageType Type of the feedback message.
    @param payloadType Type of the payload.
    @param senderSynchronizationSource The sender synchronization source.
    @param mediaSynchronizationSource The media synchronization source.
    @param feedbackControlInformation The feedback control information.
*/
- (instancetype) initWithFeedbackMessageType:(int)feedbackMessageType payloadType:(int)payloadType senderSynchronizationSource:(long long)senderSynchronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource feedbackControlInformation:(FMLiveSwitchDataBuffer*)feedbackControlInformation;
/**

    Gets the RTP payload type.

*/
+ (int) registeredPayloadType;
/**

    Initializes a new instance of the FMLiveSwitchRtpControlFrame class.

    @param feedbackMessageType The feedback message type.
*/
+ (FMLiveSwitchRtpControlFrame*) rtpControlFrameWithFeedbackMessageType:(int)feedbackMessageType;
/**

    Initializes a new instance of the FMLiveSwitchRtpControlFrame class.

    @param feedbackMessageType The feedback message type.
    @param buffer The backing data buffer.
*/
+ (FMLiveSwitchRtpControlFrame*) rtpControlFrameWithFeedbackMessageType:(int)feedbackMessageType buffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchRtpControlFrame class.

    @param feedbackMessageType Type of the feedback message.
    @param payloadType Type of the payload.
    @param senderSynchronizationSource The sender synchronization source.
    @param mediaSynchronizationSource The media synchronization source.
*/
+ (FMLiveSwitchRtpControlFrame*) rtpControlFrameWithFeedbackMessageType:(int)feedbackMessageType payloadType:(int)payloadType senderSynchronizationSource:(long long)senderSynchronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource;
/**

    Initializes a new instance of the FMLiveSwitchRtpControlFrame class.

    @param feedbackMessageType Type of the feedback message.
    @param payloadType Type of the payload.
    @param senderSynchronizationSource The sender synchronization source.
    @param mediaSynchronizationSource The media synchronization source.
    @param feedbackControlInformation The feedback control information.
*/
+ (FMLiveSwitchRtpControlFrame*) rtpControlFrameWithFeedbackMessageType:(int)feedbackMessageType payloadType:(int)payloadType senderSynchronizationSource:(long long)senderSynchronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource feedbackControlInformation:(FMLiveSwitchDataBuffer*)feedbackControlInformation;

@end

/**

    An RTCP transport-wide congestion control (transport-cc) packet.

*/
@interface FMLiveSwitchTransportCCControlFrame : FMLiveSwitchRtpControlFrame

/**

    Gets the base sequence number.

*/
- (int) baseSequenceNumber;
/**

    Returns a string representation of this instance.

*/
- (NSString*) description;
/**

    Gets the feedback packet count.

*/
- (int) feedbackPacketCount;
/**

    Initializes a new instance of the FMLiveSwitchTransportCCControlFrame class.

*/
- (instancetype) initWithBaseSequenceNumber:(int)baseSequenceNumber packetStatusCount:(int)packetStatusCount referenceTime:(int)referenceTime feedbackPacketCount:(int)feedbackPacketCount packetStatusChunks:(NSMutableArray*)packetStatusChunks receiveDeltas:(NSMutableArray*)receiveDeltas;
/**

    Initializes a new instance of the FMLiveSwitchTransportCCControlFrame class.

    @param buffer The buffer.
*/
- (instancetype) initWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Gets the packet status chunks.

*/
- (NSMutableArray*) packetStatusChunks;
/**

    Gets the packet status count.

*/
- (int) packetStatusCount;
/**

    Gets a receive delta in milliseconds.

    @param receiveDelta The receive delta.
    @return The receive delta in milliseconds.
*/
+ (double) receiveDeltaInMillisWithReceiveDelta:(int)receiveDelta;
/**

    Gets a receive delta in ticks.

    @param receiveDelta The receive delta.
    @return The receive delta in ticks.
*/
+ (int) receiveDeltaInTicksWithReceiveDelta:(int)receiveDelta;
/**

    Gets the receive deltas.

*/
- (NSMutableArray*) receiveDeltas;
/**

    Gets the receive deltas in milliseconds.

*/
- (NSMutableArray*) receiveDeltasInMillis;
/**

    Gets the receive deltas in ticks.

*/
- (NSMutableArray*) receiveDeltasInTicks;
/**

    Gets the reference time.

*/
- (int) referenceTime;
/**

    Gets the reference time in milliseconds.

*/
- (int) referenceTimeInMillis;
/**

    Gets the reference time in ticks.

*/
- (int) referenceTimeInTicks;
/**

    Gets the type of the transport-wide congestion control message.

*/
+ (int) registeredFeedbackMessageType;
/**

    Initializes a new instance of the FMLiveSwitchTransportCCControlFrame class.

*/
+ (FMLiveSwitchTransportCCControlFrame*) transportCCControlFrameWithBaseSequenceNumber:(int)baseSequenceNumber packetStatusCount:(int)packetStatusCount referenceTime:(int)referenceTime feedbackPacketCount:(int)feedbackPacketCount packetStatusChunks:(NSMutableArray*)packetStatusChunks receiveDeltas:(NSMutableArray*)receiveDeltas;
/**

    Initializes a new instance of the FMLiveSwitchTransportCCControlFrame class.

    @param buffer The buffer.
*/
+ (FMLiveSwitchTransportCCControlFrame*) transportCCControlFrameWithBuffer:(FMLiveSwitchDataBuffer*)buffer;

@end

/**

    An RTCP transport-wide congestion control (transport-cc) packet status chunk.

*/
@interface FMLiveSwitchTransportCCPacketStatusChunk : NSObject

/**

    Gets the data buffer.

*/
- (FMLiveSwitchDataBuffer*) dataBuffer;
/**

    Initializes a new instance of the FMLiveSwitchTransportCCPacketStatusChunk class.

    @param type The type.
*/
- (instancetype) initWithType:(bool)type;
/**

    Initializes a new instance of the FMLiveSwitchTransportCCPacketStatusChunk class.

    @param type The type.
    @param dataBuffer The data buffer.
*/
- (instancetype) initWithType:(bool)type dataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Initializes a new instance of the FMLiveSwitchTransportCCPacketStatusChunk class.

    @param type The type.
*/
+ (FMLiveSwitchTransportCCPacketStatusChunk*) transportCCPacketStatusChunkWithType:(bool)type;
/**

    Initializes a new instance of the FMLiveSwitchTransportCCPacketStatusChunk class.

    @param type The type.
    @param dataBuffer The data buffer.
*/
+ (FMLiveSwitchTransportCCPacketStatusChunk*) transportCCPacketStatusChunkWithType:(bool)type dataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Gets the type.
    A value of `true` indicates that this is a status vector chunk.
    A value of `false` indicates that this is a run length chunk.

*/
- (bool) type;

@end

@interface FMLiveSwitchTransportCCPacketStatusSymbolWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchTransportCCPacketStatusSymbol)value;

@end

/**

    An RTCP transport-wide congestion control (transport-cc) run length chunk.

*/
@interface FMLiveSwitchTransportCCRunLengthChunk : FMLiveSwitchTransportCCPacketStatusChunk

/**

    Initializes a new instance of the FMLiveSwitchTransportCCRunLengthChunk class.

    @param dataBuffer The data buffer.
*/
- (instancetype) initWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Initializes a new instance of the FMLiveSwitchTransportCCRunLengthChunk class.

    @param symbol The symbol.
    @param runLength The run length.
*/
- (instancetype) initWithSymbol:(FMLiveSwitchTransportCCPacketStatusSymbol)symbol runLength:(int)runLength;
/**

    Gets the type.

*/
+ (bool) registeredType;
/**

    Gets the run length.

*/
- (int) runLength;
/**

    Gets the symbol.

*/
- (FMLiveSwitchTransportCCPacketStatusSymbol) symbol;
/**

    Initializes a new instance of the FMLiveSwitchTransportCCRunLengthChunk class.

    @param dataBuffer The data buffer.
*/
+ (FMLiveSwitchTransportCCRunLengthChunk*) transportCCRunLengthChunkWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Initializes a new instance of the FMLiveSwitchTransportCCRunLengthChunk class.

    @param symbol The symbol.
    @param runLength The run length.
*/
+ (FMLiveSwitchTransportCCRunLengthChunk*) transportCCRunLengthChunkWithSymbol:(FMLiveSwitchTransportCCPacketStatusSymbol)symbol runLength:(int)runLength;

@end

/**

    An RTCP transport-wide congestion control (transport-cc) status vector chunk.

*/
@interface FMLiveSwitchTransportCCStatusVectorChunk : FMLiveSwitchTransportCCPacketStatusChunk

/**

    Initializes a new instance of the FMLiveSwitchTransportCCStatusVectorChunk class.

    @param dataBuffer The data buffer.
*/
- (instancetype) initWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Initializes a new instance of the FMLiveSwitchTransportCCStatusVectorChunk class.

    @param symbolSize The symbol size.
    @param symbols The symbols.
*/
- (instancetype) initWithSymbolSize:(bool)symbolSize symbols:(NSMutableArray*)symbols;
/**

    Gets the type.

*/
+ (bool) registeredType;
/**

    Gets the symbol count.

*/
- (int) symbolCount;
/**

    Gets the symbol list.

*/
- (int) symbolList;
/**

    Gets the symbols.

*/
- (NSMutableArray*) symbols;
/**

    Gets the symbol size.
    A value of `true` indicates 2 bits per symbol.
    A value of `false` indicates 1 bit per symbol.

*/
- (bool) symbolSize;
/**

    Initializes a new instance of the FMLiveSwitchTransportCCStatusVectorChunk class.

    @param dataBuffer The data buffer.
*/
+ (FMLiveSwitchTransportCCStatusVectorChunk*) transportCCStatusVectorChunkWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Initializes a new instance of the FMLiveSwitchTransportCCStatusVectorChunk class.

    @param symbolSize The symbol size.
    @param symbols The symbols.
*/
+ (FMLiveSwitchTransportCCStatusVectorChunk*) transportCCStatusVectorChunkWithSymbolSize:(bool)symbolSize symbols:(NSMutableArray*)symbols;

@end

/**

    A video format.

*/
@interface FMLiveSwitchVideoFormat : FMLiveSwitchMediaFormat<FMLiveSwitchVideoFormat*>

/**

    Gets an ABGR video format.

*/
+ (FMLiveSwitchVideoFormat*) abgr;
/**

    Gets the name of the ABGR video format ("ABGR").
    Indicates that each pixel occupies 32 bits (8 bits for alpha, then 8 bits for blue, then8 bits for green, then 8 bits for red).

*/
+ (NSString*) abgrName;
/**

    Gets an ARGB video format.

*/
+ (FMLiveSwitchVideoFormat*) argb;
/**

    Gets the name of the ARGB video format ("ARGB").
    Indicates that each pixel occupies 32 bits (8 bits for alpha, then 8 bits for red, then 8 bits for green, then 8 bits for blue).

*/
+ (NSString*) argbName;
/**

    Gets a BGR video format.

*/
+ (FMLiveSwitchVideoFormat*) bgr;
/**

    Gets an BGRA video format.

*/
+ (FMLiveSwitchVideoFormat*) bgra;
/**

    Gets the name of the BGRA video format ("BGRA").
    Indicates that each pixel occupies 32 bits (8 bits for blue, then8 bits for green, then 8 bits for red, then 8 bits for alpha).

*/
+ (NSString*) bgraName;
/**

    Gets the name of the BGR video format ("BGR").
    Indicates that each pixel occupies 24 bits (8 bits for blue, then8 bits for green, then 8 bits for red).

*/
+ (NSString*) bgrName;
/**

    Clones this instance.

*/
- (FMLiveSwitchVideoFormat*) clone;
/**

    Creates a new instance.

*/
- (FMLiveSwitchVideoFormat*) createInstance;
/**

    Gets the default clock rate.

*/
+ (int) defaultClockRate;
/**

    Converts a format name to its FourCC value.

    @param formatName The format name.
    @return The FourCC value, or 0 if the format name is not recognized.
*/
+ (int) formatNameToFourCCWithFormatName:(NSString*)formatName;
/**

    Gets the FourCC value for this format.

*/
- (int) fourCC;
/**

    Converts a FourCC value to its format name.

    @param fourcc The FourCC value.
    @return The format name, or an empty string if the FourCC value is not recognized.
*/
- (NSString*) fourCCToFormatNameWithFourcc:(int)fourcc;
/**

    Transforms a FormatInfo into an VideoFormat.

    @param info The format info.
*/
+ (FMLiveSwitchVideoFormat*) fromFormatInfo:(FMLiveSwitchFormatInfo*)info;
/**

    Deserializes an instance from JSON.

    @param videoFormatJson The video format JSON.
*/
+ (FMLiveSwitchVideoFormat*) fromJsonWithVideoFormatJson:(NSString*)videoFormatJson;
/**

    Gets the maximum level.

    @param level1 The first level.
    @param level2 The second level.
    @return The maximum level.
*/
- (NSString*) getMaxLevelWithLevel1:(NSString*)level1 level2:(NSString*)level2;
/**

    Gets the minimum level.

    @param level1 The first level.
    @param level2 The second level.
    @return The minimum level.
*/
- (NSString*) getMinLevelWithLevel1:(NSString*)level1 level2:(NSString*)level2;
/**

    Gets an H.264 video format.

*/
+ (FMLiveSwitchVideoFormat*) h264;
/**

    Gets the name of the H.264 video format ("H264").

*/
+ (NSString*) h264Name;
/**

    Gets an H.265 video format.

*/
+ (FMLiveSwitchVideoFormat*) h265;
/**

    Gets the name of the H.265 video format ("H265").

*/
+ (NSString*) h265Name;
/**

    Gets an I420 video format.

*/
+ (FMLiveSwitchVideoFormat*) i420;
/**

    Gets the name of the I420 video format ("I420").
    Indicates that each pixel occupies 12 bits (8 bits for Y, 2 bits for U, and 2 bits for V).
    Y plane is followed by U plane and then V plane.

*/
+ (NSString*) i420Name;
/**

    Gets this format as an info object.

*/
- (FMLiveSwitchFormatInfo*) info;
/**

    Initializes a new instance of the FMLiveSwitchVideoFormat class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchVideoFormat class.

    @param name The name.
*/
- (instancetype) initWithName:(NSString*)name;
/**

    Initializes a new instance of the FMLiveSwitchVideoFormat class.

    @param name The name.
    @param clockRate The clock rate.
*/
- (instancetype) initWithName:(NSString*)name clockRate:(int)clockRate;
/**

    Initializes a new instance of the FMLiveSwitchVideoFormat class.

    @param name The name.
    @param clockRate The clock rate.
    @param packetizationMode The packetization mode.
*/
- (instancetype) initWithName:(NSString*)name clockRate:(int)clockRate packetizationMode:(NSString*)packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchVideoFormat class.

    @param name The name.
    @param clockRate The clock rate.
    @param profile The media format profile.
    @param level The media format level.
*/
- (instancetype) initWithName:(NSString*)name clockRate:(int)clockRate profile:(NSString*)profile level:(NSString*)level;
/**

    Initializes a new instance of the FMLiveSwitchVideoFormat class.

    @param name The name.
    @param clockRate The clock rate.
    @param packetizationMode The packetization mode.
    @param level The media format level.
    @param profile The media format profile.
*/
- (instancetype) initWithName:(NSString*)name clockRate:(int)clockRate profile:(NSString*)profile level:(NSString*)level packetizationMode:(NSString*)packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchVideoFormat class.

    @param name The name.
    @param clockRate The clock rate.
    @param packetizationMode The packetization mode.
    @param level The media format level.
    @param profile The media format profile.
    @param tier The media format tier.
*/
- (instancetype) initWithName:(NSString*)name clockRate:(int)clockRate profile:(NSString*)profile level:(NSString*)level packetizationMode:(NSString*)packetizationMode tier:(NSString*)tier;
/**

    Gets a value indicating whether this format is ABGR.

*/
- (bool) isAbgr;
/**

    Gets a value indicating whether this format is ARGB.

*/
- (bool) isArgb;
/**

    Gets a value indicating whether this format is BGR.

*/
- (bool) isBgr;
/**

    Gets a value indicating whether this format is BGRA.

*/
- (bool) isBgra;
/**

    Gets whether this is a compressed format.

*/
- (bool) isCompressed;
/**

    Gets a value indicating whether this format is H.264.

*/
- (bool) isH264;
/**

    Gets a value indicating whether this format is H.265.

*/
- (bool) isH265;
/**

    Gets a value indicating whether this format is I420.

*/
- (bool) isI420;
/**

    Gets whether a level is compatible.

    @param level The level.
*/
- (bool) isLevelCompatibleWithLevel:(NSString*)level;
/**

    Gets a value indicating whether this format is NV12.

*/
- (bool) isNv12;
/**

    Gets a value indicating whether this format is NV21.

*/
- (bool) isNv21;
/**

    Gets whether a profile is compatible.

    @param profile The profile.
*/
- (bool) isProfileCompatibleWithProfile:(NSString*)profile;
/**

    Gets a value indicating whether this format is RGB, BGR,
    I420, YV12, NV12, NV21, RGBA, BGRA, ARGB, or ABGR.

*/
- (bool) isRaw;
/**

    Gets a value indicating whether this format is RGB.

*/
- (bool) isRgb;
/**

    Gets a value indicating whether this format is RGBA.

*/
- (bool) isRgba;
/**

    Gets a value indicating whether this format is
    RGBA, BGRA, ARGB, or ABGR.

*/
- (bool) isRgbaType;
/**

    Gets a value indicating whether this format is RGB or BGR.

*/
- (bool) isRgbType;
/**

    Gets a value indicating whether this format is VP8.

*/
- (bool) isVp8;
/**

    Gets a value indicating whether this format is VP9.

*/
- (bool) isVp9;
/**

    Gets a value indicating whether this format is
    I420, YV12, NV12, or NV21.

*/
- (bool) isYuvType;
/**

    Gets a value indicating whether this format is YV12.

*/
- (bool) isYv12;
/**

    Gets an NV12 video format.

*/
+ (FMLiveSwitchVideoFormat*) nv12;
/**

    Gets the name of the NV12 video format ("NV12").
    Indicates that each pixel occupies 12 bits (8 bits for Y, 2 bits for U, and 2 bits for V).
    Y plane is followed by interleaved U/V plane.

*/
+ (NSString*) nv12Name;
/**

    Gets an NV21 video format.

*/
+ (FMLiveSwitchVideoFormat*) nv21;
/**

    Gets the name of the NV21 video format ("NV21").
    Indicates that each pixel occupies 12 bits (8 bits for Y, 2 bits for U, and 2 bits for V).
    Y plane is followed by interleaved V/U plane.

*/
+ (NSString*) nv21Name;
/**

    Gets the parameters.

*/
- (NSString*) parameters;
/**

    Gets an RGB video format.

*/
+ (FMLiveSwitchVideoFormat*) rgb;
/**

    Gets an RGBA video format.

*/
+ (FMLiveSwitchVideoFormat*) rgba;
/**

    Gets the name of the RGBA video format ("RGBA").
    Indicates that each pixel occupies 32 bits (8 bits for red, then 8 bits for green, then 8 bits for blue, then 8 bits for alpha).

*/
+ (NSString*) rgbaName;
/**

    Gets the name of the RGB video format ("RGB").
    Indicates that each pixel occupies 24 bits (8 bits for red, then 8 bits for green, then 8 bits for blue).

*/
+ (NSString*) rgbName;
/**

    Sets the FourCC value for this format.

*/
- (void) setFourCC:(int)value;
/**

    Converts 4 FourCC characters to an int.

*/
+ (int) toFourCCWithA:(unichar)a b:(unichar)b c:(unichar)c d:(unichar)d;
/**

    Converts a FourCC string to a int.

    @param fourcc The fourcc.
*/
+ (int) toFourCCWithFourcc:(NSString*)fourcc;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an instance to JSON.

    @param videoFormat The video format.
*/
+ (NSString*) toJsonWithVideoFormat:(FMLiveSwitchVideoFormat*)videoFormat;
/**

    Updates the profile to a compatible value.

    @param format The format.
*/
- (void) updateProfileToCompatibleWithFormat:(FMLiveSwitchVideoFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchVideoFormat class.

*/
+ (FMLiveSwitchVideoFormat*) videoFormat;
/**

    Initializes a new instance of the FMLiveSwitchVideoFormat class.

    @param name The name.
*/
+ (FMLiveSwitchVideoFormat*) videoFormatWithName:(NSString*)name;
/**

    Initializes a new instance of the FMLiveSwitchVideoFormat class.

    @param name The name.
    @param clockRate The clock rate.
*/
+ (FMLiveSwitchVideoFormat*) videoFormatWithName:(NSString*)name clockRate:(int)clockRate;
/**

    Initializes a new instance of the FMLiveSwitchVideoFormat class.

    @param name The name.
    @param clockRate The clock rate.
    @param packetizationMode The packetization mode.
*/
+ (FMLiveSwitchVideoFormat*) videoFormatWithName:(NSString*)name clockRate:(int)clockRate packetizationMode:(NSString*)packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchVideoFormat class.

    @param name The name.
    @param clockRate The clock rate.
    @param profile The media format profile.
    @param level The media format level.
*/
+ (FMLiveSwitchVideoFormat*) videoFormatWithName:(NSString*)name clockRate:(int)clockRate profile:(NSString*)profile level:(NSString*)level;
/**

    Initializes a new instance of the FMLiveSwitchVideoFormat class.

    @param name The name.
    @param clockRate The clock rate.
    @param packetizationMode The packetization mode.
    @param level The media format level.
    @param profile The media format profile.
*/
+ (FMLiveSwitchVideoFormat*) videoFormatWithName:(NSString*)name clockRate:(int)clockRate profile:(NSString*)profile level:(NSString*)level packetizationMode:(NSString*)packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchVideoFormat class.

    @param name The name.
    @param clockRate The clock rate.
    @param packetizationMode The packetization mode.
    @param level The media format level.
    @param profile The media format profile.
    @param tier The media format tier.
*/
+ (FMLiveSwitchVideoFormat*) videoFormatWithName:(NSString*)name clockRate:(int)clockRate profile:(NSString*)profile level:(NSString*)level packetizationMode:(NSString*)packetizationMode tier:(NSString*)tier;
/**

    Gets a VP8 video format.

*/
+ (FMLiveSwitchVideoFormat*) vp8;
/**

    Gets the name of the VP8 video format ("VP8").

*/
+ (NSString*) vp8Name;
/**

    Gets a VP9 video format.

*/
+ (FMLiveSwitchVideoFormat*) vp9;
/**

    Gets the name of the VP9 video format ("VP9").

*/
+ (NSString*) vp9Name;
/**

    Gets a YV12 video format.

*/
+ (FMLiveSwitchVideoFormat*) yv12;
/**

    Gets the name of the YV12 video format ("YV12").
    Indicates that each pixel occupies 12 bits (8 bits for Y, 2 bits for U, and 2 bits for V).
    Y plane is followed by V plane and then U plane.

*/
+ (NSString*) yv12Name;

@end

/**

    An H.265/HEVC format.

*/
@interface FMLiveSwitchH265Format : FMLiveSwitchVideoFormat

/**

    Initializes a new instance of the FMLiveSwitchH265Format class.

*/
+ (FMLiveSwitchH265Format*) format;
/**

    Initializes a new instance of the FMLiveSwitchH265Format class.

    @param clockRate The clock rate.
*/
+ (FMLiveSwitchH265Format*) formatWithClockRate:(int)clockRate;
/**

    Initializes a new instance of the FMLiveSwitchH265Format class.

    @param clockRate The clock rate.
    @param profile The profile.
    @param level The level.
    @param tier The tier.
*/
+ (FMLiveSwitchH265Format*) formatWithClockRate:(int)clockRate profile:(int)profile level:(int)level tier:(int)tier;
/**

    Initializes a new instance of the FMLiveSwitchH265Format class.

    @param profile The profile.
    @param level The level.
    @param tier The tier.
*/
+ (FMLiveSwitchH265Format*) formatWithProfile:(int)profile level:(int)level tier:(int)tier;
/**

    Initializes a new instance of the FMLiveSwitchH265Format class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchH265Format class.

    @param clockRate The clock rate.
*/
- (instancetype) initWithClockRate:(int)clockRate;
/**

    Initializes a new instance of the FMLiveSwitchH265Format class.

    @param clockRate The clock rate.
    @param profile The profile.
    @param level The level.
    @param tier The tier.
*/
- (instancetype) initWithClockRate:(int)clockRate profile:(int)profile level:(int)level tier:(int)tier;
/**

    Initializes a new instance of the FMLiveSwitchH265Format class.

    @param profile The profile.
    @param level The level.
    @param tier The tier.
*/
- (instancetype) initWithProfile:(int)profile level:(int)level tier:(int)tier;

@end

/**

    An H265 Network Abstraction Layer Unit.

*/
@interface FMLiveSwitchH265Nalu : NSObject

/**

    Gets the backing DataBuffer.

*/
- (FMLiveSwitchDataBuffer*) buffer;
/**

    Gets the forbidden Zero Bit. The H.265 specification declares a
    value of 1 as a syntax violation.

*/
- (bool) fBit;
/**

    Gets the forbidden zero bit mask.

*/
+ (int) fBitMask;
/**

    Scans for the index of the first NAL Unit after start.

    @param encodedData The stream to search.
*/
+ (int) findNaluWithEncodedData:(FMLiveSwitchDataBuffer*)encodedData;
/**

    Scans for the index of the first NAL Unit after start.

    @param encodedData The stream to search.
    @param start The index to start searching from.
*/
+ (int) findNextNaluWithEncodedData:(FMLiveSwitchDataBuffer*)encodedData start:(int)start;
/**

    Gets the NAL Unit as a byte array that can be passed
    to an encoder (includes Start Code).

*/
- (FMLiveSwitchDataBuffer*) getBytes;
/**

    Returns the first NAL unit after nalStart.

    @param encodedData The byte array to search.
*/
+ (FMLiveSwitchH265Nalu*) getNaluWithEncodedData:(FMLiveSwitchDataBuffer*)encodedData;
/**

    Returns the first NAL unit after nalStart.

    @param encodedData The byte array to search.
    @param nalStart The start index of the NAL.
    @param nextStartCodeLength OUT The length of the next the NAL startcode.
*/
+ (FMLiveSwitchH265Nalu*) getNaluWithEncodedData:(FMLiveSwitchDataBuffer*)encodedData nalStart:(int)nalStart nextStartCodeLength:(int*)nextStartCodeLength;
/**

    Creates an empty NAL Unit.

*/
- (instancetype) init;
/**

    Creates a NAL Unit from a byte array.

    @param naluBytes The NALU bytes.
*/
- (instancetype) initWithNaluBytes:(FMLiveSwitchDataBuffer*)naluBytes;
/**

    Gets the LayerId: 6bits otherwise known as nuh_layer_id.

*/
- (int) layerId;
/**

    Gets the Layer Id (nuh_layer_id) mask.

*/
+ (int) layerIdMask;
/**

    Creates an empty NAL Unit.

*/
+ (FMLiveSwitchH265Nalu*) nalu;
/**

    Creates a NAL Unit from a byte array.

    @param naluBytes The NALU bytes.
*/
+ (FMLiveSwitchH265Nalu*) naluWithNaluBytes:(FMLiveSwitchDataBuffer*)naluBytes;
/**

    Gets the NAL payload.

*/
- (FMLiveSwitchDataBuffer*) payload;
/**

    Gets the size of the NAL Unit (including NAL header) in two octets stored in
    the returned byte array. Useful for creating H265 aggregation packets.

*/
- (FMLiveSwitchDataBuffer*) shortLength;
/**

    Gets the 4-byte NALU start code.

*/
+ (FMLiveSwitchDataBuffer*) startCode;
/**

    Gets the TID: 3bits otherwise known as nuh_temporal_plus1.

*/
- (int) tid;
/**

    Gets the TID (nuh_temporal_id_plus1) mask.

*/
+ (int) tidMask;
/**

    Gets the NAL Unit Type.

*/
- (int) type;
/**

    Gets the NAL Unit Type (nal_unit_type) mask.

*/
+ (int) typeMask;

@end

/**

    Utility methods.

*/
@interface FMLiveSwitchH265Utility : NSObject

/**

    Gets the NALU type.

    @param encodedFrame The encoded frame.
*/
+ (int) getNaluTypeWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame;
/**

    Gets the NALU type at the specified offset.

    @param encodedFrame The encoded frame.
    @param offset The offset into the encoded frame.
*/
+ (int) getNaluTypeWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame offset:(int)offset;
/**

    Gets the start code length at the specified offset.

    @param encodedFrame The encoded frame.
    @param offset The offset into the encoded frame.
*/
+ (int) getStartCodeLengthWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame offset:(int)offset;
- (instancetype) init;
/**

    Determines whether the encoded frame starts with an IDR NALU.

    @param encodedFrame The encoded frame.
*/
+ (bool) isIdrWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame;
/**

    Determines whether the encoded frame starts with an IDR NALU.

    @param encodedFrame The encoded frame.
    @param offset The offset into the encoded frame.
*/
+ (bool) isIdrWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame offset:(int)offset;
/**

    Determines whether the encoded frame starts with a keyframe (IDR, VPS, PPS, or SPS).

    @param encodedFrame The encoded frame.
*/
+ (bool) isKeyFrameWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame;
/**

    Determines whether the encoded frame starts with a given NALU type.

    @param naluType The NALU type.
    @param encodedFrame The encoded frame.
    @param offset The offset into the encoded frame.
*/
+ (bool) isNaluType:(int)naluType encodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame offset:(int)offset;
/**

    Determines whether the encoded frame starts with a PPS NALU.

    @param encodedFrame The encoded frame.
*/
+ (bool) isPpsWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame;
/**

    Determines whether the encoded frame starts with a PPS NALU.

    @param encodedFrame The encoded frame.
    @param offset The offset into the encoded frame.
*/
+ (bool) isPpsWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame offset:(int)offset;
/**

    Determines whether the encoded frame starts with an SPS NALU.

    @param encodedFrame The encoded frame.
*/
+ (bool) isSpsWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame;
/**

    Determines whether the encoded frame starts with an SPS NALU.

    @param encodedFrame The encoded frame.
    @param offset The offset into the encoded frame.
*/
+ (bool) isSpsWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame offset:(int)offset;
/**

    Determines whether the encoded frame starts with a VPS NALU.

    @param encodedFrame The encoded frame.
*/
+ (bool) isVpsWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame;
/**

    Determines whether the encoded frame starts with an VPS NALU.

    @param encodedFrame The encoded frame.
    @param offset The offset into the encoded frame.
*/
+ (bool) isVpsWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame offset:(int)offset;
+ (FMLiveSwitchH265Utility*) utility;

@end

/**

    An RTCP temporary maximum media-stream bitrate request (TMMBR) packet entry.

*/
@interface FMLiveSwitchTmmbrEntry : FMLiveSwitchControlFrameEntry

/**

    Gets the backing data buffer.

*/
- (FMLiveSwitchDataBuffer*) dataBuffer;
/**

    Gets the fixed length of an FIR entry.

*/
+ (int) fixedPayloadLength;
/**

    Initializes a new instance of the FMLiveSwitchTmmbrEntry class.

    @param dataBuffer The data buffer.
*/
- (instancetype) initWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Initializes a new instance of the FMLiveSwitchTmmbrEntry class.

    @param maximumBitrate The maximum bitrate.
    @param synchronizationSource The synchronization source.
*/
- (instancetype) initWithMaximumBitrate:(long long)maximumBitrate synchronizationSource:(long long)synchronizationSource;
/**

    Gets the maximum bitrate.

*/
- (long long) maximumBitrate;
/**

    Gets the maximum bitrate exponent.

*/
- (int) maximumBitrateExponent;
/**

    Gets the maximum bitrate mantissa.

*/
- (int) maximumBitrateMantissa;
/**

    Gets the measured average packet overhead in bytes.

*/
- (int) measuredOverhead;
/**

    Gets the normalized maximum bitrate.

*/
- (int) normalizedMaximumBitrate;
/**

    Creates a FMLiveSwitchTmmbrEntry using normalized parameters.

    @param normalizedMaximumBitrate The normalized maximum bitrate.
    @param synchronizationSource The synchronization source.
*/
+ (FMLiveSwitchTmmbrEntry*) normalizedWithNormalizedMaximumBitrate:(int)normalizedMaximumBitrate synchronizationSource:(long long)synchronizationSource;
/**

    Sets the backing data buffer.

*/
- (void) setDataBuffer:(FMLiveSwitchDataBuffer*)value;
/**

    Sets the maximum bitrate.

*/
- (void) setMaximumBitrate:(long long)value;
/**

    Sets the maximum bitrate exponent.

*/
- (void) setMaximumBitrateExponent:(int)value;
/**

    Sets the maximum bitrate mantissa.

*/
- (void) setMaximumBitrateMantissa:(int)value;
/**

    Sets the measured average packet overhead in bytes.

*/
- (void) setMeasuredOverhead:(int)value;
/**

    Sets the normalized maximum bitrate.

*/
- (void) setNormalizedMaximumBitrate:(int)value;
/**

    Sets the synchronization source.

*/
- (void) setSynchronizationSource:(long long)value;
/**

    Gets the synchronization source.

*/
- (long long) synchronizationSource;
/**

    Initializes a new instance of the FMLiveSwitchTmmbrEntry class.

    @param dataBuffer The data buffer.
*/
+ (FMLiveSwitchTmmbrEntry*) tmmbrEntryWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Initializes a new instance of the FMLiveSwitchTmmbrEntry class.

    @param maximumBitrate The maximum bitrate.
    @param synchronizationSource The synchronization source.
*/
+ (FMLiveSwitchTmmbrEntry*) tmmbrEntryWithMaximumBitrate:(long long)maximumBitrate synchronizationSource:(long long)synchronizationSource;

@end

/**

    An RTCP temporary maximum media-stream bitrate notification (TMMBN) packet entry.

*/
@interface FMLiveSwitchTmmbnEntry : FMLiveSwitchControlFrameEntry

/**

    Gets the backing data buffer.

*/
- (FMLiveSwitchDataBuffer*) dataBuffer;
/**

    Gets the fixed length of an FIR entry.

*/
+ (int) fixedPayloadLength;
/**

    Initializes a new instance of the FMLiveSwitchTmmbnEntry class.

    @param dataBuffer The data buffer.
*/
- (instancetype) initWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Initializes a new instance of the FMLiveSwitchTmmbnEntry class.

    @param maximumBitrate The maximum bitrate.
    @param synchronizationSource The synchronization source.
*/
- (instancetype) initWithMaximumBitrate:(long long)maximumBitrate synchronizationSource:(long long)synchronizationSource;
/**

    Gets the maximum bitrate.

*/
- (long long) maximumBitrate;
/**

    Gets the maximum bitrate exponent.

*/
- (int) maximumBitrateExponent;
/**

    Gets the maximum bitrate mantissa.

*/
- (int) maximumBitrateMantissa;
/**

    Gets the normalized maximum bitrate.

*/
- (int) normalizedMaximumBitrate;
/**

    Creates a FMLiveSwitchTmmbnEntry using normalized parameters.

    @param normalizedMaximumBitrate The normalized maximum bitrate.
    @param synchronizationSource The synchronization source.
*/
+ (FMLiveSwitchTmmbnEntry*) normalizedWithNormalizedMaximumBitrate:(int)normalizedMaximumBitrate synchronizationSource:(long long)synchronizationSource;
/**

    Sets the backing data buffer.

*/
- (void) setDataBuffer:(FMLiveSwitchDataBuffer*)value;
/**

    Sets the maximum bitrate.

*/
- (void) setMaximumBitrate:(long long)value;
/**

    Sets the maximum bitrate exponent.

*/
- (void) setMaximumBitrateExponent:(int)value;
/**

    Sets the maximum bitrate mantissa.

*/
- (void) setMaximumBitrateMantissa:(int)value;
/**

    Sets the normalized maximum bitrate.

*/
- (void) setNormalizedMaximumBitrate:(int)value;
/**

    Sets the synchronization source.

*/
- (void) setSynchronizationSource:(long long)value;
/**

    Gets the synchronization source.

*/
- (long long) synchronizationSource;
/**

    Initializes a new instance of the FMLiveSwitchTmmbnEntry class.

    @param dataBuffer The data buffer.
*/
+ (FMLiveSwitchTmmbnEntry*) tmmbnEntryWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Initializes a new instance of the FMLiveSwitchTmmbnEntry class.

    @param maximumBitrate The maximum bitrate.
    @param synchronizationSource The synchronization source.
*/
+ (FMLiveSwitchTmmbnEntry*) tmmbnEntryWithMaximumBitrate:(long long)maximumBitrate synchronizationSource:(long long)synchronizationSource;

@end

/**

    An RTCP temporary maximum media-stream bitrate notification (TMMBN) packet.

*/
@interface FMLiveSwitchTmmbnControlFrame : FMLiveSwitchRtpControlFrame

/**

    Gets the entries.

*/
- (NSMutableArray*) entries;
/**

    Gets the entry.

*/
- (FMLiveSwitchTmmbnEntry*) entry;
/**

    Initializes a new instance of the FMLiveSwitchTmmbnControlFrame class.

    @param buffer The buffer.
*/
- (instancetype) initWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchTmmbnControlFrame class.

    @param entries The entries.
*/
- (instancetype) initWithEntries:(NSMutableArray*)entries;
/**

    Initializes a new instance of the FMLiveSwitchTmmbnControlFrame class.

    @param entry The entry.
*/
- (instancetype) initWithEntry:(FMLiveSwitchTmmbnEntry*)entry;
/**

    Initializes a new instance of the FMLiveSwitchTmmbnControlFrame class.

    @param maximumBitrate The maximum bitrate.
    @param synchronizationSource The synchronization source.
*/
- (instancetype) initWithMaximumBitrate:(long long)maximumBitrate synchronizationSource:(long long)synchronizationSource;
/**

    Creates a FMLiveSwitchTmmbnControlFrame using normalized parameters.

    @param normalizedMaximumBitrate The normalized maximum bitrate.
    @param synchronizationSource The synchronization source.
*/
+ (FMLiveSwitchTmmbnControlFrame*) normalizedWithNormalizedMaximumBitrate:(int)normalizedMaximumBitrate synchronizationSource:(long long)synchronizationSource;
/**

    Creates a FMLiveSwitchTmmbnControlFrame using normalized parameters.

    @param normalizedMaximumBitrate The normalized maximum bitrate.
    @param synchronizationSource The synchronization source.
    @param packetSenderSynchronizationSource The packet sender synchronization source.
*/
+ (FMLiveSwitchTmmbnControlFrame*) normalizedWithNormalizedMaximumBitrate:(int)normalizedMaximumBitrate synchronizationSource:(long long)synchronizationSource packetSenderSynchronizationSource:(long long)packetSenderSynchronizationSource;
/**

    Gets the type of the registered feedback message.

*/
+ (int) registeredFeedbackMessageType;
/**

    Sets the entries.

*/
- (void) setEntries:(NSMutableArray*)value;
/**

    Sets the entry.

*/
- (void) setEntry:(FMLiveSwitchTmmbnEntry*)value;
/**

    Initializes a new instance of the FMLiveSwitchTmmbnControlFrame class.

    @param buffer The buffer.
*/
+ (FMLiveSwitchTmmbnControlFrame*) tmmbnControlFrameWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchTmmbnControlFrame class.

    @param entries The entries.
*/
+ (FMLiveSwitchTmmbnControlFrame*) tmmbnControlFrameWithEntries:(NSMutableArray*)entries;
/**

    Initializes a new instance of the FMLiveSwitchTmmbnControlFrame class.

    @param entry The entry.
*/
+ (FMLiveSwitchTmmbnControlFrame*) tmmbnControlFrameWithEntry:(FMLiveSwitchTmmbnEntry*)entry;
/**

    Initializes a new instance of the FMLiveSwitchTmmbnControlFrame class.

    @param maximumBitrate The maximum bitrate.
    @param synchronizationSource The synchronization source.
*/
+ (FMLiveSwitchTmmbnControlFrame*) tmmbnControlFrameWithMaximumBitrate:(long long)maximumBitrate synchronizationSource:(long long)synchronizationSource;

@end

/**

    An RTCP temporary maximum media-stream bitrate request (TMMBR) packet.

*/
@interface FMLiveSwitchTmmbrControlFrame : FMLiveSwitchRtpControlFrame

/**

    Gets the entries.

*/
- (NSMutableArray*) entries;
/**

    Gets the entry.

*/
- (FMLiveSwitchTmmbrEntry*) entry;
/**

    Initializes a new instance of the FMLiveSwitchTmmbrControlFrame class.

    @param buffer The buffer.
*/
- (instancetype) initWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchTmmbrControlFrame class.

    @param entries The entries.
*/
- (instancetype) initWithEntries:(NSMutableArray*)entries;
/**

    Initializes a new instance of the FMLiveSwitchTmmbrControlFrame class.

    @param entry The entry.
*/
- (instancetype) initWithEntry:(FMLiveSwitchTmmbrEntry*)entry;
/**

    Initializes a new instance of the FMLiveSwitchTmmbrControlFrame class.

    @param maximumBitrate The maximum bitrate.
    @param synchronizationSource The synchronization source.
*/
- (instancetype) initWithMaximumBitrate:(long long)maximumBitrate synchronizationSource:(long long)synchronizationSource;
/**

    Creates a FMLiveSwitchTmmbrControlFrame using normalized parameters.

    @param normalizedMaximumBitrate The normalized maximum bitrate.
    @param synchronizationSource The synchronization source.
*/
+ (FMLiveSwitchTmmbrControlFrame*) normalizedWithNormalizedMaximumBitrate:(int)normalizedMaximumBitrate synchronizationSource:(long long)synchronizationSource;
/**

    Creates a FMLiveSwitchTmmbrControlFrame using normalized parameters.

    @param normalizedMaximumBitrate The normalized maximum bitrate.
    @param synchronizationSource The synchronization source.
    @param packetSenderSynchronizationSource The packet sender synchronization source.
*/
+ (FMLiveSwitchTmmbrControlFrame*) normalizedWithNormalizedMaximumBitrate:(int)normalizedMaximumBitrate synchronizationSource:(long long)synchronizationSource packetSenderSynchronizationSource:(long long)packetSenderSynchronizationSource;
/**

    Gets the type of the registered feedback message.

*/
+ (int) registeredFeedbackMessageType;
/**

    Sets the entries.

*/
- (void) setEntries:(NSMutableArray*)value;
/**

    Sets the entry.

*/
- (void) setEntry:(FMLiveSwitchTmmbrEntry*)value;
/**

    Initializes a new instance of the FMLiveSwitchTmmbrControlFrame class.

    @param buffer The buffer.
*/
+ (FMLiveSwitchTmmbrControlFrame*) tmmbrControlFrameWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchTmmbrControlFrame class.

    @param entries The entries.
*/
+ (FMLiveSwitchTmmbrControlFrame*) tmmbrControlFrameWithEntries:(NSMutableArray*)entries;
/**

    Initializes a new instance of the FMLiveSwitchTmmbrControlFrame class.

    @param entry The entry.
*/
+ (FMLiveSwitchTmmbrControlFrame*) tmmbrControlFrameWithEntry:(FMLiveSwitchTmmbrEntry*)entry;
/**

    Initializes a new instance of the FMLiveSwitchTmmbrControlFrame class.

    @param maximumBitrate The maximum bitrate.
    @param synchronizationSource The synchronization source.
*/
+ (FMLiveSwitchTmmbrControlFrame*) tmmbrControlFrameWithMaximumBitrate:(long long)maximumBitrate synchronizationSource:(long long)synchronizationSource;

@end

/**

    A G.722 decoder.

*/
@interface FMLiveSwitchG722Decoder : FMLiveSwitchAudioDecoder

/**

    Initializes a new instance of the FMLiveSwitchG722Decoder class.

*/
+ (FMLiveSwitchG722Decoder*) decoder;
/**

    Initializes a new instance of the FMLiveSwitchG722Decoder class.

    @param config The configuration.
*/
+ (FMLiveSwitchG722Decoder*) decoderWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchG722Decoder class.

    @param input The input.
*/
+ (FMLiveSwitchG722Decoder*) decoderWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchAudioFrame*)frame inputBuffer:(FMLiveSwitchAudioBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchG722Decoder class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchG722Decoder class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchG722Decoder class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;

@end

/**

    A G.722 depacketizer.

*/
@interface FMLiveSwitchG722Depacketizer : FMLiveSwitchBasicAudioDepacketizer

/**

    Initializes a new instance of the FMLiveSwitchG722Depacketizer class.

*/
+ (FMLiveSwitchG722Depacketizer*) depacketizer;
/**

    Initializes a new instance of the FMLiveSwitchG722Depacketizer class.

    @param config The configuration.
*/
+ (FMLiveSwitchG722Depacketizer*) depacketizerWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchG722Depacketizer class.

    @param input The input.
*/
+ (FMLiveSwitchG722Depacketizer*) depacketizerWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchG722Depacketizer class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchG722Depacketizer class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchG722Depacketizer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;

@end

/**

    A G.722 encoder.

*/
@interface FMLiveSwitchG722Encoder : FMLiveSwitchAudioEncoder

/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchAudioFrame*)frame inputBuffer:(FMLiveSwitchAudioBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchG722Encoder class.

*/
+ (FMLiveSwitchG722Encoder*) encoder;
/**

    Initializes a new instance of the FMLiveSwitchG722Encoder class.

    @param config The configuration.
*/
+ (FMLiveSwitchG722Encoder*) encoderWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchG722Encoder class.

    @param input The input.
*/
+ (FMLiveSwitchG722Encoder*) encoderWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchG722Encoder class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchG722Encoder class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchG722Encoder class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;

@end

/**

    A G.722 format.

*/
@interface FMLiveSwitchG722Format : FMLiveSwitchAudioFormat

/**

    Creates a new instance.

*/
- (FMLiveSwitchAudioFormat*) createInstance;
/**

    Gets the default clock rate (1).

*/
+ (int) defaultChannelCount;
/**

    Gets the default clock rate (16000).

*/
+ (int) defaultClockRate;
/**

    Gets the default configuration (16000/1).

*/
+ (FMLiveSwitchAudioConfig*) defaultConfig;
/**

    Initializes a new instance of the FMLiveSwitchG722Format class.

*/
+ (FMLiveSwitchG722Format*) format;
/**

    Initializes a new instance of the FMLiveSwitchG722Format class.

    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
+ (FMLiveSwitchG722Format*) formatWithClockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Initializes a new instance of the FMLiveSwitchG722Format class.

    @param config The configuration.
*/
+ (FMLiveSwitchG722Format*) formatWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchG722Format class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchG722Format class.

    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
- (instancetype) initWithClockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Initializes a new instance of the FMLiveSwitchG722Format class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Gets the maximum bitrate supported by this format, in kbps.

*/
- (int) maxBitrate;
/**

    Gets the minimum bitrate supported by this format, in kbps.

*/
- (int) minBitrate;

@end

/**

    A G.722 packetizer.

*/
@interface FMLiveSwitchG722Packetizer : FMLiveSwitchBasicAudioPacketizer

/**

    Initializes a new instance of the FMLiveSwitchG722Packetizer class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchG722Packetizer class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchG722Packetizer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Initializes a new instance of the FMLiveSwitchG722Packetizer class.

*/
+ (FMLiveSwitchG722Packetizer*) packetizer;
/**

    Initializes a new instance of the FMLiveSwitchG722Packetizer class.

    @param config The configuration.
*/
+ (FMLiveSwitchG722Packetizer*) packetizerWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchG722Packetizer class.

    @param input The input.
*/
+ (FMLiveSwitchG722Packetizer*) packetizerWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;

@end

/**

    An audio pipe that clones each input frame and
    includes only the last buffer in its output.

*/
@interface FMLiveSwitchResetAudioPipe : FMLiveSwitchAudioPipe

/**

    Gets the callback that determines whether a
    media control frame should be raised by this pipe.

*/
- (FMLiveSwitchFunction1<FMLiveSwitchMediaControlFrame*,id>*) controlFrameAllowed;
/**

    Gets the callback that determines whether a
    media control frame response should be raised by this pipe.

*/
- (FMLiveSwitchFunction1<FMLiveSwitchMediaControlFrame*,id>*) controlFrameResponseAllowed;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes control frame responses.

    @param controlFrameResponses The control frame responses.
*/
- (void) doProcessControlFrameResponses:(NSMutableArray*)controlFrameResponses;
/**

    Processes control frames.

    @param controlFrames The control frames.
*/
- (void) doProcessControlFrames:(NSMutableArray*)controlFrames;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchAudioFrame*)frame inputBuffer:(FMLiveSwitchAudioBuffer*)inputBuffer;
/**

    Initializes a new FMLiveSwitchResetAudioPipe.

    @param format The input/output format.
*/
- (instancetype) initWithFormat:(FMLiveSwitchAudioFormat*)format;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Initializes a new FMLiveSwitchResetAudioPipe.

    @param format The input/output format.
*/
+ (FMLiveSwitchResetAudioPipe*) resetAudioPipeWithFormat:(FMLiveSwitchAudioFormat*)format;
/**

    Sets the callback that determines whether a
    media control frame should be raised by this pipe.

*/
- (void) setControlFrameAllowed:(FMLiveSwitchFunction1<FMLiveSwitchMediaControlFrame*,id>*)value;
/**

    Sets the callback that determines whether a
    media control frame should be raised by this pipe.

*/
- (void (^)(bool(^)(FMLiveSwitchMediaControlFrame*))) setControlFrameAllowedBlock;
/**

    Sets the callback that determines whether a
    media control frame should be raised by this pipe.

*/
- (void) setControlFrameAllowedBlock:(bool(^)(FMLiveSwitchMediaControlFrame*))valueBlock;
/**

    Sets the callback that determines whether a
    media control frame response should be raised by this pipe.

*/
- (void) setControlFrameResponseAllowed:(FMLiveSwitchFunction1<FMLiveSwitchMediaControlFrame*,id>*)value;
/**

    Sets the callback that determines whether a
    media control frame response should be raised by this pipe.

*/
- (void (^)(bool(^)(FMLiveSwitchMediaControlFrame*))) setControlFrameResponseAllowedBlock;
/**

    Sets the callback that determines whether a
    media control frame response should be raised by this pipe.

*/
- (void) setControlFrameResponseAllowedBlock:(bool(^)(FMLiveSwitchMediaControlFrame*))valueBlock;

@end

/**

    A video pipe that clones each input frame and
    includes only the last buffer in its output.

*/
@interface FMLiveSwitchResetVideoPipe : FMLiveSwitchVideoPipe

/**

    Gets the callback that determines whether a
    media control frame should be raised by this pipe.

*/
- (FMLiveSwitchFunction1<FMLiveSwitchMediaControlFrame*,id>*) controlFrameAllowed;
/**

    Gets the callback that determines whether a
    media control frame response should be raised by this pipe.

*/
- (FMLiveSwitchFunction1<FMLiveSwitchMediaControlFrame*,id>*) controlFrameResponseAllowed;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes control frame responses.

    @param controlFrameResponses The control frame responses.
*/
- (void) doProcessControlFrameResponses:(NSMutableArray*)controlFrameResponses;
/**

    Processes control frames.

    @param controlFrames The control frames.
*/
- (void) doProcessControlFrames:(NSMutableArray*)controlFrames;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchVideoFrame*)frame inputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Initializes a new FMLiveSwitchResetVideoPipe.

    @param format The input/output format.
*/
- (instancetype) initWithFormat:(FMLiveSwitchVideoFormat*)format;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Initializes a new FMLiveSwitchResetVideoPipe.

    @param format The input/output format.
*/
+ (FMLiveSwitchResetVideoPipe*) resetVideoPipeWithFormat:(FMLiveSwitchVideoFormat*)format;
/**

    Sets the callback that determines whether a
    media control frame should be raised by this pipe.

*/
- (void) setControlFrameAllowed:(FMLiveSwitchFunction1<FMLiveSwitchMediaControlFrame*,id>*)value;
/**

    Sets the callback that determines whether a
    media control frame should be raised by this pipe.

*/
- (void (^)(bool(^)(FMLiveSwitchMediaControlFrame*))) setControlFrameAllowedBlock;
/**

    Sets the callback that determines whether a
    media control frame should be raised by this pipe.

*/
- (void) setControlFrameAllowedBlock:(bool(^)(FMLiveSwitchMediaControlFrame*))valueBlock;
/**

    Sets the callback that determines whether a
    media control frame response should be raised by this pipe.

*/
- (void) setControlFrameResponseAllowed:(FMLiveSwitchFunction1<FMLiveSwitchMediaControlFrame*,id>*)value;
/**

    Sets the callback that determines whether a
    media control frame response should be raised by this pipe.

*/
- (void (^)(bool(^)(FMLiveSwitchMediaControlFrame*))) setControlFrameResponseAllowedBlock;
/**

    Sets the callback that determines whether a
    media control frame response should be raised by this pipe.

*/
- (void) setControlFrameResponseAllowedBlock:(bool(^)(FMLiveSwitchMediaControlFrame*))valueBlock;

@end

/**

    A video source.

*/
@interface FMLiveSwitchVideoSource : FMLiveSwitchMediaSource<NSObject<FMLiveSwitchIVideoOutput>*,NSObject<FMLiveSwitchIVideoInput>*,FMLiveSwitchIVideoInputCollection*,FMLiveSwitchVideoSource*,FMLiveSwitchVideoFrame*,FMLiveSwitchVideoBuffer*,FMLiveSwitchVideoBufferCollection*,FMLiveSwitchVideoFormat*><FMLiveSwitchIVideoOutput, FMLiveSwitchIMediaOutput, FMLiveSwitchIOutput, FMLiveSwitchIVideoElement, FMLiveSwitchIMediaElement, FMLiveSwitchIElement>

/**

    Adds a handler that is raised when a frame is about to be raised with
    a size that does not match the prior frame.

*/
- (void) addOnRaiseSizeChange:(FMLiveSwitchAction1<FMLiveSwitchSize*>*)value;
/**

    Adds a handler that is raised when a frame is about to be raised with
    a size that does not match the prior frame.

*/
- (void (^)(void(^)(FMLiveSwitchSize*))) addOnRaiseSizeChangeWithBlock;
/**

    Adds a handler that is raised when a frame is about to be raised with
    a size that does not match the prior frame.

*/
- (void) addOnRaiseSizeChangeWithBlock:(void(^)(FMLiveSwitchSize*))valueBlock;
/**

    Gets the average frame rate.

*/
- (int) averageFrameRate;
/**

    Gets the content descriptor.

*/
- (NSString*) content;
/**

    Creates an input collection.

    @param output The source.
*/
- (FMLiveSwitchIVideoInputCollection*) createInputCollectionWithOutput:(NSObject<FMLiveSwitchIVideoOutput>*)output;
/**

    Gets the frame count.

*/
- (long long) frameCount;
/**

    Gets the distance between two frame rates.

    @param frameRate1 The first frame rate.
    @param frameRate2 The second frame rate.
    @return The positive distance between the two frame rates.
*/
- (double) getFrameRateDistanceWithFrameRate1:(double)frameRate1 frameRate2:(double)frameRate2;
/**

    Gets the distance between two sizes.

    @param width1 The first width.
    @param height1 The first height.
    @param width2 The second width.
    @param height2 The second height.
    @return The positive linear distance between the two sizes.
*/
- (int) getSizeDistanceWithWidth1:(int)width1 height1:(int)height1 width2:(int)width2 height2:(int)height2;
/**

    Initializes a new instance of the FMLiveSwitchVideoSource class.

    @param outputFormat The output format.
*/
- (instancetype) initWithOutputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Gets the maximum allowed output encoding.

*/
- (FMLiveSwitchEncodingInfo*) maxOutputEncoding;
/**

    Gets the maximum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxOutputFrameRate;
/**

    Gets the maximum allowed output height.
    A value of -1 indicates unset (no minimum).

*/
- (int) maxOutputHeight;
/**

    Gets the maximum allowed output scale.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxOutputScale;
/**

    Gets the maximum allowed output size.
    A value of null indicates unset (no maximum).

*/
- (FMLiveSwitchSize*) maxOutputSize;
/**

    Gets the maximum allowed output width.
    A value of -1 indicates unset (no minimum).

*/
- (int) maxOutputWidth;
/**

    Gets the minimum allowed output encoding.

*/
- (FMLiveSwitchEncodingInfo*) minOutputEncoding;
/**

    Gets the minimum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (double) minOutputFrameRate;
/**

    Gets the minimum allowed output height.
    A value of -1 indicates unset (no minimum).

*/
- (int) minOutputHeight;
/**

    Gets the minimum allowed output scale.
    A value of -1 indicates unset (no minimum).

*/
- (double) minOutputScale;
/**

    Gets the minimum allowed output size.
    A value of null indicates unset (no minimum).

*/
- (FMLiveSwitchSize*) minOutputSize;
/**

    Gets the minimum allowed output width.
    A value of -1 indicates unset (no minimum).

*/
- (int) minOutputWidth;
/**

    Determines whether an output can process a frame from this pipe.

    @param output The output.
*/
- (bool) outputCanProcessFrameWithOutput:(NSObject<FMLiveSwitchIVideoInput>*)output;
/**

    Gets whether the source frame-rate is over-constrained.
    A source frame-rate is over-constrained if the output
    frame-rate is over-constrained.

*/
- (bool) overConstrainedFrameRate;
/**

    Gets whether the source height is over-constrained.
    A source height is over-constrained if the output
    height is over-constrained.

*/
- (bool) overConstrainedHeight;
/**

    Gets whether the output is over-contrained.
    An output is over-constrained if it's
    output bitrate, output scale, output frame-rate,
    output size is over-contrained.

*/
- (bool) overConstrainedOutput;
/**

    Gets whether the minimum allowed output frame-rate exceeds the maximum allowed output frame-rate.

*/
- (bool) overConstrainedOutputFrameRate;
/**

    Gets whether the minimum allowed output height exceeds the maximum allowed output height.

*/
- (bool) overConstrainedOutputHeight;
/**

    Gets whether the minimum allowed output scale exceeds the maximum allowed output scale.

*/
- (bool) overConstrainedOutputScale;
/**

    Gets whether the minimum allowed output size exceeds the maximum allowed output size.

*/
- (bool) overConstrainedOutputSize;
/**

    Gets whether the minimum allowed output width exceeds the maximum allowed output width.

*/
- (bool) overConstrainedOutputWidth;
/**

    Gets whether the source scale is over-constrained.
    A source scale is over-constrained if the output
    scale is over-constrained.

*/
- (bool) overConstrainedScale;
/**

    Gets whether the source size is over-constrained.
    A source size is over-constrained if the output
    size is over-constrained.

*/
- (bool) overConstrainedSize;
/**

    Gets whether the source width is over-constrained.
    A source width is over-constrained if the output
    width is over-constrained.

*/
- (bool) overConstrainedWidth;
/**

    Raises a frame.

    @param frame The frame.
*/
- (void) raiseFrame:(FMLiveSwitchVideoFrame*)frame;
/**

    Removes a handler that is raised when a frame is about to be raised with
    a size that does not match the prior frame.

*/
- (void) removeOnRaiseSizeChange:(FMLiveSwitchAction1<FMLiveSwitchSize*>*)value;
/**

    Sets the maximum allowed output encoding.

*/
- (void) setMaxOutputEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Sets the maximum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (void) setMaxOutputFrameRate:(double)value;
/**

    Sets the maximum allowed output scale.
    A value of -1 indicates unset (no maximum).

*/
- (void) setMaxOutputScale:(double)value;
/**

    Sets the maximum allowed output size.
    A value of null indicates unset (no maximum).

*/
- (void) setMaxOutputSize:(FMLiveSwitchSize*)value;
/**

    Sets the minimum allowed output encoding.

*/
- (void) setMinOutputEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Sets the minimum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (void) setMinOutputFrameRate:(double)value;
/**

    Sets the minimum allowed output scale.
    A value of -1 indicates unset (no minimum).

*/
- (void) setMinOutputScale:(double)value;
/**

    Sets the minimum allowed output size.
    A value of null indicates unset (no minimum).

*/
- (void) setMinOutputSize:(FMLiveSwitchSize*)value;
/**

    Sets the target output encoding.

*/
- (void) setTargetOutputEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Sets the target output frame-rate, in fps.
    A value of -1 indicates unset (no target).

*/
- (void) setTargetOutputFrameRate:(double)value;
/**

    Sets the target output scale.
    A value of -1 indicates unset (no target).

*/
- (void) setTargetOutputScale:(double)value;
/**

    Sets the target output size.
    A value of null indicates unset (no target).

*/
- (void) setTargetOutputSize:(FMLiveSwitchSize*)value;
/**

    Sets the video type.

*/
- (void) setVideoType:(FMLiveSwitchVideoType)value;
/**

    Gets the target output encoding.

*/
- (FMLiveSwitchEncodingInfo*) targetOutputEncoding;
/**

    Gets the target output frame-rate, in fps.
    A value of -1 indicates unset (no target).

*/
- (double) targetOutputFrameRate;
/**

    Gets the target output height.
    A value of -1 indicates unset (no minimum).

*/
- (int) targetOutputHeight;
/**

    Gets the target output scale.
    A value of -1 indicates unset (no target).

*/
- (double) targetOutputScale;
/**

    Gets the target output size.
    A value of null indicates unset (no target).

*/
- (FMLiveSwitchSize*) targetOutputSize;
/**

    Gets the target output width.
    A value of -1 indicates unset (no minimum).

*/
- (int) targetOutputWidth;
/**

    Initializes a new instance of the FMLiveSwitchVideoSource class.

    @param outputFormat The output format.
*/
+ (FMLiveSwitchVideoSource*) videoSourceWithOutputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Gets the video type.

*/
- (FMLiveSwitchVideoType) videoType;

@end

/**

    A base class for camera-based sources.

*/
@interface FMLiveSwitchCameraSourceBase : FMLiveSwitchVideoSource

/**

    Initializes a new instance of the FMLiveSwitchScreenSourceBase class.

    @param outputFormat The output format.
    @param targetConfig The target configuration.
*/
+ (FMLiveSwitchCameraSourceBase*) cameraSourceBaseWithOutputFormat:(FMLiveSwitchVideoFormat*)outputFormat targetConfig:(FMLiveSwitchVideoConfig*)targetConfig;
/**

    Gets the current config.
    A value of null indicates unset (pass-through).

*/
- (FMLiveSwitchVideoConfig*) config;
/**

    Gets the current frame-rate, in fps.
    A value of -1 indicates unset, and will
    default to the target frame-rate.

*/
- (double) frameRate;
/**

    Initializes a new instance of the FMLiveSwitchScreenSourceBase class.

    @param outputFormat The output format.
    @param targetConfig The target configuration.
*/
- (instancetype) initWithOutputFormat:(FMLiveSwitchVideoFormat*)outputFormat targetConfig:(FMLiveSwitchVideoConfig*)targetConfig;
/**

    Gets the maximum output frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxFrameRate;
/**

    Gets the maximum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxOutputFrameRate;
/**

    Gets the maximum allowed output size.
    A value of null indicates unset (no maximum).

*/
- (FMLiveSwitchSize*) maxOutputSize;
/**

    Gets the maximum output size.
    A value of null indicates unset (no maximum).

*/
- (FMLiveSwitchSize*) maxSize;
/**

    Gets the maximum supported frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxSupportedFrameRate;
/**

    Gets the maximum supported size.
    A value of null indicates unset (no maximum).

*/
- (FMLiveSwitchSize*) maxSupportedSize;
/**

    Gets the minimum frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (double) minFrameRate;
/**

    Gets the minimum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (double) minOutputFrameRate;
/**

    Gets the minimum allowed output size.
    A value of null indicates unset (no minimum).

*/
- (FMLiveSwitchSize*) minOutputSize;
/**

    Gets the minimum size.
    A value of null indicates unset (no minimum).

*/
- (FMLiveSwitchSize*) minSize;
/**

    Gets the minimum supported frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (double) minSupportedFrameRate;
/**

    Gets the minimum supported size.
    A value of null indicates unset (no minimum).

*/
- (FMLiveSwitchSize*) minSupportedSize;
/**

    Sets the current config.
    A value of null indicates unset (pass-through).

*/
- (void) setConfig:(FMLiveSwitchVideoConfig*)value;
/**

    Sets the current frame-rate, in fps.
    A value of -1 indicates unset, and will
    default to the target frame-rate.

*/
- (void) setFrameRate:(double)value;
/**

    Sets the maximum output frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (void) setMaxFrameRate:(double)value;
/**

    Sets the maximum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (void) setMaxOutputFrameRate:(double)value;
/**

    Sets the maximum allowed output size.
    A value of null indicates unset (no maximum).

*/
- (void) setMaxOutputSize:(FMLiveSwitchSize*)value;
/**

    Sets the maximum output size.
    A value of null indicates unset (no maximum).

*/
- (void) setMaxSize:(FMLiveSwitchSize*)value;
/**

    Sets the minimum frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (void) setMinFrameRate:(double)value;
/**

    Sets the minimum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (void) setMinOutputFrameRate:(double)value;
/**

    Sets the minimum allowed output size.
    A value of null indicates unset (no minimum).

*/
- (void) setMinOutputSize:(FMLiveSwitchSize*)value;
/**

    Sets the minimum size.
    A value of null indicates unset (no minimum).

*/
- (void) setMinSize:(FMLiveSwitchSize*)value;
/**

    Sets the current size.
    A value of null indicates unset, and will
    default to the target size.

*/
- (void) setSize:(FMLiveSwitchSize*)value;
/**

    Sets whether FMLiveSwitchCameraSourceBase#minOutputFrameRate and
    FMLiveSwitchCameraSourceBase#maxOutputFrameRate should return
    FMLiveSwitchCameraSourceBase#minSupportedFrameRate and
    FMLiveSwitchCameraSourceBase#maxSupportedFrameRate, respectively, or
    response to changes in FMLiveSwitchCameraSourceBase#minFrameRate and
    FMLiveSwitchCameraSourceBase#maxFrameRate.

*/
- (void) setStaticOutputFrameRate:(bool)value;
/**

    Sets whether FMLiveSwitchCameraSourceBase#minOutputSize and
    FMLiveSwitchCameraSourceBase#maxOutputSize should return
    FMLiveSwitchCameraSourceBase#minSupportedSize and
    FMLiveSwitchCameraSourceBase#maxSupportedSize, respectively, or
    response to changes in FMLiveSwitchCameraSourceBase#minSize and
    FMLiveSwitchCameraSourceBase#maxSize.

*/
- (void) setStaticOutputSize:(bool)value;
/**

    Sets the target config.
    A value of null indicates unset (no target).

*/
- (void) setTargetConfig:(FMLiveSwitchVideoConfig*)value;
/**

    Sets the target frame-rate, in fps.

*/
- (void) setTargetFrameRate:(double)value;
/**

    Sets the target output frame-rate, in fps.

*/
- (void) setTargetOutputFrameRate:(double)value;
/**

    Sets the target output size.

*/
- (void) setTargetOutputSize:(FMLiveSwitchSize*)value;
/**

    Sets the target size.

*/
- (void) setTargetSize:(FMLiveSwitchSize*)value;
/**

    Gets the current size.
    A value of null indicates unset, and will
    default to the target size.

*/
- (FMLiveSwitchSize*) size;
/**

    Gets whether FMLiveSwitchCameraSourceBase#minOutputFrameRate and
    FMLiveSwitchCameraSourceBase#maxOutputFrameRate should return
    FMLiveSwitchCameraSourceBase#minSupportedFrameRate and
    FMLiveSwitchCameraSourceBase#maxSupportedFrameRate, respectively, or
    response to changes in FMLiveSwitchCameraSourceBase#minFrameRate and
    FMLiveSwitchCameraSourceBase#maxFrameRate.

*/
- (bool) staticOutputFrameRate;
/**

    Gets whether FMLiveSwitchCameraSourceBase#minOutputSize and
    FMLiveSwitchCameraSourceBase#maxOutputSize should return
    FMLiveSwitchCameraSourceBase#minSupportedSize and
    FMLiveSwitchCameraSourceBase#maxSupportedSize, respectively, or
    response to changes in FMLiveSwitchCameraSourceBase#minSize and
    FMLiveSwitchCameraSourceBase#maxSize.

*/
- (bool) staticOutputSize;
/**

    Gets the target config.
    A value of null indicates unset (no target).

*/
- (FMLiveSwitchVideoConfig*) targetConfig;
/**

    Gets the target frame-rate, in fps.

*/
- (double) targetFrameRate;
/**

    Gets the target output frame-rate, in fps.

*/
- (double) targetOutputFrameRate;
/**

    Gets the target output size.

*/
- (FMLiveSwitchSize*) targetOutputSize;
/**

    Gets the target size.

*/
- (FMLiveSwitchSize*) targetSize;

@end

/**

    A moving average.

*/
@interface FMLiveSwitchMovingAverage : NSObject

/**

    Adds a sample.

    @param value The value to add.
*/
- (void) add:(long long)value;
/**

    Gets the average.

*/
- (long long) average;
/**

    Initializes a new instance of the FMLiveSwitchMovingAverage class.

    @param lookback The number of lookback values.
*/
- (instancetype) initWithLookback:(int)lookback;
/**

    Initializes a new instance of the FMLiveSwitchMovingAverage class.

    @param lookback The number of lookback values.
*/
+ (FMLiveSwitchMovingAverage*) movingAverageWithLookback:(int)lookback;

@end

/**

    A base class for screen-based sources.

*/
@interface FMLiveSwitchScreenSourceBase : FMLiveSwitchVideoSource

/**

    Gets the current config.
    A value of null indicates unset (pass-through).

*/
- (FMLiveSwitchScreenConfig*) config;
/**

    Gets the current frame-rate, in fps.
    A value of -1 indicates unset, and will
    default to the target frame-rate.

*/
- (double) frameRate;
/**

    Initializes a new instance of the FMLiveSwitchScreenSourceBase class.

    @param outputFormat The output format.
    @param targetConfig The target configuration.
*/
- (instancetype) initWithOutputFormat:(FMLiveSwitchVideoFormat*)outputFormat targetConfig:(FMLiveSwitchScreenConfig*)targetConfig;
/**

    Gets the maximum output frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxFrameRate;
/**

    Gets the maximum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxOutputFrameRate;
/**

    Gets the maximum allowed output size.
    A value of null indicates unset (no maximum).

*/
- (FMLiveSwitchSize*) maxOutputSize;
/**

    Gets the maximum output size.
    A value of null indicates unset (no maximum).

*/
- (FMLiveSwitchSize*) maxSize;
/**

    Gets the maximum supported frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxSupportedFrameRate;
/**

    Gets the maximum supported size.
    A value of null indicates unset (no maximum).

*/
- (FMLiveSwitchSize*) maxSupportedSize;
/**

    Gets the minimum frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (double) minFrameRate;
/**

    Gets the minimum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (double) minOutputFrameRate;
/**

    Gets the minimum allowed output size.
    A value of null indicates unset (no minimum).

*/
- (FMLiveSwitchSize*) minOutputSize;
/**

    Gets the minimum size.
    A value of null indicates unset (no minimum).

*/
- (FMLiveSwitchSize*) minSize;
/**

    Gets the minimum supported frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (double) minSupportedFrameRate;
/**

    Gets the minimum supported size.
    A value of null indicates unset (no minimum).

*/
- (FMLiveSwitchSize*) minSupportedSize;
/**

    Gets the current origin.

*/
- (FMLiveSwitchPoint*) origin;
/**

    Gets the current region.

*/
- (FMLiveSwitchRectangle*) region;
/**

    Initializes a new instance of the FMLiveSwitchScreenSourceBase class.

    @param outputFormat The output format.
    @param targetConfig The target configuration.
*/
+ (FMLiveSwitchScreenSourceBase*) screenSourceBaseWithOutputFormat:(FMLiveSwitchVideoFormat*)outputFormat targetConfig:(FMLiveSwitchScreenConfig*)targetConfig;
/**

    Sets the current config.
    A value of null indicates unset (pass-through).

*/
- (void) setConfig:(FMLiveSwitchScreenConfig*)value;
/**

    Sets the current frame-rate, in fps.
    A value of -1 indicates unset, and will
    default to the target frame-rate.

*/
- (void) setFrameRate:(double)value;
/**

    Sets the maximum output frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (void) setMaxFrameRate:(double)value;
/**

    Sets the maximum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (void) setMaxOutputFrameRate:(double)value;
/**

    Sets the maximum allowed output size.
    A value of null indicates unset (no maximum).

*/
- (void) setMaxOutputSize:(FMLiveSwitchSize*)value;
/**

    Sets the maximum output size.
    A value of null indicates unset (no maximum).

*/
- (void) setMaxSize:(FMLiveSwitchSize*)value;
/**

    Sets the minimum frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (void) setMinFrameRate:(double)value;
/**

    Sets the minimum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (void) setMinOutputFrameRate:(double)value;
/**

    Sets the minimum allowed output size.
    A value of null indicates unset (no minimum).

*/
- (void) setMinOutputSize:(FMLiveSwitchSize*)value;
/**

    Sets the minimum size.
    A value of null indicates unset (no minimum).

*/
- (void) setMinSize:(FMLiveSwitchSize*)value;
/**

    Sets the current origin.

*/
- (void) setOrigin:(FMLiveSwitchPoint*)value;
/**

    Sets the current region.

*/
- (void) setRegion:(FMLiveSwitchRectangle*)value;
/**

    Sets the current size.
    A value of null indicates unset, and will
    default to the target size.

*/
- (void) setSize:(FMLiveSwitchSize*)value;
/**

    Sets whether FMLiveSwitchScreenSourceBase#minOutputFrameRate and
    FMLiveSwitchScreenSourceBase#maxOutputFrameRate should return
    FMLiveSwitchScreenSourceBase#minSupportedFrameRate and
    FMLiveSwitchScreenSourceBase#maxSupportedFrameRate, respectively, or
    response to changes in FMLiveSwitchScreenSourceBase#minFrameRate and
    FMLiveSwitchScreenSourceBase#maxFrameRate.

*/
- (void) setStaticOutputFrameRate:(bool)value;
/**

    Sets whether FMLiveSwitchScreenSourceBase#minOutputSize and
    FMLiveSwitchScreenSourceBase#maxOutputSize should return
    FMLiveSwitchScreenSourceBase#minSupportedSize and
    FMLiveSwitchScreenSourceBase#maxSupportedSize, respectively, or
    response to changes in FMLiveSwitchScreenSourceBase#minSize and
    FMLiveSwitchScreenSourceBase#maxSize.

*/
- (void) setStaticOutputSize:(bool)value;
/**

    Sets the target config.
    A value of null indicates unset (no target).

*/
- (void) setTargetConfig:(FMLiveSwitchScreenConfig*)value;
/**

    Sets the target frame-rate, in fps.

*/
- (void) setTargetFrameRate:(double)value;
/**

    Sets the target origin.

*/
- (void) setTargetOrigin:(FMLiveSwitchPoint*)value;
/**

    Sets the target output frame-rate, in fps.

*/
- (void) setTargetOutputFrameRate:(double)value;
/**

    Sets the target output size.

*/
- (void) setTargetOutputSize:(FMLiveSwitchSize*)value;
/**

    Sets the target region.

*/
- (void) setTargetRegion:(FMLiveSwitchRectangle*)value;
/**

    Sets the target size.

*/
- (void) setTargetSize:(FMLiveSwitchSize*)value;
/**

    Gets the current size.
    A value of null indicates unset, and will
    default to the target size.

*/
- (FMLiveSwitchSize*) size;
/**

    Gets whether FMLiveSwitchScreenSourceBase#minOutputFrameRate and
    FMLiveSwitchScreenSourceBase#maxOutputFrameRate should return
    FMLiveSwitchScreenSourceBase#minSupportedFrameRate and
    FMLiveSwitchScreenSourceBase#maxSupportedFrameRate, respectively, or
    response to changes in FMLiveSwitchScreenSourceBase#minFrameRate and
    FMLiveSwitchScreenSourceBase#maxFrameRate.

*/
- (bool) staticOutputFrameRate;
/**

    Gets whether FMLiveSwitchScreenSourceBase#minOutputSize and
    FMLiveSwitchScreenSourceBase#maxOutputSize should return
    FMLiveSwitchScreenSourceBase#minSupportedSize and
    FMLiveSwitchScreenSourceBase#maxSupportedSize, respectively, or
    response to changes in FMLiveSwitchScreenSourceBase#minSize and
    FMLiveSwitchScreenSourceBase#maxSize.

*/
- (bool) staticOutputSize;
/**

    Gets the target config.
    A value of null indicates unset (no target).

*/
- (FMLiveSwitchScreenConfig*) targetConfig;
/**

    Gets the target frame-rate, in fps.

*/
- (double) targetFrameRate;
/**

    Gets the target origin.

*/
- (FMLiveSwitchPoint*) targetOrigin;
/**

    Gets the target output frame-rate, in fps.

*/
- (double) targetOutputFrameRate;
/**

    Gets the target output size.

*/
- (FMLiveSwitchSize*) targetOutputSize;
/**

    Gets the target region.

*/
- (FMLiveSwitchRectangle*) targetRegion;
/**

    Gets the target size.

*/
- (FMLiveSwitchSize*) targetSize;

@end

@interface FMLiveSwitchCcmLrrPolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchCcmLrrPolicy)value;

@end

/**

    A utility for codec control messages (CCM).

*/
@interface FMLiveSwitchCcmUtility : NSObject

+ (FMLiveSwitchCcmUtility*) ccmUtility;
/**

    Gets the delta between sequence numbers, adjusted for overflow.

    @param sequenceNumber The current sequence number.
    @param lastSequenceNumber The last sequence number.
*/
+ (int) getSequenceNumberDeltaWithSequenceNumber:(int)sequenceNumber lastSequenceNumber:(int)lastSequenceNumber;
- (instancetype) init;

@end

/**

    A frame-rate pipe.

*/
@interface FMLiveSwitchFrameRatePipe : FMLiveSwitchVideoPipe

/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Pre-processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doPreProcessFrame:(FMLiveSwitchVideoFrame*)frame inputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchVideoFrame*)frame inputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Gets the current frame-rate, in fps.
    A value of -1 indicates unset (pass-through).

*/
- (double) frameRate;
/**

    Indicates that the frame-rate has changed.

    @param oldFrameRate The old frame-rate.
    @param newFrameRate The new frame-rate.
*/
- (void) frameRateChangedWithOldFrameRate:(double)oldFrameRate newFrameRate:(double)newFrameRate;
/**

    Indicates that the frame-rate is about to change.

    @param oldFrameRate The old frame-rate.
    @param newFrameRate The new frame-rate.
*/
- (void) frameRateChangingWithOldFrameRate:(double)oldFrameRate newFrameRate:(double)newFrameRate;
/**

    Initializes a new instance of the FMLiveSwitchFrameRatePipe class.

    @param format 
*/
+ (FMLiveSwitchFrameRatePipe*) frameRatePipeWithFormat:(FMLiveSwitchVideoFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchFrameRatePipe class.

    @param format 
*/
- (instancetype) initWithFormat:(FMLiveSwitchVideoFormat*)format;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets the maximum output frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxFrameRate;
/**

    Gets the maximum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxOutputFrameRate;
/**

    Gets the maximum supported frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxSupportedFrameRate;
/**

    Gets the minimum frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (double) minFrameRate;
/**

    Gets the minimum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (double) minOutputFrameRate;
/**

    Gets the minimum supported frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (double) minSupportedFrameRate;
/**

    Sets the current frame-rate, in fps.
    A value of -1 indicates unset (pass-through).

*/
- (void) setFrameRate:(double)value;
/**

    Sets the maximum output frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (void) setMaxFrameRate:(double)value;
/**

    Sets the maximum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (void) setMaxOutputFrameRate:(double)value;
/**

    Sets the minimum frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (void) setMinFrameRate:(double)value;
/**

    Sets the minimum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (void) setMinOutputFrameRate:(double)value;
/**

    Sets whether FMLiveSwitchFrameRatePipe#minOutputFrameRate and
    FMLiveSwitchFrameRatePipe#maxOutputFrameRate should return
    FMLiveSwitchFrameRatePipe#minSupportedFrameRate and
    FMLiveSwitchFrameRatePipe#maxSupportedFrameRate, respectively, or
    response to changes in FMLiveSwitchFrameRatePipe#minFrameRate and
    FMLiveSwitchFrameRatePipe#maxFrameRate.

*/
- (void) setStaticOutputFrameRate:(bool)value;
/**

    Sets the target frame-rate, in fps.
    A value of -1 indicates unset (no target).

*/
- (void) setTargetFrameRate:(double)value;
/**

    Sets the target output frame-rate, in fps.
    A value of -1 indicates unset (no target).

*/
- (void) setTargetOutputFrameRate:(double)value;
/**

    Gets whether FMLiveSwitchFrameRatePipe#minOutputFrameRate and
    FMLiveSwitchFrameRatePipe#maxOutputFrameRate should return
    FMLiveSwitchFrameRatePipe#minSupportedFrameRate and
    FMLiveSwitchFrameRatePipe#maxSupportedFrameRate, respectively, or
    response to changes in FMLiveSwitchFrameRatePipe#minFrameRate and
    FMLiveSwitchFrameRatePipe#maxFrameRate.

*/
- (bool) staticOutputFrameRate;
/**

    Gets the target frame-rate, in fps.
    A value of -1 indicates unset (no target).

*/
- (double) targetFrameRate;
/**

    Gets the target output frame-rate, in fps.
    A value of -1 indicates unset (no target).

*/
- (double) targetOutputFrameRate;

@end

/**

    A frame-rate controller.

*/
@interface FMLiveSwitchFrameRateController : FMLiveSwitchFrameRatePipe

/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchVideoFrame*)frame inputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Indicates that the frame-rate has changed.

    @param oldFrameRate The old frame-rate.
    @param newFrameRate The new frame-rate.
*/
- (void) frameRateChangedWithOldFrameRate:(double)oldFrameRate newFrameRate:(double)newFrameRate;
/**

    Initializes a new instance of the FMLiveSwitchFrameRateController class.

    @param format 
*/
+ (FMLiveSwitchFrameRateController*) frameRateControllerWithFormat:(FMLiveSwitchVideoFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchFrameRateController class.

    @param format 
*/
- (instancetype) initWithFormat:(FMLiveSwitchVideoFormat*)format;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;

@end

/**

    An image size pipe.

*/
@interface FMLiveSwitchImageSizePipe : FMLiveSwitchVideoPipe

/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Pre-processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doPreProcessFrame:(FMLiveSwitchVideoFrame*)frame inputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchVideoFrame*)frame inputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchImageSizePipe class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
+ (FMLiveSwitchImageSizePipe*) imageSizePipeWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat outputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Initializes a new instance of the FMLiveSwitchImageSizePipe class.

    @param outputFormat The output format.
*/
+ (FMLiveSwitchImageSizePipe*) imageSizePipeWithOutputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Initializes a new instance of the FMLiveSwitchImageSizePipe class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
- (instancetype) initWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat outputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Initializes a new instance of the FMLiveSwitchImageSizePipe class.

    @param outputFormat The output format.
*/
- (instancetype) initWithOutputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets the maximum allowed output size.
    A value of null indicates unset (no maximum).

*/
- (FMLiveSwitchSize*) maxOutputSize;
/**

    Gets the maximum output size.
    A value of null indicates unset (no maximum).

*/
- (FMLiveSwitchSize*) maxSize;
/**

    Gets the maximum supported size.
    A value of null indicates unset (no maximum).

*/
- (FMLiveSwitchSize*) maxSupportedSize;
/**

    Gets the minimum allowed output size.
    A value of null indicates unset (no minimum).

*/
- (FMLiveSwitchSize*) minOutputSize;
/**

    Gets the minimum size.
    A value of null indicates unset (no minimum).

*/
- (FMLiveSwitchSize*) minSize;
/**

    Gets the minimum supported size.
    A value of null indicates unset (no minimum).

*/
- (FMLiveSwitchSize*) minSupportedSize;
/**

    Sets the maximum allowed output size.
    A value of null indicates unset (no maximum).

*/
- (void) setMaxOutputSize:(FMLiveSwitchSize*)value;
/**

    Sets the maximum output size.
    A value of null indicates unset (no maximum).

*/
- (void) setMaxSize:(FMLiveSwitchSize*)value;
/**

    Sets the minimum allowed output size.
    A value of null indicates unset (no minimum).

*/
- (void) setMinOutputSize:(FMLiveSwitchSize*)value;
/**

    Sets the minimum size.
    A value of null indicates unset (no minimum).

*/
- (void) setMinSize:(FMLiveSwitchSize*)value;
/**

    Sets the current size.
    A value of null indicates unset (pass-through).

*/
- (void) setSize:(FMLiveSwitchSize*)value;
/**

    Sets whether FMLiveSwitchImageSizePipe#minOutputSize and
    FMLiveSwitchImageSizePipe#maxOutputSize should return
    FMLiveSwitchImageSizePipe#minSupportedSize and
    FMLiveSwitchImageSizePipe#maxSupportedSize, respectively, or
    response to changes in FMLiveSwitchImageSizePipe#minSize and
    FMLiveSwitchImageSizePipe#maxSize.

*/
- (void) setStaticOutputSize:(bool)value;
/**

    Sets the target output size.
    A value of null indicates unset (no target).

*/
- (void) setTargetOutputSize:(FMLiveSwitchSize*)value;
/**

    Sets the target size.
    A value of null indicates unset (no target).

*/
- (void) setTargetSize:(FMLiveSwitchSize*)value;
/**

    Gets the current size.
    A value of null indicates unset (pass-through).

*/
- (FMLiveSwitchSize*) size;
/**

    Indicates that the size has changed.

    @param oldSize The old size.
    @param newSize The new size.
*/
- (void) sizeChangedWithOldSize:(FMLiveSwitchSize*)oldSize newSize:(FMLiveSwitchSize*)newSize;
/**

    Indicates that the size is about to change.

    @param oldSize The old size.
    @param newSize The new size.
*/
- (void) sizeChangingWithOldSize:(FMLiveSwitchSize*)oldSize newSize:(FMLiveSwitchSize*)newSize;
/**

    Gets whether FMLiveSwitchImageSizePipe#minOutputSize and
    FMLiveSwitchImageSizePipe#maxOutputSize should return
    FMLiveSwitchImageSizePipe#minSupportedSize and
    FMLiveSwitchImageSizePipe#maxSupportedSize, respectively, or
    response to changes in FMLiveSwitchImageSizePipe#minSize and
    FMLiveSwitchImageSizePipe#maxSize.

*/
- (bool) staticOutputSize;
/**

    Gets the target output size.
    A value of null indicates unset (no target).

*/
- (FMLiveSwitchSize*) targetOutputSize;
/**

    Gets the target size.
    A value of null indicates unset (no target).

*/
- (FMLiveSwitchSize*) targetSize;

@end

/**

    An image scale pipe.

*/
@interface FMLiveSwitchImageScalePipe : FMLiveSwitchVideoPipe

/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Pre-processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doPreProcessFrame:(FMLiveSwitchVideoFrame*)frame inputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchVideoFrame*)frame inputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchImageScalePipe class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
+ (FMLiveSwitchImageScalePipe*) imageScalePipeWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat outputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Initializes a new instance of the FMLiveSwitchImageScalePipe class.

    @param outputFormat The output format.
*/
+ (FMLiveSwitchImageScalePipe*) imageScalePipeWithOutputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Initializes a new instance of the FMLiveSwitchImageScalePipe class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
- (instancetype) initWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat outputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Initializes a new instance of the FMLiveSwitchImageScalePipe class.

    @param outputFormat The output format.
*/
- (instancetype) initWithOutputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets the maximum allowed output scale.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxOutputScale;
/**

    Gets the maximum output scale.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxScale;
/**

    Gets the maximum supported scale.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxSupportedScale;
/**

    Gets the minimum allowed output scale.
    A value of -1 indicates unset (no minimum).

*/
- (double) minOutputScale;
/**

    Gets the minimum output scale.
    A value of -1 indicates unset (no minimum).

*/
- (double) minScale;
/**

    Gets the minimum supported scale.
    A value of -1 indicates unset (no minimum).

*/
- (double) minSupportedScale;
/**

    Gets the current scale.
    A value of -1 indicates unset (pass-through).

*/
- (double) scale;
/**

    Indicates that the scale has changed.

    @param oldScale The old scale.
    @param newScale The new scale.
*/
- (void) scaleChangedWithOldScale:(double)oldScale newScale:(double)newScale;
/**

    Indicates that the scale is about to change.

    @param oldScale The old scale.
    @param newScale The new scale.
*/
- (void) scaleChangingWithOldScale:(double)oldScale newScale:(double)newScale;
/**

    Sets the maximum allowed output scale.
    A value of -1 indicates unset (no maximum).

*/
- (void) setMaxOutputScale:(double)value;
/**

    Sets the maximum output scale.
    A value of -1 indicates unset (no maximum).

*/
- (void) setMaxScale:(double)value;
/**

    Sets the minimum allowed output scale.
    A value of -1 indicates unset (no minimum).

*/
- (void) setMinOutputScale:(double)value;
/**

    Sets the minimum output scale.
    A value of -1 indicates unset (no minimum).

*/
- (void) setMinScale:(double)value;
/**

    Sets the current scale.
    A value of -1 indicates unset (pass-through).

*/
- (void) setScale:(double)value;
/**

    Sets whether FMLiveSwitchImageScalePipe#minOutputScale and
    FMLiveSwitchImageScalePipe#maxOutputScale should return
    FMLiveSwitchImageScalePipe#minSupportedScale and
    FMLiveSwitchImageScalePipe#maxSupportedScale, respectively, or
    response to changes in FMLiveSwitchImageScalePipe#minScale and
    FMLiveSwitchImageScalePipe#maxScale.

*/
- (void) setStaticOutputScale:(bool)value;
/**

    Sets the target output scale.
    A value of -1 indicates unset (no target).

*/
- (void) setTargetOutputScale:(double)value;
/**

    Sets the target scale.
    A value of -1 indicates unset (no target).

*/
- (void) setTargetScale:(double)value;
/**

    Gets whether FMLiveSwitchImageScalePipe#minOutputScale and
    FMLiveSwitchImageScalePipe#maxOutputScale should return
    FMLiveSwitchImageScalePipe#minSupportedScale and
    FMLiveSwitchImageScalePipe#maxSupportedScale, respectively, or
    response to changes in FMLiveSwitchImageScalePipe#minScale and
    FMLiveSwitchImageScalePipe#maxScale.

*/
- (bool) staticOutputScale;
/**

    Gets the target output scale.
    A value of -1 indicates unset (no target).

*/
- (double) targetOutputScale;
/**

    Gets the target scale.
    A value of -1 indicates unset (no target).

*/
- (double) targetScale;

@end

/**

    An RTCP layer refresh request (FIR) packet entry.

*/
@interface FMLiveSwitchLrrEntry : FMLiveSwitchControlFrameEntry

/**

    Gets whether the current temporal layer ID
    and current layer ID fields are present.

*/
- (bool) currentIdsPresent;
/**

    Gets the current layer ID.

*/
- (int) currentLayerId;
/**

    Gets the current temporal ID.

*/
- (int) currentTemporalId;
/**

    Gets the backing data buffer.

*/
- (FMLiveSwitchDataBuffer*) dataBuffer;
/**

    Gets the fixed length of an LRR entry.

*/
+ (int) fixedPayloadLength;
/**

    Initializes a new instance of the FMLiveSwitchLrrEntry class.

    @param dataBuffer The data buffer.
*/
- (instancetype) initWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Initializes a new instance of the FMLiveSwitchLrrEntry class.

    @param sequenceNumber The sequence number.
*/
- (instancetype) initWithSequenceNumber:(int)sequenceNumber;
/**

    Initializes a new instance of the FMLiveSwitchLrrEntry class.

    @param sequenceNumber The sequence number.
    @param targetTemporalId The target temporal ID.
    @param targetLayerId The target layer ID.
*/
- (instancetype) initWithSequenceNumber:(int)sequenceNumber targetTemporalId:(int)targetTemporalId targetLayerId:(int)targetLayerId;
/**

    Initializes a new instance of the FMLiveSwitchLrrEntry class.

    @param sequenceNumber The sequence number.
    @param targetTemporalId The target temporal ID.
    @param targetLayerId The target layer ID.
    @param currentTemporalId Teh current temporal ID.
    @param currentLayerId The current layer ID.
*/
- (instancetype) initWithSequenceNumber:(int)sequenceNumber targetTemporalId:(int)targetTemporalId targetLayerId:(int)targetLayerId currentTemporalId:(int)currentTemporalId currentLayerId:(int)currentLayerId;
/**

    Initializes a new instance of the FMLiveSwitchLrrEntry class.

    @param dataBuffer The data buffer.
*/
+ (FMLiveSwitchLrrEntry*) lrrEntryWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Initializes a new instance of the FMLiveSwitchLrrEntry class.

    @param sequenceNumber The sequence number.
*/
+ (FMLiveSwitchLrrEntry*) lrrEntryWithSequenceNumber:(int)sequenceNumber;
/**

    Initializes a new instance of the FMLiveSwitchLrrEntry class.

    @param sequenceNumber The sequence number.
    @param targetTemporalId The target temporal ID.
    @param targetLayerId The target layer ID.
*/
+ (FMLiveSwitchLrrEntry*) lrrEntryWithSequenceNumber:(int)sequenceNumber targetTemporalId:(int)targetTemporalId targetLayerId:(int)targetLayerId;
/**

    Initializes a new instance of the FMLiveSwitchLrrEntry class.

    @param sequenceNumber The sequence number.
    @param targetTemporalId The target temporal ID.
    @param targetLayerId The target layer ID.
    @param currentTemporalId Teh current temporal ID.
    @param currentLayerId The current layer ID.
*/
+ (FMLiveSwitchLrrEntry*) lrrEntryWithSequenceNumber:(int)sequenceNumber targetTemporalId:(int)targetTemporalId targetLayerId:(int)targetLayerId currentTemporalId:(int)currentTemporalId currentLayerId:(int)currentLayerId;
/**

    Gets the payload type.

*/
- (int) payloadType;
/**

    Gets the sequence number.

*/
- (int) sequenceNumber;
/**

    Sets whether the current temporal layer ID
    and current layer ID fields are present.

*/
- (void) setCurrentIdsPresent:(bool)value;
/**

    Sets the current layer ID.

*/
- (void) setCurrentLayerId:(int)value;
/**

    Sets the current temporal ID.

*/
- (void) setCurrentTemporalId:(int)value;
/**

    Sets the backing data buffer.

*/
- (void) setDataBuffer:(FMLiveSwitchDataBuffer*)value;
/**

    Sets the payload type.

*/
- (void) setPayloadType:(int)value;
/**

    Sets the sequence number.

*/
- (void) setSequenceNumber:(int)value;
/**

    Sets the synchronization source.

*/
- (void) setSynchronizationSource:(long long)value;
/**

    Sets the target layer ID.

*/
- (void) setTargetLayerId:(int)value;
/**

    Sets the target temporal ID.

*/
- (void) setTargetTemporalId:(int)value;
/**

    Gets the synchronization source.

*/
- (long long) synchronizationSource;
/**

    Gets the target layer ID.

*/
- (int) targetLayerId;
/**

    Gets the target temporal ID.

*/
- (int) targetTemporalId;

@end

/**

    An RTCP layer refresh request (LRR) packet.

*/
@interface FMLiveSwitchLrrControlFrame : FMLiveSwitchPayloadSpecificControlFrame

/**

    Gets the entries.

*/
- (NSMutableArray*) entries;
/**

    Gets the entry.

*/
- (FMLiveSwitchLrrEntry*) entry;
/**

    Initializes a new instance of the FMLiveSwitchLrrControlFrame class.

    @param buffer The buffer.
*/
- (instancetype) initWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchLrrControlFrame class.

    @param entries The entries.
*/
- (instancetype) initWithEntries:(NSMutableArray*)entries;
/**

    Initializes a new instance of the FMLiveSwitchLrrControlFrame class.

    @param entry The entry.
*/
- (instancetype) initWithEntry:(FMLiveSwitchLrrEntry*)entry;
/**

    Initializes a new instance of the FMLiveSwitchLrrControlFrame class.

    @param sequenceNumber The sequence number.
*/
- (instancetype) initWithSequenceNumber:(int)sequenceNumber;
/**

    Initializes a new instance of the FMLiveSwitchLrrControlFrame class.

    @param buffer The buffer.
*/
+ (FMLiveSwitchLrrControlFrame*) lrrControlFrameWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchLrrControlFrame class.

    @param entries The entries.
*/
+ (FMLiveSwitchLrrControlFrame*) lrrControlFrameWithEntries:(NSMutableArray*)entries;
/**

    Initializes a new instance of the FMLiveSwitchLrrControlFrame class.

    @param entry The entry.
*/
+ (FMLiveSwitchLrrControlFrame*) lrrControlFrameWithEntry:(FMLiveSwitchLrrEntry*)entry;
/**

    Initializes a new instance of the FMLiveSwitchLrrControlFrame class.

    @param sequenceNumber The sequence number.
*/
+ (FMLiveSwitchLrrControlFrame*) lrrControlFrameWithSequenceNumber:(int)sequenceNumber;
/**

    Gets the type of the registered feedback message.

*/
+ (int) registeredFeedbackMessageType;
/**

    Sets the entries.

*/
- (void) setEntries:(NSMutableArray*)value;
/**

    Sets the entry.

*/
- (void) setEntry:(FMLiveSwitchLrrEntry*)value;

@end

@interface FMLiveSwitchCcmFirPolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchCcmFirPolicy)value;

@end

@interface FMLiveSwitchNackPliPolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchNackPliPolicy)value;

@end

@interface FMLiveSwitchSimulcastModeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchSimulcastMode)value;

@end

/**

    Media track base properties/methods.

*/
@interface FMLiveSwitchMediaTrackBase : FMLiveSwitchDynamic<FMLiveSwitchIMediaTrack>

/**

    Adds a handler that is raised when the track is destroyed.

*/
- (void) addOnDestroyed:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the track is muted.
    Only applicable for local media tracks.

*/
- (void) addOnMuted:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the track is started.
    Only applicable for local media tracks.

*/
- (void) addOnStarted:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the track is stopped.
    Only applicable for local media tracks.

*/
- (void) addOnStopped:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the track is unmuted.
    Only applicable for local media tracks.

*/
- (void) addOnUnmuted:(FMLiveSwitchAction0*)value;
/**

    Changes the sink output while the media track is active.

    @param sinkOutput The sink output.
*/
- (FMLiveSwitchFuture<id>*) changeSinkOutput:(FMLiveSwitchSinkOutput*)sinkOutput;
/**

    Changes the source input while the media track is active.

    @param sourceInput The source input.
*/
- (FMLiveSwitchFuture<id>*) changeSourceInput:(FMLiveSwitchSourceInput*)sourceInput;
/**

    Destroys this media track.

*/
- (bool) destroy;
/**

    Gets the available sink outputs.

    @return 
            A future with an array of sink outputs.
            
*/
- (FMLiveSwitchFuture<NSMutableArray*>*) getSinkOutputs;
/**

    Gets the available source inputs.

    @return 
            A future with an array of source inputs.
            
*/
- (FMLiveSwitchFuture<NSMutableArray*>*) getSourceInputs;
- (instancetype) init;
+ (FMLiveSwitchMediaTrackBase*) mediaTrackBase;
/**

    Gets a value indicating whether this
    track is muted.

*/
- (bool) muted;
/**

    Removes a handler that is raised when the track is destroyed.

*/
- (void) removeOnDestroyed:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the track is muted.
    Only applicable for local media tracks.

*/
- (void) removeOnMuted:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the track is started.
    Only applicable for local media tracks.

*/
- (void) removeOnStarted:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the track is stopped.
    Only applicable for local media tracks.

*/
- (void) removeOnStopped:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the track is unmuted.
    Only applicable for local media tracks.

*/
- (void) removeOnUnmuted:(FMLiveSwitchAction0*)value;
/**

    Sets a value indicating whether this
    track is muted.

*/
- (void) setMuted:(bool)value;
/**

    Sets the current sink output.

*/
- (void) setSinkOutput:(FMLiveSwitchSinkOutput*)value;
/**

    Sets the current source input.

*/
- (void) setSourceInput:(FMLiveSwitchSourceInput*)value;
/**

    Gets the current sink output.

*/
- (FMLiveSwitchSinkOutput*) sinkOutput;
/**

    Gets the current source input.

*/
- (FMLiveSwitchSourceInput*) sourceInput;

@end

/**

    A media track.

*/
@interface FMLiveSwitchMediaTrack<__covariant TIOutput, __covariant TIOutputCollection, __covariant TIInput, __covariant TIInputCollection, __covariant TIElement, __covariant TSource, __covariant TSink, __covariant TPipe, __covariant TTrack, __covariant TBranch, __covariant TFrame, __covariant TBuffer, __covariant TBufferCollection, __covariant TFormat> : FMLiveSwitchMediaTrackBase<FMLiveSwitchIMediaTrack, FMLiveSwitchIMediaElement, FMLiveSwitchIElement>

/**

    Gets the active sink. This will return FMLiveSwitchMediaTrack`14#sink
    if FMLiveSwitchMediaTrack`14#sink is not `null` and not disabled.
    Otherwise, if this track branches, it will iterate recursively
    over the active tracks until it finds an FMLiveSwitchMediaTrack`14#activeSink.
    Otherwise, it will return `null`.

*/
- (TSink) activeSink;
/**

    Adds an element.

*/
- (void) addElement:(TIElement)element;
/**

    Adds a handler that is raised when the track is destroyed.

*/
- (void) addOnDestroyed:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the track is muted.
    Only applicable for local media tracks.

*/
- (void) addOnMuted:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the track is started.
    Only applicable for local media tracks.

*/
- (void) addOnStarted:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the track is stopped.
    Only applicable for local media tracks.

*/
- (void) addOnStopped:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the track is unmuted.
    Only applicable for local media tracks.

*/
- (void) addOnUnmuted:(FMLiveSwitchAction0*)value;
/**

    Creates an array of inputs from a list of inputs.

    @param inputs The list of inputs.
*/
- (NSMutableArray*) arrayFromInputs:(NSMutableArray<TIInput>*)inputs;
/**

    Creates an array of outputs from a list of outputs.

    @param outputs The list of outputs.
*/
- (NSMutableArray*) arrayFromOutputs:(NSMutableArray<TIOutput>*)outputs;
/**

    Creates an array of sinks from a list of sinks.

    @param sinks The list of sinks.
*/
- (NSMutableArray*) arrayFromSinks:(NSMutableArray<TSink>*)sinks;
/**

    Creates a branch from an array of tracks.

    @param tracks The tracks.
*/
- (TBranch) branchFromTracks:(NSMutableArray*)tracks;
/**

    Changes the sink output while the media track is active.

    @param sinkOutput The sink output.
*/
- (FMLiveSwitchFuture<id>*) changeSinkOutput:(FMLiveSwitchSinkOutput*)sinkOutput;
/**

    Changes the source input while the media track is active.

    @param sourceInput The source input.
*/
- (FMLiveSwitchFuture<id>*) changeSourceInput:(FMLiveSwitchSourceInput*)sourceInput;
/**

    Gets a value indicating whether this track is deactivated.
    A track is deactivated if its first element is deactivated.

*/
- (bool) deactivated;
/**

    Destroys this media track.

*/
- (bool) destroy;
/**

    Gets a value indicating whether this track is disabled.
    A track is disabled if its first element is disabled.

*/
- (bool) disabled;
/**

    Gets the elements.

*/
- (NSMutableArray*) elements;
/**

    Gets the external identifier.

*/
- (NSString*) externalId;
/**

    Finds elements in the track. This method will recursively
    call into any branched tracks.

    @return A list of elements found matching the given 'where' function,
            or `null` if no elements exist for that type.
*/
- (NSMutableArray<TIElement>*) findElementsWithWhere:(FMLiveSwitchFunction1<TIElement,id>*)where;
/**

    Finds elements in this track. If the recurse flag is set,
    then this method will recursively call into any branched tracks.

    @return A list of elements found matching the given 'where' function,
            or `null` if no elements exist for that type.
*/
- (NSMutableArray<TIElement>*) findElementsWithWhere:(FMLiveSwitchFunction1<TIElement,id>*)where recurse:(bool)recurse;
/**

    Finds elements in the track. This method will recursively
    call into any branched tracks.

    @return A list of elements found matching the given 'where' function,
            or `null` if no elements exist for that type.
*/
- (NSMutableArray<TIElement>* (^)(bool(^)(TIElement))) findElementsWithWhereBlock;
/**

    Finds elements in the track. This method will recursively
    call into any branched tracks.

    @return A list of elements found matching the given 'where' function,
            or `null` if no elements exist for that type.
*/
- (NSMutableArray<TIElement>*) findElementsWithWhereBlock:(bool(^)(TIElement))whereBlock;
/**

    Finds elements in this track. If the recurse flag is set,
    then this method will recursively call into any branched tracks.

    @return A list of elements found matching the given 'where' function,
            or `null` if no elements exist for that type.
*/
- (NSMutableArray<TIElement>*) findElementsWithWhereBlock:(bool(^)(TIElement))whereBlock recurse:(bool)recurse;
/**

    Finds elements in this track. If the recurse flag is set,
    then this method will recursively call into any branched tracks.

    @return A list of elements found matching the given 'where' function,
            or `null` if no elements exist for that type.
*/
- (NSMutableArray<TIElement>* (^)(bool(^)(TIElement), bool)) findElementsWithWhereBlockAndRecurse;
/**

    Finds an element in the track. This method will recursively
    call into any branched tracks.

    @return The first element found matching the given 'where' function,
            or `null` if no elements exist for that type.
*/
- (TIElement) findElementWithWhere:(FMLiveSwitchFunction1<TIElement,id>*)where;
/**

    Finds an element in this track. If the recurse flag is set,
    then this method will recursively call into any branched tracks.

    @return The first element found matching the given 'where' function,
            or `null` if no elements exist for that type.
*/
- (TIElement) findElementWithWhere:(FMLiveSwitchFunction1<TIElement,id>*)where recurse:(bool)recurse;
/**

    Finds an element in the track. This method will recursively
    call into any branched tracks.

    @return The first element found matching the given 'where' function,
            or `null` if no elements exist for that type.
*/
- (TIElement (^)(bool(^)(TIElement))) findElementWithWhereBlock;
/**

    Finds an element in the track. This method will recursively
    call into any branched tracks.

    @return The first element found matching the given 'where' function,
            or `null` if no elements exist for that type.
*/
- (TIElement) findElementWithWhereBlock:(bool(^)(TIElement))whereBlock;
/**

    Finds an element in this track. If the recurse flag is set,
    then this method will recursively call into any branched tracks.

    @return The first element found matching the given 'where' function,
            or `null` if no elements exist for that type.
*/
- (TIElement) findElementWithWhereBlock:(bool(^)(TIElement))whereBlock recurse:(bool)recurse;
/**

    Finds an element in this track. If the recurse flag is set,
    then this method will recursively call into any branched tracks.

    @return The first element found matching the given 'where' function,
            or `null` if no elements exist for that type.
*/
- (TIElement (^)(bool(^)(TIElement), bool)) findElementWithWhereBlockAndRecurse;
/**

    Gets the first element.

*/
- (TIElement) firstElement;
/**

    Gets the available sink outputs.

    @return 
            A future with an array of sink outputs.
            
*/
- (FMLiveSwitchFuture<NSMutableArray*>*) getSinkOutputs;
/**

    Gets the available source inputs.

    @return 
            A future with an array of source inputs.
            
*/
- (FMLiveSwitchFuture<NSMutableArray*>*) getSourceInputs;
/**

    Gets the identifier.

*/
- (NSString*) id;
- (instancetype) init;
/**

    Gets the first input, if this track
    has inputs. Otherwise, returns `null`.

*/
- (TIInput) input;
/**

    Gets the input format.

*/
- (TFormat) inputFormat;
/**

    Gets the track inputs.

*/
- (NSMutableArray*) inputs;
/**

    Gets a value indicating whether this track's
    last element is a branch.

*/
- (bool) isBranched;
/**

    Determines whether the specified element is a branch.

    @param element The element.
*/
- (bool) isBranchWithElement:(TIElement)element;
/**

    Gets a value indicating whether this instance is empty.

*/
- (bool) isEmpty;
/**

    Determines whether the specified element is an input.

    @param element The element.
*/
- (bool) isInputWithElement:(TIElement)element;
/**

    Determines whether the specified element is an output.

    @param element The element.
*/
- (bool) isOutputWithElement:(TIElement)element;
/**

    Determines whether the specified element is a pipe.

    @param element The element.
*/
- (bool) isPipeWithElement:(TIElement)element;
/**

    Determines whether the specified element is a sink.

    @param element The element.
*/
- (bool) isSinkWithElement:(TIElement)element;
/**

    Determines whether the specified element is a source.

    @param element The element.
*/
- (bool) isSourceWithElement:(TIElement)element;
/**

    Determines whether the specified element is a stream.

    @param element The element.
*/
- (bool) isStreamWithElement:(TIElement)element;
/**

    Gets a value indicating whether this track's
    last element is a sink.

*/
- (bool) isTerminated;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets the last element.

*/
- (TIElement) lastElement;
+ (FMLiveSwitchMediaTrack*) mediaTrack;
/**

    Gets a value indicating whether any
    of the elements in this track are muted.
    Setting a value will apply to all elements.

*/
- (bool) muted;
/**

    Adds an element to this track.

    @param next The next element.
*/
- (TTrack) next:(TIInput)next;
/**

    Branches out to several tracks.

    @param branch The tracks.
*/
- (TTrack) nextWithBranch:(TBranch)branch;
/**

    Branches out to several tracks.

    @param tracks The tracks.
*/
- (TTrack) nextWithTracks:(NSMutableArray*)tracks;
/**

    Gets the first output, if this track
    has outputs. Otherwise, returns `null`.

*/
- (TIOutput) output;
/**

    Gets the output format.

*/
- (TFormat) outputFormat;
/**

    Gets the track outputs.

*/
- (NSMutableArray*) outputs;
/**

    Gets a value indicating whether this track is paused.
    A track is paused if its last elements is paused.

*/
- (bool) paused;
/**

    Gets a value indicating whether this instance is persistent.
    If `true`, this instance will not be destroyed unless
    FMLiveSwitchMediaTrack`14#destroy is called explicitly on this instance.
    It will survive destruction of any parent elements that are
    being destroyed.

*/
- (bool) persistent;
/**

    Gets the pipeline JSON using the first element
    as a starting point.

*/
- (NSString*) pipelineJson;
/**

    Raises the FMLiveSwitchMediaTrack`14#addOnMuted: event.

*/
- (void) raiseOnMuted;
/**

    Raises the FMLiveSwitchMediaTrack`14#addOnStarted: event.

*/
- (void) raiseOnStarted;
/**

    Raises the FMLiveSwitchMediaTrack`14#addOnStopped: event.

*/
- (void) raiseOnStopped;
/**

    Raises the FMLiveSwitchMediaTrack`14#addOnUnmuted: event.

*/
- (void) raiseOnUnmuted;
/**

    Removes a handler that is raised when the track is destroyed.

*/
- (void) removeOnDestroyed:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the track is muted.
    Only applicable for local media tracks.

*/
- (void) removeOnMuted:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the track is started.
    Only applicable for local media tracks.

*/
- (void) removeOnStarted:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the track is stopped.
    Only applicable for local media tracks.

*/
- (void) removeOnStopped:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the track is unmuted.
    Only applicable for local media tracks.

*/
- (void) removeOnUnmuted:(FMLiveSwitchAction0*)value;
/**

    Sets a value indicating whether this track is deactivated.
    A track is deactivated if its first element is deactivated.

*/
- (void) setDeactivated:(bool)value;
/**

    Sets the external identifier.

*/
- (void) setExternalId:(NSString*)value;
/**

    Sets a value indicating whether any
    of the elements in this track are muted.
    Setting a value will apply to all elements.

*/
- (void) setMuted:(bool)value;
/**

    Sets a value indicating whether this instance is persistent.
    If `true`, this instance will not be destroyed unless
    FMLiveSwitchMediaTrack`14#destroy is called explicitly on this instance.
    It will survive destruction of any parent elements that are
    being destroyed.

*/
- (void) setPersistent:(bool)value;
/**

    Sets the current sink output.

*/
- (void) setSinkOutput:(FMLiveSwitchSinkOutput*)value;
/**

    Sets the current source input.

*/
- (void) setSourceInput:(FMLiveSwitchSourceInput*)value;
/**

    Gets the sink, if the last element
    is a sink. Otherwise, returns `null`.

*/
- (TSink) sink;
/**

    Gets the current sink output.

*/
- (FMLiveSwitchSinkOutput*) sinkOutput;
/**

    Gets the sinks. This will return FMLiveSwitchMediaTrack`14#sink
    if FMLiveSwitchMediaTrack`14#sink is not `null`.
    Otherwise, if this track branches, it will iterate recursively
    over the branched tracks.

*/
- (NSMutableArray*) sinks;
/**

    Gets the source, if the first element
    is a source. Otherwise, returns `null`.

*/
- (TSource) source;
/**

    Gets the current source input.

*/
- (FMLiveSwitchSourceInput*) sourceInput;

@end

/**

    An audio chain.

*/
@interface FMLiveSwitchAudioTrack : FMLiveSwitchMediaTrack<NSObject<FMLiveSwitchIAudioOutput>*,FMLiveSwitchIAudioOutputCollection*,NSObject<FMLiveSwitchIAudioInput>*,FMLiveSwitchIAudioInputCollection*,NSObject<FMLiveSwitchIAudioElement>*,FMLiveSwitchAudioSource*,FMLiveSwitchAudioSink*,FMLiveSwitchAudioPipe*,FMLiveSwitchAudioTrack*,FMLiveSwitchAudioBranch*,FMLiveSwitchAudioFrame*,FMLiveSwitchAudioBuffer*,FMLiveSwitchAudioBufferCollection*,FMLiveSwitchAudioFormat*><FMLiveSwitchIAudioTrack, FMLiveSwitchIMediaTrack>

/**

    Adds an element.

    @param element 
*/
- (void) addElement:(NSObject<FMLiveSwitchIAudioElement>*)element;
/**

    Adds a handler that is raised periodically when the audio's level is calculated.

*/
- (void) addOnLevel:(FMLiveSwitchAction1<id>*)value;
/**

    Adds a handler that is raised periodically when the audio's level is calculated.

*/
- (void (^)(void(^)(double))) addOnLevelWithBlock;
/**

    Adds a handler that is raised periodically when the audio's level is calculated.

*/
- (void) addOnLevelWithBlock:(void(^)(double))valueBlock;
/**

    Creates an array of inputs from a list of inputs.

    @param inputs The list of inputs.
*/
- (NSMutableArray*) arrayFromInputs:(NSMutableArray<NSObject<FMLiveSwitchIAudioInput>*>*)inputs;
/**

    Creates an array of outputs from a list of outputs.

    @param outputs The list of outputs.
*/
- (NSMutableArray*) arrayFromOutputs:(NSMutableArray<NSObject<FMLiveSwitchIAudioOutput>*>*)outputs;
/**

    Creates an array of sinks from a list of sinks.

    @param sinks The list of sinks.
*/
- (NSMutableArray*) arrayFromSinks:(NSMutableArray<FMLiveSwitchAudioSink*>*)sinks;
/**

    Initializes a new instance of the FMLiveSwitchAudioTrack class.

*/
+ (FMLiveSwitchAudioTrack*) audioTrack;
/**

    Initializes a new instance of the FMLiveSwitchAudioTrack class.

    @param element The element.
*/
+ (FMLiveSwitchAudioTrack*) audioTrackWithElement:(NSObject<FMLiveSwitchIAudioElement>*)element;
/**

    Initializes a new instance of the FMLiveSwitchAudioTrack class.

    @param tracks The branch of tracks.
*/
+ (FMLiveSwitchAudioTrack*) audioTrackWithTracks:(NSMutableArray*)tracks;
/**

    Creates a branch from an array of tracks.

    @param tracks The tracks.
*/
- (FMLiveSwitchAudioBranch*) branchFromTracks:(NSMutableArray*)tracks;
/**

    Gets the configuration.

*/
- (FMLiveSwitchAudioConfig*) config;
/**

    Destroys this media track.

*/
- (bool) destroy;
/**

    Gets the elements.

*/
- (NSMutableArray*) elements;
/**

    Gets a value indicating the gain
    (input amplification) of this track.
    Any value greater than or equal to 0.0
    is acceptable.

*/
- (double) gain;
/**

    Initializes a new instance of the FMLiveSwitchAudioTrack class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchAudioTrack class.

    @param element The element.
*/
- (instancetype) initWithElement:(NSObject<FMLiveSwitchIAudioElement>*)element;
/**

    Initializes a new instance of the FMLiveSwitchAudioTrack class.

    @param tracks The branch of tracks.
*/
- (instancetype) initWithTracks:(NSMutableArray*)tracks;
/**

    Determines whether the specified element is a branch.

    @param element The element.
*/
- (bool) isBranchWithElement:(NSObject<FMLiveSwitchIAudioElement>*)element;
/**

    Determines whether the specified element is an input.

    @param element The element.
*/
- (bool) isInputWithElement:(NSObject<FMLiveSwitchIAudioElement>*)element;
/**

    Determines whether the specified element is an output.

    @param element The element.
*/
- (bool) isOutputWithElement:(NSObject<FMLiveSwitchIAudioElement>*)element;
/**

    Determines whether the specified element is a pipe.

    @param element The element.
*/
- (bool) isPipeWithElement:(NSObject<FMLiveSwitchIAudioElement>*)element;
/**

    Determines whether the specified element is a sink.

    @param element The element.
*/
- (bool) isSinkWithElement:(NSObject<FMLiveSwitchIAudioElement>*)element;
/**

    Determines whether the specified element is a source.

    @param element The element.
*/
- (bool) isSourceWithElement:(NSObject<FMLiveSwitchIAudioElement>*)element;
/**

    Determines whether the specified element is a stream.

    @param element The element.
*/
- (bool) isStreamWithElement:(NSObject<FMLiveSwitchIAudioElement>*)element;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets the interval in milliseconds between FMLiveSwitchAudioTrack#addOnLevel: events.
    Defaults to 200.

*/
- (int) levelInterval;
/**

    Removes a handler that is raised periodically when the audio's level is calculated.

*/
- (void) removeOnLevel:(FMLiveSwitchAction1<id>*)value;
/**

    Sets a value indicating the gain
    (input amplification) of this track.
    Any value greater than or equal to 0.0
    is acceptable.

*/
- (void) setGain:(double)value;
/**

    Sets the interval in milliseconds between FMLiveSwitchAudioTrack#addOnLevel: events.
    Defaults to 200.

*/
- (void) setLevelInterval:(int)value;
/**

    Sets a value indicating the volume
    (output resistance) of this track.
    Valid value range is 0.0 to 1.0, inclusive.

*/
- (void) setVolume:(double)value;
/**

    Gets a value indicating the volume
    (output resistance) of this track.
    Valid value range is 0.0 to 1.0, inclusive.

*/
- (double) volume;

@end

/**

    A WebRTC/ORTC-compatible audio track configuration.

*/
@interface FMLiveSwitchRtcAudioTrackConfig : NSObject

/**

    Gets whether the L16 codec should be disabled by default.

*/
+ (bool) defaultL16Disabled;
/**

    Gets whether the G.722 codec should be disabled.
    Defaults to `false`.

*/
- (bool) g722Disabled;
/**

    Initializes a new instance of the FMLiveSwitchRtcAudioTrackConfig class.

*/
- (instancetype) init;
/**

    Gets whether the L16 codec should be disabled.
    Defaults to `false`.

*/
- (bool) l16Disabled;
/**

    Gets whether the Opus codec should be disabled.
    Defaults to `false`.

*/
- (bool) opusDisabled;
/**

    Gets whether the PCMA codec should be disabled.
    Defaults to `false`.

*/
- (bool) pcmaDisabled;
/**

    Gets whether the PCMU codec should be disabled.
    Defaults to `false`.

*/
- (bool) pcmuDisabled;
/**

    Initializes a new instance of the FMLiveSwitchRtcAudioTrackConfig class.

*/
+ (FMLiveSwitchRtcAudioTrackConfig*) rtcAudioTrackConfig;
/**

    Sets whether the G.722 codec should be disabled.
    Defaults to `false`.

*/
- (void) setG722Disabled:(bool)value;
/**

    Sets whether the L16 codec should be disabled.
    Defaults to `false`.

*/
- (void) setL16Disabled:(bool)value;
/**

    Sets whether the Opus codec should be disabled.
    Defaults to `false`.

*/
- (void) setOpusDisabled:(bool)value;
/**

    Sets whether the PCMA codec should be disabled.
    Defaults to `false`.

*/
- (void) setPcmaDisabled:(bool)value;
/**

    Sets whether the PCMU codec should be disabled.
    Defaults to `false`.

*/
- (void) setPcmuDisabled:(bool)value;

@end

/**

    A basic video depacketizer.

*/
@interface FMLiveSwitchBasicVideoDepacketizer : FMLiveSwitchVideoDepacketizer<FMLiveSwitchVideoFragment*>

/**

    Initializes a new instance of the FMLiveSwitchBasicVideoDepacketizer class.

    @param format The format.
*/
+ (FMLiveSwitchBasicVideoDepacketizer*) basicVideoDepacketizerWithFormat:(FMLiveSwitchVideoFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchBasicVideoDepacketizer class.

    @param input The input.
*/
+ (FMLiveSwitchBasicVideoDepacketizer*) basicVideoDepacketizerWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Creates a fragment from a data buffer.

    @param header The rtp header for this packet.
    @param dataBuffer The data buffer.
*/
- (FMLiveSwitchVideoFragment*) doCreateFragmentWithHeader:(FMLiveSwitchRtpPacketHeader*)header dataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Initializes a new instance of the FMLiveSwitchBasicVideoDepacketizer class.

    @param format The format.
*/
- (instancetype) initWithFormat:(FMLiveSwitchVideoFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchBasicVideoDepacketizer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Checks if the databuffer contains a keyframe.

    @param inputBuffer VideoBuffer containing video data.
*/
- (bool) isKeyFrameWithInputBuffer:(FMLiveSwitchDataBuffer*)inputBuffer;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;

@end

/**

    A basic video packetizer.

*/
@interface FMLiveSwitchBasicVideoPacketizer : FMLiveSwitchVideoPacketizer

/**

    Initializes a new instance of the FMLiveSwitchBasicVideoPacketizer class.

    @param format The format.
*/
+ (FMLiveSwitchBasicVideoPacketizer*) basicVideoPacketizerWithFormat:(FMLiveSwitchVideoFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchBasicVideoPacketizer class.

    @param input The input.
*/
+ (FMLiveSwitchBasicVideoPacketizer*) basicVideoPacketizerWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchBasicVideoPacketizer class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
+ (FMLiveSwitchBasicVideoPacketizer*) basicVideoPacketizerWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat outputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchVideoFrame*)frame inputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchBasicVideoPacketizer class.

    @param format The format.
*/
- (instancetype) initWithFormat:(FMLiveSwitchVideoFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchBasicVideoPacketizer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchBasicVideoPacketizer class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
- (instancetype) initWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat outputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;

@end

@interface FMLiveSwitchBundlePolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchBundlePolicy)value;

@end

/**

    An RTCP BYE packet.

*/
@interface FMLiveSwitchByeControlFrame : FMLiveSwitchMediaControlFrame

/**

    Initializes a new instance of the FMLiveSwitchByeControlFrame class.

*/
+ (FMLiveSwitchByeControlFrame*) byeControlFrame;
/**

    Initializes a new instance of the FMLiveSwitchByeControlFrame class.

    @param buffer The packet.
*/
+ (FMLiveSwitchByeControlFrame*) byeControlFrameWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchByeControlFrame class.

    @param synchronizationSource The synchronization source.
*/
+ (FMLiveSwitchByeControlFrame*) byeControlFrameWithSynchronizationSource:(long long)synchronizationSource;
/**

    Initializes a new instance of the FMLiveSwitchByeControlFrame class.

    @param synchronizationSource The synchronization source.
    @param reasonForLeaving The reason for leaving.
*/
+ (FMLiveSwitchByeControlFrame*) byeControlFrameWithSynchronizationSource:(long long)synchronizationSource reasonForLeaving:(NSString*)reasonForLeaving;
/**

    Initializes a new instance of the FMLiveSwitchByeControlFrame class.

    @param synchronizationSources The synchronization sources.
*/
+ (FMLiveSwitchByeControlFrame*) byeControlFrameWithSynchronizationSources:(NSMutableArray*)synchronizationSources;
/**

    Initializes a new instance of the FMLiveSwitchByeControlFrame class.

    @param synchronizationSources The synchronization sources.
    @param contributingSources The contributing sources.
*/
+ (FMLiveSwitchByeControlFrame*) byeControlFrameWithSynchronizationSources:(NSMutableArray*)synchronizationSources contributingSources:(NSMutableArray*)contributingSources;
/**

    Initializes a new instance of the FMLiveSwitchByeControlFrame class.

    @param synchronizationSources The synchronization sources.
    @param contributingSources The contributing sources.
    @param reasonForLeaving The reason for leaving.
*/
+ (FMLiveSwitchByeControlFrame*) byeControlFrameWithSynchronizationSources:(NSMutableArray*)synchronizationSources contributingSources:(NSMutableArray*)contributingSources reasonForLeaving:(NSString*)reasonForLeaving;
/**

    Initializes a new instance of the FMLiveSwitchByeControlFrame class.

    @param synchronizationSources The synchronization sources.
    @param reasonForLeaving The reason for leaving.
*/
+ (FMLiveSwitchByeControlFrame*) byeControlFrameWithSynchronizationSources:(NSMutableArray*)synchronizationSources reasonForLeaving:(NSString*)reasonForLeaving;
/**

    Gets the length of the fixed payload header.

*/
+ (int) fixedPayloadHeaderLength;
/**

    Gets the length of the fixed reason for leaving header.

*/
+ (int) fixedReasonForLeavingPayloadHeaderLength;
/**

    Initializes a new instance of the FMLiveSwitchByeControlFrame class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchByeControlFrame class.

    @param buffer The packet.
*/
- (instancetype) initWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchByeControlFrame class.

    @param synchronizationSource The synchronization source.
*/
- (instancetype) initWithSynchronizationSource:(long long)synchronizationSource;
/**

    Initializes a new instance of the FMLiveSwitchByeControlFrame class.

    @param synchronizationSource The synchronization source.
    @param reasonForLeaving The reason for leaving.
*/
- (instancetype) initWithSynchronizationSource:(long long)synchronizationSource reasonForLeaving:(NSString*)reasonForLeaving;
/**

    Initializes a new instance of the FMLiveSwitchByeControlFrame class.

    @param synchronizationSources The synchronization sources.
*/
- (instancetype) initWithSynchronizationSources:(NSMutableArray*)synchronizationSources;
/**

    Initializes a new instance of the FMLiveSwitchByeControlFrame class.

    @param synchronizationSources The synchronization sources.
    @param contributingSources The contributing sources.
*/
- (instancetype) initWithSynchronizationSources:(NSMutableArray*)synchronizationSources contributingSources:(NSMutableArray*)contributingSources;
/**

    Initializes a new instance of the FMLiveSwitchByeControlFrame class.

    @param synchronizationSources The synchronization sources.
    @param contributingSources The contributing sources.
    @param reasonForLeaving The reason for leaving.
*/
- (instancetype) initWithSynchronizationSources:(NSMutableArray*)synchronizationSources contributingSources:(NSMutableArray*)contributingSources reasonForLeaving:(NSString*)reasonForLeaving;
/**

    Initializes a new instance of the FMLiveSwitchByeControlFrame class.

    @param synchronizationSources The synchronization sources.
    @param reasonForLeaving The reason for leaving.
*/
- (instancetype) initWithSynchronizationSources:(NSMutableArray*)synchronizationSources reasonForLeaving:(NSString*)reasonForLeaving;
/**

    Gets a value indicating whether this instance has a reason for leaving.

*/
- (bool) reason;
/**

    Gets the reason for leaving as a string.

*/
- (NSString*) reasonForLeaving;
/**

    Gets the length of the reason for leaving.

*/
- (int) reasonForLeavingLength;
/**

    Gets the offset of the FMLiveSwitchByeControlFrame#reasonForLeaving in the payload.

*/
- (int) reasonForLeavingOffset;
/**

    Gets the reason for leaving.

*/
- (FMLiveSwitchDataBuffer*) reasonForLeavingPayload;
/**

    Gets the goodbye payload type.

*/
+ (int) registeredPayloadType;
/**

    Sets the synchronization and contributing sources.

*/
- (void) setSources:(NSMutableArray*)value;
/**

    Gets the number of FMLiveSwitchByeControlFrame#sources.

*/
- (int) sourceCount;
/**

    Gets the synchronization and contributing sources.

*/
- (NSMutableArray*) sources;
/**

    Gets the length of the FMLiveSwitchByeControlFrame#sources in bytes.

*/
- (int) sourcesLength;
/**

    Gets the offset of the FMLiveSwitchByeControlFrame#sources array in the payload.

*/
- (int) sourcesPayloadOffset;

@end

/**

    A candidate.

*/
@interface FMLiveSwitchCandidate : NSObject

+ (FMLiveSwitchCandidate*) candidate;
/**

    Gets a value indicating whether this candidate has been
    already been dispatched as a part of a session description.

*/
- (bool) dispatched;
/**

    Deserializes an instance from JSON.

    @param candidateJson The JSON to deserialize.
    @return 
            The deserialized candidate.
            
*/
+ (FMLiveSwitchCandidate*) fromJsonWithCandidateJson:(NSString*)candidateJson;
- (instancetype) init;
/**

    Gets the relay protocol, the protocol used by this
    candidate to communicate with the relay (TURN) server.

*/
- (FMLiveSwitchProtocolType) relayProtocol;
/**

    Gets the SDP candidate attribute.

*/
- (FMLiveSwitchSdpIceCandidateAttribute*) sdpCandidateAttribute;
/**

    Gets the media index.

*/
- (int) sdpMediaIndex;
/**

    Sets a value indicating whether this candidate has been
    already been dispatched as a part of a session description.

*/
- (void) setDispatched:(bool)value;
/**

    Sets the relay protocol, the protocol used by this
    candidate to communicate with the relay (TURN) server.

*/
- (void) setRelayProtocol:(FMLiveSwitchProtocolType)value;
/**

    Sets the SDP candidate attribute.

*/
- (void) setSdpCandidateAttribute:(FMLiveSwitchSdpIceCandidateAttribute*)value;
/**

    Sets the media index.

*/
- (void) setSdpMediaIndex:(int)value;
/**

    Sets the relay protocol, the protocol used by this
    candidate to communicate with the relay (TURN) server.

    @deprecated Use RelayProtocol instead.
*/
- (void) setTurnTransportProtocol:(FMLiveSwitchProtocolType)value __deprecated_msg("Use RelayProtocol instead.");
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an instance to JSON.

    @param candidate The candidate to serialize.
    @return 
            The serialized JSON.
            
*/
+ (NSString*) toJsonWithCandidate:(FMLiveSwitchCandidate*)candidate;
/**

    Gets the relay protocol, the protocol used by this
    candidate to communicate with the relay (TURN) server.

    @deprecated Use RelayProtocol instead.
*/
- (FMLiveSwitchProtocolType) turnTransportProtocol __deprecated_msg("Use RelayProtocol instead.");

@end

/**

    A color.

*/
@interface FMLiveSwitchColor : NSObject

/**

    Gets the blue value (0-255).

*/
- (int) b;
/**

    Gets a black color.

*/
+ (FMLiveSwitchColor*) black;
/**

    Gets a blue color.

*/
+ (FMLiveSwitchColor*) blue;
/**

    Initializes a new instance of the FMLiveSwitchColor class.

    @param r The red value (0-255).
    @param g The green value (0-255).
    @param b The blue value (0-255).
*/
+ (FMLiveSwitchColor*) colorWithR:(int)r g:(int)g b:(int)b;
/**

    Gets a cyan color.

*/
+ (FMLiveSwitchColor*) cyan;
/**

    Gets a dark-blue color.

*/
+ (FMLiveSwitchColor*) darkBlue;
/**

    Gets a dark-green color.

*/
+ (FMLiveSwitchColor*) darkGreen;
/**

    Gets a dark-red color.

*/
+ (FMLiveSwitchColor*) darkRed;
/**

    Creates a FMLiveSwitchColor using hue, saturation, and brightness.

    @param hue The hue value (0-359).
    @param saturation The saturation value (0.0-1.0).
    @param brightness The brightness value (0.0-1.0).
*/
+ (FMLiveSwitchColor*) fromHsbWithHue:(double)hue saturation:(double)saturation brightness:(double)brightness;
/**

    Gets the green value (0-255).

*/
- (int) g;
/**

    Gets a gray color.

*/
+ (FMLiveSwitchColor*) gray;
/**

    Gets a green color.

*/
+ (FMLiveSwitchColor*) green;
/**

    Initializes a new instance of the FMLiveSwitchColor class.

    @param r The red value (0-255).
    @param g The green value (0-255).
    @param b The blue value (0-255).
*/
- (instancetype) initWithR:(int)r g:(int)g b:(int)b;
/**

    Gets a magenta color.

*/
+ (FMLiveSwitchColor*) magenta;
/**

    Gets an olive color.

*/
+ (FMLiveSwitchColor*) olive;
/**

    Gets a purple color.

*/
+ (FMLiveSwitchColor*) purple;
/**

    Gets the red value (0-255).

*/
- (int) r;
/**

    Gets a red color.

*/
+ (FMLiveSwitchColor*) red;
/**

    Gets a teal color.

*/
+ (FMLiveSwitchColor*) teal;
/**

    Gets a white color.

*/
+ (FMLiveSwitchColor*) white;
/**

    Gets a yellow color.

*/
+ (FMLiveSwitchColor*) yellow;

@end

/**

    Connection base properties/methods.

*/
@interface FMLiveSwitchConnectionBase<__covariant TConnection, __covariant TStream, __covariant TAudioStream, __covariant TVideoStream, __covariant TDataStream, __covariant TDataChannel> : FMLiveSwitchDynamic<FMLiveSwitchIConnection>

/**

    Adds an ICE server.

    @param iceServer The ICE server.
*/
- (void) addIceServer:(FMLiveSwitchIceServer*)iceServer;
/**

    Adds some ICE servers.

    @param iceServers The ICE servers.
*/
- (void) addIceServers:(NSMutableArray*)iceServers;
/**

    Adds a handler that is raised when external Id of this connection changes. Old external Id as well as internal Id are raised.

*/
- (void) addOnExternalIdChange:(FMLiveSwitchAction2<NSString*,NSString*>*)value;
/**

    Adds a handler that is raised when external Id of this connection changes. Old external Id as well as internal Id are raised.

*/
- (void (^)(void(^)(NSString*, NSString*))) addOnExternalIdChangeWithBlock;
/**

    Adds a handler that is raised when external Id of this connection changes. Old external Id as well as internal Id are raised.

*/
- (void) addOnExternalIdChangeWithBlock:(void(^)(NSString*, NSString*))valueBlock;
/**

    Adds a handler that is raised when the gathering state changes.

*/
- (void) addOnGatheringStateChange:(FMLiveSwitchAction1<TConnection>*)value;
/**

    Adds a handler that is raised when the gathering state changes.

*/
- (void (^)(void(^)(TConnection))) addOnGatheringStateChangeWithBlock;
/**

    Adds a handler that is raised when the gathering state changes.

*/
- (void) addOnGatheringStateChangeWithBlock:(void(^)(TConnection))valueBlock;
/**

    Adds a handler that is raised when the ice connection state changes.

*/
- (void) addOnIceConnectionStateChange:(FMLiveSwitchAction1<TConnection>*)value;
/**

    Adds a handler that is raised when the ice connection state changes.

*/
- (void (^)(void(^)(TConnection))) addOnIceConnectionStateChangeWithBlock;
/**

    Adds a handler that is raised when the ice connection state changes.

*/
- (void) addOnIceConnectionStateChangeWithBlock:(void(^)(TConnection))valueBlock;
/**

    Adds a handler that is raised when a local candidate is added.

*/
- (void) addOnLocalCandidate:(FMLiveSwitchAction2<TConnection,FMLiveSwitchCandidate*>*)value;
/**

    Adds a handler that is raised when a local candidate is added.

*/
- (void (^)(void(^)(TConnection, FMLiveSwitchCandidate*))) addOnLocalCandidateWithBlock;
/**

    Adds a handler that is raised when a local candidate is added.

*/
- (void) addOnLocalCandidateWithBlock:(void(^)(TConnection, FMLiveSwitchCandidate*))valueBlock;
/**

    Adds a handler that is raised when a local description is set.

*/
- (void) addOnLocalDescription:(FMLiveSwitchAction2<TConnection,FMLiveSwitchSessionDescription*>*)value;
/**

    Adds a handler that is raised when a local description is set.

*/
- (void (^)(void(^)(TConnection, FMLiveSwitchSessionDescription*))) addOnLocalDescriptionWithBlock;
/**

    Adds a handler that is raised when a local description is set.

*/
- (void) addOnLocalDescriptionWithBlock:(void(^)(TConnection, FMLiveSwitchSessionDescription*))valueBlock;
/**

    Adds a handler that is raised when a remote description is added.

*/
- (void) addOnRemoteCandidate:(FMLiveSwitchAction2<TConnection,FMLiveSwitchCandidate*>*)value;
/**

    Adds a handler that is raised when a remote description is added.

*/
- (void (^)(void(^)(TConnection, FMLiveSwitchCandidate*))) addOnRemoteCandidateWithBlock;
/**

    Adds a handler that is raised when a remote description is added.

*/
- (void) addOnRemoteCandidateWithBlock:(void(^)(TConnection, FMLiveSwitchCandidate*))valueBlock;
/**

    Adds a handler that is raised when a remote description is set.

*/
- (void) addOnRemoteDescription:(FMLiveSwitchAction2<TConnection,FMLiveSwitchSessionDescription*>*)value;
/**

    Adds a handler that is raised when a remote description is set.

*/
- (void (^)(void(^)(TConnection, FMLiveSwitchSessionDescription*))) addOnRemoteDescriptionWithBlock;
/**

    Adds a handler that is raised when a remote description is set.

*/
- (void) addOnRemoteDescriptionWithBlock:(void(^)(TConnection, FMLiveSwitchSessionDescription*))valueBlock;
/**

    Adds a handler that is raised when a new round trip time is calculated.

*/
- (void) addOnRoundTripTime:(FMLiveSwitchAction1<id>*)value;
/**

    Adds a handler that is raised when a new round trip time is calculated.

*/
- (void (^)(void(^)(int))) addOnRoundTripTimeWithBlock;
/**

    Adds a handler that is raised when a new round trip time is calculated.

*/
- (void) addOnRoundTripTimeWithBlock:(void(^)(int))valueBlock;
/**

    Adds a handler that is raised when the signalling state changes.

*/
- (void) addOnSignallingStateChange:(FMLiveSwitchAction1<TConnection>*)value;
/**

    Adds a handler that is raised when the signalling state changes.

*/
- (void (^)(void(^)(TConnection))) addOnSignallingStateChangeWithBlock;
/**

    Adds a handler that is raised when the signalling state changes.

*/
- (void) addOnSignallingStateChangeWithBlock:(void(^)(TConnection))valueBlock;
/**

    Adds a handler that is raised when the connection state changes.

*/
- (void) addOnStateChange:(FMLiveSwitchAction1<TConnection>*)value;
/**

    Adds a handler that is raised when the connection state changes.

*/
- (void (^)(void(^)(TConnection))) addOnStateChangeWithBlock;
/**

    Adds a handler that is raised when the connection state changes.

*/
- (void) addOnStateChangeWithBlock:(void(^)(TConnection))valueBlock;
/**

    Adds the remote candidate.

    @param remoteCandidate The remote candidate.
*/
- (FMLiveSwitchFuture<FMLiveSwitchCandidate*>*) addRemoteCandidate:(FMLiveSwitchCandidate*)remoteCandidate;
/**

    Gets the first audio stream.

*/
- (TAudioStream) audioStream;
/**

    Gets the audio streams.

*/
- (NSMutableArray*) audioStreams;
/**

    Gets the bundle policy.

*/
- (FMLiveSwitchBundlePolicy) bundlePolicy;
/**

    Gets the canonical name.

    @deprecated Use MediaStream.LocalCanonicalName instead.
*/
- (NSString*) canonicalName __deprecated_msg("Use MediaStream.LocalCanonicalName instead.");
/**

    Closes this instance.

*/
- (bool) close;
/**

    Gets a future that resolves if the connection enters the Closed state
    or rejects if the connection enters the Failed state before that happens.

*/
- (FMLiveSwitchFuture<id>*) closed;
/**

    Gets a future that resolves if the connection enters the Connected state
    or rejects if the connection enters the Failed state before that happens.

*/
- (FMLiveSwitchFuture<id>*) connected;
/**

    Initializes a new instance of the FMLiveSwitchConnectionBase`6 class.

*/
+ (FMLiveSwitchConnectionBase*) connectionBaseWithSharedLock:(id)sharedLock connectionId:(NSString*)connectionId;
/**

    Creates an answer.

*/
- (FMLiveSwitchFuture<FMLiveSwitchSessionDescription*>*) createAnswer;
/**

    Creates an offer.

*/
- (FMLiveSwitchFuture<FMLiveSwitchSessionDescription*>*) createOffer;
/**

    Gets the first data stream.

*/
- (TDataStream) dataStream;
/**

    Gets the data streams.

*/
- (NSMutableArray*) dataStreams;
/**

    Gets the amount of time (in milliseconds)
    to wait for connectivity checks to re-establish
    after they start to fail on a live connection.
    Defaults to 15,000.

*/
- (int) deadStreamTimeout;
/**

    Adds the remote candidate.

    @param promise The promise.
    @param remoteCandidate The remote candidate.
*/
- (void) doAddRemoteCandidateWithPromise:(FMLiveSwitchPromise<FMLiveSwitchCandidate*>*)promise remoteCandidate:(FMLiveSwitchCandidate*)remoteCandidate;
/**

    Creates an answer.

*/
- (void) doCreateAnswerWithPromise:(FMLiveSwitchPromise<FMLiveSwitchSessionDescription*>*)promise;
/**

    Creates an offer.

*/
- (bool) doCreateOfferWithPromise:(FMLiveSwitchPromise<FMLiveSwitchSessionDescription*>*)promise;
/**

    Processes a session description.

    @param description The session description.
    @param isLocalDescription Whether this is a local session description.
*/
- (FMLiveSwitchError*) doProcessDescription:(FMLiveSwitchSessionDescription*)description isLocalDescription:(bool)isLocalDescription;
/**

    Dispatches cached local candidates that were gathered while Connection generated session description.

*/
- (void) doSendCachedLocalCandidates;
/**

    Sets the local description.

    @param promise The promise.
    @param localDescription The local description.
*/
- (void) doSetLocalDescriptionWithPromise:(FMLiveSwitchPromise<FMLiveSwitchSessionDescription*>*)promise localDescription:(FMLiveSwitchSessionDescription*)localDescription;
/**

    Sets the remote description.

    @param promise The promise.
    @param remoteDescription The remote description.
*/
- (void) doSetRemoteDescriptionWithPromise:(FMLiveSwitchPromise<FMLiveSwitchSessionDescription*>*)promise remoteDescription:(FMLiveSwitchSessionDescription*)remoteDescription;
/**

    Gets the error.

*/
- (FMLiveSwitchError*) error;
/**

    Gets the external identifier.

*/
- (NSString*) externalId;
/**

    Gets a future that resolves if the connection enters the Failed state
    or rejects if the connection enters the Closed state before that happens.

*/
- (FMLiveSwitchFuture<id>*) failed;
/**

    Gets the ICE gathering state.

*/
- (FMLiveSwitchIceGatheringState) gatheringState;
/**

    Gets the current connection stats.

*/
- (FMLiveSwitchFuture<FMLiveSwitchConnectionStats*>*) getStats;
/**

    Gets whether this connection has an audio stream.

*/
- (bool) hasAudio;
/**

    Gets whether this connection has a data stream.

*/
- (bool) hasData;
/**

    Gets whether this connection has a video stream.

*/
- (bool) hasVideo;
/**

    Gets the ICE connection state.

*/
- (FMLiveSwitchIceConnectionState) iceConnectionState;
/**

    Gets the ICE gather policy.

*/
- (FMLiveSwitchIceGatherPolicy) iceGatherPolicy;
/**

    Gets the ICE server.

*/
- (FMLiveSwitchIceServer*) iceServer;
/**

    Gets the ICE servers.

*/
- (NSMutableArray*) iceServers;
/**

    Gets the identifier.

*/
- (NSString*) id;
/**

    Initializes a new instance of the FMLiveSwitchConnectionBase`6 class.

*/
- (instancetype) initWithSharedLock:(id)sharedLock connectionId:(NSString*)connectionId;
/**

    Gets the current instance.

*/
- (TConnection) instance;
/**

    Gets a value indicating whether the connection is currently closed or failed.

*/
- (bool) isTerminated;
/**

    Gets a value indicating whether the connection is currently closing or failing.

*/
- (bool) isTerminating;
/**

    Gets a value indicating whether the connection is currently closing, failing, closed, or failed.

*/
- (bool) isTerminatingOrTerminated;
/**

    Gets a value indicating whether legacy Connection.Timeout should be used.
    When disabled, Connection.Timeout only accounts for the time spent trying to establish
    connectivity (i.e. time it takes to transition from the Connecting to the Connected state;
    from the time point when both offer and answer had been set to the connection
    being fully established).
    When enabled, Connection.Timeout accounts for the time spent from receiving an offer (or creating an
    offer) to establishing connectivity (i.e. time it takes to transition from Initializing to Connected
    state).
    By default, LegacyTimeout is set to true, so that existing behavior is preserved. However, in the future
    default will be updated to false. This means that IL will not account for any signalling delays that may
    occur while establishing connectivity. This option will be later deprecated.

*/
- (bool) legacyTimeout;
/**

    Gets the local description.

*/
- (FMLiveSwitchSessionDescription*) localDescription;
/**

    Gets the media protocol in use on this connection.

*/
- (FMLiveSwitchMediaProtocol) mediaProtocol;
/**

    Processes a session description.

    @param description The session description.
    @param isLocalDescription Whether this is a local session description.
*/
- (FMLiveSwitchError*) processDescription:(FMLiveSwitchSessionDescription*)description isLocalDescription:(bool)isLocalDescription;
/**

    Processes a state change.

*/
- (void) processStateChange;
/**

    Raises gathering state change.

*/
- (void) raiseGatheringStateChangeWithConnection:(TConnection)connection;
/**

    Raises ICE connection state change.

*/
- (void) raiseIceConnectionStateChangeWithConnection:(TConnection)connection;
/**

    Raises a local candidate but only if it has not been already raised.

    @param localCandidate The local candidate.
*/
- (void) raiseLocalCandidate:(FMLiveSwitchCandidate*)localCandidate;
/**

    Raises a round trip time.

    @param roundTripTime 
*/
- (void) raiseRoundTripTime:(int)roundTripTime;
/**

    Gets the remote description.

*/
- (FMLiveSwitchSessionDescription*) remoteDescription;
/**

    Removes an ICE server.

    @param iceServer The ICE server.
*/
- (void) removeIceServer:(FMLiveSwitchIceServer*)iceServer;
/**

    Removes some ICE servers.

    @param iceServers The ICE servers.
*/
- (void) removeIceServers:(NSMutableArray*)iceServers;
/**

    Removes a handler that is raised when external Id of this connection changes. Old external Id as well as internal Id are raised.

*/
- (void) removeOnExternalIdChange:(FMLiveSwitchAction2<NSString*,NSString*>*)value;
/**

    Removes a handler that is raised when the gathering state changes.

*/
- (void) removeOnGatheringStateChange:(FMLiveSwitchAction1<TConnection>*)value;
/**

    Removes a handler that is raised when the ice connection state changes.

*/
- (void) removeOnIceConnectionStateChange:(FMLiveSwitchAction1<TConnection>*)value;
/**

    Removes a handler that is raised when a local candidate is added.

*/
- (void) removeOnLocalCandidate:(FMLiveSwitchAction2<TConnection,FMLiveSwitchCandidate*>*)value;
/**

    Removes a handler that is raised when a local description is set.

*/
- (void) removeOnLocalDescription:(FMLiveSwitchAction2<TConnection,FMLiveSwitchSessionDescription*>*)value;
/**

    Removes a handler that is raised when a remote description is added.

*/
- (void) removeOnRemoteCandidate:(FMLiveSwitchAction2<TConnection,FMLiveSwitchCandidate*>*)value;
/**

    Removes a handler that is raised when a remote description is set.

*/
- (void) removeOnRemoteDescription:(FMLiveSwitchAction2<TConnection,FMLiveSwitchSessionDescription*>*)value;
/**

    Removes a handler that is raised when a new round trip time is calculated.

*/
- (void) removeOnRoundTripTime:(FMLiveSwitchAction1<id>*)value;
/**

    Removes a handler that is raised when the signalling state changes.

*/
- (void) removeOnSignallingStateChange:(FMLiveSwitchAction1<TConnection>*)value;
/**

    Removes a handler that is raised when the connection state changes.

*/
- (void) removeOnStateChange:(FMLiveSwitchAction1<TConnection>*)value;
/**

    Sets the bundle policy.

*/
- (void) setBundlePolicy:(FMLiveSwitchBundlePolicy)value;
/**

    Sets the amount of time (in milliseconds)
    to wait for connectivity checks to re-establish
    after they start to fail on a live connection.
    Defaults to 15,000.

*/
- (void) setDeadStreamTimeout:(int)value;
/**

    Sets the error.

*/
- (void) setError:(FMLiveSwitchError*)value;
/**

    Sets the external identifier.

*/
- (void) setExternalId:(NSString*)value;
/**

    Sets the ICE gathering state.

*/
- (void) setGatheringState:(FMLiveSwitchIceGatheringState)value;
/**

    Sets the ICE connection state.

*/
- (void) setIceConnectionState:(FMLiveSwitchIceConnectionState)value;
/**

    Sets the ICE gather policy.

*/
- (void) setIceGatherPolicy:(FMLiveSwitchIceGatherPolicy)value;
/**

    Sets the ICE server.

*/
- (void) setIceServer:(FMLiveSwitchIceServer*)value;
/**

    Sets the ICE servers.

*/
- (void) setIceServers:(NSMutableArray*)value;
/**

    Sets a value indicating whether legacy Connection.Timeout should be used.
    When disabled, Connection.Timeout only accounts for the time spent trying to establish
    connectivity (i.e. time it takes to transition from the Connecting to the Connected state;
    from the time point when both offer and answer had been set to the connection
    being fully established).
    When enabled, Connection.Timeout accounts for the time spent from receiving an offer (or creating an
    offer) to establishing connectivity (i.e. time it takes to transition from Initializing to Connected
    state).
    By default, LegacyTimeout is set to true, so that existing behavior is preserved. However, in the future
    default will be updated to false. This means that IL will not account for any signalling delays that may
    occur while establishing connectivity. This option will be later deprecated.

*/
- (void) setLegacyTimeout:(bool)value;
/**

    Sets the local description.

    @param localDescription The local description.
*/
- (FMLiveSwitchFuture<FMLiveSwitchSessionDescription*>*) setLocalDescription:(FMLiveSwitchSessionDescription*)localDescription;
/**

    Sets the media protocol in use on this connection.

*/
- (void) setMediaProtocol:(FMLiveSwitchMediaProtocol)value;
/**

    Sets the remote description.

    @param remoteDescription The remote description.
*/
- (FMLiveSwitchFuture<FMLiveSwitchSessionDescription*>*) setRemoteDescription:(FMLiveSwitchSessionDescription*)remoteDescription;
/**

    Sets the state of the signalling.

*/
- (void) setSignallingState:(FMLiveSwitchSignallingState)value;
/**

    Sets the tie breaker.

*/
- (void) setTieBreaker:(NSString*)value;
/**

    Sets the amount of time (in milliseconds)
    to wait for a connection to establish before
    giving up and closing it. Defaults to 30,000.

*/
- (void) setTimeout:(int)value;
/**

    Sets Trickle Ice Support Policy. Cf. https://tools.ietf.org/html/draft-ietf-ice-trickle-05

*/
- (void) setTrickleIcePolicy:(FMLiveSwitchTrickleIcePolicy)value;
/**

    Sets a method that determines when to enable video again on a connection that dynamically disables video. Optional. If not set, default policy will be used.
    Takes in an interger parameter that represents the amount of attempts already tried. Will return an interger value as a time period in seconds for how long to wait for the next attempt or -1 for no more attempts.

*/
- (void) setVideoEnabledUpdateConnectionPolicy:(FMLiveSwitchFunction1<id,id>*)value;
/**

    Sets a method that determines when to enable video again on a connection that dynamically disables video. Optional. If not set, default policy will be used.
    Takes in an interger parameter that represents the amount of attempts already tried. Will return an interger value as a time period in seconds for how long to wait for the next attempt or -1 for no more attempts.

*/
- (void (^)(int(^)(int))) setVideoEnabledUpdateConnectionPolicyBlock;
/**

    Sets a method that determines when to enable video again on a connection that dynamically disables video. Optional. If not set, default policy will be used.
    Takes in an interger parameter that represents the amount of attempts already tried. Will return an interger value as a time period in seconds for how long to wait for the next attempt or -1 for no more attempts.

*/
- (void) setVideoEnabledUpdateConnectionPolicyBlock:(int(^)(int))valueBlock;
/**

    Sets the Video Retention Policy.
    This will determine how we will handle video on the connection when the connection is poor in quality.

*/
- (void) setVideoRetentionPolicy:(FMLiveSwitchVideoRetentionPolicy)value;
/**

    Gets the state of the signalling.

*/
- (FMLiveSwitchSignallingState) signallingState;
/**

    Gets the state of the connection.

*/
- (FMLiveSwitchConnectionState) state;
/**

    Gets the first stream.

*/
- (TStream) stream;
/**

    Gets the streams.

*/
- (NSMutableArray*) streams;
/**

    Gets the tie breaker.

*/
- (NSString*) tieBreaker;
/**

    Gets the amount of time (in milliseconds)
    to wait for a connection to establish before
    giving up and closing it. Defaults to 30,000.

*/
- (int) timeout;
/**

    Gets Trickle Ice Support Policy. Cf. https://tools.ietf.org/html/draft-ietf-ice-trickle-05

*/
- (FMLiveSwitchTrickleIcePolicy) trickleIcePolicy;
/**

    Gets a method that determines when to enable video again on a connection that dynamically disables video. Optional. If not set, default policy will be used.
    Takes in an interger parameter that represents the amount of attempts already tried. Will return an interger value as a time period in seconds for how long to wait for the next attempt or -1 for no more attempts.

*/
- (FMLiveSwitchFunction1<id,id>*) videoEnabledUpdateConnectionPolicy;
/**

    Gets the Video Retention Policy.
    This will determine how we will handle video on the connection when the connection is poor in quality.

*/
- (FMLiveSwitchVideoRetentionPolicy) videoRetentionPolicy;
/**

    Gets the first video stream.

*/
- (TVideoStream) videoStream;
/**

    Gets the video streams.

*/
- (NSMutableArray*) videoStreams;

@end

/**

    A state machine for data channel states.

*/
@interface FMLiveSwitchDataChannelStateMachine : FMLiveSwitchStateMachine<id>

/**

    Initializes a new instance of the FMLiveSwitchDataChannelStateMachine class.

*/
+ (FMLiveSwitchDataChannelStateMachine*) dataChannelStateMachine;
/**

    Initializes a new instance of the FMLiveSwitchDataChannelStateMachine class.

*/
- (instancetype) init;
/**

    Converts a state to an integer value.

    @param state The state.
*/
- (int) stateToValueWithState:(FMLiveSwitchDataChannelState)state;
/**

    Converts an integer value to a state.

    @param value The integer value.
*/
- (FMLiveSwitchDataChannelState) valueToState:(int)value;

@end

/**

    An audio pipe whose output matches its input.

*/
@interface FMLiveSwitchIdentityAudioPipe : FMLiveSwitchAudioPipe

/**

    Gets whether this pipe can change the output bitrate.

*/
- (bool) canChangeBitrate;
/**

    Gets whether this pipe can pause the output bitrate.

*/
- (bool) canPauseBitrate;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchAudioFrame*)frame inputBuffer:(FMLiveSwitchAudioBuffer*)inputBuffer;
/**

    Initializes a new FMLiveSwitchIdentityAudioPipe.

    @param format The input/output format.
*/
+ (FMLiveSwitchIdentityAudioPipe*) identityAudioPipeWithFormat:(FMLiveSwitchAudioFormat*)format;
/**

    Initializes a new FMLiveSwitchIdentityAudioPipe.
    Allows for the input format of the audio to differ from
    the output format of the audio to satisfy a media pipeline
    where the output format is a superset of the input format,
    however this class will not change the format of any frames.

    @param inputFormat 
    @param outputFormat 
*/
+ (FMLiveSwitchIdentityAudioPipe*) identityAudioPipeWithInputFormat:(FMLiveSwitchAudioFormat*)inputFormat outputFormat:(FMLiveSwitchAudioFormat*)outputFormat;
/**

    Initializes a new FMLiveSwitchIdentityAudioPipe.

    @param format The input/output format.
*/
- (instancetype) initWithFormat:(FMLiveSwitchAudioFormat*)format;
/**

    Initializes a new FMLiveSwitchIdentityAudioPipe.
    Allows for the input format of the audio to differ from
    the output format of the audio to satisfy a media pipeline
    where the output format is a superset of the input format,
    however this class will not change the format of any frames.

    @param inputFormat 
    @param outputFormat 
*/
- (instancetype) initWithInputFormat:(FMLiveSwitchAudioFormat*)inputFormat outputFormat:(FMLiveSwitchAudioFormat*)outputFormat;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Sets whether this pipe can change the output bitrate.

    @param canChangeBitrate Whether this pipe can change the output bitrate.
*/
- (void) updateCanChangeBitrate:(bool)canChangeBitrate;
/**

    Sets whether this pipe can pause the output bitrate.

    @param canPauseBitrate Whether this pipe can pause the output bitrate.
*/
- (void) updateCanPauseBitrate:(bool)canPauseBitrate;
/**

    Sets the maximum allowed input bitrate, in kbps.
    A value of -1 indicates unset, in which case the
    maximum input bitrate becomes the minimum of all
    output maximum input bitrates.

    @param maxInputBitrate The maximum allowed input bitrate, in kbps.
*/
- (void) updateMaxInputBitrate:(int)maxInputBitrate;
/**

    Sets the maximum allowed input encoding.
    A value of null indicates unset (no maximum).

    @param maxInputEncoding The maximum allowed input encoding.
*/
- (void) updateMaxInputEncoding:(FMLiveSwitchEncodingInfo*)maxInputEncoding;
/**

    Sets the maximum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

    @param maxOutputBitrate The maximum allowed output bitrate, in kbps.
*/
- (void) updateMaxOutputBitrate:(int)maxOutputBitrate;
/**

    Sets the maximum allowed output encoding.
    A value of null indicates unset (no maximum).

    @param maxOutputEncoding The maximum allowed output encoding.
*/
- (void) updateMaxOutputEncoding:(FMLiveSwitchEncodingInfo*)maxOutputEncoding;
/**

    Sets the minimum allowed input bitrate, in kbps.
    A value of -1 indicates unset, in which case the
    minimum input bitrate becomes the maximum of all
    output minimum input bitrates.

    @param minInputBitrate The minimum allowed input bitrate, in kbps.
*/
- (void) updateMinInputBitrate:(int)minInputBitrate;
/**

    Sets the minimum allowed input encoding.
    A value of null indicates unset (no minimum).

    @param minInputEncoding The minimum allowed input encoding.
*/
- (void) updateMinInputEncoding:(FMLiveSwitchEncodingInfo*)minInputEncoding;
/**

    Sets the minimum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

    @param minOutputBitrate The minimum allowed output bitrate, in kbps.
*/
- (void) updateMinOutputBitrate:(int)minOutputBitrate;
/**

    Sets the minimum allowed output encoding.
    A value of null indicates unset (no minimum).

    @param minOutputEncoding The minimum allowed output encoding.
*/
- (void) updateMinOutputEncoding:(FMLiveSwitchEncodingInfo*)minOutputEncoding;
/**

    Sets the target output bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

    @param targetOutputBitrate The target output bitrate, in kbps.
*/
- (void) updateTargetOutputBitrate:(int)targetOutputBitrate;
/**

    Sets the target output encoding.
    A value of null indicates unset (no target).

    @param targetOutputEncoding The target output encoding.
*/
- (void) updateTargetOutputEncoding:(FMLiveSwitchEncodingInfo*)targetOutputEncoding;

@end

/**

    A video pipe whose output matches its input.

*/
@interface FMLiveSwitchIdentityVideoPipe : FMLiveSwitchVideoPipe

/**

    Gets whether this pipe can change the output bitrate.

*/
- (bool) canChangeBitrate;
/**

    Gets whether this pipe can pause the output bitrate.

*/
- (bool) canPauseBitrate;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchVideoFrame*)frame inputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Initializes a new FMLiveSwitchIdentityVideoPipe.

    @param format The input/output format.
*/
+ (FMLiveSwitchIdentityVideoPipe*) identityVideoPipeWithFormat:(FMLiveSwitchVideoFormat*)format;
/**

    Initializes a new FMLiveSwitchIdentityVideoPipe.

    @param format The input/output format.
*/
- (instancetype) initWithFormat:(FMLiveSwitchVideoFormat*)format;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Sets whether this pipe can change the output bitrate.

    @param canChangeBitrate Whether this pipe can change the output bitrate.
*/
- (void) updateCanChangeBitrate:(bool)canChangeBitrate;
/**

    Sets whether this pipe can pause the output bitrate.

    @param canPauseBitrate Whether this pipe can pause the output bitrate.
*/
- (void) updateCanPauseBitrate:(bool)canPauseBitrate;
/**

    Sets the maximum allowed input bitrate, in kbps.
    A value of -1 indicates unset, in which case the
    maximum input bitrate becomes the minimum of all
    output maximum input bitrates.

    @param maxInputBitrate The maximum allowed input bitrate, in kbps.
*/
- (void) updateMaxInputBitrate:(int)maxInputBitrate;
/**

    Sets the maximum allowed input encoding.
    A value of null indicates unset (no maximum).

    @param maxInputEncoding The maximum allowed input encoding.
*/
- (void) updateMaxInputEncoding:(FMLiveSwitchEncodingInfo*)maxInputEncoding;
/**

    Sets the maximum allowed input frame-rate.
    A value of -1 indicates unset (no maximum).

    @param maxInputFrameRate The maximum allowed input frame-rate.
*/
- (void) updateMaxInputFrameRate:(double)maxInputFrameRate;
/**

    Sets the maximum allowed input scale.
    A value of -1 indicates unset (no maximum).

    @param maxInputScale The maximum allowed input scale.
*/
- (void) updateMaxInputScale:(double)maxInputScale;
/**

    Sets the maximum allowed input size.
    A value of -1 indicates unset (no maximum).

    @param maxInputSize The maximum allowed input size.
*/
- (void) updateMaxInputSize:(FMLiveSwitchSize*)maxInputSize;
/**

    Sets the maximum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

    @param maxOutputBitrate The maximum allowed output bitrate, in kbps.
*/
- (void) updateMaxOutputBitrate:(int)maxOutputBitrate;
/**

    Sets the maximum allowed output encoding.
    A value of null indicates unset (no maximum).

    @param maxOutputEncoding The maximum allowed output encoding.
*/
- (void) updateMaxOutputEncoding:(FMLiveSwitchEncodingInfo*)maxOutputEncoding;
/**

    Sets the maximum allowed output frame-rate.
    A value of -1 indicates unset (no maximum).

    @param maxOutputFrameRate The maximum allowed output frame-rate.
*/
- (void) updateMaxOutputFrameRate:(double)maxOutputFrameRate;
/**

    Sets the maximum allowed output scale.
    A value of -1 indicates unset (no maximum).

    @param maxOutputScale The maximum allowed output scale.
*/
- (void) updateMaxOutputScale:(double)maxOutputScale;
/**

    Sets the maximum allowed output size.
    A value of -1 indicates unset (no maximum).

    @param maxOutputSize The maximum allowed output size.
*/
- (void) updateMaxOutputSize:(FMLiveSwitchSize*)maxOutputSize;
/**

    Sets the minimum allowed input bitrate, in kbps.
    A value of -1 indicates unset, in which case the
    minimum input bitrate becomes the maximum of all
    output minimum input bitrates.

    @param minInputBitrate The minimum allowed input bitrate, in kbps.
*/
- (void) updateMinInputBitrate:(int)minInputBitrate;
/**

    Sets the minimum allowed input encoding.
    A value of null indicates unset (no minimum).

    @param minInputEncoding The minimum allowed input encoding.
*/
- (void) updateMinInputEncoding:(FMLiveSwitchEncodingInfo*)minInputEncoding;
/**

    Sets the minimum allowed input frame-rate.
    A value of -1 indicates unset (no minimum).

    @param minInputFrameRate The minimum allowed input frame-rate.
*/
- (void) updateMinInputFrameRate:(double)minInputFrameRate;
/**

    Sets the minimum allowed input scale.
    A value of -1 indicates unset (no minimum).

    @param minInputScale The minimum allowed input scale.
*/
- (void) updateMinInputScale:(double)minInputScale;
/**

    Sets the minimum allowed input size.
    A value of -1 indicates unset (no minimum).

    @param minInputSize The minimum allowed input size.
*/
- (void) updateMinInputSize:(FMLiveSwitchSize*)minInputSize;
/**

    Sets the minimum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

    @param minOutputBitrate The minimum allowed output bitrate, in kbps.
*/
- (void) updateMinOutputBitrate:(int)minOutputBitrate;
/**

    Sets the minimum allowed output encoding.
    A value of null indicates unset (no minimum).

    @param minOutputEncoding The minimum allowed output encoding.
*/
- (void) updateMinOutputEncoding:(FMLiveSwitchEncodingInfo*)minOutputEncoding;
/**

    Sets the minimum allowed output frame-rate.
    A value of -1 indicates unset (no minimum).

    @param minOutputFrameRate The minimum allowed output frame-rate.
*/
- (void) updateMinOutputFrameRate:(double)minOutputFrameRate;
/**

    Sets the minimum allowed output scale.
    A value of -1 indicates unset (no minimum).

    @param minOutputScale The minimum allowed output scale.
*/
- (void) updateMinOutputScale:(double)minOutputScale;
/**

    Sets the minimum allowed output size.
    A value of -1 indicates unset (no minimum).

    @param minOutputSize The minimum allowed output size.
*/
- (void) updateMinOutputSize:(FMLiveSwitchSize*)minOutputSize;
/**

    Sets the target output bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

    @param targetOutputBitrate The target output bitrate, in kbps.
*/
- (void) updateTargetOutputBitrate:(int)targetOutputBitrate;
/**

    Sets the target output encoding.
    A value of null indicates unset (no target).

    @param targetOutputEncoding The target output encoding.
*/
- (void) updateTargetOutputEncoding:(FMLiveSwitchEncodingInfo*)targetOutputEncoding;
/**

    Sets the target output frame-rate.
    A value of -1 indicates unset (no minimum).

    @param targetOutputFrameRate The target output frame-rate.
*/
- (void) updateTargetOutputFrameRate:(double)targetOutputFrameRate;
/**

    Sets the target output scale.
    A value of -1 indicates unset (no minimum).

    @param targetOutputScale The target output scale.
*/
- (void) updateTargetOutputScale:(double)targetOutputScale;
/**

    Sets the target output size.
    A value of -1 indicates unset (no minimum).

    @param targetOutputSize The target output size.
*/
- (void) updateTargetOutputSize:(FMLiveSwitchSize*)targetOutputSize;
/**

    Sets the video type.

    @param videoType The video type.
*/
- (void) updateVideoType:(FMLiveSwitchVideoType)videoType;

@end

/**

    A video sink.

*/
@interface FMLiveSwitchVideoSink : FMLiveSwitchMediaSink<NSObject<FMLiveSwitchIVideoOutput>*,FMLiveSwitchIVideoOutputCollection*,NSObject<FMLiveSwitchIVideoInput>*,FMLiveSwitchVideoSink*,FMLiveSwitchVideoFrame*,FMLiveSwitchVideoBuffer*,FMLiveSwitchVideoBufferCollection*,FMLiveSwitchVideoFormat*><FMLiveSwitchIVideoInput, FMLiveSwitchIMediaInput, FMLiveSwitchIInput, FMLiveSwitchIVideoElement, FMLiveSwitchIMediaElement, FMLiveSwitchIElement>

/**

    Adds a handler that is raised when a frame is about to be processed with
    a size that does not match the prior frame.

*/
- (void) addOnProcessSizeChange:(FMLiveSwitchAction1<FMLiveSwitchSize*>*)value;
/**

    Adds a handler that is raised when a frame is about to be processed with
    a size that does not match the prior frame.

*/
- (void (^)(void(^)(FMLiveSwitchSize*))) addOnProcessSizeChangeWithBlock;
/**

    Adds a handler that is raised when a frame is about to be processed with
    a size that does not match the prior frame.

*/
- (void) addOnProcessSizeChangeWithBlock:(void(^)(FMLiveSwitchSize*))valueBlock;
/**

    Gets the content descriptor.

*/
- (NSString*) content;
/**

    Creates an output collection.

    @param input The input.
*/
- (FMLiveSwitchIVideoOutputCollection*) createOutputCollectionWithInput:(NSObject<FMLiveSwitchIVideoInput>*)input;
/**

    Pre-processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doPreProcessFrame:(FMLiveSwitchVideoFrame*)frame inputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchVideoSink class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchVideoSink class.

    @param inputFormat The input format.
*/
- (instancetype) initWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat;
/**

    Gets the maximum allowed input encoding.

*/
- (FMLiveSwitchEncodingInfo*) maxInputEncoding;
/**

    Gets the maximum allowed input frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxInputFrameRate;
/**

    Gets the maximum allowed input height.
    A value of -1 indicates unset (no minimum).

*/
- (int) maxInputHeight;
/**

    Gets the maximum allowed input scale.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxInputScale;
/**

    Gets the maximum allowed input size.
    A value of null indicates unset (no maximum).

*/
- (FMLiveSwitchSize*) maxInputSize;
/**

    Gets the maximum allowed input width.
    A value of -1 indicates unset (no minimum).

*/
- (int) maxInputWidth;
/**

    Gets the minimum allowed input encoding.

*/
- (FMLiveSwitchEncodingInfo*) minInputEncoding;
/**

    Gets the minimum allowed input frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (double) minInputFrameRate;
/**

    Gets the minimum allowed input height.
    A value of -1 indicates unset (no minimum).

*/
- (int) minInputHeight;
/**

    Gets the minimum allowed input scale.
    A value of -1 indicates unset (no minimum).

*/
- (double) minInputScale;
/**

    Gets the minimum allowed input size.
    A value of null indicates unset (no minimum).

*/
- (FMLiveSwitchSize*) minInputSize;
/**

    Gets the minimum allowed input width.
    A value of -1 indicates unset (no minimum).

*/
- (int) minInputWidth;
/**

    Gets whether the sink frame-rate is over-constrained.
    A sink frame-rate is over-constrained if the input
    frame-rate is over-constrained.

*/
- (bool) overConstrainedFrameRate;
/**

    Gets whether the sink height is over-constrained.
    A sink height is over-constrained if the input
    height is over-constrained.

*/
- (bool) overConstrainedHeight;
/**

    Gets whether the input is over-contrained.
    An input is over-constrained if it's
    input bitrate, input scale, input frame-rate,
    input size is over-contrained.

*/
- (bool) overConstrainedInput;
/**

    Gets whether the minimum allowed input frame-rate exceeds the maximum allowed input frame-rate.

*/
- (bool) overConstrainedInputFrameRate;
/**

    Gets whether the minimum allowed input height exceeds the maximum allowed input height.

*/
- (bool) overConstrainedInputHeight;
/**

    Gets whether the minimum allowed input scale exceeds the maximum allowed input scale.

*/
- (bool) overConstrainedInputScale;
/**

    Gets whether the minimum allowed input size exceeds the maximum allowed input size.

*/
- (bool) overConstrainedInputSize;
/**

    Gets whether the minimum allowed input width exceeds the maximum allowed input width.

*/
- (bool) overConstrainedInputWidth;
/**

    Gets whether the sink scale is over-constrained.
    A sink scale is over-constrained if the input
    scale is over-constrained.

*/
- (bool) overConstrainedScale;
/**

    Gets whether the sink size is over-constrained.
    A sink size is over-constrained if the input
    size is over-constrained.

*/
- (bool) overConstrainedSize;
/**

    Gets whether the sink width is over-constrained.
    A sink width is over-constrained if the input
    width is over-constrained.

*/
- (bool) overConstrainedWidth;
/**

    Removes a handler that is raised when a frame is about to be processed with
    a size that does not match the prior frame.

*/
- (void) removeOnProcessSizeChange:(FMLiveSwitchAction1<FMLiveSwitchSize*>*)value;
/**

    Sets the maximum allowed input encoding.

*/
- (void) setMaxInputEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Sets the maximum allowed input frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (void) setMaxInputFrameRate:(double)value;
/**

    Sets the maximum allowed input scale.
    A value of -1 indicates unset (no maximum).

*/
- (void) setMaxInputScale:(double)value;
/**

    Sets the maximum allowed input size.
    A value of null indicates unset (no maximum).

*/
- (void) setMaxInputSize:(FMLiveSwitchSize*)value;
/**

    Sets the minimum allowed input encoding.

*/
- (void) setMinInputEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Sets the minimum allowed input frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (void) setMinInputFrameRate:(double)value;
/**

    Sets the minimum allowed input scale.
    A value of -1 indicates unset (no minimum).

*/
- (void) setMinInputScale:(double)value;
/**

    Sets the minimum allowed input size.
    A value of null indicates unset (no minimum).

*/
- (void) setMinInputSize:(FMLiveSwitchSize*)value;
/**

    Sets the video type.

*/
- (void) setVideoType:(FMLiveSwitchVideoType)value;
/**

    Initializes a new instance of the FMLiveSwitchVideoSink class.

*/
+ (FMLiveSwitchVideoSink*) videoSink;
/**

    Initializes a new instance of the FMLiveSwitchVideoSink class.

    @param inputFormat The input format.
*/
+ (FMLiveSwitchVideoSink*) videoSinkWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat;
/**

    Gets the video type.

*/
- (FMLiveSwitchVideoType) videoType;

@end

/**

    A video view sink.

*/
@interface FMLiveSwitchViewSink<__covariant T> : FMLiveSwitchVideoSink<FMLiveSwitchIViewSink>

/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchVideoFrame*)frame inputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchViewSink`1 class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchViewSink`1 class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchViewSink`1 class.

    @param inputFormat The input format.
*/
- (instancetype) initWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat;
/**

    Initializes a new instance of the FMLiveSwitchViewSink`1 class.

    @param inputs The inputs.
*/
- (instancetype) initWithInputs:(NSMutableArray*)inputs;
/**

    Gets a value indicating whether a recording icon should be displayed.

*/
- (bool) isRecording;
/**

    Renders the buffer.

    @param inputBuffer The input buffer.
*/
- (void) renderBufferWithInputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Sets a value indicating whether a recording icon should be displayed.

*/
- (void) setIsRecording:(bool)value;
/**

    Sets a value indicating whether the view is mirrored.

*/
- (void) setViewMirror:(bool)value;
/**

    Sets the view scale.

*/
- (void) setViewScale:(FMLiveSwitchLayoutScale)value;
/**

    Gets the view.

*/
- (T) view;
/**

    Gets a value indicating whether the view is mirrored.

*/
- (bool) viewMirror;
/**

    Gets the view scale.

*/
- (FMLiveSwitchLayoutScale) viewScale;
/**

    Initializes a new instance of the FMLiveSwitchViewSink`1 class.

*/
+ (FMLiveSwitchViewSink*) viewSink;
/**

    Initializes a new instance of the FMLiveSwitchViewSink`1 class.

    @param input The input.
*/
+ (FMLiveSwitchViewSink*) viewSinkWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchViewSink`1 class.

    @param inputFormat The input format.
*/
+ (FMLiveSwitchViewSink*) viewSinkWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat;
/**

    Initializes a new instance of the FMLiveSwitchViewSink`1 class.

    @param inputs The inputs.
*/
+ (FMLiveSwitchViewSink*) viewSinkWithInputs:(NSMutableArray*)inputs;

@end

/**

    A video view sink that does nothing.

*/
@interface FMLiveSwitchNullViewSink<__covariant T> : FMLiveSwitchViewSink<T>

/**

    Gets the current frame count.

*/
- (long long) frameCount;
/**

    Initializes a new instance of the FMLiveSwitchNullViewSink`1 class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchNullViewSink`1 class.

    @param inputFormat The input format.
*/
- (instancetype) initWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Initializes a new instance of the FMLiveSwitchNullViewSink`1 class.

*/
+ (FMLiveSwitchNullViewSink*) nullViewSink;
/**

    Initializes a new instance of the FMLiveSwitchNullViewSink`1 class.

    @param inputFormat The input format.
*/
+ (FMLiveSwitchNullViewSink*) nullViewSinkWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat;
/**

    Renders a video buffer.

    @param inputBuffer The input buffer.
*/
- (void) renderBufferWithInputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Creates a future that resolves when the specified
    number of frames have been processed.

    @param count 
*/
- (FMLiveSwitchFuture<id>*) renderedFramesWithCount:(long long)count;
/**

    Sets a value indicating whether the view is mirrored.

*/
- (void) setViewMirror:(bool)value;
/**

    Sets the view scale.

*/
- (void) setViewScale:(FMLiveSwitchLayoutScale)value;
/**

    Sets the maximum allowed input bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

    @param maxInputBitrate The maximum allowed input bitrate, in kbps.
*/
- (void) updateMaxInputBitrate:(int)maxInputBitrate;
/**

    Sets the minimum allowed input bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

    @param minInputBitrate The minimum allowed input bitrate, in kbps.
*/
- (void) updateMinInputBitrate:(int)minInputBitrate;
/**

    Gets the view.

*/
- (T) view;
/**

    Gets a value indicating whether the view is mirrored.

*/
- (bool) viewMirror;
/**

    Gets the view scale.

*/
- (FMLiveSwitchLayoutScale) viewScale;

@end

/**

    A state machine for stream states.

*/
@interface FMLiveSwitchStreamStateMachine : FMLiveSwitchStateMachine<id>

/**

    Initializes a new instance of the FMLiveSwitchStreamStateMachine class.

*/
- (instancetype) init;
/**

    Converts a state to an integer value.

    @param state The state.
*/
- (int) stateToValueWithState:(FMLiveSwitchStreamState)state;
/**

    Initializes a new instance of the FMLiveSwitchStreamStateMachine class.

*/
+ (FMLiveSwitchStreamStateMachine*) streamStateMachine;
/**

    Converts an integer value to a state.

    @param value The integer value.
*/
- (FMLiveSwitchStreamState) valueToState:(int)value;

@end

/**

    A state machine for connection states.

*/
@interface FMLiveSwitchConnectionStateMachine : FMLiveSwitchStateMachine<id>

/**

    Initializes a new instance of the FMLiveSwitchConnectionStateMachine class.

*/
+ (FMLiveSwitchConnectionStateMachine*) connectionStateMachine;
/**

    Initializes a new instance of the FMLiveSwitchConnectionStateMachine class.

*/
- (instancetype) init;
/**

    Converts a state to an integer value.

    @param state The state.
*/
- (int) stateToValueWithState:(FMLiveSwitchConnectionState)state;
/**

    Converts an integer value to a state.

    @param value The integer value.
*/
- (FMLiveSwitchConnectionState) valueToState:(int)value;

@end

/**

    Data channel base properties/methods.

*/
@interface FMLiveSwitchDataChannelBase<__covariant TDataChannel> : FMLiveSwitchDynamic<FMLiveSwitchIDataChannel>

/**

    Adds a handler that is raised when the data channel state changes.

*/
- (void) addOnStateChange:(FMLiveSwitchAction1<TDataChannel>*)value;
/**

    Adds a handler that is raised when the data channel state changes.

*/
- (void (^)(void(^)(TDataChannel))) addOnStateChangeWithBlock;
/**

    Adds a handler that is raised when the data channel state changes.

*/
- (void) addOnStateChangeWithBlock:(void(^)(TDataChannel))valueBlock;
/**

    Gets the number of bytes received.

*/
- (long long) bytesReceived;
/**

    Gets the number of bytes sent.

*/
- (long long) bytesSent;
/**

    Gets the connection identifier.

*/
- (NSString*) connectionId;
/**

    Initializes a new instance of the FMLiveSwitchDataChannelBase`1 class.

    @param label The label.
    @param ordered Whether messages will be delivered in the order they are sent.
    @param subprotocol The subprotocol.
*/
+ (FMLiveSwitchDataChannelBase*) dataChannelBaseWithLabel:(NSString*)label ordered:(bool)ordered subprotocol:(NSString*)subprotocol;
/**

    Initializes a new instance of the FMLiveSwitchDataChannelBase`1 class.

    @param label The label.
    @param ordered Whether messages will be delivered in the order they are sent.
    @param subprotocol The subprotocol.
    @param internalChannel Indicates whether this is an internal channel.
*/
+ (FMLiveSwitchDataChannelBase*) dataChannelBaseWithLabel:(NSString*)label ordered:(bool)ordered subprotocol:(NSString*)subprotocol internalChannel:(bool)internalChannel;
/**

    Gets the identifier.

*/
- (NSString*) id;
/**

    Gets the data channel info.

*/
- (FMLiveSwitchDataChannelInfo*) info;
/**

    Initializes a new instance of the FMLiveSwitchDataChannelBase`1 class.

    @param label The label.
    @param ordered Whether messages will be delivered in the order they are sent.
    @param subprotocol The subprotocol.
*/
- (instancetype) initWithLabel:(NSString*)label ordered:(bool)ordered subprotocol:(NSString*)subprotocol;
/**

    Initializes a new instance of the FMLiveSwitchDataChannelBase`1 class.

    @param label The label.
    @param ordered Whether messages will be delivered in the order they are sent.
    @param subprotocol The subprotocol.
    @param internalChannel Indicates whether this is an internal channel.
*/
- (instancetype) initWithLabel:(NSString*)label ordered:(bool)ordered subprotocol:(NSString*)subprotocol internalChannel:(bool)internalChannel;
/**

    Gets the current instance.

*/
- (TDataChannel) instance;
/**

    Gets a value indicating if this is an internal data channel.

*/
- (bool) isInternal;
/**

    Gets a value indicating whether the data channel is currently closed or failed.

*/
- (bool) isTerminated;
/**

    Gets a value indicating whether the data channel is currently closing.

*/
- (bool) isTerminating;
/**

    Gets a value indicating whether the data channel is currently closing, closed, or failed.

*/
- (bool) isTerminatingOrTerminated;
/**

    Gets the label.

*/
- (NSString*) label;
/**

    Gets the number of messages received.

*/
- (long long) messagesReceived;
/**

    Gets the number of messages sent.

*/
- (long long) messagesSent;
/**

    Gets a callback invoked when a message is received.


    __Example:__

    \code
    channel.setOnReceive { [weak self] (messageArgs: Any!) in
        let message = messageArgs as! FMLiveSwitchDataChannelArgs
        // Do something
    }
    \endcode
*/
- (FMLiveSwitchAction1<FMLiveSwitchDataChannelReceiveArgs*>*) onReceive;
/**

    Gets a value indicating whether messages will be delivered in the order they are sent.

*/
- (bool) ordered;
/**

    Processes a state change.

*/
- (void) processStateChange;
/**

    Processes a state lock change.

*/
- (void) processStateLockChange;
/**

    Raises the OnReceive callback with data bytes.

    @param dataBytes The data bytes.
*/
- (void) raiseDataBytes:(FMLiveSwitchDataBuffer*)dataBytes;
/**

    Raises the OnReceive callback with a data string.

    @param dataString The data string.
*/
- (void) raiseDataString:(NSString*)dataString;
/**

    Registers that a data has been sent.

    @param dataLength The data length.
*/
- (void) registerDataReceivedWithDataLength:(int)dataLength;
/**

    Registers that a data has been sent.

    @param dataLength The data length.
*/
- (void) registerDataSentWithDataLength:(int)dataLength;
/**

    Removes a handler that is raised when the data channel state changes.

*/
- (void) removeOnStateChange:(FMLiveSwitchAction1<TDataChannel>*)value;
/**

    Sends some bytes.

    @param dataBytes The data bytes.
*/
- (FMLiveSwitchFuture<id>*) sendDataBytes:(FMLiveSwitchDataBuffer*)dataBytes;
/**

    Sends a string.

    @param dataString The data string.
*/
- (FMLiveSwitchFuture<id>*) sendDataString:(NSString*)dataString;
/**

    Sets a callback invoked when a message is received.


    __Example:__

    \code
    channel.setOnReceive { [weak self] (messageArgs: Any!) in
        let message = messageArgs as! FMLiveSwitchDataChannelArgs
        // Do something
    }
    \endcode
*/
- (void) setOnReceive:(FMLiveSwitchAction1<FMLiveSwitchDataChannelReceiveArgs*>*)value;
/**

    Sets a callback invoked when a message is received.


    __Example:__

    \code
    channel.setOnReceive { [weak self] (messageArgs: Any!) in
        let message = messageArgs as! FMLiveSwitchDataChannelArgs
        // Do something
    }
    \endcode
*/
- (void (^)(void(^)(FMLiveSwitchDataChannelReceiveArgs*))) setOnReceiveBlock;
/**

    Sets a callback invoked when a message is received.


    __Example:__

    \code
    channel.setOnReceive { [weak self] (messageArgs: Any!) in
        let message = messageArgs as! FMLiveSwitchDataChannelArgs
        // Do something
    }
    \endcode
*/
- (void) setOnReceiveBlock:(void(^)(FMLiveSwitchDataChannelReceiveArgs*))valueBlock;
/**

    Gets the state.

*/
- (FMLiveSwitchDataChannelState) state;
/**

    Gets the stream identifier.

*/
- (NSString*) streamId;
/**

    Gets the subprotocol.

*/
- (NSString*) subprotocol;

@end

/**

    A data channel.

*/
@interface FMLiveSwitchDataChannel : FMLiveSwitchDataChannelBase<FMLiveSwitchDataChannel*>

/**

    Initializes a new instance of the FMLiveSwitchDataChannel class.

    @param label The label.
*/
+ (FMLiveSwitchDataChannel*) dataChannelWithLabel:(NSString*)label;
/**

    Initializes a new instance of the FMLiveSwitchDataChannel class.

    @param label The label.
    @param ordered if set to `true` [ordered].
*/
+ (FMLiveSwitchDataChannel*) dataChannelWithLabel:(NSString*)label ordered:(bool)ordered;
/**

    Initializes a new instance of the FMLiveSwitchDataChannel class.

    @param label The label.
    @param ordered Whether messages will be delivered in the order they are sent.
    @param subprotocol The subprotocol.
*/
+ (FMLiveSwitchDataChannel*) dataChannelWithLabel:(NSString*)label ordered:(bool)ordered subprotocol:(NSString*)subprotocol;
/**

    Initializes a new instance of the FMLiveSwitchDataChannel class.

    @param label The label.
*/
- (instancetype) initWithLabel:(NSString*)label;
/**

    Initializes a new instance of the FMLiveSwitchDataChannel class.

    @param label The label.
    @param ordered if set to `true` [ordered].
*/
- (instancetype) initWithLabel:(NSString*)label ordered:(bool)ordered;
/**

    Initializes a new instance of the FMLiveSwitchDataChannel class.

    @param label The label.
    @param ordered Whether messages will be delivered in the order they are sent.
    @param subprotocol The subprotocol.
*/
- (instancetype) initWithLabel:(NSString*)label ordered:(bool)ordered subprotocol:(NSString*)subprotocol;
/**

    Gets the current instance.

*/
- (FMLiveSwitchDataChannel*) instance;
/**

    Processes a state lock change.

*/
- (void) processStateLockChange;
/**

    Sends bytes.

    @param dataBytes The data bytes.
*/
- (FMLiveSwitchFuture<id>*) sendDataBytes:(FMLiveSwitchDataBuffer*)dataBytes;
/**

    Sends a string.

    @param dataString The data string.
*/
- (FMLiveSwitchFuture<id>*) sendDataString:(NSString*)dataString;

@end

/**

    A collection of data channels.

*/
@interface FMLiveSwitchDataChannelCollection : FMLiveSwitchCollection<FMLiveSwitchDataChannel*,FMLiveSwitchDataChannelCollection*>

/**

    Creates an array from a list.

    @param list The list.
*/
- (NSMutableArray*) arrayFromList:(NSMutableArray<FMLiveSwitchDataChannel*>*)list;
/**

    Creates a collection.

*/
- (FMLiveSwitchDataChannelCollection*) createCollection;
+ (FMLiveSwitchDataChannelCollection*) dataChannelCollection;
- (instancetype) init;

@end

/**

    Arguments for the data channel receive event.

*/
@interface FMLiveSwitchDataChannelReceiveArgs : NSObject

/**

    Gets a received data buffer if it is available. Set to null if a data string was not received.
    Bear in mind that when accessing the payload data from the FMLiveSwitchDataBuffer, only FMLiveSwitchDataBuffer#length bytes starting with the FMLiveSwitchDataBuffer#index byte should be read. See examples.


    __Example:__

    \code
    channel.setOnReceive { [weak self] (messageArgs: Any!) in
        let dataBytes = (messageArgs as! FMLiveSwitchDataChannelReceiveArgs).dataBytes()
        if (dataBytes != nil) {
            let bytes = dataBytes!.data() // The payload byte[] might contain extra bytes that are not part of the payload.
            let index = dataBytes!.index() // Starting index of the payload’s bytes you want.
            let length = dataBytes!.length() // Length of the payload’s bytes you want.
            let firstByte = dataBytes!.data()[Int(index)] // An example of acccessing the first byte.
        }
    }
    \endcode
*/
- (FMLiveSwitchDataBuffer*) dataBytes;
+ (FMLiveSwitchDataChannelReceiveArgs*) dataChannelReceiveArgs;
/**

    Gets a received data string if it is available. Set to null if a data string was not received.


    __Example:__

    \code
    channel.setOnReceive{ [weak self] (msg: Any!) in
        let message = msg as! FMLiveSwitchDataChannelReceiveArgs
        let messageStr = message.dataString()
        if (messageStr != nil){
            //Do something with the string.   
        }
    }
    \endcode
*/
- (NSString*) dataString;
- (instancetype) init;
/**

    Gets the remote connection info.

*/
- (FMLiveSwitchConnectionInfo*) remoteConnectionInfo;
/**

    Sets a received data buffer if it is available. Set to null if a data string was not received.
    Bear in mind that when accessing the payload data from the FMLiveSwitchDataBuffer, only FMLiveSwitchDataBuffer#length bytes starting with the FMLiveSwitchDataBuffer#index byte should be read. See examples.


    __Example:__

    \code
    channel.setOnReceive { [weak self] (messageArgs: Any!) in
        let dataBytes = (messageArgs as! FMLiveSwitchDataChannelReceiveArgs).dataBytes()
        if (dataBytes != nil) {
            let bytes = dataBytes!.data() // The payload byte[] might contain extra bytes that are not part of the payload.
            let index = dataBytes!.index() // Starting index of the payload’s bytes you want.
            let length = dataBytes!.length() // Length of the payload’s bytes you want.
            let firstByte = dataBytes!.data()[Int(index)] // An example of acccessing the first byte.
        }
    }
    \endcode
*/
- (void) setDataBytes:(FMLiveSwitchDataBuffer*)value;
/**

    Sets a received data string if it is available. Set to null if a data string was not received.


    __Example:__

    \code
    channel.setOnReceive{ [weak self] (msg: Any!) in
        let message = msg as! FMLiveSwitchDataChannelReceiveArgs
        let messageStr = message.dataString()
        if (messageStr != nil){
            //Do something with the string.   
        }
    }
    \endcode
*/
- (void) setDataString:(NSString*)value;

@end

/**

    Data stream base properties/methods.

*/
@interface FMLiveSwitchDataStreamBase<__covariant TDataChannel> : FMLiveSwitchStream<FMLiveSwitchIDataStream, FMLiveSwitchIStream>

/**

    Attaches a data channel to this stream (events and IDs).

    @param channel 
*/
- (void) attachToChannel:(TDataChannel)channel;
/**

    Gets the number of bytes received.

*/
- (long long) bytesReceived;
/**

    Gets the number of bytes sent.

*/
- (long long) bytesSent;
/**

    Gets the canonical name.

    @deprecated Will be removed in a future release.
*/
- (NSString*) canonicalName __deprecated_msg("Will be removed in a future release.");
/**

    Changes this stream's direction

*/
- (FMLiveSwitchError*) changeDirectionWithNewDirection:(FMLiveSwitchStreamDirection)newDirection;
/**

    Gets the channels.

*/
- (NSMutableArray*) channels;
/**

    Initializes a new instance of the FMLiveSwitchDataStreamBase`1 class.

*/
+ (FMLiveSwitchDataStreamBase*) dataStreamBase;
/**

    Gets the current direction.

*/
- (FMLiveSwitchStreamDirection) direction;
/**

    Gets the data stream info.

*/
- (FMLiveSwitchDataStreamInfo*) info;
/**

    Initializes a new instance of the FMLiveSwitchDataStreamBase`1 class.

*/
- (instancetype) init;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets the current direction.

*/
- (FMLiveSwitchStreamDirection) localDirection;
/**

    Gets the number of messages received.

*/
- (long long) messagesReceived;
/**

    Gets the number of messages sent.

*/
- (long long) messagesSent;
/**

    Processes a state change.

*/
- (void) processStateChange;
/**

    Processes a state lock change.

*/
- (void) processStateLockChange;
/**

    Registers that a data has been received.

    @param dataLength The data length.
*/
- (void) registerDataReceivedWithDataLength:(int)dataLength;
/**

    Registers that a data has been received.

    @param dataLength The data length.
*/
- (void) registerDataSentWithDataLength:(int)dataLength;
/**

    Gets the current direction.

*/
- (FMLiveSwitchStreamDirection) remoteDirection;
/**

    Sets the current direction.

*/
- (void) setLocalDirection:(FMLiveSwitchStreamDirection)value;

@end

/**

    A data stream.

*/
@interface FMLiveSwitchDataStream : FMLiveSwitchDataStreamBase<FMLiveSwitchDataChannel*>

/**

    Gets the channels.

*/
- (NSMutableArray*) channels;
/**

    Initializes a new instance of the FMLiveSwitchDataStream class.

    @param channel The channel.
*/
+ (FMLiveSwitchDataStream*) dataStreamWithChannel:(FMLiveSwitchDataChannel*)channel;
/**

    Initializes a new instance of the FMLiveSwitchDataStream class.

    @param channels The channels.
*/
+ (FMLiveSwitchDataStream*) dataStreamWithChannels:(NSMutableArray*)channels;
/**

    Initializes a new instance of the FMLiveSwitchDataStream class.

    @param channel The channel.
*/
- (instancetype) initWithChannel:(FMLiveSwitchDataChannel*)channel;
/**

    Initializes a new instance of the FMLiveSwitchDataStream class.

    @param channels The channels.
*/
- (instancetype) initWithChannels:(NSMutableArray*)channels;
/**

    Gets maximum message size that this client is willing to receive over this stream in bytes.

*/
- (long long) maxMessageSize;
/**

    Gets the SCTP port.

*/
- (int) sctpPort;
/**

    Sets maximum message size that this client is willing to receive over this stream in bytes.

*/
- (void) setMaxMessageSize:(long long)value;
/**

    Sets the SCTP port.

*/
- (void) setSctpPort:(int)value;
/**

    Sets a value indicating whether SDES encryption is in use for this stream.

*/
- (void) setUseSdes:(bool)value;
/**

    Gets transport information.

*/
- (FMLiveSwitchTransportInfo*) transportInfo;
/**

    Gets a value indicating whether SDES encryption is in use for this stream.

*/
- (bool) useSdes;

@end

/**

    The base class for the diagnostic timers.

*/
@interface FMLiveSwitchDiagnosticsTimer : NSObject

/**

    Destroys this timer and its data.

*/
- (void) destroy;
/**

    Gets a string containing the stats from this timer.

*/
- (NSString*) getStats;
/**

    Gets if this Timer has data or not.

*/
- (bool) hasData;
/**

    Gets the tag for this diagnostic timer.

*/
- (NSString*) tag;
/**

    Gets the stop watch used in this timer.

*/
- (FMLiveSwitchManagedStopwatch*) watch;

@end

/**

    A duration timer for calculating how long a process takes.

*/
@interface FMLiveSwitchDiagnosticsDurationTimer : FMLiveSwitchDiagnosticsTimer

/**

    Adds beginning timestamp to the sample queue.

*/
- (FMLiveSwitchDiagnosticsDurationSample*) beginSample;
/**

    Adds an end timestamp to the sample queue.

*/
- (bool) endSample:(FMLiveSwitchDiagnosticsDurationSample*)sample;
/**

    Processes samples and calculates instant while keeping track of the total the min, max, and average.

*/
- (NSString*) getStats;
/**

    Gets whether this timer has data or not.

*/
- (bool) hasData;

@end

/**

    A rate timer for calculating the frequency of something.

*/
@interface FMLiveSwitchDiagnosticsRateTimer : FMLiveSwitchDiagnosticsTimer

/**

    Adds a sample.

*/
- (void) addTick;
/**

    Gets the current stats for this timer.

*/
- (NSString*) getStats;
/**

    Gets whether this timer has data or not.

*/
- (bool) hasData;

@end

/**

    The management class for all diagnostic timers.

*/
@interface FMLiveSwitchDiagnosticsTimers : NSObject

/**

    Gets whether the timings diagnostics are enabled or not.

*/
+ (bool) enabled;
/**

    Gets a duration timer with a specific tag.

    @param tag The tag.
*/
+ (FMLiveSwitchDiagnosticsDurationTimer*) getDurationTimerWithTag:(NSString*)tag;
/**

    Gets a duration timer with a tag corresponding to a type name.

    @param type The type.
*/
+ (FMLiveSwitchDiagnosticsDurationTimer*) getDurationTimerWithType:(Class)type;
/**

    Gets a rate timer with a specific tag.

    @param tag The tag.
*/
+ (FMLiveSwitchDiagnosticsRateTimer*) getRateTimerWithTag:(NSString*)tag;
/**

    Gets a rate timer with a tag corresponding to a type name.

    @param type The type.
*/
+ (FMLiveSwitchDiagnosticsRateTimer*) getRateTimerWithType:(Class)type;
/**

    Gets the output interval (in seconds) for diagnostic timings. Setting to 0 disables.

*/
+ (int) outputInterval;
/**

    Gets the log level to use when outputting the timings.

*/
+ (FMLiveSwitchLogLevel) outputLogLevel;
/**

    Sets the output interval (in seconds) for diagnostic timings. Setting to 0 disables.

*/
+ (void) setOutputInterval:(int)value;
/**

    Sets the log level to use when outputting the timings.

*/
+ (void) setOutputLogLevel:(FMLiveSwitchLogLevel)value;

@end

/**

    Data for diagnostics.

*/
@interface FMLiveSwitchDiagnosticsDiagnosticsData : NSObject

/**

    Add a named value.

    @param name 
    @param value 
*/
- (void) addWithName:(NSString*)name value:(id)value;
/**

    Gets the name of the component the data is from

*/
- (NSString*) componentName;
/**

    Gets the diagnostic data.

*/
- (NSMutableDictionary<NSString*,id>*) data;
/**

    Serialize DiagnosticsData to a string.

*/
- (NSString*) description;
/**

    Constructor.

    @param componentName 
*/
+ (FMLiveSwitchDiagnosticsDiagnosticsData*) diagnosticsDataWithComponentName:(NSString*)componentName;
/**

    Constructor.

    @param componentName 
*/
- (instancetype) initWithComponentName:(NSString*)componentName;

@end

/**

    A class for handling diagnostics.

*/
@interface FMLiveSwitchDiagnosticsDiagnosticsService : NSObject

/**

    Constructor.

    @param label 
    @param logContext 
    @param provider 
    @param intervalMs 
*/
+ (FMLiveSwitchDiagnosticsDiagnosticsService*) diagnosticsServiceWithLabel:(NSString*)label logContext:(FMLiveSwitchLogContext*)logContext provider:(NSObject<FMLiveSwitchDiagnosticsIDiagnosticsProvider>*)provider intervalMs:(int)intervalMs;
/**

    Constructor.

    @param label 
    @param logContext 
    @param provider 
    @param intervalMs 
*/
- (instancetype) initWithLabel:(NSString*)label logContext:(FMLiveSwitchLogContext*)logContext provider:(NSObject<FMLiveSwitchDiagnosticsIDiagnosticsProvider>*)provider intervalMs:(int)intervalMs;
/**

    Start the Diagnostics Service.

*/
- (void) start;
/**

    Stop the Diagostics Service.

*/
- (void) stop;

@end

@interface FMLiveSwitchDtlsCipherSuiteWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchDtlsCipherSuite)value;

@end

/**

    A set of DTLS parameters.

*/
@interface FMLiveSwitchDtlsParameters : NSObject

/**

    Initializes a new instance of the FMLiveSwitchDtlsParameters class.

    @param role The role.
    @param fingerprints The fingerprints.
*/
+ (FMLiveSwitchDtlsParameters*) dtlsParametersWithRole:(FMLiveSwitchDtlsRole)role fingerprints:(NSMutableArray*)fingerprints;
/**

    Initializes a new instance of the FMLiveSwitchDtlsParameters class.

    @param role The role.
    @param fingerprints The fingerprints.
    @param preferredRole The preferred role.
*/
+ (FMLiveSwitchDtlsParameters*) dtlsParametersWithRole:(FMLiveSwitchDtlsRole)role fingerprints:(NSMutableArray*)fingerprints preferredRole:(FMLiveSwitchDtlsRole)preferredRole;
/**

    Gets the fingerprint.

*/
- (FMLiveSwitchDtlsFingerprint*) fingerprint;
/**

    Gets the fingerprints.

*/
- (NSMutableArray*) fingerprints;
/**

    Initializes a new instance of the FMLiveSwitchDtlsParameters class.

    @param role The role.
    @param fingerprints The fingerprints.
*/
- (instancetype) initWithRole:(FMLiveSwitchDtlsRole)role fingerprints:(NSMutableArray*)fingerprints;
/**

    Initializes a new instance of the FMLiveSwitchDtlsParameters class.

    @param role The role.
    @param fingerprints The fingerprints.
    @param preferredRole The preferred role.
*/
- (instancetype) initWithRole:(FMLiveSwitchDtlsRole)role fingerprints:(NSMutableArray*)fingerprints preferredRole:(FMLiveSwitchDtlsRole)preferredRole;
/**

    Gets the preferred role.

*/
- (FMLiveSwitchDtlsRole) preferredRole;
/**

    Gets the role.

*/
- (FMLiveSwitchDtlsRole) role;
/**

    Sets the fingerprint.

*/
- (void) setFingerprint:(FMLiveSwitchDtlsFingerprint*)value;
/**

    Sets the fingerprints.

*/
- (void) setFingerprints:(NSMutableArray*)value;
/**

    Sets the preferred role.

*/
- (void) setPreferredRole:(FMLiveSwitchDtlsRole)value;
/**

    Sets the role.

*/
- (void) setRole:(FMLiveSwitchDtlsRole)value;

@end

@interface FMLiveSwitchDtlsProtocolVersionWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchDtlsProtocolVersion)value;

@end

@interface FMLiveSwitchDtlsRoleWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchDtlsRole)value;

@end

/**

    A transport.

*/
@interface FMLiveSwitchTransport : FMLiveSwitchDynamic

/**

    Adds a handler that is raised when data is received.

*/
- (void) addOnReceive:(FMLiveSwitchAction1<FMLiveSwitchDataBuffer*>*)value;
/**

    Adds a handler that is raised when data is received.

*/
- (void (^)(void(^)(FMLiveSwitchDataBuffer*))) addOnReceiveWithBlock;
/**

    Adds a handler that is raised when data is received.

*/
- (void) addOnReceiveWithBlock:(void(^)(FMLiveSwitchDataBuffer*))valueBlock;
- (instancetype) init;
/**

    Gets a value indicating whether this instance is closed.

*/
- (bool) isClosed;
/**

    Gets the next Transport-Wide Sequence Number. Values ranger between -2^16 and 2^16 and wrap around.

*/
- (int) nextTransportSequenceNumber;
/**

    Removes a handler that is raised when data is received.

*/
- (void) removeOnReceive:(FMLiveSwitchAction1<FMLiveSwitchDataBuffer*>*)value;
/**

    Gets the current round-trip-time in milliseconds.

*/
- (int) roundTripTime;
/**

    Sends the specified buffer.

    @param buffer The buffer.
*/
- (void) sendWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
+ (FMLiveSwitchTransport*) transport;

@end

/**

    A DTMF (telephone-event) sender.

*/
@interface FMLiveSwitchDtmfSender : FMLiveSwitchAudioPipe

/**

    Adds a handler that is raised when a tone is sent.

*/
- (void) addOnTone:(FMLiveSwitchAction1<FMLiveSwitchDtmfTone*>*)value;
/**

    Adds a handler that is raised when the tone changes. An empty string indicates
    the end of a tone.

*/
- (void) addOnToneChange:(FMLiveSwitchAction1<FMLiveSwitchDtmfTone*>*)value;
/**

    Adds a handler that is raised when the tone changes. An empty string indicates
    the end of a tone.

*/
- (void (^)(void(^)(FMLiveSwitchDtmfTone*))) addOnToneChangeWithBlock;
/**

    Adds a handler that is raised when the tone changes. An empty string indicates
    the end of a tone.

*/
- (void) addOnToneChangeWithBlock:(void(^)(FMLiveSwitchDtmfTone*))valueBlock;
/**

    Adds a handler that is raised when a tone is sent.

*/
- (void (^)(void(^)(FMLiveSwitchDtmfTone*))) addOnToneWithBlock;
/**

    Adds a handler that is raised when a tone is sent.

*/
- (void) addOnToneWithBlock:(void(^)(FMLiveSwitchDtmfTone*))valueBlock;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchAudioFrame*)frame inputBuffer:(FMLiveSwitchAudioBuffer*)inputBuffer;
/**

    Determines whether any tones are queued for delivery.

*/
- (bool) hasTone;
/**

    Initializes a new instance of the FMLiveSwitchDtmfSender class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchDtmfSender class.

    @param clockRate The clock rate.
*/
- (instancetype) initWithClockRate:(int)clockRate;
/**

    Inserts tones into the DTMF stream.

    @param tones The tones.
*/
- (void) insertTones:(NSMutableArray*)tones;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Adds the next tone to the frame.

    @param duration The duration.
    @param timestamp The timestamp.
    @param synchronizationSource The synchronization source.
*/
- (bool) raiseToneWithDuration:(int)duration timestamp:(long long)timestamp synchronizationSource:(long long)synchronizationSource;
/**

    Removes a handler that is raised when a tone is sent.

*/
- (void) removeOnTone:(FMLiveSwitchAction1<FMLiveSwitchDtmfTone*>*)value;
/**

    Removes a handler that is raised when the tone changes. An empty string indicates
    the end of a tone.

*/
- (void) removeOnToneChange:(FMLiveSwitchAction1<FMLiveSwitchDtmfTone*>*)value;
/**

    Initializes a new instance of the FMLiveSwitchDtmfSender class.

*/
+ (FMLiveSwitchDtmfSender*) sender;
/**

    Initializes a new instance of the FMLiveSwitchDtmfSender class.

    @param clockRate The clock rate.
*/
+ (FMLiveSwitchDtmfSender*) senderWithClockRate:(int)clockRate;
/**

    Gets the current tone.

*/
- (FMLiveSwitchDtmfTone*) tone;

@end

/**

    A DTMF (telephone-event) receiver.

*/
@interface FMLiveSwitchDtmfReceiver : FMLiveSwitchAudioPipe

/**

    Adds a handler that is raised when a tone is received.

*/
- (void) addOnTone:(FMLiveSwitchAction1<FMLiveSwitchDtmfTone*>*)value;
/**

    Adds a handler that is raised when the tone changes. An empty string indicates
    the end of a tone.

*/
- (void) addOnToneChange:(FMLiveSwitchAction1<FMLiveSwitchDtmfTone*>*)value;
/**

    Adds a handler that is raised when the tone changes. An empty string indicates
    the end of a tone.

*/
- (void (^)(void(^)(FMLiveSwitchDtmfTone*))) addOnToneChangeWithBlock;
/**

    Adds a handler that is raised when the tone changes. An empty string indicates
    the end of a tone.

*/
- (void) addOnToneChangeWithBlock:(void(^)(FMLiveSwitchDtmfTone*))valueBlock;
/**

    Adds a handler that is raised when a tone is received.

*/
- (void (^)(void(^)(FMLiveSwitchDtmfTone*))) addOnToneWithBlock;
/**

    Adds a handler that is raised when a tone is received.

*/
- (void) addOnToneWithBlock:(void(^)(FMLiveSwitchDtmfTone*))valueBlock;
/**

    Gets a value indicating whether this FMLiveSwitchDtmfReceiver is disabled.

*/
- (bool) disabled;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchAudioFrame*)frame inputBuffer:(FMLiveSwitchAudioBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchDtmfReceiver class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchDtmfReceiver class.

    @param clockRate The clock rate.
*/
- (instancetype) initWithClockRate:(int)clockRate;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Initializes a new instance of the FMLiveSwitchDtmfReceiver class.

*/
+ (FMLiveSwitchDtmfReceiver*) receiver;
/**

    Initializes a new instance of the FMLiveSwitchDtmfReceiver class.

    @param clockRate The clock rate.
*/
+ (FMLiveSwitchDtmfReceiver*) receiverWithClockRate:(int)clockRate;
/**

    Removes a handler that is raised when a tone is received.

*/
- (void) removeOnTone:(FMLiveSwitchAction1<FMLiveSwitchDtmfTone*>*)value;
/**

    Removes a handler that is raised when the tone changes. An empty string indicates
    the end of a tone.

*/
- (void) removeOnToneChange:(FMLiveSwitchAction1<FMLiveSwitchDtmfTone*>*)value;
/**

    Gets the current tone.

*/
- (FMLiveSwitchDtmfTone*) tone;

@end

/**

    A DTMF (telephone-event) format.

*/
@interface FMLiveSwitchDtmfFormat : FMLiveSwitchAudioFormat

/**

    Gets the default clock rate (8000).

*/
+ (int) defaultClockRate;
/**

    Initializes a new instance of the FMLiveSwitchDtmfFormat class.

*/
+ (FMLiveSwitchDtmfFormat*) format;
/**

    Initializes a new instance of the FMLiveSwitchDtmfFormat class.

    @param clockRate The clock rate.
*/
+ (FMLiveSwitchDtmfFormat*) formatWithClockRate:(int)clockRate;
/**

    Initializes a new instance of the FMLiveSwitchDtmfFormat class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchDtmfFormat class.

    @param clockRate The clock rate.
*/
- (instancetype) initWithClockRate:(int)clockRate;

@end

@interface FMLiveSwitchEncryptionPolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchEncryptionPolicy)value;

@end

/**

    A fake audio source.

*/
@interface FMLiveSwitchFakeAudioSource : FMLiveSwitchAudioSource

/**

    Gets the output amplitude.

*/
- (int) amplitude;
/**

    Starts this instance.

*/
- (FMLiveSwitchFuture<id>*) doStart;
/**

    Stops this instance.

*/
- (FMLiveSwitchFuture<id>*) doStop;
/**

    Initializes a new instance of the FMLiveSwitchFakeAudioSource class.

    @param config The output configuration.
*/
+ (FMLiveSwitchFakeAudioSource*) fakeAudioSourceWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchFakeAudioSource class.

    @param config The output configuration.
    @param frequency The output frequency.
*/
+ (FMLiveSwitchFakeAudioSource*) fakeAudioSourceWithConfig:(FMLiveSwitchAudioConfig*)config frequency:(float)frequency;
/**

    Initializes a new instance of the FMLiveSwitchFakeAudioSource class.

    @param config The output configuration.
    @param frequency The output frequency.
    @param amplitude The output amplitude
*/
+ (FMLiveSwitchFakeAudioSource*) fakeAudioSourceWithConfig:(FMLiveSwitchAudioConfig*)config frequency:(float)frequency amplitude:(int)amplitude;
/**

    Initializes a new instance of the FMLiveSwitchFakeAudioSource class.

    @param config The output configuration.
    @param frequency The output frequency.
    @param amplitude The output amplitude.
    @param latency The initial latency.
*/
+ (FMLiveSwitchFakeAudioSource*) fakeAudioSourceWithConfig:(FMLiveSwitchAudioConfig*)config frequency:(float)frequency amplitude:(int)amplitude latency:(int)latency;
/**

    Gets the output frequency.

*/
- (float) frequency;
/**

    Initializes a new instance of the FMLiveSwitchFakeAudioSource class.

    @param config The output configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchFakeAudioSource class.

    @param config The output configuration.
    @param frequency The output frequency.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config frequency:(float)frequency;
/**

    Initializes a new instance of the FMLiveSwitchFakeAudioSource class.

    @param config The output configuration.
    @param frequency The output frequency.
    @param amplitude The output amplitude
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config frequency:(float)frequency amplitude:(int)amplitude;
/**

    Initializes a new instance of the FMLiveSwitchFakeAudioSource class.

    @param config The output configuration.
    @param frequency The output frequency.
    @param amplitude The output amplitude.
    @param latency The initial latency.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config frequency:(float)frequency amplitude:(int)amplitude latency:(int)latency;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets the initial latency.

*/
- (int) latency;

@end

/**

    A fake video source.

*/
@interface FMLiveSwitchFakeVideoSource : FMLiveSwitchCameraSourceBase

/**

    Starts this instance.

*/
- (FMLiveSwitchFuture<id>*) doStart;
/**

    Stops this instance.

*/
- (FMLiveSwitchFuture<id>*) doStop;
/**

    Initializes a new instance of the FMLiveSwitchFakeAudioSource class.

    @param config The output configuration.
*/
+ (FMLiveSwitchFakeVideoSource*) fakeVideoSourceWithConfig:(FMLiveSwitchVideoConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchFakeAudioSource class.

    @param config The output configuration.
    @param format The output format.
*/
+ (FMLiveSwitchFakeVideoSource*) fakeVideoSourceWithConfig:(FMLiveSwitchVideoConfig*)config format:(FMLiveSwitchVideoFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchFakeAudioSource class.

    @param config The output configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchVideoConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchFakeAudioSource class.

    @param config The output configuration.
    @param format The output format.
*/
- (instancetype) initWithConfig:(FMLiveSwitchVideoConfig*)config format:(FMLiveSwitchVideoFormat*)format;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;

@end

@interface FMLiveSwitchFecMaskTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchFecMaskType)value;

@end

/**

    FEC protection parameters.

*/
@interface FMLiveSwitchFecProtectionParameters : NSObject

/**

    Initializes a new instance of the FMLiveSwitchFecProtectionParameters class.

*/
+ (FMLiveSwitchFecProtectionParameters*) fecProtectionParameters;
/**

    Initializes a new instance of the FMLiveSwitchFecProtectionParameters class.

*/
- (instancetype) init;
/**

    Gets the type of the FEC mask.

*/
- (FMLiveSwitchFecMaskType) maskType;
/**

    Gets the maximum FEC frames.

*/
- (int) maxFrames;
/**

    Gets the FEC rate.

*/
- (int) rate;
/**

    Sets the type of the FEC mask.

*/
- (void) setMaskType:(FMLiveSwitchFecMaskType)value;
/**

    Sets the maximum FEC frames.

*/
- (void) setMaxFrames:(int)value;
/**

    Sets the FEC rate.

*/
- (void) setRate:(int)value;
/**

    Sets whether UEP protection should be used.

*/
- (void) setUseUepProtection:(bool)value;
/**

    Gets whether UEP protection should be used.

*/
- (bool) useUepProtection;

@end

/**

    Control frame feedback.

*/
@interface FMLiveSwitchFeedback : NSObject

/**

    Initializes a new instance of the FMLiveSwitchFeedback class.

    @param type The type.
    @param parameter The parameter.
*/
+ (FMLiveSwitchFeedback*) feedbackWithType:(NSString*)type parameter:(NSString*)parameter;
/**

    Initializes a new instance of the FMLiveSwitchFeedback class.

    @param type The type.
    @param parameter The parameter.
*/
- (instancetype) initWithType:(NSString*)type parameter:(NSString*)parameter;
/**

    Gets the parameter.

*/
- (NSString*) parameter;
/**

    Gets the type.

*/
- (NSString*) type;

@end

/**

    An RTCP full intra request (FIR) packet entry.

*/
@interface FMLiveSwitchFirEntry : FMLiveSwitchControlFrameEntry

/**

    Gets the backing data buffer.

*/
- (FMLiveSwitchDataBuffer*) dataBuffer;
/**

    Initializes a new instance of the FMLiveSwitchFirEntry class.

    @param dataBuffer The data buffer.
*/
+ (FMLiveSwitchFirEntry*) firEntryWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Initializes a new instance of the FMLiveSwitchFirEntry class.

    @param sequenceNumber The sequence number.
*/
+ (FMLiveSwitchFirEntry*) firEntryWithSequenceNumber:(int)sequenceNumber;
/**

    Gets the fixed length of an FIR entry.

*/
+ (int) fixedPayloadLength;
/**

    Gets the delta between sequence numbers, adjusted for overflow.

    @param sequenceNumber The current sequence number.
    @param lastSequenceNumber The last sequence number.
*/
+ (int) getSequenceNumberDeltaWithSequenceNumber:(int)sequenceNumber lastSequenceNumber:(int)lastSequenceNumber;
/**

    Initializes a new instance of the FMLiveSwitchFirEntry class.

    @param dataBuffer The data buffer.
*/
- (instancetype) initWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Initializes a new instance of the FMLiveSwitchFirEntry class.

    @param sequenceNumber The sequence number.
*/
- (instancetype) initWithSequenceNumber:(int)sequenceNumber;
/**

    Gets the sequence number.

*/
- (int) sequenceNumber;
/**

    Sets the backing data buffer.

*/
- (void) setDataBuffer:(FMLiveSwitchDataBuffer*)value;
/**

    Sets the sequence number.

*/
- (void) setSequenceNumber:(int)value;
/**

    Sets the synchronization source.

*/
- (void) setSynchronizationSource:(long long)value;
/**

    Gets the synchronization source.

*/
- (long long) synchronizationSource;

@end

/**

    An RTCP full intra request (FIR) packet.

*/
@interface FMLiveSwitchFirControlFrame : FMLiveSwitchPayloadSpecificControlFrame

/**

    Gets the entries.

*/
- (NSMutableArray*) entries;
/**

    Gets the entry.

*/
- (FMLiveSwitchFirEntry*) entry;
/**

    Initializes a new instance of the FMLiveSwitchFirControlFrame class.

    @param buffer The buffer.
*/
+ (FMLiveSwitchFirControlFrame*) firControlFrameWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchFirControlFrame class.

    @param entries The entries.
*/
+ (FMLiveSwitchFirControlFrame*) firControlFrameWithEntries:(NSMutableArray*)entries;
/**

    Initializes a new instance of the FMLiveSwitchFirControlFrame class.

    @param entry The entry.
*/
+ (FMLiveSwitchFirControlFrame*) firControlFrameWithEntry:(FMLiveSwitchFirEntry*)entry;
/**

    Initializes a new instance of the FMLiveSwitchFirControlFrame class.

    @param sequenceNumber The sequence number.
*/
+ (FMLiveSwitchFirControlFrame*) firControlFrameWithSequenceNumber:(int)sequenceNumber;
/**

    Initializes a new instance of the FMLiveSwitchFirControlFrame class.

    @param buffer The buffer.
*/
- (instancetype) initWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchFirControlFrame class.

    @param entries The entries.
*/
- (instancetype) initWithEntries:(NSMutableArray*)entries;
/**

    Initializes a new instance of the FMLiveSwitchFirControlFrame class.

    @param entry The entry.
*/
- (instancetype) initWithEntry:(FMLiveSwitchFirEntry*)entry;
/**

    Initializes a new instance of the FMLiveSwitchFirControlFrame class.

    @param sequenceNumber The sequence number.
*/
- (instancetype) initWithSequenceNumber:(int)sequenceNumber;
/**

    Gets the type of the registered feedback message.

*/
+ (int) registeredFeedbackMessageType;
/**

    Sets the entries.

*/
- (void) setEntries:(NSMutableArray*)value;
/**

    Sets the entry.

*/
- (void) setEntry:(FMLiveSwitchFirEntry*)value;

@end

/**

    A G.711 format.

*/
@interface FMLiveSwitchG711Format : FMLiveSwitchAudioFormat

/**

    Gets the default clock rate (1).

*/
+ (int) defaultChannelCount;
/**

    Gets the default clock rate (8000).

*/
+ (int) defaultClockRate;
/**

    Gets the default configuration (8000/1).

*/
+ (FMLiveSwitchAudioConfig*) defaultConfig;
/**

    Initializes a new instance of the FMLiveSwitchG711Format class.

    @param name The name.
    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
+ (FMLiveSwitchG711Format*) formatWithName:(NSString*)name clockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Initializes a new instance of the FMLiveSwitchG711Format class.

    @param name The name.
    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
- (instancetype) initWithName:(NSString*)name clockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Gets the maximum bitrate supported by this format, in kbps.

*/
- (int) maxBitrate;
/**

    Gets the minimum bitrate supported by this format, in kbps.

*/
- (int) minBitrate;

@end

/**

    A Generic NACK feedback message.

*/
@interface FMLiveSwitchGenericNack : NSObject

/**

    Gets the bitmask of lost packets.

*/
- (int) bitmaskOfLostPackets;
/**

    Gets the data buffer.

*/
- (FMLiveSwitchDataBuffer*) dataBuffer;
/**

    Gets the length of the registered fixed payload.

*/
+ (int) fixedPayloadLength;
/**

    Updates this instance to reflect only the lost packets that
    were not retransmitted.

*/
- (void) flush;
/**

    Initializes a new instance of the FMLiveSwitchGenericNack class.

*/
+ (FMLiveSwitchGenericNack*) genericNack;
/**

    Initializes a new instance of the FMLiveSwitchGenericNack class.

    @param buffer The buffer.
*/
+ (FMLiveSwitchGenericNack*) genericNackWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Gets whether the packet with ID FMLiveSwitchGenericNack#packetId + value was lost.

    @param value The value.
    @return Whether the packet was lost.
*/
- (bool) getLostPacketIdPlus:(int)value;
/**

    Gets whether the packet with ID FMLiveSwitchGenericNack#packetId + value was retransmitted.

    @param value The value.
    @return Whether the packet was retransmitted.
*/
- (bool) getLostPacketIdPlusHandled:(int)value;
/**

    Gets a value indicating whether all lost packets were retransmitted.

*/
- (bool) handled;
/**

    Initializes a new instance of the FMLiveSwitchGenericNack class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchGenericNack class.

    @param buffer The buffer.
*/
- (instancetype) initWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Gets whether the packet with ID FMLiveSwitchGenericNack#packetId + 10 was retransmitted.

*/
- (bool) lostPacketIdPlus10Handled;
/**

    Gets whether the packet with ID FMLiveSwitchGenericNack#packetId + 11 was retransmitted.

*/
- (bool) lostPacketIdPlus11Handled;
/**

    Gets whether the packet with ID FMLiveSwitchGenericNack#packetId + 12 was retransmitted.

*/
- (bool) lostPacketIdPlus12Handled;
/**

    Gets whether the packet with ID FMLiveSwitchGenericNack#packetId + 13 was retransmitted.

*/
- (bool) lostPacketIdPlus13Handled;
/**

    Gets whether the packet with ID FMLiveSwitchGenericNack#packetId + 14 was retransmitted.

*/
- (bool) lostPacketIdPlus14Handled;
/**

    Gets whether the packet with ID FMLiveSwitchGenericNack#packetId + 15 was retransmitted.

*/
- (bool) lostPacketIdPlus15Handled;
/**

    Gets whether the packet with ID FMLiveSwitchGenericNack#packetId + 16 was retransmitted.

*/
- (bool) lostPacketIdPlus16Handled;
/**

    Gets whether the packet with ID FMLiveSwitchGenericNack#packetId + 1 was retransmitted.

*/
- (bool) lostPacketIdPlus1Handled;
/**

    Gets whether the packet with ID FMLiveSwitchGenericNack#packetId + 2 was retransmitted.

*/
- (bool) lostPacketIdPlus2Handled;
/**

    Gets whether the packet with ID FMLiveSwitchGenericNack#packetId + 3 was retransmitted.

*/
- (bool) lostPacketIdPlus3Handled;
/**

    Gets whether the packet with ID FMLiveSwitchGenericNack#packetId + 4 was retransmitted.

*/
- (bool) lostPacketIdPlus4Handled;
/**

    Gets whether the packet with ID FMLiveSwitchGenericNack#packetId + 5 was retransmitted.

*/
- (bool) lostPacketIdPlus5Handled;
/**

    Gets whether the packet with ID FMLiveSwitchGenericNack#packetId + 6 was retransmitted.

*/
- (bool) lostPacketIdPlus6Handled;
/**

    Gets whether the packet with ID FMLiveSwitchGenericNack#packetId + 7 was retransmitted.

*/
- (bool) lostPacketIdPlus7Handled;
/**

    Gets whether the packet with ID FMLiveSwitchGenericNack#packetId + 8 was retransmitted.

*/
- (bool) lostPacketIdPlus8Handled;
/**

    Gets whether the packet with ID FMLiveSwitchGenericNack#packetId + 9 was retransmitted.

*/
- (bool) lostPacketIdPlus9Handled;
/**

    Gets the length of the lost packet identifier plus.

*/
- (int) lostPacketIdPlusLength;
/**

    Gets the RTP sequence number of the lost packet.

*/
- (int) packetId;
/**

    Gets whether the packet with ID FMLiveSwitchGenericNack#packetId was retransmitted.

*/
- (bool) packetIdHandled;
/**

    Sets the bitmask of lost packets.

*/
- (void) setBitmaskOfLostPackets:(int)value;
/**

    Sets whether the packet with ID FMLiveSwitchGenericNack#packetId + value was lost.

    @param value The value.
    @param lost Whether the packet was lost.
*/
- (void) setLostPacketIdPlus:(int)value lost:(bool)lost;
/**

    Sets whether the packet with ID FMLiveSwitchGenericNack#packetId + 10 was retransmitted.

*/
- (void) setLostPacketIdPlus10Handled:(bool)value;
/**

    Sets whether the packet with ID FMLiveSwitchGenericNack#packetId + 11 was retransmitted.

*/
- (void) setLostPacketIdPlus11Handled:(bool)value;
/**

    Sets whether the packet with ID FMLiveSwitchGenericNack#packetId + 12 was retransmitted.

*/
- (void) setLostPacketIdPlus12Handled:(bool)value;
/**

    Sets whether the packet with ID FMLiveSwitchGenericNack#packetId + 13 was retransmitted.

*/
- (void) setLostPacketIdPlus13Handled:(bool)value;
/**

    Sets whether the packet with ID FMLiveSwitchGenericNack#packetId + 14 was retransmitted.

*/
- (void) setLostPacketIdPlus14Handled:(bool)value;
/**

    Sets whether the packet with ID FMLiveSwitchGenericNack#packetId + 15 was retransmitted.

*/
- (void) setLostPacketIdPlus15Handled:(bool)value;
/**

    Sets whether the packet with ID FMLiveSwitchGenericNack#packetId + 16 was retransmitted.

*/
- (void) setLostPacketIdPlus16Handled:(bool)value;
/**

    Sets whether the packet with ID FMLiveSwitchGenericNack#packetId + 1 was retransmitted.

*/
- (void) setLostPacketIdPlus1Handled:(bool)value;
/**

    Sets whether the packet with ID FMLiveSwitchGenericNack#packetId + 2 was retransmitted.

*/
- (void) setLostPacketIdPlus2Handled:(bool)value;
/**

    Sets whether the packet with ID FMLiveSwitchGenericNack#packetId + 3 was retransmitted.

*/
- (void) setLostPacketIdPlus3Handled:(bool)value;
/**

    Sets whether the packet with ID FMLiveSwitchGenericNack#packetId + 4 was retransmitted.

*/
- (void) setLostPacketIdPlus4Handled:(bool)value;
/**

    Sets whether the packet with ID FMLiveSwitchGenericNack#packetId + 5 was retransmitted.

*/
- (void) setLostPacketIdPlus5Handled:(bool)value;
/**

    Sets whether the packet with ID FMLiveSwitchGenericNack#packetId + 6 was retransmitted.

*/
- (void) setLostPacketIdPlus6Handled:(bool)value;
/**

    Sets whether the packet with ID FMLiveSwitchGenericNack#packetId + 7 was retransmitted.

*/
- (void) setLostPacketIdPlus7Handled:(bool)value;
/**

    Sets whether the packet with ID FMLiveSwitchGenericNack#packetId + 8 was retransmitted.

*/
- (void) setLostPacketIdPlus8Handled:(bool)value;
/**

    Sets whether the packet with ID FMLiveSwitchGenericNack#packetId + 9 was retransmitted.

*/
- (void) setLostPacketIdPlus9Handled:(bool)value;
/**

    Sets whether the packet with ID FMLiveSwitchGenericNack#packetId + value was retransmitted.

    @param value The value.
    @param handled Whether the packet was retransmitted.
*/
- (void) setLostPacketIdPlusHandled:(int)value handled:(bool)handled;
/**

    Sets the RTP sequence number of the lost packet.

*/
- (void) setPacketId:(int)value;
/**

    Sets whether the packet with ID FMLiveSwitchGenericNack#packetId was retransmitted.

*/
- (void) setPacketIdHandled:(bool)value;

@end

/**

    An RTCP Feedback RTP-Generic NACK packet.

*/
@interface FMLiveSwitchGenericNackControlFrame : FMLiveSwitchRtpControlFrame

/**

    Gets the generic nack.

*/
- (FMLiveSwitchGenericNack*) genericNack;
/**

    Initializes a new instance of the FMLiveSwitchRtpControlFrame class.

*/
+ (FMLiveSwitchGenericNackControlFrame*) genericNackControlFrame;
/**

    Initializes a new instance of the FMLiveSwitchGenericNackControlFrame class.

    @param buffer The buffer.
*/
+ (FMLiveSwitchGenericNackControlFrame*) genericNackControlFrameWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchGenericNackControlFrame class.

    @param nack The nack.
*/
+ (FMLiveSwitchGenericNackControlFrame*) genericNackControlFrameWithNack:(FMLiveSwitchGenericNack*)nack;
/**

    Initializes a new instance of the FMLiveSwitchGenericNackControlFrame class.

    @param nacks The nacks.
*/
+ (FMLiveSwitchGenericNackControlFrame*) genericNackControlFrameWithNacks:(NSMutableArray*)nacks;
/**

    Gets the set of generic NACKs.

*/
- (NSMutableArray*) genericNacks;
/**

    Initializes a new instance of the FMLiveSwitchRtpControlFrame class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchGenericNackControlFrame class.

    @param buffer The buffer.
*/
- (instancetype) initWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchGenericNackControlFrame class.

    @param nack The nack.
*/
- (instancetype) initWithNack:(FMLiveSwitchGenericNack*)nack;
/**

    Initializes a new instance of the FMLiveSwitchGenericNackControlFrame class.

    @param nacks The nacks.
*/
- (instancetype) initWithNacks:(NSMutableArray*)nacks;
/**

    Gets the type of the registered feedback message.

*/
+ (int) registeredFeedbackMessageType;

@end

/**

    An H.264 depacketizer.

*/
@interface FMLiveSwitchH264Depacketizer : FMLiveSwitchVideoDepacketizer<FMLiveSwitchH264Fragment*>

/**

    Initializes a new instance of the FMLiveSwitchH264Depacketizer class.

*/
+ (FMLiveSwitchH264Depacketizer*) depacketizer;
/**

    Initializes a new instance of the FMLiveSwitchH264Depacketizer class.

    @param input The input.
*/
+ (FMLiveSwitchH264Depacketizer*) depacketizerWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchH264Depacketizer class.

    @param packetizationMode The packetization mode.
*/
+ (FMLiveSwitchH264Depacketizer*) depacketizerWithPacketizationMode:(int)packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchH264Depacketizer class.

    @param profile The profile.
    @param level The level.
    @param packetizationMode The packetization mode.
*/
+ (FMLiveSwitchH264Depacketizer*) depacketizerWithProfile:(NSString*)profile level:(NSString*)level packetizationMode:(int)packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchH264Depacketizer class.

    @param profileLevelId The profile level ID.
    @param packetizationMode The packetization mode.
*/
+ (FMLiveSwitchH264Depacketizer*) depacketizerWithProfileLevelId:(FMLiveSwitchH264ProfileLevelId*)profileLevelId packetizationMode:(int)packetizationMode;
/**

    Creates a fragment from a data buffer.

    @param header The rtp header for this packet.
    @param dataBuffer The data buffer.
*/
- (FMLiveSwitchH264Fragment*) doCreateFragmentWithHeader:(FMLiveSwitchRtpPacketHeader*)header dataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Initializes a new instance of the FMLiveSwitchH264Depacketizer class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchH264Depacketizer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchH264Depacketizer class.

    @param packetizationMode The packetization mode.
*/
- (instancetype) initWithPacketizationMode:(int)packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchH264Depacketizer class.

    @param profile The profile.
    @param level The level.
    @param packetizationMode The packetization mode.
*/
- (instancetype) initWithProfile:(NSString*)profile level:(NSString*)level packetizationMode:(int)packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchH264Depacketizer class.

    @param profileLevelId The profile level ID.
    @param packetizationMode The packetization mode.
*/
- (instancetype) initWithProfileLevelId:(FMLiveSwitchH264ProfileLevelId*)profileLevelId packetizationMode:(int)packetizationMode;
/**

    Checks if the databuffer contains a keyframe.

    @param inputBuffer VideoBuffer containing video data.
*/
- (bool) isKeyFrameWithInputBuffer:(FMLiveSwitchDataBuffer*)inputBuffer;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets the packetization mode.

*/
- (int) packetizationMode;
/**

    Raises a frame.

    @param frame The frame.
*/
- (void) raiseFrame:(FMLiveSwitchVideoFrame*)frame;

@end

/**

    An H.264 format.

*/
@interface FMLiveSwitchH264Format : FMLiveSwitchVideoFormat

/**

    Creates a new instance.

*/
- (FMLiveSwitchVideoFormat*) createInstance;
/**

    Initializes a new instance of the FMLiveSwitchH264Format class.

*/
+ (FMLiveSwitchH264Format*) format;
/**

    Initializes a new instance of the FMLiveSwitchH264Format class.

    @param clockRate The clock rate.
*/
+ (FMLiveSwitchH264Format*) formatWithClockRate:(int)clockRate;
/**

    Initializes a new instance of the FMLiveSwitchH264Format class.

    @param clockRate The clock rate.
    @param packetizationMode The packetization mode.
*/
+ (FMLiveSwitchH264Format*) formatWithClockRate:(int)clockRate packetizationMode:(int)packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchH264Format class.

    @param clockRate The clock rate.
    @param profile The profile.
    @param level The level.
    @param packetizationMode The packetization mode.
*/
+ (FMLiveSwitchH264Format*) formatWithClockRate:(int)clockRate profile:(NSString*)profile level:(NSString*)level packetizationMode:(int)packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchH264Format class.

    @param clockRate The clock rate.
    @param profileLevelId The profile level ID.
    @param packetizationMode The packetization mode.
*/
+ (FMLiveSwitchH264Format*) formatWithClockRate:(int)clockRate profileLevelId:(FMLiveSwitchH264ProfileLevelId*)profileLevelId packetizationMode:(int)packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchH264Format class.

    @param profile The profile.
    @param level The level.
    @param packetizationMode The packetization mode.
*/
+ (FMLiveSwitchH264Format*) formatWithProfile:(NSString*)profile level:(NSString*)level packetizationMode:(int)packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchH264Format class.

    @param profileLevelId The profile level ID.
*/
+ (FMLiveSwitchH264Format*) formatWithProfileLevelId:(FMLiveSwitchH264ProfileLevelId*)profileLevelId;
/**

    Initializes a new instance of the FMLiveSwitchH264Format class.

    @param profileLevelId The profile level ID.
    @param packetizationMode The packetization mode.
*/
+ (FMLiveSwitchH264Format*) formatWithProfileLevelId:(FMLiveSwitchH264ProfileLevelId*)profileLevelId packetizationMode:(int)packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchH264Format class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchH264Format class.

    @param clockRate The clock rate.
*/
- (instancetype) initWithClockRate:(int)clockRate;
/**

    Initializes a new instance of the FMLiveSwitchH264Format class.

    @param clockRate The clock rate.
    @param packetizationMode The packetization mode.
*/
- (instancetype) initWithClockRate:(int)clockRate packetizationMode:(int)packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchH264Format class.

    @param clockRate The clock rate.
    @param profile The profile.
    @param level The level.
    @param packetizationMode The packetization mode.
*/
- (instancetype) initWithClockRate:(int)clockRate profile:(NSString*)profile level:(NSString*)level packetizationMode:(int)packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchH264Format class.

    @param clockRate The clock rate.
    @param profileLevelId The profile level ID.
    @param packetizationMode The packetization mode.
*/
- (instancetype) initWithClockRate:(int)clockRate profileLevelId:(FMLiveSwitchH264ProfileLevelId*)profileLevelId packetizationMode:(int)packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchH264Format class.

    @param profile The profile.
    @param level The level.
    @param packetizationMode The packetization mode.
*/
- (instancetype) initWithProfile:(NSString*)profile level:(NSString*)level packetizationMode:(int)packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchH264Format class.

    @param profileLevelId The profile level ID.
*/
- (instancetype) initWithProfileLevelId:(FMLiveSwitchH264ProfileLevelId*)profileLevelId;
/**

    Initializes a new instance of the FMLiveSwitchH264Format class.

    @param profileLevelId The profile level ID.
    @param packetizationMode The packetization mode.
*/
- (instancetype) initWithProfileLevelId:(FMLiveSwitchH264ProfileLevelId*)profileLevelId packetizationMode:(int)packetizationMode;
/**

    Gets the maximum bitrate supported by this format, in kbps.

*/
- (int) maxBitrate;
/**

    Gets the minimum bitrate supported by this format, in kbps.

*/
- (int) minBitrate;

@end

/**

    An H.264 packet fragment.

*/
@interface FMLiveSwitchH264Fragment : FMLiveSwitchVideoFragment

/**

    Destroys this fragment.

*/
- (void) destroy;
/**

    Initializes a new instance of the FMLiveSwitchH264Fragment class.

    @param header The rtp packet header.
    @param dataBuffer The data buffer.
*/
+ (FMLiveSwitchH264Fragment*) fragmentWithHeader:(FMLiveSwitchRtpPacketHeader*)header dataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Initializes a new instance of the FMLiveSwitchH264Fragment class.

    @param header The rtp packet header.
    @param dataBuffer The data buffer.
*/
- (instancetype) initWithHeader:(FMLiveSwitchRtpPacketHeader*)header dataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;

@end

/**

    An H264 Network Abstraction Layer Unit.

*/
@interface FMLiveSwitchH264Nalu : NSObject

/**

    Gets the bottom_field_flag.

*/
- (int) bottomFieldFlag;
/**

    Gets the backing DataBuffer.

*/
- (FMLiveSwitchDataBuffer*) buffer;
/**

    Gets the pic_order_cnt_lsb

*/
- (NSMutableArray*) deltaPicOrderCnt;
/**

    Gets the forbidden Zero Bit. The H.264 specification declares a
    value of 1 as a syntax violation.

*/
- (bool) fBit;
/**

    Gets the forbidden zero bit mask.

*/
+ (int) fBitMask;
/**

    Gets the field_pic_flag.

*/
- (int) fieldPicFlag;
/**

    Scans for the index of the first NAL Unit after start.

    @param encodedData The stream to search.
*/
+ (int) findNaluWithEncodedData:(FMLiveSwitchDataBuffer*)encodedData;
/**

    Scans for the index of the first NAL Unit after start.

    @param encodedData The stream to search.
    @param start The index to start searching from.
*/
+ (int) findNextNaluWithEncodedData:(FMLiveSwitchDataBuffer*)encodedData start:(int)start;
/**

    Gets the frame_num: The Frame Number is used as an identifier for pictures and shall be represented
    by log2_max_frame_num_minus4 + 4 bits in the bitstream.

*/
- (int) frameNum;
/**

    Gets the NAL Unit as a byte array that can be passed
    to an encoder (includes Start Code).

*/
- (FMLiveSwitchDataBuffer*) getBytes;
/**

    Returns the first NAL unit after nalStart.

    @param encodedData The byte array to search.
*/
+ (FMLiveSwitchH264Nalu*) getNaluWithEncodedData:(FMLiveSwitchDataBuffer*)encodedData;
/**

    Returns the first NAL unit after nalStart.

    @param encodedData The byte array to search.
    @param nalStart The start index of the NAL.
    @param nextStartCodeLength OUT The length of the next the NAL startcode.
*/
+ (FMLiveSwitchH264Nalu*) getNaluWithEncodedData:(FMLiveSwitchDataBuffer*)encodedData nalStart:(int)nalStart nextStartCodeLength:(int*)nextStartCodeLength;
/**

    Gets the NAL header.

*/
- (int) header;
/**

    Gets the idr_pic_flag.

*/
- (int) idrPicFlag;
/**

    Gets the idr_pic_id: The values of idr_pic_id in all the slices
    of an IDR picture shall remain unchanged. When two consecutive access units in
    decoding order are both IDR access units, the value of idr_pic_id in the slices of
    the first such IDR access unit shall differ from the idr_pic_id in the second such
    IDR access unit. The value of idr_pic_id shall be in the range of 0 to 65535, inclusive.

*/
- (int) idrPicId;
/**

    Creates an empty NAL Unit.

*/
- (instancetype) init;
/**

    Creates a NAL Unit from a byte array.

    @param naluBytes The NALU bytes.
*/
- (instancetype) initWithNaluBytes:(FMLiveSwitchDataBuffer*)naluBytes;
/**

    Gets the NRI: 2bits otherwise known as nal_ref_idc.

*/
- (int) nalRefIdc;
/**

    Creates an empty NAL Unit.

*/
+ (FMLiveSwitchH264Nalu*) nalu;
/**

    Creates a NAL Unit from a byte array.

    @param naluBytes The NALU bytes.
*/
+ (FMLiveSwitchH264Nalu*) naluWithNaluBytes:(FMLiveSwitchDataBuffer*)naluBytes;
/**

    Gets the nal_ref_idc mask.

*/
+ (int) nriMask;
/**

    Gets the NAL payload.

*/
- (FMLiveSwitchDataBuffer*) payload;
/**

    Gets the pic_order_cnt_lsb.

*/
- (int) picOrderCntLsb;
/**

    Gets the pic_order_cnt_type.

*/
- (int) picOrderCntType;
/**

    Gets the Picture Parameter Set specifies the picture parameter set in use. The
    value of pic_parameter_set_id shall be in the range of 0 to 255, inclusive.

*/
- (int) ppsId;
/**

    Gets the size of the NAL Unit (including NAL header) in two octets stored in
    the returned byte array. Useful for creating certain types of H264 such as STAP.

*/
- (FMLiveSwitchDataBuffer*) shortLength;
/**

    Gets the type of Slice contained in this NAL.

*/
- (int) sliceType;
/**

    Gets the Sequence Parameter Set this NAL references.

*/
- (int) spsId;
/**

    Gets the 4-byte NALU start code.

*/
+ (FMLiveSwitchDataBuffer*) startCode;
/**

    Gets the NAL Unit Type.

*/
- (int) type;
/**

    Gets the NAL Unit Type mask.

*/
+ (int) typeMask;

@end

/**

    An H.264 packet for RTP.

*/
@interface FMLiveSwitchH264Packet : NSObject

/**

    Gets the Packet as a DataBuffer.

*/
- (FMLiveSwitchDataBuffer*) buffer;
/**

    Depacketizes multiple H264Packets into a single encoded frame.
    Uses packetization mode 0.

    @param packets The packets.
*/
+ (FMLiveSwitchDataBuffer*) depacketizeWithPackets:(NSMutableArray*)packets;
/**

    Depacketizes multiple H264Packets into a single encoded frame.

    @param packets The packets.
    @param packetizationMode The packetizationMode.
*/
+ (FMLiveSwitchDataBuffer*) depacketizeWithPackets:(NSMutableArray*)packets packetizationMode:(int)packetizationMode;
/**

    Gets if this is the end of a Fragmented Unit.

*/
- (bool) fragmentEnd;
/**

    Gets if this is the start of a Fragmented Unit.

*/
- (bool) fragmentStart;
/**

    Gets the end bit.

*/
+ (int) fuEBitMask;
/**

    Gets the reserved bit.

*/
+ (int) fuRBitMask;
/**

    Gets the start bit.

*/
+ (int) fuSBitMask;
/**

    Default constuctor.

*/
- (instancetype) init;
/**

    Single NAL Unit Mode constructor.

    @param nalu The nalu.
*/
- (instancetype) initWithNalu:(FMLiveSwitchH264Nalu*)nalu;
/**

    Gets whether this is the last nalu in the sequence (i.e. RTP Marker).

*/
- (bool) last;
/**

    Gets the maximum packet size (affects packetization).

*/
+ (int) maxPacketSize;
/**

    Gets the NAL Units.

*/
- (NSMutableArray*) nalus;
/**

    Gets the type of Payload that is in this packet.

*/
- (int) naluType;
/**

    Default constuctor.

*/
+ (FMLiveSwitchH264Packet*) packet;
/**

    Packetizes a single encoded data frame into multiple H264 packets.
    Note: Only STAP-A and Single NALU are supported right now.
    Uses packetization mode 0.

    @param encodedData The encoded data.
*/
+ (NSMutableArray*) packetizeWithEncodedData:(FMLiveSwitchDataBuffer*)encodedData;
/**

    Packetizes a single encoded data frame into multiple H264 packets.
    Note: Only STAP-A and Single NALU are supported right now.

    @param encodedData The encoded data.
    @param packetizationMode The packetizationMode.
*/
+ (NSMutableArray*) packetizeWithEncodedData:(FMLiveSwitchDataBuffer*)encodedData packetizationMode:(int)packetizationMode;
/**

    Single NAL Unit Mode constructor.

    @param nalu The nalu.
*/
+ (FMLiveSwitchH264Packet*) packetWithNalu:(FMLiveSwitchH264Nalu*)nalu;
/**

    Gets the RTP sequence number.

*/
- (long long) sequenceNumber;
/**

    Sets whether this is the last nalu in the sequence (i.e. RTP Marker).

*/
- (void) setLast:(bool)value;
/**

    Sets the NAL Units.

*/
- (void) setNalus:(NSMutableArray*)value;
/**

    Sets the RTP sequence number.

*/
- (void) setSequenceNumber:(long long)value;
/**

    Parses the specified packet bytes.

    @param buffer The packet bytes.
*/
+ (FMLiveSwitchH264Packet*) wrapWithBuffer:(FMLiveSwitchDataBuffer*)buffer;

@end

/**

    H.264 packetization modes.

*/
@interface FMLiveSwitchH264PacketizationMode : NSObject

/**

    Gets non-interleaved mode.

*/
+ (int) default;
- (instancetype) init;
/**

    Gets interleaved mode.

*/
+ (int) interleaved;
/**

    Gets non-interleaved mode.

*/
+ (int) nonInterleaved;
+ (FMLiveSwitchH264PacketizationMode*) packetizationMode;
/**

    Gets single NAL mode.

*/
+ (int) singleNal;

@end

/**

    An H.264 packetizer.

*/
@interface FMLiveSwitchH264Packetizer : FMLiveSwitchVideoPacketizer

/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchVideoFrame*)frame inputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchH264Packetizer class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchH264Packetizer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchH264Packetizer class.

    @param packetizationMode The packetization mode.
*/
- (instancetype) initWithPacketizationMode:(int)packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchH264Packetizer class.

    @param profile The profile.
    @param level The level.
    @param packetizationMode The packetization mode.
*/
- (instancetype) initWithProfile:(NSString*)profile level:(NSString*)level packetizationMode:(int)packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchH264Packetizer class.

    @param profileLevelId The profile level ID.
    @param packetizationMode The packetization mode.
*/
- (instancetype) initWithProfileLevelId:(FMLiveSwitchH264ProfileLevelId*)profileLevelId packetizationMode:(int)packetizationMode;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets the maximum packet size (affects packetization).

*/
+ (int) maxPacketSize;
/**

    Gets the packetization mode.

*/
- (int) packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchH264Packetizer class.

*/
+ (FMLiveSwitchH264Packetizer*) packetizer;
/**

    Initializes a new instance of the FMLiveSwitchH264Packetizer class.

    @param input The input.
*/
+ (FMLiveSwitchH264Packetizer*) packetizerWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchH264Packetizer class.

    @param packetizationMode The packetization mode.
*/
+ (FMLiveSwitchH264Packetizer*) packetizerWithPacketizationMode:(int)packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchH264Packetizer class.

    @param profile The profile.
    @param level The level.
    @param packetizationMode The packetization mode.
*/
+ (FMLiveSwitchH264Packetizer*) packetizerWithProfile:(NSString*)profile level:(NSString*)level packetizationMode:(int)packetizationMode;
/**

    Initializes a new instance of the FMLiveSwitchH264Packetizer class.

    @param profileLevelId The profile level ID.
    @param packetizationMode The packetization mode.
*/
+ (FMLiveSwitchH264Packetizer*) packetizerWithProfileLevelId:(FMLiveSwitchH264ProfileLevelId*)profileLevelId packetizationMode:(int)packetizationMode;

@end

/**

    Profile IDs.

*/
@interface FMLiveSwitchH264ProfileIdc : NSObject

/**

    Gets the value indicating baseline.

*/
+ (int) baseline;
/**

    Gets the value indicating CAVLV 4:4:4.

*/
+ (int) cavlc444;
/**

    Gets the value indicating extended.

*/
+ (int) extended;
/**

    Gets the value indicating high.

*/
+ (int) high;
/**

    Gets the value indicating high 10.

*/
+ (int) high10;
/**

    Gets the value indicating high 4:2:2.

*/
+ (int) high422;
/**

    Gets the value indicating high 4:4:4.

*/
+ (int) high444;
- (instancetype) init;
/**

    Gets the value indicating main.

*/
+ (int) main;
+ (FMLiveSwitchH264ProfileIdc*) profileIdc;
/**

    Gets the value indicating scalable baseline.

*/
+ (int) scalableBaseline;
/**

    Gets the value indicating scalable high.

*/
+ (int) scalableHigh;

@end

/**

    An H.264 Profile IOP.

*/
@interface FMLiveSwitchH264ProfileIop : NSObject

/**

    Gets a value indicating whether constraint 0 is set.

*/
- (bool) constraintSet0;
/**

    Gets a value indicating whether constraint 1 is set.

*/
- (bool) constraintSet1;
/**

    Gets a value indicating whether constraint 2 is set.

*/
- (bool) constraintSet2;
/**

    Gets the backing data buffer.

*/
- (FMLiveSwitchDataBuffer*) dataBuffer;
/**

    Initializes a new instance of the FMLiveSwitchH264ProfileIop class.

    @param profileIop The profile IOP.
*/
- (instancetype) initWithProfileIop:(uint8_t)profileIop;
/**

    Initializes a new instance of the FMLiveSwitchH264ProfileIop class.

    @param profileIop The profile IOP.
*/
+ (FMLiveSwitchH264ProfileIop*) profileIop:(uint8_t)profileIop;
/**

    Sets a value indicating whether constraint 0 is set.

*/
- (void) setConstraintSet0:(bool)value;
/**

    Sets a value indicating whether constraint 1 is set.

*/
- (void) setConstraintSet1:(bool)value;
/**

    Sets a value indicating whether constraint 2 is set.

*/
- (void) setConstraintSet2:(bool)value;

@end

/**

    An H.264 Profile Level ID.

*/
@interface FMLiveSwitchH264ProfileLevelId : NSObject

/**

    Gets baseline profile level 1.0.

*/
+ (FMLiveSwitchH264ProfileLevelId*) baselineLevel10;
/**

    Gets baseline profile level 3.1.

*/
+ (FMLiveSwitchH264ProfileLevelId*) baselineLevel31;
/**

    Gets constrained baseline profile level 1.0.

*/
+ (FMLiveSwitchH264ProfileLevelId*) constrainedBaselineLevel10;
/**

    Gets constrained baseline profile level 3.1.

*/
+ (FMLiveSwitchH264ProfileLevelId*) constrainedBaselineLevel31;
/**

    Gets FMLiveSwitchH264ProfileLevelId#constrainedBaselineLevel31.

*/
+ (FMLiveSwitchH264ProfileLevelId*) default;
/**

    Returns a string that represents this instance.

*/
- (NSString*) description;
/**

    Gets the max encoding info value for the given level.

    @return EncodingInfo relating to the h264 profile level
*/
- (FMLiveSwitchEncodingInfo*) getMaxEncoding;
/**

    Gets high profile level 5.0.

*/
+ (FMLiveSwitchH264ProfileLevelId*) highLevel50;
/**

    Initializes a new instance of the FMLiveSwitchH264ProfileLevelId class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchH264ProfileLevelId class.

    @param profile The profile.
    @param level The level.
*/
- (instancetype) initWithProfile:(NSString*)profile level:(NSString*)level;
/**

    Initializes a new instance of the FMLiveSwitchH264ProfileLevelId class.

    @param profileIdc The profile ID code.
    @param profileIop The profile constraints.
    @param levelIdc The level ID code.
*/
- (instancetype) initWithProfileIdc:(int)profileIdc profileIop:(int)profileIop levelIdc:(int)levelIdc;
/**

    Initializes a new instance of the FMLiveSwitchH264ProfileLevelId class.

    @param profileLevelId The profile level identifier.
*/
- (instancetype) initWithProfileLevelId:(NSString*)profileLevelId;
/**

    Gets the level.

*/
- (NSString*) level;
/**

    Gets the level ID code.

*/
- (int) levelIdc;
/**

    Gets main profile level 5.0.

*/
+ (FMLiveSwitchH264ProfileLevelId*) mainLevel50;
/**

    Gets the profile.

*/
- (NSString*) profile;
/**

    Gets the profile ID Code.

*/
- (int) profileIdc;
/**

    Gets the profile constraints.

*/
- (FMLiveSwitchH264ProfileIop*) profileIop;
/**

    Initializes a new instance of the FMLiveSwitchH264ProfileLevelId class.

*/
+ (FMLiveSwitchH264ProfileLevelId*) profileLevelId;
/**

    Initializes a new instance of the FMLiveSwitchH264ProfileLevelId class.

    @param profileLevelId The profile level identifier.
*/
+ (FMLiveSwitchH264ProfileLevelId*) profileLevelId:(NSString*)profileLevelId;
/**

    Initializes a new instance of the FMLiveSwitchH264ProfileLevelId class.

    @param profile The profile.
    @param level The level.
*/
+ (FMLiveSwitchH264ProfileLevelId*) profileLevelIdWithProfile:(NSString*)profile level:(NSString*)level;
/**

    Initializes a new instance of the FMLiveSwitchH264ProfileLevelId class.

    @param profileIdc The profile ID code.
    @param profileIop The profile constraints.
    @param levelIdc The level ID code.
*/
+ (FMLiveSwitchH264ProfileLevelId*) profileLevelIdWithProfileIdc:(int)profileIdc profileIop:(int)profileIop levelIdc:(int)levelIdc;
/**

    Sets the level ID code.

*/
- (void) setLevelIdc:(int)value;
/**

    Sets the profile ID Code.

*/
- (void) setProfileIdc:(int)value;
/**

    Sets the profile constraints.

*/
- (void) setProfileIop:(FMLiveSwitchH264ProfileIop*)value;

@end

/**

    Utility methods.

*/
@interface FMLiveSwitchH264Utility : NSObject

/**

    Gets the NALU length at the specified offset.

    @param encodedFrame The encoded frame.
    @param offset The offset into the encoded frame.
*/
+ (int) getNaluLengthWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame offset:(int)offset;
/**

    Gets the NALU types.

    @param encodedFrame The encoded frame.
*/
+ (NSMutableArray*) getNaluTypesWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame;
/**

    Gets the NALU type.

    @param encodedFrame The encoded frame.
*/
+ (int) getNaluTypeWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame;
/**

    Gets the NALU type at the specified offset.

    @param encodedFrame The encoded frame.
    @param offset The offset into the encoded frame.
*/
+ (int) getNaluTypeWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame offset:(int)offset;
/**

    Gets the packetization mode from an H.264 format parameters attribute.

    @param formatParametersAttribute The format parameters attribute.
*/
+ (FMLiveSwitchNullableInt*) getPacketizationModeWithFormatParametersAttribute:(FMLiveSwitchSdpFormatParametersAttribute*)formatParametersAttribute;
/**

    Gets the packetization mode from the related format parameters attribute
    of an H.264 RTP map attribute.

    @param rtpMapAttribute The RTP map attribute.
*/
+ (FMLiveSwitchNullableInt*) getPacketizationModeWithRtpMapAttribute:(FMLiveSwitchSdpRtpMapAttribute*)rtpMapAttribute;
/**

    Gets the prolfile level id from an H.264 format parameters attribute.

    @param formatParametersAttribute The format parameters attribute.
*/
+ (FMLiveSwitchH264ProfileLevelId*) getProfileLevelIdWithFormatParametersAttribute:(FMLiveSwitchSdpFormatParametersAttribute*)formatParametersAttribute;
/**

    Gets the profile level id from the related format parameters attribute
    of an H.264 RTP map attribute.

    @param rtpMapAttribute The RTP map attribute.
*/
+ (FMLiveSwitchH264ProfileLevelId*) getProfileLevelIdWithRtpMapAttribute:(FMLiveSwitchSdpRtpMapAttribute*)rtpMapAttribute;
/**

    Gets the start code length at the specified offset.

    @param encodedFrame The encoded frame.
    @param offset The offset into the encoded frame.
*/
+ (int) getStartCodeLengthWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame offset:(int)offset;
- (instancetype) init;
/**

    Determines whether the encoded frame starts with an AUD NALU.

    @param encodedFrame The encoded frame.
*/
+ (bool) isAudWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame;
/**

    Determines whether the encoded frame starts with an AUD NALU.

    @param encodedFrame The encoded frame.
    @param offset The offset into the encoded frame.
*/
+ (bool) isAudWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame offset:(int)offset;
/**

    Determines whether the encoded frame starts with an IDR NALU.

    @param encodedFrame The encoded frame.
*/
+ (bool) isIdrWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame;
/**

    Determines whether the encoded frame starts with an IDR NALU.

    @param encodedFrame The encoded frame.
    @param offset The offset into the encoded frame.
*/
+ (bool) isIdrWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame offset:(int)offset;
/**

    Determines whether the encoded frame starts with a keyframe (IDR, PPS, or SPS).

    @param encodedFrame The encoded frame.
*/
+ (bool) isKeyFrameWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame;
/**

    Determines whether the encoded frame starts with a given NALU type.

    @param naluType The NALU type.
    @param encodedFrame The encoded frame.
    @param offset The offset into the encoded frame.
*/
+ (bool) isNaluType:(int)naluType encodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame offset:(int)offset;
/**

    Determines whether the encoded frame starts with a PPS NALU.

    @param encodedFrame The encoded frame.
*/
+ (bool) isPpsWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame;
/**

    Determines whether the encoded frame starts with a PPS NALU.

    @param encodedFrame The encoded frame.
    @param offset The offset into the encoded frame.
*/
+ (bool) isPpsWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame offset:(int)offset;
/**

    Determines whether the encoded frame starts with an SPS NALU.

    @param encodedFrame The encoded frame.
*/
+ (bool) isSpsWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame;
/**

    Determines whether the encoded frame starts with an SPS NALU.

    @param encodedFrame The encoded frame.
    @param offset The offset into the encoded frame.
*/
+ (bool) isSpsWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame offset:(int)offset;
/**

    Gets the supported packetization modes.

*/
+ (NSMutableArray*) supportedPacketizationModes;
/**

    Gets the supported profile ID codes.

*/
+ (NSMutableArray*) supportedProfileIdcs;
/**

    Trims an AUD NALU from the start of the encoded frame, if one exists.

    @param encodedFrame The encoded frame.
*/
+ (FMLiveSwitchDataBuffer*) trimAudWithEncodedFrame:(FMLiveSwitchDataBuffer*)encodedFrame;
+ (FMLiveSwitchH264Utility*) utility;

@end

/**

    A media input collection.

*/
@interface FMLiveSwitchIMediaInputCollection<__covariant TIOutput, __covariant TIInput, __covariant TFrame, __covariant TBuffer, __covariant TBufferCollection, __covariant TFormat, __covariant TMediaInputCollection> : FMLiveSwitchCollection<TIInput,TMediaInputCollection>

/**

    Invoked after an element is added to the collection.

    @param value The value.
*/
- (void) addSuccess:(TIInput)value;
/**

    Invoked after an element is added to the collection.

    @param value The value.
*/
- (void) addSuccessNoLock:(TIInput)value;
/**

    Removes all items and sets the FMLiveSwitchIMediaInputCollection`7#output to null.

*/
- (void) destroy;
/**

    Initializes a new instance of the FMLiveSwitchIMediaInputCollection`7 class.

    @param output The output.
*/
+ (FMLiveSwitchIMediaInputCollection*) iMediaInputCollectionWithOutput:(TIOutput)output;
/**

    Initializes a new instance of the FMLiveSwitchIMediaInputCollection`7 class.

    @param output The output.
*/
- (instancetype) initWithOutput:(TIOutput)output;
/**

    Gets the output.

*/
- (TIOutput) output;
/**

    Invoked after an element is removed from the collection.

    @param value The value.
*/
- (void) removeSuccess:(TIInput)value;
/**

    Invoked after an element is removed from the collection.

    @param value The value.
*/
- (void) removeSuccessNoLock:(TIInput)value;
/**

    Sets the output.

*/
- (void) setOutput:(TIOutput)value;

@end

/**

    A collection of audio inputs.

*/
@interface FMLiveSwitchIAudioInputCollection : FMLiveSwitchIMediaInputCollection<NSObject<FMLiveSwitchIAudioOutput>*,NSObject<FMLiveSwitchIAudioInput>*,FMLiveSwitchAudioFrame*,FMLiveSwitchAudioBuffer*,FMLiveSwitchAudioBufferCollection*,FMLiveSwitchAudioFormat*,FMLiveSwitchIAudioInputCollection*>

/**

    Creates an array from a list.

    @param list The list.
*/
- (NSMutableArray*) arrayFromList:(NSMutableArray<NSObject<FMLiveSwitchIAudioInput>*>*)list;
/**

    Creates a collection.

*/
- (FMLiveSwitchIAudioInputCollection*) createCollection;
/**

    Initializes a new instance of the FMLiveSwitchIAudioInputCollection class.

    @param output The output.
*/
+ (FMLiveSwitchIAudioInputCollection*) iAudioInputCollectionWithOutput:(NSObject<FMLiveSwitchIAudioOutput>*)output;
/**

    Initializes a new instance of the FMLiveSwitchIAudioInputCollection class.

    @param output The output.
*/
- (instancetype) initWithOutput:(NSObject<FMLiveSwitchIAudioOutput>*)output;

@end

/**

    A media output collection.

*/
@interface FMLiveSwitchIMediaOutputCollection<__covariant TIOutput, __covariant TIInput, __covariant TFrame, __covariant TBuffer, __covariant TBufferCollection, __covariant TFormat, __covariant TMediaOutputCollection> : FMLiveSwitchCollection<TIOutput,TMediaOutputCollection>

/**

    Invoked after an element is added to the collection.

    @param value The value.
*/
- (void) addSuccess:(TIOutput)value;
/**

    Invoked after an element is added to the collection.

    @param value The value.
*/
- (void) addSuccessNoLock:(TIOutput)value;
/**

    Removes all items and sets the FMLiveSwitchIMediaOutputCollection`7#input to null.

*/
- (void) destroy;
/**

    Initializes a new instance of the FMLiveSwitchIMediaInputCollection`7 class.

    @param input The input.
*/
+ (FMLiveSwitchIMediaOutputCollection*) iMediaOutputCollectionWithInput:(TIInput)input;
/**

    Initializes a new instance of the FMLiveSwitchIMediaInputCollection`7 class.

    @param input The input.
*/
- (instancetype) initWithInput:(TIInput)input;
/**

    Gets the input.

*/
- (TIInput) input;
/**

    Invoked after an element is removed from the collection.

    @param value The value.
*/
- (void) removeSuccess:(TIOutput)value;
/**

    Invoked after an element is removed from the collection.

    @param value The value.
*/
- (void) removeSuccessNoLock:(TIOutput)value;
/**

    Sets the input.

*/
- (void) setInput:(TIInput)value;

@end

/**

    A collection of audio outputs.

*/
@interface FMLiveSwitchIAudioOutputCollection : FMLiveSwitchIMediaOutputCollection<NSObject<FMLiveSwitchIAudioOutput>*,NSObject<FMLiveSwitchIAudioInput>*,FMLiveSwitchAudioFrame*,FMLiveSwitchAudioBuffer*,FMLiveSwitchAudioBufferCollection*,FMLiveSwitchAudioFormat*,FMLiveSwitchIAudioOutputCollection*>

/**

    Creates an array from a list.

    @param list The list.
*/
- (NSMutableArray*) arrayFromList:(NSMutableArray<NSObject<FMLiveSwitchIAudioOutput>*>*)list;
/**

    Creates a collection.

*/
- (FMLiveSwitchIAudioOutputCollection*) createCollection;
/**

    Initializes a new instance of the FMLiveSwitchIAudioOutputCollection class.

    @param input The input.
*/
+ (FMLiveSwitchIAudioOutputCollection*) iAudioOutputCollectionWithInput:(NSObject<FMLiveSwitchIAudioInput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchIAudioOutputCollection class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioInput>*)input;

@end

@interface FMLiveSwitchIceConnectionStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchIceConnectionState)value;

@end

@interface FMLiveSwitchIceGatheringStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchIceGatheringState)value;

@end

@interface FMLiveSwitchIceGatherPolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchIceGatherPolicy)value;

@end

/**

    A set of ICE parameters.

*/
@interface FMLiveSwitchIceParameters : NSObject

/**

    Initializes a new instance of the FMLiveSwitchIceParameters class.

    @param usernameFragment The username fragment.
    @param password The password.
*/
+ (FMLiveSwitchIceParameters*) iceParametersWithUsernameFragment:(NSString*)usernameFragment password:(NSString*)password;
/**

    Initializes a new instance of the FMLiveSwitchIceParameters class.

    @param usernameFragment The username fragment.
    @param password The password.
*/
- (instancetype) initWithUsernameFragment:(NSString*)usernameFragment password:(NSString*)password;
/**

    Gets the password.

*/
- (NSString*) password;
/**

    Sets the password.

*/
- (void) setPassword:(NSString*)value;
/**

    Sets the username fragment.

*/
- (void) setUsernameFragment:(NSString*)value;
/**

    Gets the username fragment.

*/
- (NSString*) usernameFragment;

@end

@interface FMLiveSwitchIcePolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchIcePolicy)value;

@end

/**

    An ICE port range.

*/
@interface FMLiveSwitchIcePortRange : NSObject

/**

    Initializes a new instance of the FMLiveSwitchIcePortRange class.

*/
+ (FMLiveSwitchIcePortRange*) icePortRange;
/**

    Initializes a new instance of the FMLiveSwitchIcePortRange class.

    @param minimum The minimum port value.
*/
+ (FMLiveSwitchIcePortRange*) icePortRangeWithMinimum:(int)minimum;
/**

    Initializes a new instance of the FMLiveSwitchIcePortRange class.

    @param minimum The minimum port value.
    @param maximum The maximum port value.
*/
+ (FMLiveSwitchIcePortRange*) icePortRangeWithMinimum:(int)minimum maximum:(int)maximum;
/**

    Initializes a new instance of the FMLiveSwitchIcePortRange class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchIcePortRange class.

    @param minimum The minimum port value.
*/
- (instancetype) initWithMinimum:(int)minimum;
/**

    Initializes a new instance of the FMLiveSwitchIcePortRange class.

    @param minimum The minimum port value.
    @param maximum The maximum port value.
*/
- (instancetype) initWithMinimum:(int)minimum maximum:(int)maximum;
/**

    Gets the maximum port value.
    Defaults to 65535.

*/
- (int) maximum;
/**

    Gets the minimum port value.
    Defaults to 49152.

*/
- (int) minimum;

@end

@interface FMLiveSwitchIceRoleWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchIceRole)value;

@end

/**

    An ICE server.

*/
@interface FMLiveSwitchIceServer : NSObject

/**

    Gets the default non-secure port (in use for STUN and TURN).

    @deprecated Use DefaultStunPort, DefaultTurnPort, DefaultStunsPort, or DefaultTurnsPort instead.
*/
+ (int) defaultPort __deprecated_msg("Use DefaultStunPort, DefaultTurnPort, DefaultStunsPort, or DefaultTurnsPort instead.");
/**

    Gets the default STUN port.

*/
+ (int) defaultStunPort;
/**

    Gets the default STUNS port.

*/
+ (int) defaultStunsPort;
/**

    Gets the default TURN port.

*/
+ (int) defaultTurnPort;
/**

    Gets the default TURNS port.

*/
+ (int) defaultTurnsPort;
/**

    Deserializes an array of instances from JSON.

    @param iceServersJson The JSON to deserialize.
    @return The deserialized ICE server array.
*/
+ (NSMutableArray*) fromJsonArrayWithIceServersJson:(NSString*)iceServersJson;
/**

    Deserializes an instance from JSON.

    @param iceServerJson The JSON to deserialize.
    @return The deserialized ICE server.
*/
+ (FMLiveSwitchIceServer*) fromJsonWithIceServerJson:(NSString*)iceServerJson;
/**

    Gets the host.

*/
- (NSString*) host;
/**

    Initializes a new instance of the FMLiveSwitchIceServer class.

    @param url The URL.
*/
+ (FMLiveSwitchIceServer*) iceServerWithUrl:(NSString*)url;
/**

    Initializes a new instance of the FMLiveSwitchIceServer class.

    @param url The URL.
    @param username The username.
    @param password The password.
*/
+ (FMLiveSwitchIceServer*) iceServerWithUrl:(NSString*)url username:(NSString*)username password:(NSString*)password;
/**

    Initializes a new instance of the FMLiveSwitchIceServer class.

    @param url The URL.
*/
- (instancetype) initWithUrl:(NSString*)url;
/**

    Initializes a new instance of the FMLiveSwitchIceServer class.

    @param url The URL.
    @param username The username.
    @param password The password.
*/
- (instancetype) initWithUrl:(NSString*)url username:(NSString*)username password:(NSString*)password;
/**

    Gets a value indicating whether this represents a secure STUN or TURN server.

*/
- (bool) isSecure;
/**

    Gets a value indicating whether this represents a STUN server.

*/
- (bool) isStun;
/**

    Gets a value indicating whether this represents a TCP server.

*/
- (bool) isTcp;
/**

    Gets a value indicating whether this represents a TURN server.

*/
- (bool) isTurn;
/**

    Gets a value indicating whether this represents a UDP server.

*/
- (bool) isUdp;
/**

    Gets the password.

*/
- (NSString*) password;
/**

    Gets the port.

*/
- (int) port;
/**

    Serializes this instance to JSON.

    @return 
            The serialized JSON.
            
*/
- (NSString*) toJson;
/**

    Serializes an array of instances to JSON.

    @param iceServers The ICE servers.
    @return 
            The serialized JSON.
            
*/
+ (NSString*) toJsonArrayWithIceServers:(NSMutableArray*)iceServers;
/**

    Serializes an instance to JSON.

    @param iceServer The ICE server.
    @return 
            The serialized JSON.
            
*/
+ (NSString*) toJsonWithIceServer:(FMLiveSwitchIceServer*)iceServer;
/**

    Gets the URL.

*/
- (NSString*) url;
/**

    Gets the username.

*/
- (NSString*) username;

@end

/**

    An ICE server collection.

*/
@interface FMLiveSwitchIceServerCollection : FMLiveSwitchCollection<FMLiveSwitchIceServer*,FMLiveSwitchIceServerCollection*>

/**

    Creates an array from a list.

    @param list The list.
*/
- (NSMutableArray*) arrayFromList:(NSMutableArray<FMLiveSwitchIceServer*>*)list;
/**

    Creates a collection.

*/
- (FMLiveSwitchIceServerCollection*) createCollection;
+ (FMLiveSwitchIceServerCollection*) iceServerCollection;
- (instancetype) init;

@end

/**

    An ICE server test.

*/
@interface FMLiveSwitchIceServerTest : NSObject

/**

    Gets the ICE address types.

*/
- (NSMutableArray*) iceAddressTypes;
/**

    Gets the ICE port range.

*/
- (FMLiveSwitchIcePortRange*) icePortRange;
/**

    Gets the ICE server.

*/
- (FMLiveSwitchIceServer*) iceServer;
/**

    Initializes a new instance of the FMLiveSwitchIceServerTest class.

    @param iceServer The ICE server.
*/
+ (FMLiveSwitchIceServerTest*) iceServerTestWithIceServer:(FMLiveSwitchIceServer*)iceServer;
/**

    Initializes a new instance of the FMLiveSwitchIceServerTest class.

    @param iceServer The ICE server.
    @param icePortRange The ICE port range.
*/
+ (FMLiveSwitchIceServerTest*) iceServerTestWithIceServer:(FMLiveSwitchIceServer*)iceServer icePortRange:(FMLiveSwitchIcePortRange*)icePortRange;
/**

    Initializes a new instance of the FMLiveSwitchIceServerTest class.

    @param iceServer The ICE server.
    @param icePortRange The ICE port range.
    @param iceAddressTypes The ICE address types.
*/
+ (FMLiveSwitchIceServerTest*) iceServerTestWithIceServer:(FMLiveSwitchIceServer*)iceServer icePortRange:(FMLiveSwitchIcePortRange*)icePortRange iceAddressTypes:(NSMutableArray*)iceAddressTypes;
/**

    Initializes a new instance of the FMLiveSwitchIceServerTest class.

    @param iceServer The ICE server.
*/
- (instancetype) initWithIceServer:(FMLiveSwitchIceServer*)iceServer;
/**

    Initializes a new instance of the FMLiveSwitchIceServerTest class.

    @param iceServer The ICE server.
    @param icePortRange The ICE port range.
*/
- (instancetype) initWithIceServer:(FMLiveSwitchIceServer*)iceServer icePortRange:(FMLiveSwitchIcePortRange*)icePortRange;
/**

    Initializes a new instance of the FMLiveSwitchIceServerTest class.

    @param iceServer The ICE server.
    @param icePortRange The ICE port range.
    @param iceAddressTypes The ICE address types.
*/
- (instancetype) initWithIceServer:(FMLiveSwitchIceServer*)iceServer icePortRange:(FMLiveSwitchIcePortRange*)icePortRange iceAddressTypes:(NSMutableArray*)iceAddressTypes;
/**

    Runs the test.

*/
- (FMLiveSwitchFuture<FMLiveSwitchIceServerTestResult*>*) run;

@end

/**

    An ICE server test result.

*/
@interface FMLiveSwitchIceServerTestResult : NSObject

/**

    Gets the candidates.

*/
- (NSMutableArray*) candidates;
/**

    Gets the server addresses from the FMLiveSwitchIceServerTestResult#candidates and a
    given port. The IP addresses will be taken from the server-reflexive
    candidates if available, or the host candidates if not.

    @param port The port.
*/
- (NSMutableArray*) getServerAddressesWithPort:(int)port;
/**

    Gets the server addresses from the FMLiveSwitchIceServerTestResult#candidates and a
    given port. The IP addresses will be taken from the server-reflexive
    candidates if available, or the host candidates if not.

    @param port The port.
    @param publicIPAddress The public IP address, if known.
*/
- (NSMutableArray*) getServerAddressesWithPort:(int)port publicIPAddress:(NSString*)publicIPAddress;
/**

    Gets the server addresses from the FMLiveSwitchIceServerTestResult#candidates and a
    given port. The IP addresses will be taken from the server-reflexive
    candidates if available, or the host candidates if not.

    @param port The port.
    @param publicIPAddresses The public IP addresses, if known.
*/
- (NSMutableArray*) getServerAddressesWithPort:(int)port publicIPAddresses:(NSMutableArray*)publicIPAddresses;
/**

    Gets the host candidates.

*/
- (NSMutableArray*) hostCandidates;
/**

    Initializes a new instance of the FMLiveSwitchIceServerTestResult class.

    @param candidates The candidates.
*/
+ (FMLiveSwitchIceServerTestResult*) iceServerTestResultWithCandidates:(NSMutableArray*)candidates;
/**

    Initializes a new instance of the FMLiveSwitchIceServerTestResult class.

    @param candidates The candidates.
*/
- (instancetype) initWithCandidates:(NSMutableArray*)candidates;
/**

    Gets the peer reflexive candidates.

*/
- (NSMutableArray*) peerReflexiveCandidates;
/**

    Gets the relayed candidates.

*/
- (NSMutableArray*) relayedCandidates;
/**

    Gets the server reflexive candidates.

*/
- (NSMutableArray*) serverReflexiveCandidates;

@end

/**

    An video recorder.

*/
@interface FMLiveSwitchVideoRecorder : FMLiveSwitchMediaRecorder<FMLiveSwitchVideoBuffer*,FMLiveSwitchVideoFormat*>

/**

    Initializes a new instance of the FMLiveSwitchVideoRecorder class.

    @param path The path.
*/
- (instancetype) initWithPath:(NSString*)path;
/**

    Initializes a new instance of the FMLiveSwitchVideoRecorder class.

    @param path The path.
*/
+ (FMLiveSwitchVideoRecorder*) videoRecorderWithPath:(NSString*)path;

@end

/**

    An IVF video recorder.

*/
@interface FMLiveSwitchIvfVideoRecorder : FMLiveSwitchVideoRecorder

/**

    Updates the file header.

*/
- (void) doUpdateHeader;
/**

    Writes the file header.

*/
- (void) doWriteHeader;
/**

    Write an encoded video frame.

    @param buffer The encoded buffer.
    @param presentationTimestamp The presentation timestamp.
    @return `true` if the encoded frame was written successfully; otherwise, `false`
*/
- (bool) doWriteWithBuffer:(FMLiveSwitchVideoBuffer*)buffer presentationTimestamp:(long long)presentationTimestamp;
/**

    Initializes a new instance of the FMLiveSwitchIvfVideoRecorder class.

    @param path The path.
*/
- (instancetype) initWithPath:(NSString*)path;
/**

    Initializes a new instance of the FMLiveSwitchIvfVideoRecorder class.

    @param path The path.
*/
+ (FMLiveSwitchIvfVideoRecorder*) videoRecorderWithPath:(NSString*)path;

@end

/**

    An IVF-file-based video sink.

*/
@interface FMLiveSwitchIvfVideoSink : FMLiveSwitchVideoSink

/**

    Adds a handler that is raised when an existing file is close in response to
    this sink being deactivated or destroyed.

*/
- (void) addOnFileClose:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when a new file is opened in response to
    this sink being activated and processing a frame.

*/
- (void) addOnFileOpen:(FMLiveSwitchAction0*)value;
/**

    Gets the base timestamp - the timestamp of the first frame
    processed by the recorder after being activated. This timestamp
    will change each time a new file is created in response to the
    sink being activated.

*/
- (long long) baseTimestamp;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchVideoFrame*)frame inputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchIvfVideoSink class.

    @param path The path.
*/
- (instancetype) initWithPath:(NSString*)path;
/**

    Initializes a new instance of the FMLiveSwitchIvfVideoSink class.

    @param path The path.
    @param input The input.
*/
- (instancetype) initWithPath:(NSString*)path input:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets the last known file path.

*/
- (NSString*) lastFilePath;
/**

    Gets the last timestamp processed by the recorder.

*/
- (long long) lastTimestamp;
/**

    Gets the currently open file path.

*/
- (NSString*) openFilePath;
/**

    Gets the path.

*/
- (NSString*) path;
/**

    Removes a handler that is raised when an existing file is close in response to
    this sink being deactivated or destroyed.

*/
- (void) removeOnFileClose:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when a new file is opened in response to
    this sink being activated and processing a frame.

*/
- (void) removeOnFileOpen:(FMLiveSwitchAction0*)value;
/**

    Initializes a new instance of the FMLiveSwitchIvfVideoSink class.

    @param path The path.
*/
+ (FMLiveSwitchIvfVideoSink*) videoSinkWithPath:(NSString*)path;
/**

    Initializes a new instance of the FMLiveSwitchIvfVideoSink class.

    @param path The path.
    @param input The input.
*/
+ (FMLiveSwitchIvfVideoSink*) videoSinkWithPath:(NSString*)path input:(NSObject<FMLiveSwitchIVideoOutput>*)input;

@end

/**

    A collection of video inputs.

*/
@interface FMLiveSwitchIVideoInputCollection : FMLiveSwitchIMediaInputCollection<NSObject<FMLiveSwitchIVideoOutput>*,NSObject<FMLiveSwitchIVideoInput>*,FMLiveSwitchVideoFrame*,FMLiveSwitchVideoBuffer*,FMLiveSwitchVideoBufferCollection*,FMLiveSwitchVideoFormat*,FMLiveSwitchIVideoInputCollection*>

/**

    Creates an array from a list.

    @param list The list.
*/
- (NSMutableArray*) arrayFromList:(NSMutableArray<NSObject<FMLiveSwitchIVideoInput>*>*)list;
/**

    Creates a collection.

*/
- (FMLiveSwitchIVideoInputCollection*) createCollection;
/**

    Initializes a new instance of the FMLiveSwitchIVideoInputCollection class.

    @param output The output.
*/
- (instancetype) initWithOutput:(NSObject<FMLiveSwitchIVideoOutput>*)output;
/**

    Initializes a new instance of the FMLiveSwitchIVideoInputCollection class.

    @param output The output.
*/
+ (FMLiveSwitchIVideoInputCollection*) iVideoInputCollectionWithOutput:(NSObject<FMLiveSwitchIVideoOutput>*)output;

@end

/**

    A collection of video outputs.

*/
@interface FMLiveSwitchIVideoOutputCollection : FMLiveSwitchIMediaOutputCollection<NSObject<FMLiveSwitchIVideoOutput>*,NSObject<FMLiveSwitchIVideoInput>*,FMLiveSwitchVideoFrame*,FMLiveSwitchVideoBuffer*,FMLiveSwitchVideoBufferCollection*,FMLiveSwitchVideoFormat*,FMLiveSwitchIVideoOutputCollection*>

/**

    Creates an array from a list.

    @param list The list.
*/
- (NSMutableArray*) arrayFromList:(NSMutableArray<NSObject<FMLiveSwitchIVideoOutput>*>*)list;
/**

    Creates a collection.

*/
- (FMLiveSwitchIVideoOutputCollection*) createCollection;
/**

    Initializes a new instance of the FMLiveSwitchIVideoOutputCollection class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIVideoInput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchIVideoOutputCollection class.

    @param input The input.
*/
+ (FMLiveSwitchIVideoOutputCollection*) iVideoOutputCollectionWithInput:(NSObject<FMLiveSwitchIVideoInput>*)input;

@end

/**

    A Jitter config.
    
    JitterConfig is for configuring the jitter buffer.
    The jitter buffer helps to eliminate the effects of varying network delay and
    delivery times by holding packets for a brief period of time before releasing them to the playout track.
    The jitter buffer holds on to the packets so that any out of order arriving packets can be released in the correct order.
    You can modify the buffer size, but it will increase latency, and should generally be left with default values.
    The option to set these values will most likely be removed in a future release as our adaptive algorithms improve.

*/
@interface FMLiveSwitchJitterConfig : NSObject

/**

    Gets the initial jitter buffer length in milliseconds.
    Defaults to 100 (ms).

*/
- (int) bufferLength;
/**

    Gets a value indicating whether
    the jitter buffer should be disabled.

*/
- (bool) disableBuffering;
/**

    Initializes a new instance of the FMLiveSwitchJitterConfig class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchJitterConfig class.

    @param bufferLength Length of the buffer.
*/
- (instancetype) initWithBufferLength:(int)bufferLength;
/**

    Initializes a new instance of the FMLiveSwitchJitterConfig class.

*/
+ (FMLiveSwitchJitterConfig*) jitterConfig;
/**

    Initializes a new instance of the FMLiveSwitchJitterConfig class.

    @param bufferLength Length of the buffer.
*/
+ (FMLiveSwitchJitterConfig*) jitterConfigWithBufferLength:(int)bufferLength;
/**

    Sets the initial jitter buffer length in milliseconds.
    Defaults to 100 (ms).

*/
- (void) setBufferLength:(int)value;
/**

    Sets a value indicating whether
    the jitter buffer should be disabled.

*/
- (void) setDisableBuffering:(bool)value;

@end

/**

    An audio pipe that wraps a jitter buffer.

*/
@interface FMLiveSwitchJitterAudioPipe : FMLiveSwitchAudioPipe

/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Pushes the frame to the jitter buffer and raises any frames that are ready.

    @param frame The frame.
    @param inputBuffer The buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchAudioFrame*)frame inputBuffer:(FMLiveSwitchAudioBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchJitterAudioPipe class
    with a 100ms length.

    @param format The input/output format.
*/
- (instancetype) initWithFormat:(FMLiveSwitchAudioFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchJitterAudioPipe class.

    @param format The input/output format.
    @param length The length of the jitter buffer, in milliseconds.
*/
- (instancetype) initWithFormat:(FMLiveSwitchAudioFormat*)format length:(int)length;
/**

    Initializes a new instance of the FMLiveSwitchJitterAudioPipe class
    with a 100ms length.

    @param format The input/output format.
*/
+ (FMLiveSwitchJitterAudioPipe*) jitterAudioPipeWithFormat:(FMLiveSwitchAudioFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchJitterAudioPipe class.

    @param format The input/output format.
    @param length The length of the jitter buffer, in milliseconds.
*/
+ (FMLiveSwitchJitterAudioPipe*) jitterAudioPipeWithFormat:(FMLiveSwitchAudioFormat*)format length:(int)length;
/**

    Gets the label of the pipe.

*/
- (NSString*) label;

@end

/**

    A video pipe that wraps a jitter buffer.

*/
@interface FMLiveSwitchJitterVideoPipe : FMLiveSwitchVideoPipe

/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Pushes the frame to the jitter buffer and raises any frames that are ready.

    @param frame The frame.
    @param inputBuffer The buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchVideoFrame*)frame inputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchJitterVideoPipe class
    with a 100ms length.

    @param format The input/output format.
*/
- (instancetype) initWithFormat:(FMLiveSwitchVideoFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchJitterVideoPipe class.

    @param format The input/output format.
    @param length The length of the jitter buffer, in milliseconds.
*/
- (instancetype) initWithFormat:(FMLiveSwitchVideoFormat*)format length:(int)length;
/**

    Initializes a new instance of the FMLiveSwitchJitterVideoPipe class
    with a 100ms length.

    @param format The input/output format.
*/
+ (FMLiveSwitchJitterVideoPipe*) jitterVideoPipeWithFormat:(FMLiveSwitchVideoFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchJitterVideoPipe class.

    @param format The input/output format.
    @param length The length of the jitter buffer, in milliseconds.
*/
+ (FMLiveSwitchJitterVideoPipe*) jitterVideoPipeWithFormat:(FMLiveSwitchVideoFormat*)format length:(int)length;
/**

    Gets the label of the pipe.

*/
- (NSString*) label;

@end

/**

    A layout definition, including local
    and remote frame definitions.

*/
@interface FMLiveSwitchLayout : NSObject

/**

    Gets all frames (local and remote).

*/
- (NSMutableArray*) allFrames;
/**

    Gets the layout height.

*/
- (int) height;
- (instancetype) init;
+ (FMLiveSwitchLayout*) layout;
/**

    Gets the local frame.

*/
- (FMLiveSwitchLayoutFrame*) localFrame;
/**

    Gets the layout origin.

*/
- (FMLiveSwitchLayoutOrigin) origin;
/**

    Gets the remote frames.

*/
- (NSMutableArray*) remoteFrames;
/**

    Sets the layout height.

*/
- (void) setHeight:(int)value;
/**

    Sets the local frame.

*/
- (void) setLocalFrame:(FMLiveSwitchLayoutFrame*)value;
/**

    Sets the layout origin.

*/
- (void) setOrigin:(FMLiveSwitchLayoutOrigin)value;
/**

    Sets the remote frames.

*/
- (void) setRemoteFrames:(NSMutableArray*)value;
/**

    Sets the layout width.

*/
- (void) setWidth:(int)value;
/**

    Swaps the properties of two frames.

    @param frame1 The first frame.
    @param frame2 The second frame.
*/
- (void) swapFramesWithFrame1:(FMLiveSwitchLayoutFrame*)frame1 frame2:(FMLiveSwitchLayoutFrame*)frame2;
/**

    Swaps the local frame with a remote frame.

    @param remoteFrameIndex The index of the remote frame.
*/
- (void) swapLocalFrameWithRemoteFrameIndex:(int)remoteFrameIndex;
/**

    Swaps two remote frames.

    @param remoteFrameIndex1 The index of the first remote frame.
    @param remoteFrameIndex2 The index of the second remote frame.
*/
- (void) swapRemoteFramesWithRemoteFrameIndex1:(int)remoteFrameIndex1 remoteFrameIndex2:(int)remoteFrameIndex2;
/**

    Gets the layout width.

*/
- (int) width;

@end

@interface FMLiveSwitchLayoutAlignmentWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchLayoutAlignment)value;

@end

@interface FMLiveSwitchLayoutDirectionWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchLayoutDirection)value;

@end

/**

    A layout preset.

*/
@interface FMLiveSwitchLayoutPreset : FMLiveSwitchDynamic

/**

    Gets the alignment of the layout.
    Defaults to FMLiveSwitchLayoutAlignmentBottomRight.

*/
- (FMLiveSwitchLayoutAlignment) alignment;
/**

    Applies a preset.

    @param preset The preset to apply.
*/
- (void) applyPreset:(FMLiveSwitchLayoutPreset*)preset;
/**

    Gets the height of block elements in pixels.
    Overrides FMLiveSwitchLayoutPreset#blockHeightPercent.

*/
- (int) blockHeight;
/**

    Gets the height of block elements as a percent
    of the container height between 0.0 and 1.0.
    Overrides FMLiveSwitchLayoutPreset#blockHeight.

*/
- (double) blockHeightPercent;
/**

    Gets the X-margin between block elements and the layout
    edge in pixels.
    Overrides FMLiveSwitchLayoutPreset#blockMarginXPercent.

*/
- (int) blockMarginX;
/**

    Gets the X-margin between block elements and the layout
    edge as a percent of the container width between 0.0 and 1.0.
    Overrides FMLiveSwitchLayoutPreset#blockMarginX.

*/
- (double) blockMarginXPercent;
/**

    Gets the Y-margin between block elements and the layout
    edge in pixels.
    Overrides FMLiveSwitchLayoutPreset#blockMarginYPercent.

*/
- (int) blockMarginY;
/**

    Gets the Y-margin between block elements and the layout
    edge as a percent of the container height between 0.0 and 1.0.
    Overrides FMLiveSwitchLayoutPreset#blockMarginY.

*/
- (double) blockMarginYPercent;
/**

    Gets the width of block elements in pixels.
    Overrides FMLiveSwitchLayoutPreset#blockWidthPercent.

*/
- (int) blockWidth;
/**

    Gets the width of block elements as a percent
    of the container width between 0.0 and 1.0.
    Overrides FMLiveSwitchLayoutPreset#blockWidth.

*/
- (double) blockWidthPercent;
/**

    Gets a video frame layout.

    @param layoutWidth The total width of the layout.
    @param layoutHeight The total height of the layout.
    @param local Whether a local frame is needed.
    @param remoteCount The number of remote frames.
    @param origin The layout origin.
    @param localVideoSize The local video size.
    @param remoteVideoSizes The remote video sizes.
    @return The video frame layout.
*/
- (FMLiveSwitchLayout*) calculateLayoutWithLayoutWidth:(int)layoutWidth layoutHeight:(int)layoutHeight local:(bool)local remoteCount:(int)remoteCount origin:(FMLiveSwitchLayoutOrigin)origin localVideoSize:(FMLiveSwitchSize*)localVideoSize remoteVideoSizes:(NSMutableArray*)remoteVideoSizes;
/**

    Gets a video frame layout.

    @param layoutWidth The total width of the layout.
    @param layoutHeight The total height of the layout.
    @param remoteCount The number of remote frames.
    @param origin The layout origin.
    @return The video frame layout.
*/
- (FMLiveSwitchLayout*) calculateLayoutWithLayoutWidth:(int)layoutWidth layoutHeight:(int)layoutHeight remoteCount:(int)remoteCount origin:(FMLiveSwitchLayoutOrigin)origin;
/**

    Copies this preset's properties to another preset.

    @param preset The target preset.
*/
- (void) copyToPreset:(FMLiveSwitchLayoutPreset*)preset;
/**

    Gets the direction of the layout flow.
    Defaults to FMLiveSwitchLayoutDirectionHorizontal.

*/
- (FMLiveSwitchLayoutDirection) direction;
/**

    Gets a Facetime-style layout preset.

*/
+ (FMLiveSwitchLayoutPreset*) facetime;
/**

    Gets the height of floating elements in pixels.
    Overrides FMLiveSwitchLayoutPreset#floatHeightPercent.

*/
- (int) floatHeight;
/**

    Gets the height of floating elements as a percent
    of the container height between 0.0 and 1.0.
    Overrides FMLiveSwitchLayoutPreset#floatHeight.

*/
- (double) floatHeightPercent;
/**

    Gets the X-margin between floating elements and the layout
    edge in pixels.
    Overrides FMLiveSwitchLayoutPreset#floatMarginXPercent.

*/
- (int) floatMarginX;
/**

    Gets the X-margin between floating elements and the layout
    edge as a percent of the container width between 0.0 and 1.0.
    Overrides FMLiveSwitchLayoutPreset#floatMarginX.

*/
- (double) floatMarginXPercent;
/**

    Gets the Y-margin between floating elements and the layout
    edge in pixels.
    Overrides FMLiveSwitchLayoutPreset#floatMarginYPercent.

*/
- (int) floatMarginY;
/**

    Gets the Y-margin between floating elements and the layout
    edge as a percent of the container height between 0.0 and 1.0.
    Overrides FMLiveSwitchLayoutPreset#floatMarginY.

*/
- (double) floatMarginYPercent;
/**

    Gets the width of floating elements in pixels.
    Overrides FMLiveSwitchLayoutPreset#floatWidthPercent.

*/
- (int) floatWidth;
/**

    Gets the width of floating elements as a percent
    of the container width between 0.0 and 1.0.
    Overrides FMLiveSwitchLayoutPreset#floatWidth.

*/
- (double) floatWidthPercent;
/**

    Gets a Google Hangouts-style layout preset.
    Note that this will present differently
    on mobile devices.

*/
+ (FMLiveSwitchLayoutPreset*) googleHangouts;
/**

    Initializes a new instance of the FMLiveSwitchLayoutPreset class.

*/
- (instancetype) init;
/**

    Gets the size of the margin in pixels to use
    between inline elements.

*/
- (int) inlineMargin;
/**

    Initializes a new instance of the FMLiveSwitchLayoutPreset class.

*/
+ (FMLiveSwitchLayoutPreset*) layoutPreset;
/**

    Gets the mode used by the layout engine.
    Defaults to FMLiveSwitchLayoutModeFloatLocal.

*/
- (FMLiveSwitchLayoutMode) mode;
/**

    Sets the alignment of the layout.
    Defaults to FMLiveSwitchLayoutAlignmentBottomRight.

*/
- (void) setAlignment:(FMLiveSwitchLayoutAlignment)value;
/**

    Sets the height of block elements in pixels.
    Overrides FMLiveSwitchLayoutPreset#blockHeightPercent.

*/
- (void) setBlockHeight:(int)value;
/**

    Sets the height of block elements as a percent
    of the container height between 0.0 and 1.0.
    Overrides FMLiveSwitchLayoutPreset#blockHeight.

*/
- (void) setBlockHeightPercent:(double)value;
/**

    Sets the X-margin between block elements and the layout
    edge in pixels.
    Overrides FMLiveSwitchLayoutPreset#blockMarginXPercent.

*/
- (void) setBlockMarginX:(int)value;
/**

    Sets the X-margin between block elements and the layout
    edge as a percent of the container width between 0.0 and 1.0.
    Overrides FMLiveSwitchLayoutPreset#blockMarginX.

*/
- (void) setBlockMarginXPercent:(double)value;
/**

    Sets the Y-margin between block elements and the layout
    edge in pixels.
    Overrides FMLiveSwitchLayoutPreset#blockMarginYPercent.

*/
- (void) setBlockMarginY:(int)value;
/**

    Sets the Y-margin between block elements and the layout
    edge as a percent of the container height between 0.0 and 1.0.
    Overrides FMLiveSwitchLayoutPreset#blockMarginY.

*/
- (void) setBlockMarginYPercent:(double)value;
/**

    Sets the width of block elements in pixels.
    Overrides FMLiveSwitchLayoutPreset#blockWidthPercent.

*/
- (void) setBlockWidth:(int)value;
/**

    Sets the width of block elements as a percent
    of the container width between 0.0 and 1.0.
    Overrides FMLiveSwitchLayoutPreset#blockWidth.

*/
- (void) setBlockWidthPercent:(double)value;
/**

    Sets the direction of the layout flow.
    Defaults to FMLiveSwitchLayoutDirectionHorizontal.

*/
- (void) setDirection:(FMLiveSwitchLayoutDirection)value;
/**

    Sets the height of floating elements in pixels.
    Overrides FMLiveSwitchLayoutPreset#floatHeightPercent.

*/
- (void) setFloatHeight:(int)value;
/**

    Sets the height of floating elements as a percent
    of the container height between 0.0 and 1.0.
    Overrides FMLiveSwitchLayoutPreset#floatHeight.

*/
- (void) setFloatHeightPercent:(double)value;
/**

    Sets the X-margin between floating elements and the layout
    edge in pixels.
    Overrides FMLiveSwitchLayoutPreset#floatMarginXPercent.

*/
- (void) setFloatMarginX:(int)value;
/**

    Sets the X-margin between floating elements and the layout
    edge as a percent of the container width between 0.0 and 1.0.
    Overrides FMLiveSwitchLayoutPreset#floatMarginX.

*/
- (void) setFloatMarginXPercent:(double)value;
/**

    Sets the Y-margin between floating elements and the layout
    edge in pixels.
    Overrides FMLiveSwitchLayoutPreset#floatMarginYPercent.

*/
- (void) setFloatMarginY:(int)value;
/**

    Sets the Y-margin between floating elements and the layout
    edge as a percent of the container height between 0.0 and 1.0.
    Overrides FMLiveSwitchLayoutPreset#floatMarginY.

*/
- (void) setFloatMarginYPercent:(double)value;
/**

    Sets the width of floating elements in pixels.
    Overrides FMLiveSwitchLayoutPreset#floatWidthPercent.

*/
- (void) setFloatWidth:(int)value;
/**

    Sets the width of floating elements as a percent
    of the container width between 0.0 and 1.0.
    Overrides FMLiveSwitchLayoutPreset#floatWidth.

*/
- (void) setFloatWidthPercent:(double)value;
/**

    Sets the size of the margin in pixels to use
    between inline elements.

*/
- (void) setInlineMargin:(int)value;
/**

    Sets the mode used by the layout engine.
    Defaults to FMLiveSwitchLayoutModeFloatLocal.

*/
- (void) setMode:(FMLiveSwitchLayoutMode)value;
/**

    Gets a Skype-style layout preset.
    Note that this will present differently
    on mobile devices.

*/
+ (FMLiveSwitchLayoutPreset*) skype;

@end

/**

    A class that supplies simple video frame layout management.

*/
@interface FMLiveSwitchLayoutManager<__covariant T> : FMLiveSwitchLayoutPreset

/**

    Adds a handler that is raised when a layout is calculated.

*/
- (void) addOnLayout:(FMLiveSwitchAction1<FMLiveSwitchLayout*>*)value;
/**

    Adds a handler that is raised when a layout is calculated.

*/
- (void (^)(void(^)(FMLiveSwitchLayout*))) addOnLayoutWithBlock;
/**

    Adds a handler that is raised when a layout is calculated.

*/
- (void) addOnLayoutWithBlock:(void(^)(FMLiveSwitchLayout*))valueBlock;
/**

    Adds remote media to the layout.

    @param remoteMedia The remote media.
    @return `true` if successful; otherwise, `false`.
            
*/
- (bool) addRemoteMedia:(NSObject<FMLiveSwitchIViewableMedia>*)remoteMedia;
/**

    Adds remote views to the layout.

    @param ids The remote view IDs.
    @param views The remote views.
    @return `true` if successful; otherwise, `false`. Check the logs for additional information.
*/
- (bool) addRemoteViewsWithIds:(NSMutableArray*)ids views:(NSMutableArray*)views;
/**

    Adds a remote view to the layout.

    @param idValue The remote view ID.
    @param view The remote view.
    @return `true` if successful; otherwise, `false`. Check the logs for additional information.
*/
- (bool) addRemoteViewWithId:(NSString*)idValue view:(T)view;
/**

    Adds a view to the container.

    @param view The view to add.
*/
- (void) addView:(T)view;
/**

    Dispatches an action to the main thread.

    @param action The action to invoke.
    @param arg1 The first argument.
    @param arg2 The second argument.
*/
- (void) dispatchToMainThreadWithAction:(FMLiveSwitchAction2<id,id>*)action arg1:(id)arg1 arg2:(id)arg2;
/**

    Dispatches an action to the main thread.

    @param actionBlock The action to invoke.
    @param arg1 The first argument.
    @param arg2 The second argument.
*/
- (void) dispatchToMainThreadWithActionBlock:(void(^)(id, id))actionBlock arg1:(id)arg1 arg2:(id)arg2;
/**

    Dispatches an action to the main thread.

    @inlineparam actionBlock The action to invoke.
    @inlineparam arg1 The first argument.
    @inlineparam arg2 The second argument.
*/
- (void (^)(void(^)(id, id), id, id)) dispatchToMainThreadWithActionBlockAndArg1AndArg2;
/**

    Gets the local view.

    @return The local view.
*/
- (T) doGetLocalView;
/**

    Gets the remote view IDs.

    @return The remote view IDs.
*/
- (NSMutableArray*) doGetRemoteViewsIds;
/**

    Gets the remote views for a given remote view ID.

    @param idValue The remote view ID.
    @return The remote views.
*/
- (NSMutableArray<T>*) doGetRemoteViewsWithId:(NSString*)idValue;
/**

    Gets a video frame layout.

    @param layoutWidth The total width of the layout.
    @param layoutHeight The total height of the layout.
    @param local Whether a local frame is needed.
    @param remoteCount The number of remote frames.
    @return The video frame layout.
*/
- (FMLiveSwitchLayout*) getLayoutWithLayoutWidth:(int)layoutWidth layoutHeight:(int)layoutHeight local:(bool)local remoteCount:(int)remoteCount;
/**

    Gets a video frame layout.

    @param layoutWidth The total width of the layout.
    @param layoutHeight The total height of the layout.
    @param local Whether a local frame is needed.
    @param remoteCount The number of remote frames.
    @param remoteViewIds The remote view IDs.
    @return The video frame layout.
*/
- (FMLiveSwitchLayout*) getLayoutWithLayoutWidth:(int)layoutWidth layoutHeight:(int)layoutHeight local:(bool)local remoteCount:(int)remoteCount remoteViewIds:(NSMutableArray*)remoteViewIds;
/**

    Gets a video frame layout.

    @param layoutWidth The total width of the layout.
    @param layoutHeight The total height of the layout.
    @param local Whether a local frame is needed.
    @param remoteCount The number of remote frames.
    @param remoteViewIds The remote view IDs.
    @param localVideoSize The local video size.
    @param remoteVideoSizes The remote video sizes.
    @return The video frame layout.
*/
- (FMLiveSwitchLayout*) getLayoutWithLayoutWidth:(int)layoutWidth layoutHeight:(int)layoutHeight local:(bool)local remoteCount:(int)remoteCount remoteViewIds:(NSMutableArray*)remoteViewIds localVideoSize:(FMLiveSwitchSize*)localVideoSize remoteVideoSizes:(NSMutableArray*)remoteVideoSizes;
/**

    Gets a video frame layout.

    @param layoutWidth The total width of the layout.
    @param layoutHeight The total height of the layout.
    @param remoteCount The number of remote frames.
    @return The video frame layout.
*/
- (FMLiveSwitchLayout*) getLayoutWithLayoutWidth:(int)layoutWidth layoutHeight:(int)layoutHeight remoteCount:(int)remoteCount;
/**

    Gets a video frame layout.

    @param layoutWidth The total width of the layout.
    @param layoutHeight The total height of the layout.
    @param remoteCount The number of remote frames.
    @param remoteViewIds The remote view IDs.
    @return The video frame layout.
*/
- (FMLiveSwitchLayout*) getLayoutWithLayoutWidth:(int)layoutWidth layoutHeight:(int)layoutHeight remoteCount:(int)remoteCount remoteViewIds:(NSMutableArray*)remoteViewIds;
/**

    Gets the local view from the layout.

    @return The local view.
*/
- (T) getLocalView;
/**

    Gets the IDs of the remote views in the layout.

    @return The remote view IDs.
*/
- (NSMutableArray*) getRemoteViewIds;
/**

    Gets all remote views from the layout.

    @return The remote views.
*/
- (NSMutableArray<T>*) getRemoteViews;
/**

    Gets remote views from the layout.

    @param ids The remote view IDs.
    @return The remote views.
*/
- (NSMutableArray<T>*) getRemoteViewsWithIds:(NSMutableArray*)ids;
/**

    Gets a remote view from the layout.

    @param idValue The remote view ID.
    @return The remote view.
*/
- (T) getRemoteViewWithId:(NSString*)idValue;
/**

    Initializes a new instance of the FMLiveSwitchLayoutManager`1 class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchLayoutManager`1 class.

*/
- (instancetype) initWithPreset:(FMLiveSwitchLayoutPreset*)preset;
/**

    Positions the local and remote views within the layout.

*/
- (void) layout;
/**

    Initializes a new instance of the FMLiveSwitchLayoutManager`1 class.

*/
+ (FMLiveSwitchLayoutManager*) layoutManager;
/**

    Initializes a new instance of the FMLiveSwitchLayoutManager`1 class.

*/
+ (FMLiveSwitchLayoutManager*) layoutManagerWithPreset:(FMLiveSwitchLayoutPreset*)preset;
/**

    Positions the local and remote views within the layout
    after dispatching to the main thread.

*/
- (void) layoutOnMainThread;
/**

    Gets the layout origin.
    Defaults to TopLeft.

*/
- (FMLiveSwitchLayoutOrigin) layoutOrigin;
/**

    Removes a handler that is raised when a layout is calculated.

*/
- (void) removeOnLayout:(FMLiveSwitchAction1<FMLiveSwitchLayout*>*)value;
/**

    Removes remote media from the layout.

    @param remoteMedia The remote media.
    @return `true` if successful; otherwise, `false`.
            
*/
- (bool) removeRemoteMedia:(NSObject<FMLiveSwitchIViewableMedia>*)remoteMedia;
/**

    Removes all remote views from the layout.

*/
- (void) removeRemoteViews;
/**

    Removes remote views from the layout.

    @param ids The remote view IDs.
    @return `true` if successful; otherwise, `false`. Check the logs for additional information.
*/
- (bool) removeRemoteViewsWithIds:(NSMutableArray*)ids;
/**

    Removes a remote view from the layout.

    @param idValue The remote view ID.
    @return `true` if successful; otherwise, `false`. Check the logs for additional information.
*/
- (bool) removeRemoteViewWithId:(NSString*)idValue;
/**

    Removes a view from the container.

    @param view The view to remove.
*/
- (void) removeView:(T)view;
/**

    Removes all remote views from the layout,
    then removes the local view from the layout.

*/
- (void) reset;
/**

    Sets the layout origin.
    Defaults to TopLeft.

*/
- (void) setLayoutOrigin:(FMLiveSwitchLayoutOrigin)value;
/**

    Adds the local media to the layout.

    @param localMedia The local media.
    @return `true` if successful; otherwise, `false`.
*/
- (bool) setLocalMedia:(NSObject<FMLiveSwitchIViewableMedia>*)localMedia;
/**

    Adds the local view to the layout.

    @param view The local view.
    @return `true` if successful; otherwise, `false`. Check the logs for additional information.
*/
- (bool) setLocalView:(T)view;
/**

    Swaps remote media in the layout.

    @param remoteMediaToRemove The remote media to remove.
    @param remoteMediaToAdd The remote media to add.
*/
- (bool) swapRemoteMediaWithRemoteMediaToRemove:(NSObject<FMLiveSwitchIViewableMedia>*)remoteMediaToRemove remoteMediaToAdd:(NSObject<FMLiveSwitchIViewableMedia>*)remoteMediaToAdd;
/**

    Swaps remote views in the layout.

    @param idsToRemove The remote view IDs to remove.
    @param idsToAdd The remote view IDs to add.
    @param viewsToAdd The remote views to add.
    @return `true` if successful; otherwise, `false`. Check the logs for additional information.
*/
- (bool) swapRemoteViewsWithIdsToRemove:(NSMutableArray*)idsToRemove idsToAdd:(NSMutableArray*)idsToAdd viewsToAdd:(NSMutableArray*)viewsToAdd;
/**

    Swaps a remote view in the layout.

    @param idToRemove The remote view ID to remove.
    @param idToAdd The remote view ID to add.
    @param viewToAdd The remote view to add.
*/
- (bool) swapRemoteViewWithIdToRemove:(NSString*)idToRemove idToAdd:(NSString*)idToAdd viewToAdd:(T)viewToAdd;
/**

    Removes the local view from the layout.

    @return `true` if successful; otherwise, `false`. Check the logs for additional information.
*/
- (bool) unsetLocalView;

@end

@interface FMLiveSwitchLayoutModeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchLayoutMode)value;

@end

@interface FMLiveSwitchLayoutOriginWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchLayoutOrigin)value;

@end

/**

    Defines the results of a layout calculation.

*/
@interface FMLiveSwitchLayoutTable : NSObject

/**

    Gets the height of each cell.

*/
- (int) cellHeight;
/**

    Gets the width of each cell.

*/
- (int) cellWidth;
/**

    Gets the column count.

*/
- (int) columnCount;
/**

    Initializes a new instance of the FMLiveSwitchLayoutTable class.

    @param columnCount The column count.
    @param rowCount The row count.
    @param cellWidth The width of each cell.
    @param cellHeight The height of each cell.
*/
- (instancetype) initWithColumnCount:(int)columnCount rowCount:(int)rowCount cellWidth:(int)cellWidth cellHeight:(int)cellHeight;
/**

    Initializes a new instance of the FMLiveSwitchLayoutTable class.

    @param columnCount The column count.
    @param rowCount The row count.
    @param cellWidth The width of each cell.
    @param cellHeight The height of each cell.
*/
+ (FMLiveSwitchLayoutTable*) layoutTableWithColumnCount:(int)columnCount rowCount:(int)rowCount cellWidth:(int)cellWidth cellHeight:(int)cellHeight;
/**

    Gets the row count.

*/
- (int) rowCount;
/**

    Sets the height of each cell.

*/
- (void) setCellHeight:(int)value;
/**

    Sets the width of each cell.

*/
- (void) setCellWidth:(int)value;
/**

    Sets the column count.

*/
- (void) setColumnCount:(int)value;
/**

    Sets the row count.

*/
- (void) setRowCount:(int)value;

@end

/**

    A collection of audio/video track base methods/properties.

*/
@interface FMLiveSwitchMediaBase<__covariant TIAudioTrack, __covariant TIVideoTrack> : FMLiveSwitchDynamic<FMLiveSwitchIMedia>

/**

    Adds a handler that is raised when the audio track is destroyed.
    If there are multiple audio tracks in a custom media stack,
    this event is only triggered by the first audio track.

*/
- (void) addOnAudioDestroyed:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised periodically when the audio's level is calculated.
    If there are multiple audio tracks in a custom media stack,
    this event is only triggered by the first audio track.

*/
- (void) addOnAudioLevel:(FMLiveSwitchAction1<id>*)value;
/**

    Adds a handler that is raised periodically when the audio's level is calculated.
    If there are multiple audio tracks in a custom media stack,
    this event is only triggered by the first audio track.

*/
- (void (^)(void(^)(double))) addOnAudioLevelWithBlock;
/**

    Adds a handler that is raised periodically when the audio's level is calculated.
    If there are multiple audio tracks in a custom media stack,
    this event is only triggered by the first audio track.

*/
- (void) addOnAudioLevelWithBlock:(void(^)(double))valueBlock;
/**

    Adds a handler that is raised when the video track is destroyed.
    If there are multiple video tracks in a custom media stack,
    this event is only triggered by the first video track.

*/
- (void) addOnVideoDestroyed:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised whenever the video's frame size is known, once per frame.
    If there are multiple video tracks in a custom media stack,
    this event is only triggered by the first video track.

*/
- (void) addOnVideoSize:(FMLiveSwitchAction1<FMLiveSwitchSize*>*)value;
/**

    Adds a handler that is raised whenever the video's frame size changes.
    If there are multiple video tracks in a custom media stack,
    this event is only triggered by the first video track.

*/
- (void) addOnVideoSizeChange:(FMLiveSwitchAction1<FMLiveSwitchSize*>*)value;
/**

    Adds a handler that is raised whenever the video's frame size changes.
    If there are multiple video tracks in a custom media stack,
    this event is only triggered by the first video track.

*/
- (void (^)(void(^)(FMLiveSwitchSize*))) addOnVideoSizeChangeWithBlock;
/**

    Adds a handler that is raised whenever the video's frame size changes.
    If there are multiple video tracks in a custom media stack,
    this event is only triggered by the first video track.

*/
- (void) addOnVideoSizeChangeWithBlock:(void(^)(FMLiveSwitchSize*))valueBlock;
/**

    Adds a handler that is raised whenever the video's frame size is known, once per frame.
    If there are multiple video tracks in a custom media stack,
    this event is only triggered by the first video track.

*/
- (void (^)(void(^)(FMLiveSwitchSize*))) addOnVideoSizeWithBlock;
/**

    Adds a handler that is raised whenever the video's frame size is known, once per frame.
    If there are multiple video tracks in a custom media stack,
    this event is only triggered by the first video track.

*/
- (void) addOnVideoSizeWithBlock:(void(^)(FMLiveSwitchSize*))valueBlock;
/**

    Gets the gain (input amplification) of the audio track.
    Any value greater than or equal to 0.0 is valid. The default value is 1.
    If there are multiple audio tracks in a custom media stack, this property is bound to the first audio track.

*/
- (double) audioGain;
/**

    Gets the interval in milliseconds between FMLiveSwitchMediaBase`2#addOnAudioLevel: events.

*/
- (int) audioLevelInterval;
/**

    Gets a value indicating whether the audio is muted.
    This method silences audio but does not disable the audio source or prevent its data from flowing through the processing pipeline.
    If there are multiple audio tracks in a custom media stack, this property is bound to the first audio track.

*/
- (bool) audioMuted;
/**

    Gets the audio track from this media.
    If there are multiple audio tracks in a custom media stack, this property is bound to the first audio track.
    Returns null if there are no audio tracks.

*/
- (TIAudioTrack) audioTrack;
/**

    Gets all audio tracks from this media.

*/
- (NSMutableArray*) audioTracks;
/**

    Gets the audio volume on the audio track. Valid values range between 0.0 and 1.0. A value of 1.0 indicates that there is no output resistance on the audio and it is played back at the input level. A value of 0.0 mutes the audio.<br />
    If there are multiple audio tracks in a custom media stack, this property is bound to the first audio track.

*/
- (double) audioVolume;
/**

    Destroys this media stack.

*/
- (void) destroy;
/**

    Gets the next raw video frame.
    If there are multiple video tracks in a custom media stack,
    this method calls into the first video track.

    @return A future video buffer.
*/
- (FMLiveSwitchFuture<FMLiveSwitchVideoBuffer*>*) grabVideoFrame;
/**

    Gets the unique identifier of this media.

*/
- (NSString*) id;
/**

    Initializes a new instance of the FMLiveSwitchMediaBase`2 class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMediaBase`2 class.

*/
+ (FMLiveSwitchMediaBase*) mediaBase;
/**

    Removes a handler that is raised when the audio track is destroyed.
    If there are multiple audio tracks in a custom media stack,
    this event is only triggered by the first audio track.

*/
- (void) removeOnAudioDestroyed:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised periodically when the audio's level is calculated.
    If there are multiple audio tracks in a custom media stack,
    this event is only triggered by the first audio track.

*/
- (void) removeOnAudioLevel:(FMLiveSwitchAction1<id>*)value;
/**

    Removes a handler that is raised when the video track is destroyed.
    If there are multiple video tracks in a custom media stack,
    this event is only triggered by the first video track.

*/
- (void) removeOnVideoDestroyed:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised whenever the video's frame size is known, once per frame.
    If there are multiple video tracks in a custom media stack,
    this event is only triggered by the first video track.

*/
- (void) removeOnVideoSize:(FMLiveSwitchAction1<FMLiveSwitchSize*>*)value;
/**

    Removes a handler that is raised whenever the video's frame size changes.
    If there are multiple video tracks in a custom media stack,
    this event is only triggered by the first video track.

*/
- (void) removeOnVideoSizeChange:(FMLiveSwitchAction1<FMLiveSwitchSize*>*)value;
/**

    Sets the gain (input amplification) of the audio track.
    Any value greater than or equal to 0.0 is valid. The default value is 1.
    If there are multiple audio tracks in a custom media stack, this property is bound to the first audio track.

*/
- (void) setAudioGain:(double)value;
/**

    Sets the interval in milliseconds between FMLiveSwitchMediaBase`2#addOnAudioLevel: events.

*/
- (void) setAudioLevelInterval:(int)value;
/**

    Sets a value indicating whether the audio is muted.
    This method silences audio but does not disable the audio source or prevent its data from flowing through the processing pipeline.
    If there are multiple audio tracks in a custom media stack, this property is bound to the first audio track.

*/
- (void) setAudioMuted:(bool)value;
/**

    Sets the audio volume on the audio track. Valid values range between 0.0 and 1.0. A value of 1.0 indicates that there is no output resistance on the audio and it is played back at the input level. A value of 0.0 mutes the audio.<br />
    If there are multiple audio tracks in a custom media stack, this property is bound to the first audio track.

*/
- (void) setAudioVolume:(double)value;
/**

    Sets the unique identifier of this media.

*/
- (void) setId:(NSString*)value;
/**

    Sets a value indicating whether the video track is muted.<br />
    If the video track is muted, then remote users see a black frame instead of the local user’s video.<br />
    If there are multiple video tracks in a custom media stack, this property is bound to the first video track.

*/
- (void) setVideoMuted:(bool)value;
/**

    Gets a value indicating whether the video track is muted.<br />
    If the video track is muted, then remote users see a black frame instead of the local user’s video.<br />
    If there are multiple video tracks in a custom media stack, this property is bound to the first video track.

*/
- (bool) videoMuted;
/**

    Gets the size of the last processed video frame, if known.
    If there are multiple video tracks in a custom media stack,
    this property is bound to the first video track.

*/
- (FMLiveSwitchSize*) videoSize;
/**

    Gets the video track from this media.<br />
    If there are multiple video tracks in a custom media stack, this property is bound to the first video track. Returns null if there are no video tracks.

*/
- (TIVideoTrack) videoTrack;
/**

    Gets all video tracks from this media.

*/
- (NSMutableArray*) videoTracks;

@end

/**

    A collection of audio/video tracks.

*/
@interface FMLiveSwitchMedia<__covariant TAudioTrack, __covariant TVideoTrack> : FMLiveSwitchMediaBase<TAudioTrack,TVideoTrack>

/**

    Adds an audio track.

    @param audioTrack The audio track.
*/
- (void) addAudioTrack:(TAudioTrack)audioTrack;
/**

    Adds a handler that is raised when the audio track is destroyed.<br />
    If there are multiple audio tracks in a custom media stack, only the first audio track triggers this event.

*/
- (void) addOnAudioDestroyed:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised periodically when the audio's level is calculated.<br />
    When the media is in the Started state, the function runs multiple times per second. The frequency depends on the audio sampling rate.<br />
    Use this method to determine which audio streams are active.<br />
    If there are multiple audio tracks in a custom media stack, only the first audio track triggers this event.

*/
- (void) addOnAudioLevel:(FMLiveSwitchAction1<id>*)value;
/**

    Adds a handler that is raised periodically when the audio's level is calculated.<br />
    When the media is in the Started state, the function runs multiple times per second. The frequency depends on the audio sampling rate.<br />
    Use this method to determine which audio streams are active.<br />
    If there are multiple audio tracks in a custom media stack, only the first audio track triggers this event.

*/
- (void (^)(void(^)(double))) addOnAudioLevelWithBlock;
/**

    Adds a handler that is raised periodically when the audio's level is calculated.<br />
    When the media is in the Started state, the function runs multiple times per second. The frequency depends on the audio sampling rate.<br />
    Use this method to determine which audio streams are active.<br />
    If there are multiple audio tracks in a custom media stack, only the first audio track triggers this event.

*/
- (void) addOnAudioLevelWithBlock:(void(^)(double))valueBlock;
/**

    Adds a handler that is raised when the video track is destroyed.<br />
    If there are multiple video tracks in a custom media stack, only the first video track triggers this event.

*/
- (void) addOnVideoDestroyed:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised whenever the video's frame size is known, once per frame.<br />
    If there are multiple video tracks in a custom media stack, only the first video track triggers this event.

*/
- (void) addOnVideoSize:(FMLiveSwitchAction1<FMLiveSwitchSize*>*)value;
/**

    Adds a handler that is raised whenever the video's frame size changes.<br />
    If there are multiple video tracks in a custom media stack, only the first video track triggers this event.

*/
- (void) addOnVideoSizeChange:(FMLiveSwitchAction1<FMLiveSwitchSize*>*)value;
/**

    Adds a handler that is raised whenever the video's frame size changes.<br />
    If there are multiple video tracks in a custom media stack, only the first video track triggers this event.

*/
- (void (^)(void(^)(FMLiveSwitchSize*))) addOnVideoSizeChangeWithBlock;
/**

    Adds a handler that is raised whenever the video's frame size changes.<br />
    If there are multiple video tracks in a custom media stack, only the first video track triggers this event.

*/
- (void) addOnVideoSizeChangeWithBlock:(void(^)(FMLiveSwitchSize*))valueBlock;
/**

    Adds a handler that is raised whenever the video's frame size is known, once per frame.<br />
    If there are multiple video tracks in a custom media stack, only the first video track triggers this event.

*/
- (void (^)(void(^)(FMLiveSwitchSize*))) addOnVideoSizeWithBlock;
/**

    Adds a handler that is raised whenever the video's frame size is known, once per frame.<br />
    If there are multiple video tracks in a custom media stack, only the first video track triggers this event.

*/
- (void) addOnVideoSizeWithBlock:(void(^)(FMLiveSwitchSize*))valueBlock;
/**

    Adds a video track.

    @param videoTrack The video track.
*/
- (void) addVideoTrack:(TVideoTrack)videoTrack;
/**

    Creates an array of tracks from a list of audio tracks.

    @param tracks The list of tracks.
*/
- (NSMutableArray*) arrayFromAudioTracks:(NSMutableArray<TAudioTrack>*)tracks;
/**

    Creates an array of tracks from a list of video tracks.

    @param tracks The list of tracks.
*/
- (NSMutableArray*) arrayFromVideoTracks:(NSMutableArray<TVideoTrack>*)tracks;
/**

    Gets the interval in milliseconds between FMLiveSwitchMedia`2#addOnAudioLevel: events.
    Defaults to 200.

*/
- (int) audioLevelInterval;
/**

    Gets all audio tracks from this media.

*/
- (NSMutableArray*) audioTracks;
/**

    Creates an audio track collection.

*/
- (NSMutableArray<TAudioTrack>*) createAudioTrackCollection;
/**

    Creates a video track collection.

*/
- (NSMutableArray<TVideoTrack>*) createVideoTrackCollection;
/**

    Destroys all non-persistent internal objects encapsulated by the Media class.<br />
    This method iterates over all audio and video tracks and calls each track's Destroy method for non-persistent tracks.

*/
- (void) destroy;
/**

    Gets the next frame from the video track once it is rendered.<br />
    If there are multiple video tracks in a custom media stack, this method calls into the first video track.<br />
    This method could be used for asynchronous video processing or analysis.

    @return A future video buffer.
*/
- (FMLiveSwitchFuture<FMLiveSwitchVideoBuffer*>*) grabVideoFrame;
/**

    Initializes a new instance of the FMLiveSwitchMedia`2 class.

*/
- (instancetype) init;
/**

    Gets whether audio is being recorded locally.

*/
- (bool) isRecordingAudio;
/**

    Gets whether video is being recorded locally.

*/
- (bool) isRecordingVideo;
/**

    Initializes a new instance of the FMLiveSwitchMedia`2 class.

*/
+ (FMLiveSwitchMedia*) media;
/**

    Removes an audio track.

    @param audioTrack The audio track.
*/
- (bool) removeAudioTrack:(TAudioTrack)audioTrack;
/**

    Removes a handler that is raised when the audio track is destroyed.<br />
    If there are multiple audio tracks in a custom media stack, only the first audio track triggers this event.

*/
- (void) removeOnAudioDestroyed:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised periodically when the audio's level is calculated.<br />
    When the media is in the Started state, the function runs multiple times per second. The frequency depends on the audio sampling rate.<br />
    Use this method to determine which audio streams are active.<br />
    If there are multiple audio tracks in a custom media stack, only the first audio track triggers this event.

*/
- (void) removeOnAudioLevel:(FMLiveSwitchAction1<id>*)value;
/**

    Removes a handler that is raised when the video track is destroyed.<br />
    If there are multiple video tracks in a custom media stack, only the first video track triggers this event.

*/
- (void) removeOnVideoDestroyed:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised whenever the video's frame size is known, once per frame.<br />
    If there are multiple video tracks in a custom media stack, only the first video track triggers this event.

*/
- (void) removeOnVideoSize:(FMLiveSwitchAction1<FMLiveSwitchSize*>*)value;
/**

    Removes a handler that is raised whenever the video's frame size changes.<br />
    If there are multiple video tracks in a custom media stack, only the first video track triggers this event.

*/
- (void) removeOnVideoSizeChange:(FMLiveSwitchAction1<FMLiveSwitchSize*>*)value;
/**

    Removes a video track.

    @param videoTrack The video track.
*/
- (bool) removeVideoTrack:(TVideoTrack)videoTrack;
/**

    Sets the interval in milliseconds between FMLiveSwitchMedia`2#addOnAudioLevel: events.
    Defaults to 200.

*/
- (void) setAudioLevelInterval:(int)value;
/**

    Sets whether audio is being recorded locally.

*/
- (void) setIsRecordingAudio:(bool)value;
/**

    Sets whether video is being recorded locally.

*/
- (void) setIsRecordingVideo:(bool)value;
/**

    Gets the size of the video track.<br />
    If there are multiple video tracks in a custom media stack, this property is bound to the first video track.<br />
    If you need to adjust a UI’s layout, use this property to check video dimensions. You can also use OnVideoSize to ensure that the code is responsive.

*/
- (FMLiveSwitchSize*) videoSize;
/**

    Gets all video tracks from this media.

*/
- (NSMutableArray*) videoTracks;

@end

/**

    A collection of local audio/video track base methods.

*/
@interface FMLiveSwitchLocalMediaBase<__covariant TLocalMedia, __covariant TAudioTrack, __covariant TVideoTrack> : FMLiveSwitchMedia<TAudioTrack,TVideoTrack>

/**

    Aborts the start.

    @param promise The promise.
    @param exception The exception.
*/
- (void) abortStartWithPromise:(FMLiveSwitchPromise<TLocalMedia>*)promise exception:(NSException*)exception;
/**

    Gets the local audio encoding configuration. If there are multiple audio tracks in a custom media stack, this method calls into the first audio track.

*/
- (FMLiveSwitchAudioEncodingConfig*) audioEncoding;
/**

    Gets the local audio encoding configurations. Audio encodings cannot be empty, so if you set an encoding with a null value or an empty array, this method creates an empty array with one AudioEncodingConfig in it.<br />
    If a new audio encodings array has the same number of encodings as the current one, the new audio encodings are applied to the local media’s audio track. Otherwise, an exception is thrown because the number of audio encodings cannot be changed once they are set.

*/
- (NSMutableArray*) audioEncodings;
/**

    Gets whether audio simulcast is disabled.

*/
- (bool) audioSimulcastDisabled;
/**

    Gets the maximum number of simulcast encodings that this media produces for the audio stream.<br />
    The number of encodings cannot be changed once they are set.<br />
    This property must be set before the media starts.

*/
- (int) audioSimulcastEncodingCount;
/**

    Gets the preferred audio simulcast bitrate, in kbps.
    The bitrate must be a positive integer.

*/
- (int) audioSimulcastPreferredBitrate;
/**

    Gets the default bits-per-pixel for video.

*/
+ (double) defaultVideoBitsPerPixel;
/**

    Gets the local audio encodings.

    @return The local audio encodings.
*/
- (NSMutableArray*) doGetAudioEncodings;
/**

    Gets the local video encodings.

    @return The local video encodings.
*/
- (NSMutableArray*) doGetVideoEncodings;
/**

    Sets the local audio encodings.

    @param encodings The local audio encodings.
*/
- (void) doSetAudioEncodings:(NSMutableArray*)encodings;
/**

    Sets the local video encodings.

    @param encodings The local video encodings.
*/
- (void) doSetVideoEncodings:(NSMutableArray*)encodings;
/**

    Starts the local media.

*/
- (FMLiveSwitchFuture<TLocalMedia>*) doStart;
/**

    Stops the local media.

*/
- (FMLiveSwitchFuture<TLocalMedia>*) doStop;
/**

    Initializes a new instance of the FMLiveSwitchLocalMediaBase`3 class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchLocalMediaBase`3 class.

*/
+ (FMLiveSwitchLocalMediaBase*) localMediaBase;
/**

    Locks the audio encodings in prior to initialization.

*/
- (void) lockAudioEncodings;
/**

    Locks the video encodings in prior to initialization.

*/
- (void) lockVideoEncodings;
/**

    Locks the video encodings in prior to initialization.

*/
- (void) lockVideoEncodingsWithSourceType:(FMLiveSwitchVideoType)sourceType;
/**

    Locks the video encodings in prior to initialization.

*/
- (void) lockVideoEncodingsWithSourceType:(FMLiveSwitchVideoType)sourceType sourceWidth:(int)sourceWidth sourceHeight:(int)sourceHeight sourceFrameRate:(double)sourceFrameRate;
/**

    Sets the local audio encoding configurations. Audio encodings cannot be empty, so if you set an encoding with a null value or an empty array, this method creates an empty array with one AudioEncodingConfig in it.<br />
    If a new audio encodings array has the same number of encodings as the current one, the new audio encodings are applied to the local media’s audio track. Otherwise, an exception is thrown because the number of audio encodings cannot be changed once they are set.

*/
- (void) setAudioEncodings:(NSMutableArray*)value;
/**

    Sets whether audio simulcast is disabled.

*/
- (void) setAudioSimulcastDisabled:(bool)value;
/**

    Sets the maximum number of simulcast encodings that this media produces for the audio stream.<br />
    The number of encodings cannot be changed once they are set.<br />
    This property must be set before the media starts.

*/
- (void) setAudioSimulcastEncodingCount:(int)value;
/**

    Sets the preferred audio simulcast bitrate, in kbps.
    The bitrate must be a positive integer.

*/
- (void) setAudioSimulcastPreferredBitrate:(int)value;
/**

    Sets the default bits-per-pixel for video.

*/
+ (void) setDefaultVideoBitsPerPixel:(double)value;
/**

    Sets the local video encoding configurations. Video encodings cannot be empty, so if you set the value of this method to null or an empty array, an exception is thrown.<br />
    The number of video encodings cannot be changed once set. If the number of new video encodings is different from the existing number of video encodings, an error is thrown. If a new video encoding array has the same number of encodings as the current one, the encodings are applied to the media’s VP8, VP9, H.264, and H.265 controllers, converters, encoders, and packetizers.<br />
    For controllers which inherit from FrameRatePipe, that means setting controller.OutputSynchronizationSource to the encoding.SynchronizationSource. If the encoding.FrameRate is greater than zero, this sets the controller.MaxFrameRate and controller.TargetFrameRate to the encoding.FrameRate.<br />
    For converters which are the ImageScalePipe type, that means setting converter.MaxScale and converter.TargetScale to encoding.Scale, as long as encoding.Scale is greater than zero.<br />
    For encoders, if the encoder's output format is not a fixed bitrate and encoding.Bitrate is greater than zero, that means setting the encoder.MaxBitrate and encoder.TargetBitrate to encoding.Bitrate.<br />
    For packetizers, that means setting packetizer.Deactivated to encoding.Deactivated.

*/
- (void) setVideoEncodings:(NSMutableArray*)value;
/**

    Sets the video simulcast bits per pixel (bpp). The bits per pixel value must be greater than or equal to zero.<br />
    If the video source has declared a target width, height, and frame rate, and VideoSimulcastBitsPerPixel has a set value, then the encoding bitrates are calculated with setVideoSimulcastBitsPerPixel’s value instead of the preferred bitrate.

*/
- (void) setVideoSimulcastBitsPerPixel:(double)value;
/**

    Sets the video’s simulcast degradation preference.<br />
    The following degradation preferences can be set:<br />
    Automatic: Prefers to automate degradation based on video type. A Screen video type prefers to degrade FrameRate. A Camera video type prefers to degrade Resolution. An unknown video type prefers a Balanced approach.<br />
    Balanced: Prefers to degrade both FrameRate and Resolution together in smaller increments.<br />
    FrameRate: Prefers to degrade FrameRate instead of Resolution.<br />
    Resolution: Prefers to degrade Resolution instead of FrameRate.

*/
- (void) setVideoSimulcastDegradationPreference:(FMLiveSwitchVideoDegradationPreference)value;
/**

    Sets whether video simulcast is disabled. If true, video simulcast is disabled. If false, video simulcast is enabled.

*/
- (void) setVideoSimulcastDisabled:(bool)value;
/**

    Sets the maximum number of simulcast encodings that this LocalMedia produces for the video stream. The default value is 2. For LiveSwitch Media Server, the maximum is 3 encodings. This property must be set before the LocalMedia starts.

*/
- (void) setVideoSimulcastEncodingCount:(int)value;
/**

    Sets the preferred bitrate of a video simulcast in Kbps. The bitrate must be a positive integer.

*/
- (void) setVideoSimulcastPreferredBitrate:(int)value;
/**

    Starts media track sources. This method does not take any parameters and executes asynchronously. Call this method when LocalMedia's state is New or Stopped. If you call this method when LocalMedia's state is not New or Stopped, then the Future returned by this method is rejected.

*/
- (FMLiveSwitchFuture<TLocalMedia>*) start;
/**

    Gets the current state of this media. The possible states are defined in the enumeration LocalMediaState. Use this property to check if, for example, the media instance is starting, has started, is stopping, or has stopped.

*/
- (FMLiveSwitchLocalMediaState) state;
/**

    Stops media track sources. This method does not take any parameters and executes asynchronously. Call this method when LocalMedia has started. If you call this method when LocalMedia has not started, then the Future returned by this method is rejected.

*/
- (FMLiveSwitchFuture<TLocalMedia>*) stop;
/**

    Gets the local video encoding configuration.<br />
    If there are multiple video tracks in a custom media stack, this method calls into the first video track. Returns the local VideoEncodingConfig.

*/
- (FMLiveSwitchVideoEncodingConfig*) videoEncoding;
/**

    Gets the local video encoding configurations. Video encodings cannot be empty, so if you set the value of this method to null or an empty array, an exception is thrown.<br />
    The number of video encodings cannot be changed once set. If the number of new video encodings is different from the existing number of video encodings, an error is thrown. If a new video encoding array has the same number of encodings as the current one, the encodings are applied to the media’s VP8, VP9, H.264, and H.265 controllers, converters, encoders, and packetizers.<br />
    For controllers which inherit from FrameRatePipe, that means setting controller.OutputSynchronizationSource to the encoding.SynchronizationSource. If the encoding.FrameRate is greater than zero, this sets the controller.MaxFrameRate and controller.TargetFrameRate to the encoding.FrameRate.<br />
    For converters which are the ImageScalePipe type, that means setting converter.MaxScale and converter.TargetScale to encoding.Scale, as long as encoding.Scale is greater than zero.<br />
    For encoders, if the encoder's output format is not a fixed bitrate and encoding.Bitrate is greater than zero, that means setting the encoder.MaxBitrate and encoder.TargetBitrate to encoding.Bitrate.<br />
    For packetizers, that means setting packetizer.Deactivated to encoding.Deactivated.

*/
- (NSMutableArray*) videoEncodings;
/**

    Gets the video simulcast bits per pixel (bpp). The bits per pixel value must be greater than or equal to zero.<br />
    If the video source has declared a target width, height, and frame rate, and VideoSimulcastBitsPerPixel has a set value, then the encoding bitrates are calculated with setVideoSimulcastBitsPerPixel’s value instead of the preferred bitrate.

*/
- (double) videoSimulcastBitsPerPixel;
/**

    Gets the video’s simulcast degradation preference.<br />
    The following degradation preferences can be set:<br />
    Automatic: Prefers to automate degradation based on video type. A Screen video type prefers to degrade FrameRate. A Camera video type prefers to degrade Resolution. An unknown video type prefers a Balanced approach.<br />
    Balanced: Prefers to degrade both FrameRate and Resolution together in smaller increments.<br />
    FrameRate: Prefers to degrade FrameRate instead of Resolution.<br />
    Resolution: Prefers to degrade Resolution instead of FrameRate.

*/
- (FMLiveSwitchVideoDegradationPreference) videoSimulcastDegradationPreference;
/**

    Gets whether video simulcast is disabled. If true, video simulcast is disabled. If false, video simulcast is enabled.

*/
- (bool) videoSimulcastDisabled;
/**

    Gets the maximum number of simulcast encodings that this LocalMedia produces for the video stream. The default value is 2. For LiveSwitch Media Server, the maximum is 3 encodings. This property must be set before the LocalMedia starts.

*/
- (int) videoSimulcastEncodingCount;
/**

    Gets the preferred bitrate of a video simulcast in Kbps. The bitrate must be a positive integer.

*/
- (int) videoSimulcastPreferredBitrate;

@end

/**

    A collection of local audio/video tracks.

*/
@interface FMLiveSwitchLocalMedia : FMLiveSwitchLocalMediaBase<FMLiveSwitchLocalMedia*,FMLiveSwitchAudioTrack*,FMLiveSwitchVideoTrack*><FMLiveSwitchILocalMedia, FMLiveSwitchIMedia>

/**

    Adds the audio track.

    @param audioTrack The audio track.
*/
- (void) addAudioTrack:(FMLiveSwitchAudioTrack*)audioTrack;
/**

    Adds a handler that is raised when the audio source is muted.

*/
- (void) addOnAudioMuted:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the first audio track is started.

*/
- (void) addOnAudioStarted:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the first audio track is stopped.

*/
- (void) addOnAudioStopped:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the audio source is unmuted.

*/
- (void) addOnAudioUnmuted:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the video source is muted.

*/
- (void) addOnVideoMuted:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the first video track is started.

*/
- (void) addOnVideoStarted:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the first video track is stopped.

*/
- (void) addOnVideoStopped:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the video source is unmuted.

*/
- (void) addOnVideoUnmuted:(FMLiveSwitchAction0*)value;
/**

    Adds the video track.

    @param videoTrack The video track.
*/
- (void) addVideoTrack:(FMLiveSwitchVideoTrack*)videoTrack;
/**

    Creates an array of tracks from a list of audio tracks.

    @param tracks The list of tracks.
*/
- (NSMutableArray*) arrayFromAudioTracks:(NSMutableArray<FMLiveSwitchAudioTrack*>*)tracks;
/**

    Creates an array of tracks from a list of video tracks.

    @param tracks The list of tracks.
*/
- (NSMutableArray*) arrayFromVideoTracks:(NSMutableArray<FMLiveSwitchVideoTrack*>*)tracks;
/**

    Gets the audio source.

*/
- (FMLiveSwitchAudioSource*) audioSource;
/**

    Gets the current audio source input of the audio track.<br />
    If there are multiple audio tracks in a custom media stack, this property is bound to the first audio track.<br />
    The audio source input can only be set before the media has started. If the audio source input is not set, then the default input device is used.<br />
    If you want to change the input after the media has started, call ChangeAudioSourceInput instead. ChangeAudioSourceInput stops the current audio input and switch to the new input.

*/
- (FMLiveSwitchSourceInput*) audioSourceInput;
/**

    Gets the audio sources.

*/
- (NSMutableArray*) audioSources;
/**

    Changes the audio source input of the audio track while the media is active. If there are multiple audio tracks in a custom media stack, this method calls into the first audio track.<br />
    For example, this method can be used to change the audio source's input on a laptop from the device microphone to a USB headset.

    @param audioSourceInput The audio source input.
*/
- (FMLiveSwitchFuture<id>*) changeAudioSourceInput:(FMLiveSwitchSourceInput*)audioSourceInput;
/**

    Changes the video source input of the video track while the media is active. If there are multiple video tracks in a custom media stack, this method calls into the first video track.<br />
    For example, this method can be used to change the video source’s input on a mobile device from a front to a back camera.

    @param videoSourceInput The video source input.
*/
- (FMLiveSwitchFuture<id>*) changeVideoSourceInput:(FMLiveSwitchSourceInput*)videoSourceInput;
/**

    Creates an audio track collection.

*/
- (NSMutableArray<FMLiveSwitchAudioTrack*>*) createAudioTrackCollection;
/**

    Creates a video track collection.

*/
- (NSMutableArray<FMLiveSwitchVideoTrack*>*) createVideoTrackCollection;
/**

    Gets the array of local audio encoding configurations.

    @return The local audio encodings.
*/
- (NSMutableArray*) doGetAudioEncodings;
/**

    Gets the local video encodings.

    @return The local video encodings.
*/
- (NSMutableArray*) doGetVideoEncodings;
/**

    Sets the local audio encodings.

    @param encodings The local audio encodings.
*/
- (void) doSetAudioEncodings:(NSMutableArray*)encodings;
/**

    Sets the local video encodings.

    @param encodings The local video encodings.
*/
- (void) doSetVideoEncodings:(NSMutableArray*)encodings;
/**

    Starts the local media.

*/
- (FMLiveSwitchFuture<FMLiveSwitchLocalMedia*>*) doStart;
/**

    Stops the local media.

*/
- (FMLiveSwitchFuture<FMLiveSwitchLocalMedia*>*) doStop;
/**

    Gets a list of the names and IDs of currently available audio devices.<br />

    @return 
            A future with an array of audio source inputs.
            
*/
- (FMLiveSwitchFuture<NSMutableArray*>*) getAudioSourceInputs;
/**

    Gets a list of the names and IDs of currently available video devices.<br />

    @return 
            A future with an array of video source inputs.
            
*/
- (FMLiveSwitchFuture<NSMutableArray*>*) getVideoSourceInputs;
- (instancetype) init;
+ (FMLiveSwitchLocalMedia*) localMedia;
/**

    Gets the audio/video sources.

*/
- (NSMutableArray*) mediaSources;
/**

    Removes the audio track.

    @param audioTrack The audio track.
*/
- (bool) removeAudioTrack:(FMLiveSwitchAudioTrack*)audioTrack;
/**

    Removes a handler that is raised when the audio source is muted.

*/
- (void) removeOnAudioMuted:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the first audio track is started.

*/
- (void) removeOnAudioStarted:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the first audio track is stopped.

*/
- (void) removeOnAudioStopped:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the audio source is unmuted.

*/
- (void) removeOnAudioUnmuted:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the video source is muted.

*/
- (void) removeOnVideoMuted:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the first video track is started.

*/
- (void) removeOnVideoStarted:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the first video track is stopped.

*/
- (void) removeOnVideoStopped:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the video source is unmuted.

*/
- (void) removeOnVideoUnmuted:(FMLiveSwitchAction0*)value;
/**

    Removes the video track.

    @param videoTrack The video track.
*/
- (bool) removeVideoTrack:(FMLiveSwitchVideoTrack*)videoTrack;
/**

    Sets the current audio source input of the audio track.<br />
    If there are multiple audio tracks in a custom media stack, this property is bound to the first audio track.<br />
    The audio source input can only be set before the media has started. If the audio source input is not set, then the default input device is used.<br />
    If you want to change the input after the media has started, call ChangeAudioSourceInput instead. ChangeAudioSourceInput stops the current audio input and switch to the new input.

*/
- (void) setAudioSourceInput:(FMLiveSwitchSourceInput*)value;
/**

    Sets the current video source input of the video track.<br />
    If there are multiple video tracks in a custom media stack, this property is bound to the first video track.<br />
    The video source input can only be set before the media has started. If the video source input is not set, then the default input device is used.<br />
    If you want to change the input after the media has started, call ChangeVideoSourceInput instead. ChangeVideoSourceInput stops the current audio input and switch to the new input.

*/
- (void) setVideoSourceInput:(FMLiveSwitchSourceInput*)value;
/**

    Gets the video source.

*/
- (FMLiveSwitchVideoSource*) videoSource;
/**

    Gets the current video source input of the video track.<br />
    If there are multiple video tracks in a custom media stack, this property is bound to the first video track.<br />
    The video source input can only be set before the media has started. If the video source input is not set, then the default input device is used.<br />
    If you want to change the input after the media has started, call ChangeVideoSourceInput instead. ChangeVideoSourceInput stops the current audio input and switch to the new input.

*/
- (FMLiveSwitchSourceInput*) videoSourceInput;
/**

    Gets the video sources.

*/
- (NSMutableArray*) videoSources;

@end

@interface FMLiveSwitchLocalMediaStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchLocalMediaState)value;

@end

/**

    A Matroska EBML Attachments element.

*/
@interface FMLiveSwitchMatroskaAttachments : FMLiveSwitchMatroskaElement

+ (FMLiveSwitchMatroskaAttachments*) attachments;
/**

    Gets the EBML ID.

*/
+ (NSMutableData*) ebmlId;
/**

    Gets the inner bytes.

*/
- (NSMutableData*) getInnerBytes;
/**

    Gets the EBML ID.

*/
- (NSMutableData*) id;
- (instancetype) init;

@end

/**

    A Matroska audio element.

*/
@interface FMLiveSwitchMatroskaAudio : FMLiveSwitchMatroskaElement

/**

    Initializes a new instance of the FMLiveSwitchMatroskaAudio class.

*/
+ (FMLiveSwitchMatroskaAudio*) audio;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaAudio class.

    @param bytes The bytes.
*/
+ (FMLiveSwitchMatroskaAudio*) audioWithBytes:(NSMutableData*)bytes;
/**

    Gets the bit depth.

*/
- (FMLiveSwitchNullableLong*) bitDepth;
/**

    Gets the channels.
    Defaults to 1.

*/
- (long long) channels;
/**

    Gets the default channels.

*/
+ (long long) defaultChannels;
/**

    Gets the default sampling frequency.

*/
+ (float) defaultSamplingFrequency;
/**

    Gets the EBML ID.

*/
+ (NSMutableData*) ebmlId;
/**

    Gets the inner bytes.

*/
- (NSMutableData*) getInnerBytes;
/**

    Gets the EBML ID.

*/
- (NSMutableData*) id;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaAudio class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaAudio class.

    @param bytes The bytes.
*/
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/**

    Gets the output sampling frequency.

*/
- (FMLiveSwitchNullableFloat*) outputSamplingFrequency;
/**

    Gets the sampling frequency.
    Defaults to 8000.

*/
- (float) samplingFrequency;
/**

    Sets the bit depth.

*/
- (void) setBitDepth:(FMLiveSwitchNullableLong*)value;
/**

    Sets the channels.
    Defaults to 1.

*/
- (void) setChannels:(long long)value;
/**

    Sets the output sampling frequency.

*/
- (void) setOutputSamplingFrequency:(FMLiveSwitchNullableFloat*)value;
/**

    Sets the sampling frequency.
    Defaults to 8000.

*/
- (void) setSamplingFrequency:(float)value;

@end

/**

    A Matroska audio recorder.

*/
@interface FMLiveSwitchMatroskaAudioRecorder : FMLiveSwitchAudioRecorder

/**

    Initializes a new instance of the FMLiveSwitchMatroskaAudioRecorder class.

    @param path The path.
    @param inputFormat The input format.
*/
+ (FMLiveSwitchMatroskaAudioRecorder*) audioRecorderWithPath:(NSString*)path inputFormat:(FMLiveSwitchAudioFormat*)inputFormat;
/**

    Updates the file header.

*/
- (void) doUpdateHeader;
/**

    Writes the file header.

*/
- (void) doWriteHeader;
/**

    Write an encoded video frame.

    @param buffer The encoded buffer.
    @param presentationTimestamp The presentation timestamp.
    @return `true` if the encoded frame was written successfully; otherwise, `false`
*/
- (bool) doWriteWithBuffer:(FMLiveSwitchAudioBuffer*)buffer presentationTimestamp:(long long)presentationTimestamp;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaAudioRecorder class.

    @param path The path.
    @param inputFormat The input format.
*/
- (instancetype) initWithPath:(NSString*)path inputFormat:(FMLiveSwitchAudioFormat*)inputFormat;

@end

/**

    A Matroska-file-based audio sink.

*/
@interface FMLiveSwitchMatroskaAudioSink : FMLiveSwitchAudioSink

/**

    Adds a handler that is raised when an existing file is close in response to
    this sink being deactivated or destroyed.

*/
- (void) addOnFileClose:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when a new file is opened in response to
    this sink being activated and processing a frame.

*/
- (void) addOnFileOpen:(FMLiveSwitchAction0*)value;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaAudioSink class.

    @param path The path.
*/
+ (FMLiveSwitchMatroskaAudioSink*) audioSinkWithPath:(NSString*)path;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaAudioSink class.

    @param path The path.
    @param format The format.
*/
+ (FMLiveSwitchMatroskaAudioSink*) audioSinkWithPath:(NSString*)path format:(FMLiveSwitchAudioFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaAudioSink class.

    @param path The path.
    @param input The input.
*/
+ (FMLiveSwitchMatroskaAudioSink*) audioSinkWithPath:(NSString*)path input:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Gets the base timestamp - the timestamp of the first frame
    processed by the recorder after being activated. This timestamp
    will change each time a new file is created in response to the
    sink being activated.

*/
- (long long) baseTimestamp;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchAudioFrame*)frame inputBuffer:(FMLiveSwitchAudioBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaAudioSink class.

    @param path The path.
*/
- (instancetype) initWithPath:(NSString*)path;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaAudioSink class.

    @param path The path.
    @param format The format.
*/
- (instancetype) initWithPath:(NSString*)path format:(FMLiveSwitchAudioFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaAudioSink class.

    @param path The path.
    @param input The input.
*/
- (instancetype) initWithPath:(NSString*)path input:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets the last known file path.

*/
- (NSString*) lastFilePath;
/**

    Gets the last timestamp processed by the recorder.

*/
- (long long) lastTimestamp;
/**

    Gets the currently open file path.

*/
- (NSString*) openFilePath;
/**

    Gets the path.

*/
- (NSString*) path;
/**

    Removes a handler that is raised when an existing file is close in response to
    this sink being deactivated or destroyed.

*/
- (void) removeOnFileClose:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when a new file is opened in response to
    this sink being activated and processing a frame.

*/
- (void) removeOnFileOpen:(FMLiveSwitchAction0*)value;

@end

/**

    A Matroska block element.

*/
@interface FMLiveSwitchMatroskaBlock : FMLiveSwitchMatroskaElement

/**

    Initializes a new instance of the FMLiveSwitchMatroskaBlock class.

*/
+ (FMLiveSwitchMatroskaBlock*) block;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaBlock class.

    @param bytes The bytes.
*/
+ (FMLiveSwitchMatroskaBlock*) blockWithBytes:(NSMutableData*)bytes;
/**

    Gets the data.

*/
- (NSMutableData*) data;
/**

    Gets the EBML ID.

*/
+ (NSMutableData*) ebmlId;
/**

    Gets the flags.

*/
- (uint8_t) flags;
/**

    Gets the inner bytes.

*/
- (NSMutableData*) getInnerBytes;
/**

    Gets the EBML ID.

*/
- (NSMutableData*) id;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaBlock class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaBlock class.

    @param bytes The bytes.
*/
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/**

    Sets the data.

*/
- (void) setData:(NSMutableData*)value;
/**

    Sets the flags.

*/
- (void) setFlags:(uint8_t)value;
/**

    Sets the timecode.

*/
- (void) setTimecode:(int)value;
/**

    Sets the track number.

*/
- (void) setTrackNumber:(long long)value;
/**

    Gets the timecode.

*/
- (int) timecode;
/**

    Gets the track number.

*/
- (long long) trackNumber;

@end

/**

    Valid Matroska block element flags.

*/
@interface FMLiveSwitchMatroskaBlockFlags : NSObject

+ (FMLiveSwitchMatroskaBlockFlags*) blockFlags;
/**

    Gets a value indicating EBML lacing.

*/
+ (uint8_t) ebmlLacing;
/**

    Gets a value indicating fixed size lacing.

*/
+ (uint8_t) fixedSizeLacing;
- (instancetype) init;
/**

    Gets a value indicating invisible.

*/
+ (uint8_t) invisible;
/**

    Gets a value indicating no lacing.

*/
+ (uint8_t) noLacing;
/**

    Gets a value indicating Xiph lacing.

*/
+ (uint8_t) xiphLacing;

@end

/**

    A Matroska block group element.

*/
@interface FMLiveSwitchMatroskaBlockGroup : FMLiveSwitchMatroskaElement

/**

    Gets the block element.

*/
- (FMLiveSwitchMatroskaBlock*) block;
/**

    Gets the duration of the block.

*/
- (FMLiveSwitchNullableLong*) blockDuration;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaBlockGroup class.

*/
+ (FMLiveSwitchMatroskaBlockGroup*) blockGroup;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaBlockGroup class.

    @param bytes The bytes.
*/
+ (FMLiveSwitchMatroskaBlockGroup*) blockGroupWithBytes:(NSMutableData*)bytes;
/**

    Gets the duration in nanoseconds of the silent data added to the block.

*/
- (FMLiveSwitchNullableLong*) discardPadding;
/**

    Gets the EBML ID.

*/
+ (NSMutableData*) ebmlId;
/**

    Gets the inner bytes.

*/
- (NSMutableData*) getInnerBytes;
/**

    Gets the EBML ID.

*/
- (NSMutableData*) id;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaBlockGroup class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaBlockGroup class.

    @param bytes The bytes.
*/
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/**

    Gets the reference blocks.

*/
- (NSMutableArray*) referenceBlocks;
/**

    Sets the block element.

*/
- (void) setBlock:(FMLiveSwitchMatroskaBlock*)value;
/**

    Sets the duration of the block.

*/
- (void) setBlockDuration:(FMLiveSwitchNullableLong*)value;
/**

    Sets the duration in nanoseconds of the silent data added to the block.

*/
- (void) setDiscardPadding:(FMLiveSwitchNullableLong*)value;
/**

    Sets the reference blocks.

*/
- (void) setReferenceBlocks:(NSMutableArray*)value;

@end

/**

    A Matroska EBML Chapters element.

*/
@interface FMLiveSwitchMatroskaChapters : FMLiveSwitchMatroskaElement

+ (FMLiveSwitchMatroskaChapters*) chapters;
/**

    Gets the EBML ID.

*/
+ (NSMutableData*) ebmlId;
/**

    Gets the inner bytes.

*/
- (NSMutableData*) getInnerBytes;
/**

    Gets the EBML ID.

*/
- (NSMutableData*) id;
- (instancetype) init;

@end

/**

    A Matroska cluster element.

*/
@interface FMLiveSwitchMatroskaCluster : FMLiveSwitchMatroskaElement

/**

    Gets the block group elements.

*/
- (NSMutableArray*) blockGroups;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaCluster class.

*/
+ (FMLiveSwitchMatroskaCluster*) cluster;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaCluster class.

    @param bytes The bytes.
*/
+ (FMLiveSwitchMatroskaCluster*) clusterWithBytes:(NSMutableData*)bytes;
/**

    Gets the default timecode.

*/
+ (long long) defaultTimecode;
/**

    Gets the EBML ID.

*/
+ (NSMutableData*) ebmlId;
/**

    Gets the inner bytes.

*/
- (NSMutableData*) getInnerBytes;
/**

    Gets the EBML ID.

*/
- (NSMutableData*) id;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaCluster class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaCluster class.

    @param bytes The bytes.
*/
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/**

    Merges another FMLiveSwitchMatroskaCluster into this one.

    @param cluster The FMLiveSwitchMatroskaCluster.
*/
- (void) mergeWithCluster:(FMLiveSwitchMatroskaCluster*)cluster;
/**

    Gets the position.

*/
- (FMLiveSwitchNullableLong*) position;
/**

    Gets the previous size.

*/
- (FMLiveSwitchNullableLong*) prevSize;
/**

    Sets the block group elements.

*/
- (void) setBlockGroups:(NSMutableArray*)value;
/**

    Sets the position.

*/
- (void) setPosition:(FMLiveSwitchNullableLong*)value;
/**

    Sets the previous size.

*/
- (void) setPrevSize:(FMLiveSwitchNullableLong*)value;
/**

    Sets the simple block elements.

*/
- (void) setSimpleBlocks:(NSMutableArray*)value;
/**

    Sets the timecode.

*/
- (void) setTimecode:(long long)value;
/**

    Gets the simple block elements.

*/
- (NSMutableArray*) simpleBlocks;
/**

    Gets the timecode.

*/
- (long long) timecode;

@end

/**

    Valid Matroska content compression element algorithms.

*/
@interface FMLiveSwitchMatroskaContentCompAlgo : NSObject

/**

    Gets a value indicating bzlib.

*/
+ (long long) bzlib;
+ (FMLiveSwitchMatroskaContentCompAlgo*) contentCompAlgo;
/**

    Gets a value indicating header striping.

*/
+ (long long) headerStriping;
- (instancetype) init;
/**

    Gets a value indicating lzo1x.

*/
+ (long long) lzo1x;
/**

    Gets a value indicating zlib.

*/
+ (long long) zlib;

@end

/**

    A Matroska content compression element.

*/
@interface FMLiveSwitchMatroskaContentCompression : FMLiveSwitchMatroskaElement

/**

    Gets the content compression algorithm.

*/
- (long long) contentCompAlgo;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaContentCompression class.

*/
+ (FMLiveSwitchMatroskaContentCompression*) contentCompression;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaContentCompression class.

    @param bytes The bytes.
*/
+ (FMLiveSwitchMatroskaContentCompression*) contentCompressionWithBytes:(NSMutableData*)bytes;
/**

    Gets the content compression settings.

*/
- (NSMutableData*) contentCompSettings;
/**

    Gets the default content compression algorithm.

*/
+ (long long) defaultContentCompAlgo;
/**

    Gets the EBML ID.

*/
+ (NSMutableData*) ebmlId;
/**

    Gets the inner bytes.

*/
- (NSMutableData*) getInnerBytes;
/**

    Gets the EBML ID.

*/
- (NSMutableData*) id;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaContentCompression class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaContentCompression class.

    @param bytes The bytes.
*/
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/**

    Sets the content compression algorithm.

*/
- (void) setContentCompAlgo:(long long)value;
/**

    Sets the content compression settings.

*/
- (void) setContentCompSettings:(NSMutableData*)value;

@end

/**

    A Matroska content encoding element.

*/
@interface FMLiveSwitchMatroskaContentEncoding : FMLiveSwitchMatroskaElement

/**

    Gets the content compression element.

*/
- (FMLiveSwitchMatroskaContentCompression*) contentCompression;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaContentEncoding class.

*/
+ (FMLiveSwitchMatroskaContentEncoding*) contentEncoding;
/**

    Gets the content encoding order.

*/
- (long long) contentEncodingOrder;
/**

    Gets the content encoding scope.

*/
- (long long) contentEncodingScope;
/**

    Gets the content encoding type.

*/
- (long long) contentEncodingType;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaContentEncoding class.

    @param bytes The bytes.
*/
+ (FMLiveSwitchMatroskaContentEncoding*) contentEncodingWithBytes:(NSMutableData*)bytes;
/**

    Gets the default content encoding order.

*/
+ (long long) defaultContentEncodingOrder;
/**

    Gets the default content encoding scope.

*/
+ (long long) defaultContentEncodingScope;
/**

    Gets the default content encoding type.

*/
+ (long long) defaultContentEncodingType;
/**

    Gets the EBML ID.

*/
+ (NSMutableData*) ebmlId;
/**

    Gets the inner bytes.

*/
- (NSMutableData*) getInnerBytes;
/**

    Gets the EBML ID.

*/
- (NSMutableData*) id;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaContentEncoding class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaContentEncoding class.

    @param bytes The bytes.
*/
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/**

    Sets the content compression element.

*/
- (void) setContentCompression:(FMLiveSwitchMatroskaContentCompression*)value;
/**

    Sets the content encoding order.

*/
- (void) setContentEncodingOrder:(long long)value;
/**

    Sets the content encoding scope.

*/
- (void) setContentEncodingScope:(long long)value;
/**

    Sets the content encoding type.

*/
- (void) setContentEncodingType:(long long)value;

@end

/**

    A Matroska content encodings element.

*/
@interface FMLiveSwitchMatroskaContentEncodings : FMLiveSwitchMatroskaElement

/**

    Gets the content encoding elements.

*/
- (NSMutableArray*) contentEncodingElements;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaContentEncodings class.

*/
+ (FMLiveSwitchMatroskaContentEncodings*) contentEncodings;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaContentEncodings class.

    @param bytes The bytes.
*/
+ (FMLiveSwitchMatroskaContentEncodings*) contentEncodingsWithBytes:(NSMutableData*)bytes;
/**

    Gets the EBML ID.

*/
+ (NSMutableData*) ebmlId;
/**

    Gets the inner bytes.

*/
- (NSMutableData*) getInnerBytes;
/**

    Gets the EBML ID.

*/
- (NSMutableData*) id;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaContentEncodings class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaContentEncodings class.

    @param bytes The bytes.
*/
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/**

    Sets the content encoding elements.

*/
- (void) setContentEncodingElements:(NSMutableArray*)value;

@end

/**

    Valid Matroska content encoding element scopes.

*/
@interface FMLiveSwitchMatroskaContentEncodingScope : NSObject

/**

    Gets a value indicating all.

*/
+ (long long) all;
/**

    Gets a value indicating codec private.

*/
+ (long long) codecPrivate;
/**

    Gets a value indicating content compression in next content encoding.

*/
+ (long long) contentCompressionInNextContentEncoding;
+ (FMLiveSwitchMatroskaContentEncodingScope*) contentEncodingScope;
- (instancetype) init;

@end

/**

    A Matroska EBML Cues element.

*/
@interface FMLiveSwitchMatroskaCues : FMLiveSwitchMatroskaElement

+ (FMLiveSwitchMatroskaCues*) cues;
/**

    Gets the EBML ID.

*/
+ (NSMutableData*) ebmlId;
/**

    Gets the inner bytes.

*/
- (NSMutableData*) getInnerBytes;
/**

    Gets the EBML ID.

*/
- (NSMutableData*) id;
- (instancetype) init;

@end

/**

    A Matroska EBML element.

*/
@interface FMLiveSwitchMatroskaEbml : FMLiveSwitchMatroskaElement

/**

    Gets the default document type.

*/
+ (NSString*) defaultDocType;
/**

    Gets the default document type read version.

*/
+ (long long) defaultDocTypeReadVersion;
/**

    Gets the default document type version.

*/
+ (long long) defaultDocTypeVersion;
/**

    Gets the default EBML maximum identifier length.

*/
+ (long long) defaultEbmlMaxIdLength;
/**

    Gets the default EBML maximum size length.

*/
+ (long long) defaultEbmlMaxSizeLength;
/**

    Gets the default EBML read version.

*/
+ (long long) defaultEbmlReadVersion;
/**

    Gets the default EBML version.

*/
+ (long long) defaultEbmlVersion;
/**

    Gets the document type.

*/
- (NSString*) docType;
/**

    Gets the document type read version.

*/
- (long long) docTypeReadVersion;
/**

    Gets the document type version.

*/
- (long long) docTypeVersion;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaEbml class.

*/
+ (FMLiveSwitchMatroskaEbml*) ebml;
/**

    Gets the EBML ID.

*/
+ (NSMutableData*) ebmlId;
/**

    Gets the EBML maximum identifier length.

*/
- (long long) ebmlMaxIdLength;
/**

    Gets the EBML maximum size length.

*/
- (long long) ebmlMaxSizeLength;
/**

    Gets the EBML read version.

*/
- (long long) ebmlReadVersion;
/**

    Gets the EBML version.

*/
- (long long) ebmlVersion;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaEbml class.

    @param bytes The bytes.
*/
+ (FMLiveSwitchMatroskaEbml*) ebmlWithBytes:(NSMutableData*)bytes;
/**

    Gets the inner bytes.

*/
- (NSMutableData*) getInnerBytes;
/**

    Gets the EBML ID.

*/
- (NSMutableData*) id;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaEbml class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaEbml class.

    @param bytes The bytes.
*/
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/**

    Merges another FMLiveSwitchMatroskaEbml into this one.

    @param ebml The FMLiveSwitchMatroskaEbml.
*/
- (void) mergeWithEbml:(FMLiveSwitchMatroskaEbml*)ebml;
/**

    Sets the document type.

*/
- (void) setDocType:(NSString*)value;
/**

    Sets the document type read version.

*/
- (void) setDocTypeReadVersion:(long long)value;
/**

    Sets the document type version.

*/
- (void) setDocTypeVersion:(long long)value;
/**

    Sets the EBML maximum identifier length.

*/
- (void) setEbmlMaxIdLength:(long long)value;
/**

    Sets the EBML maximum size length.

*/
- (void) setEbmlMaxSizeLength:(long long)value;
/**

    Sets the EBML read version.

*/
- (void) setEbmlReadVersion:(long long)value;
/**

    Sets the EBML version.

*/
- (void) setEbmlVersion:(long long)value;

@end

/**

    A Matroska EBML CRC-32 element.

*/
@interface FMLiveSwitchMatroskaEbmlCrc32 : FMLiveSwitchMatroskaElement

/**

    Gets the data.

*/
- (NSMutableData*) data;
+ (FMLiveSwitchMatroskaEbmlCrc32*) ebmlCrc32;
/**

    Gets the EBML ID.

*/
+ (NSMutableData*) ebmlId;
/**

    Gets the inner bytes.

*/
- (NSMutableData*) getInnerBytes;
/**

    Gets the EBML ID.

*/
- (NSMutableData*) id;
- (instancetype) init;
/**

    Sets the data.

*/
- (void) setData:(NSMutableData*)value;

@end

/**

    A Matroska EBML void element.

*/
@interface FMLiveSwitchMatroskaEbmlVoid : FMLiveSwitchMatroskaElement

/**

    Gets the EBML ID.

*/
+ (NSMutableData*) ebmlId;
+ (FMLiveSwitchMatroskaEbmlVoid*) ebmlVoid;
/**

    Gets the inner bytes.

*/
- (NSMutableData*) getInnerBytes;
/**

    Gets the EBML ID.

*/
- (NSMutableData*) id;
- (instancetype) init;

@end

/**

    A Matroska file.

*/
@interface FMLiveSwitchMatroskaFile : NSObject

/**

    Gets the EBML element.

*/
- (FMLiveSwitchMatroskaEbml*) ebml;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaFile class.

*/
+ (FMLiveSwitchMatroskaFile*) file;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaFile class.

    @param bytes The bytes.
*/
+ (FMLiveSwitchMatroskaFile*) fileWithBytes:(NSMutableData*)bytes;
/**

    Serializes to a byte array.

*/
- (NSMutableData*) getBytes;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaFile class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaFile class.

    @param bytes The bytes.
*/
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/**

    Merges another FMLiveSwitchMatroskaFile into this one.

    @param file The FMLiveSwitchMatroskaFile.
*/
- (void) mergeWithFile:(FMLiveSwitchMatroskaFile*)file;
/**

    Gets the segment element.

*/
- (FMLiveSwitchMatroskaSegment*) segment;
/**

    Sets the EBML element.

*/
- (void) setEbml:(FMLiveSwitchMatroskaEbml*)value;
/**

    Sets the segment element.

*/
- (void) setSegment:(FMLiveSwitchMatroskaSegment*)value;

@end

/**

    A Matroska-file-based audio source.

*/
@interface FMLiveSwitchMatroskaAudioSource : FMLiveSwitchAudioSource

/**

    Adds a handler that is raised when the file ends.

*/
- (void) addOnEnded:(FMLiveSwitchAction0*)value;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaAudioSource class.

    @param path The path.
*/
+ (FMLiveSwitchMatroskaAudioSource*) audioSourceWithPath:(NSString*)path;
/**

    Creates an Opus decoder.

*/
- (FMLiveSwitchAudioDecoder*) createOpusDecoderWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates a PCMA decoder.

*/
- (FMLiveSwitchAudioDecoder*) createPcmaDecoderWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates a PCMU decoder.

*/
- (FMLiveSwitchAudioDecoder*) createPcmuDecoderWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Starts the source.

*/
- (FMLiveSwitchFuture<id>*) doStart;
/**

    Stops the source.

*/
- (FMLiveSwitchFuture<id>*) doStop;
/**

    Gets the source inputs (tracks).

*/
- (FMLiveSwitchFuture<NSMutableArray*>*) getInputs;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaAudioSource class.

    @param path The path.
*/
- (instancetype) initWithPath:(NSString*)path;
/**

    Gets the label.

*/
- (NSString*) label;
/**

    Gets the path.

*/
- (NSString*) path;
/**

    Removes a handler that is raised when the file ends.

*/
- (void) removeOnEnded:(FMLiveSwitchAction0*)value;
/**

    Sets whether capturing should stop when the file ends. Default: false.

*/
- (void) setStopCaptureOnEnd:(bool)value;
/**

    Gets whether capturing should stop when the file ends. Default: false.

*/
- (bool) stopCaptureOnEnd;

@end

/**

    A Matroska-file-based video source.

*/
@interface FMLiveSwitchMatroskaVideoSource : FMLiveSwitchVideoSource

/**

    Adds a handler that is raised when the file ends.

*/
- (void) addOnEnded:(FMLiveSwitchAction0*)value;
/**

    Creates an H.264 decoder.

*/
- (FMLiveSwitchVideoDecoder*) createH264Decoder;
/**

    Creates an H.265 decoder.

*/
- (FMLiveSwitchVideoDecoder*) createH265Decoder;
/**

    Creates a VP8 decoder.

*/
- (FMLiveSwitchVideoDecoder*) createVp8Decoder;
/**

    Creates a VP9 decoder.

*/
- (FMLiveSwitchVideoDecoder*) createVp9Decoder;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Starts the source.

*/
- (FMLiveSwitchFuture<id>*) doStart;
/**

    Stops the source.

*/
- (FMLiveSwitchFuture<id>*) doStop;
/**

    Gets the source inputs (tracks).

*/
- (FMLiveSwitchFuture<NSMutableArray*>*) getInputs;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaVideoSource class.

    @param path The path.
*/
- (instancetype) initWithPath:(NSString*)path;
/**

    Gets the label.

*/
- (NSString*) label;
/**

    Gets the path.

*/
- (NSString*) path;
/**

    Removes a handler that is raised when the file ends.

*/
- (void) removeOnEnded:(FMLiveSwitchAction0*)value;
/**

    Sets whether capturing should stop when the file ends. Default: false.

*/
- (void) setStopCaptureOnEnd:(bool)value;
/**

    Gets whether capturing should stop when the file ends. Default: false.

*/
- (bool) stopCaptureOnEnd;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaVideoSource class.

    @param path The path.
*/
+ (FMLiveSwitchMatroskaVideoSource*) videoSourceWithPath:(NSString*)path;

@end

/**

    A Matroska seek element.

*/
@interface FMLiveSwitchMatroskaSeek : FMLiveSwitchMatroskaElement

/**

    Gets the EBML ID.

*/
+ (NSMutableData*) ebmlId;
/**

    Gets the inner bytes.

*/
- (NSMutableData*) getInnerBytes;
/**

    Gets the EBML ID.

*/
- (NSMutableData*) id;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaSeek class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaSeek class.

    @param bytes The bytes.
*/
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaSeek class.

*/
+ (FMLiveSwitchMatroskaSeek*) seek;
/**

    Gets the seek identifier.

*/
- (long long) seekId;
/**

    Gets the seek position.

*/
- (long long) seekPosition;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaSeek class.

    @param bytes The bytes.
*/
+ (FMLiveSwitchMatroskaSeek*) seekWithBytes:(NSMutableData*)bytes;
/**

    Sets the seek identifier.

*/
- (void) setSeekId:(long long)value;
/**

    Sets the seek position.

*/
- (void) setSeekPosition:(long long)value;

@end

/**

    A Matroska seek head element.

*/
@interface FMLiveSwitchMatroskaSeekHead : FMLiveSwitchMatroskaElement

/**

    Gets the EBML ID.

*/
+ (NSMutableData*) ebmlId;
/**

    Gets the inner bytes.

*/
- (NSMutableData*) getInnerBytes;
/**

    Gets the EBML ID.

*/
- (NSMutableData*) id;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaSeekHead class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaSeekHead class.

    @param bytes The bytes.
*/
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaSeekHead class.

*/
+ (FMLiveSwitchMatroskaSeekHead*) seekHead;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaSeekHead class.

    @param bytes The bytes.
*/
+ (FMLiveSwitchMatroskaSeekHead*) seekHeadWithBytes:(NSMutableData*)bytes;
/**

    Gets the seek elements.

*/
- (NSMutableArray*) seeks;
/**

    Sets the seek elements.

*/
- (void) setSeeks:(NSMutableArray*)value;

@end

/**

    A Matroska segment element.

*/
@interface FMLiveSwitchMatroskaSegment : FMLiveSwitchMatroskaElement

/**

    Gets the cluster elements.

*/
- (NSMutableArray*) clusters;
/**

    Gets the EBML ID.

*/
+ (NSMutableData*) ebmlId;
/**

    Gets the inner bytes.

*/
- (NSMutableData*) getInnerBytes;
/**

    Gets the EBML ID.

*/
- (NSMutableData*) id;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaSegment class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaSegment class.

    @param bytes The bytes.
*/
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/**

    Merges another FMLiveSwitchMatroskaSegment into this one.

    @param segment The FMLiveSwitchMatroskaSegment.
*/
- (void) mergeWithSegment:(FMLiveSwitchMatroskaSegment*)segment;
/**

    Gets the seek head elements.

*/
- (NSMutableArray*) seekHeads;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaSegment class.

*/
+ (FMLiveSwitchMatroskaSegment*) segment;
/**

    Gets the segment info element.

*/
- (FMLiveSwitchMatroskaSegmentInfo*) segmentInfo;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaSegment class.

    @param bytes The bytes.
*/
+ (FMLiveSwitchMatroskaSegment*) segmentWithBytes:(NSMutableData*)bytes;
/**

    Sets the cluster elements.

*/
- (void) setClusters:(NSMutableArray*)value;
/**

    Sets the seek head elements.

*/
- (void) setSeekHeads:(NSMutableArray*)value;
/**

    Sets the segment info element.

*/
- (void) setSegmentInfo:(FMLiveSwitchMatroskaSegmentInfo*)value;
/**

    Sets the track elements.

*/
- (void) setTracks:(NSMutableArray*)value;
/**

    Gets the track elements.

*/
- (NSMutableArray*) tracks;

@end

/**

    A Matroska segment info element.

*/
@interface FMLiveSwitchMatroskaSegmentInfo : FMLiveSwitchMatroskaElement

/**

    Gets the date in UTC time.

*/
- (FMLiveSwitchNullableDate*) dateUtc;
/**

    Gets the default timecode scale.

*/
+ (long long) defaultTimecodeScale;
/**

    Gets the duration.

*/
- (FMLiveSwitchNullableFloat*) duration;
/**

    Gets the EBML ID.

*/
+ (NSMutableData*) ebmlId;
/**

    Gets the inner bytes.

*/
- (NSMutableData*) getInnerBytes;
/**

    Gets the EBML ID.

*/
- (NSMutableData*) id;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaSegmentInfo class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaSegmentInfo class.

    @param bytes The bytes.
*/
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/**

    Merges another FMLiveSwitchMatroskaSegmentInfo into this one.

    @param segmentInfo The FMLiveSwitchMatroskaSegmentInfo.
*/
- (void) mergeWithSegmentInfo:(FMLiveSwitchMatroskaSegmentInfo*)segmentInfo;
/**

    Gets the muxing application.

*/
- (NSString*) muxingApp;
/**

    Gets the next filename.

*/
- (NSString*) nextFilename;
/**

    Gets the next UID.

*/
- (FMLiveSwitchNullableGuid*) nextUid;
/**

    Gets the previous filename.

*/
- (NSString*) prevFilename;
/**

    Gets the previous UID.

*/
- (FMLiveSwitchNullableGuid*) prevUid;
/**

    Gets the segment filename.

*/
- (NSString*) segmentFilename;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaSegmentInfo class.

*/
+ (FMLiveSwitchMatroskaSegmentInfo*) segmentInfo;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaSegmentInfo class.

    @param bytes The bytes.
*/
+ (FMLiveSwitchMatroskaSegmentInfo*) segmentInfoWithBytes:(NSMutableData*)bytes;
/**

    Gets the segment UID.

*/
- (FMLiveSwitchNullableGuid*) segmentUid;
/**

    Sets the date in UTC time.

*/
- (void) setDateUtc:(FMLiveSwitchNullableDate*)value;
/**

    Sets the duration.

*/
- (void) setDuration:(FMLiveSwitchNullableFloat*)value;
/**

    Sets the muxing application.

*/
- (void) setMuxingApp:(NSString*)value;
/**

    Sets the next filename.

*/
- (void) setNextFilename:(NSString*)value;
/**

    Sets the next UID.

*/
- (void) setNextUid:(FMLiveSwitchNullableGuid*)value;
/**

    Sets the previous filename.

*/
- (void) setPrevFilename:(NSString*)value;
/**

    Sets the previous UID.

*/
- (void) setPrevUid:(FMLiveSwitchNullableGuid*)value;
/**

    Sets the segment filename.

*/
- (void) setSegmentFilename:(NSString*)value;
/**

    Sets the segment UID.

*/
- (void) setSegmentUid:(FMLiveSwitchNullableGuid*)value;
/**

    Sets the timecode scale.

*/
- (void) setTimecodeScale:(long long)value;
/**

    Sets the title.

*/
- (void) setTitle:(NSString*)value;
/**

    Sets the writing application.

*/
- (void) setWritingApp:(NSString*)value;
/**

    Gets the timecode scale.

*/
- (long long) timecodeScale;
/**

    Gets the title.

*/
- (NSString*) title;
/**

    Gets the writing application.

*/
- (NSString*) writingApp;

@end

/**

    A Matroska simple block element.

*/
@interface FMLiveSwitchMatroskaSimpleBlock : FMLiveSwitchMatroskaBlock

/**

    Gets the EBML ID.

*/
+ (NSMutableData*) ebmlId;
/**

    Gets the EBML ID.

*/
- (NSMutableData*) id;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaSimpleBlock class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaSimpleBlock class.

    @param bytes The bytes.
*/
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaSimpleBlock class.

*/
+ (FMLiveSwitchMatroskaSimpleBlock*) simpleBlock;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaSimpleBlock class.

    @param bytes The bytes.
*/
+ (FMLiveSwitchMatroskaSimpleBlock*) simpleBlockWithBytes:(NSMutableData*)bytes;

@end

/**

    Valid Matroska simple block element flags.

*/
@interface FMLiveSwitchMatroskaSimpleBlockFlags : FMLiveSwitchMatroskaBlockFlags

/**

    Gets a value indicating discardable.

*/
+ (uint8_t) discardable;
- (instancetype) init;
/**

    Gets a value indicating keyframe.

*/
+ (uint8_t) keyframe;
+ (FMLiveSwitchMatroskaSimpleBlockFlags*) simpleBlockFlags;

@end

/**

    A Matroska EBML Tags element.

*/
@interface FMLiveSwitchMatroskaTags : FMLiveSwitchMatroskaElement

/**

    Gets the EBML ID.

*/
+ (NSMutableData*) ebmlId;
/**

    Gets the inner bytes.

*/
- (NSMutableData*) getInnerBytes;
/**

    Gets the EBML ID.

*/
- (NSMutableData*) id;
- (instancetype) init;
+ (FMLiveSwitchMatroskaTags*) tags;

@end

/**

    A Matroska track element.

*/
@interface FMLiveSwitchMatroskaTrack : FMLiveSwitchMatroskaElement

/**

    Gets the EBML ID.

*/
+ (NSMutableData*) ebmlId;
/**

    Gets the inner bytes.

*/
- (NSMutableData*) getInnerBytes;
/**

    Gets the EBML ID.

*/
- (NSMutableData*) id;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaTrack class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaTrack class.

    @param bytes The bytes.
*/
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/**

    Merges another FMLiveSwitchMatroskaTrack into this one.

    @param track The FMLiveSwitchMatroskaTrack.
*/
- (void) mergeWithTrack:(FMLiveSwitchMatroskaTrack*)track;
/**

    Sets the track entry elements.

*/
- (void) setTrackEntries:(NSMutableArray*)value;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaTrack class.

*/
+ (FMLiveSwitchMatroskaTrack*) track;
/**

    Gets the track entry elements.

*/
- (NSMutableArray*) trackEntries;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaTrack class.

    @param bytes The bytes.
*/
+ (FMLiveSwitchMatroskaTrack*) trackWithBytes:(NSMutableData*)bytes;

@end

/**

    A Matroska track entry element.

*/
@interface FMLiveSwitchMatroskaTrackEntry : FMLiveSwitchMatroskaElement

/**

    Gets the AAC codec ID.

*/
+ (NSString*) aacCodecId;
/**

    Gets the attachment links.

*/
- (NSMutableArray*) attachmentLinks;
/**

    Gets the audio element.

*/
- (FMLiveSwitchMatroskaAudio*) audio;
/**

    Gets the codec delay.

*/
- (FMLiveSwitchNullableLong*) codecDelay;
/**

    Gets the codec identifier.

*/
- (NSString*) codecId;
/**

    Gets the codec name.

*/
- (NSString*) codecName;
/**

    Gets the codec private.

*/
- (NSMutableData*) codecPrivate;
/**

    Gets the content encoding elements.

*/
- (FMLiveSwitchMatroskaContentEncodings*) contentEncodings;
/**

    Gets the default duration.

*/
- (FMLiveSwitchNullableLong*) defaultDuration;
/**

    Gets the default default flag.

*/
+ (bool) defaultFlagDefault;
/**

    Gets the default enabled flag.

*/
+ (bool) defaultFlagEnabled;
/**

    Gets the default forced flag.

*/
+ (bool) defaultFlagForced;
/**

    Gets the default lacing flag.

*/
+ (bool) defaultFlagLacing;
/**

    Gets the default language.

*/
+ (NSString*) defaultLanguage;
/**

    Gets the default minimum cache.

*/
+ (long long) defaultMinCache;
/**

    Gets the EBML ID.

*/
+ (NSMutableData*) ebmlId;
/**

    Gets the default flag.

*/
- (bool) flagDefault;
/**

    Gets the enabled flag.

*/
- (bool) flagEnabled;
/**

    Gets the forced flag.

*/
- (bool) flagForced;
/**

    Gets the lacing flag.

*/
- (bool) flagLacing;
/**

    Gets the G722 format tag.

*/
+ (int) g722FormatTag;
/**

    Gets the inner bytes.

*/
- (NSMutableData*) getInnerBytes;
/**

    Gets the H.264 codec ID.

*/
+ (NSString*) h264CodecId;
/**

    Gets the H.265 codec ID.

*/
+ (NSString*) h265CodecId;
/**

    Gets the EBML ID.

*/
- (NSMutableData*) id;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaTrackEntry class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaTrackEntry class.

    @param bytes The bytes.
*/
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/**

    Gets the L16 format tag.

*/
+ (int) l16FormatTag;
/**

    Gets the language.

*/
- (NSString*) language;
/**

    Gets the maximum cache.

*/
- (FMLiveSwitchNullableLong*) maxCache;
/**

    Gets the minimum cache.

*/
- (long long) minCache;
/**

    Gets the name.

*/
- (NSString*) name;
/**

    Gets the Opus codec ID.

*/
+ (NSString*) opusCodecId;
/**

    Gets the PCMA format tag.

*/
+ (int) pcmaFormatTag;
/**

    Gets the PCM codec ID.

*/
+ (NSString*) pcmCodecId;
/**

    Gets the PCMU format tag.

*/
+ (int) pcmuFormatTag;
/**

    Gets the seek pre-roll.

*/
- (FMLiveSwitchNullableLong*) seekPreRoll;
/**

    Sets the attachment links.

*/
- (void) setAttachmentLinks:(NSMutableArray*)value;
/**

    Sets the audio element.

*/
- (void) setAudio:(FMLiveSwitchMatroskaAudio*)value;
/**

    Sets the codec delay.

*/
- (void) setCodecDelay:(FMLiveSwitchNullableLong*)value;
/**

    Sets the codec identifier.

*/
- (void) setCodecId:(NSString*)value;
/**

    Sets the codec name.

*/
- (void) setCodecName:(NSString*)value;
/**

    Sets the codec private.

*/
- (void) setCodecPrivate:(NSMutableData*)value;
/**

    Sets the content encoding elements.

*/
- (void) setContentEncodings:(FMLiveSwitchMatroskaContentEncodings*)value;
/**

    Sets the default duration.

*/
- (void) setDefaultDuration:(FMLiveSwitchNullableLong*)value;
/**

    Sets the default flag.

*/
- (void) setFlagDefault:(bool)value;
/**

    Sets the enabled flag.

*/
- (void) setFlagEnabled:(bool)value;
/**

    Sets the forced flag.

*/
- (void) setFlagForced:(bool)value;
/**

    Sets the lacing flag.

*/
- (void) setFlagLacing:(bool)value;
/**

    Sets the language.

*/
- (void) setLanguage:(NSString*)value;
/**

    Sets the maximum cache.

*/
- (void) setMaxCache:(FMLiveSwitchNullableLong*)value;
/**

    Sets the minimum cache.

*/
- (void) setMinCache:(long long)value;
/**

    Sets the name.

*/
- (void) setName:(NSString*)value;
/**

    Sets the seek pre-roll.

*/
- (void) setSeekPreRoll:(FMLiveSwitchNullableLong*)value;
/**

    Sets the track number.

*/
- (void) setTrackNumber:(long long)value;
/**

    Sets the track timecode scale.

*/
- (void) setTrackTimecodeScale:(FMLiveSwitchNullableFloat*)value;
/**

    Sets the track type.

*/
- (void) setTrackType:(long long)value;
/**

    Sets the track UID.

*/
- (void) setTrackUid:(long long)value;
/**

    Sets the video element.

*/
- (void) setVideo:(FMLiveSwitchMatroskaVideo*)value;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaTrackEntry class.

*/
+ (FMLiveSwitchMatroskaTrackEntry*) trackEntry;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaTrackEntry class.

    @param bytes The bytes.
*/
+ (FMLiveSwitchMatroskaTrackEntry*) trackEntryWithBytes:(NSMutableData*)bytes;
/**

    Gets the track number.

*/
- (long long) trackNumber;
/**

    Gets the track timecode scale.

*/
- (FMLiveSwitchNullableFloat*) trackTimecodeScale;
/**

    Gets the track type.

*/
- (long long) trackType;
/**

    Gets the track UID.

*/
- (long long) trackUid;
/**

    Gets the video element.

*/
- (FMLiveSwitchMatroskaVideo*) video;
/**

    Gets the VP8 codec ID.

*/
+ (NSString*) vp8CodecId;
/**

    Gets the VP8 codec ID.

*/
+ (NSString*) vp9CodecId;

@end

/**

    Valid Matroska track entry element types.

*/
@interface FMLiveSwitchMatroskaTrackType : NSObject

/**

    Gets a value indicating audio.

*/
+ (long long) audio;
/**

    Gets a value indicating button.

*/
+ (long long) button;
/**

    Gets a value indicating complex.

*/
+ (long long) complex;
/**

    Gets a value indicating control.

*/
+ (long long) control;
- (instancetype) init;
/**

    Gets a value indicating logo.

*/
+ (long long) logo;
/**

    Gets a value indicating subtitle.

*/
+ (long long) subtitle;
+ (FMLiveSwitchMatroskaTrackType*) trackType;
/**

    Gets a value indicating video.

*/
+ (long long) video;

@end

/**

    A Matroska video element.

*/
@interface FMLiveSwitchMatroskaVideo : FMLiveSwitchMatroskaElement

/**

    Gets the alpha mode.

*/
- (long long) alphaMode;
/**

    Gets the default alpha mode.

*/
+ (long long) defaultAlphaMode;
/**

    Gets the default display unit.

*/
+ (long long) defaultDisplayUnit;
/**

    Gets the default flag interlaced.

*/
+ (long long) defaultFlagInterlaced;
/**

    Gets the default pixel crop bottom.

*/
+ (long long) defaultPixelCropBottom;
/**

    Gets the default pixel crop left.

*/
+ (long long) defaultPixelCropLeft;
/**

    Gets the default pixel crop right.

*/
+ (long long) defaultPixelCropRight;
/**

    Gets the default pixel crop top.

*/
+ (long long) defaultPixelCropTop;
/**

    Gets the display height.

*/
- (FMLiveSwitchNullableLong*) displayHeight;
/**

    Gets the display unit.

*/
- (long long) displayUnit;
/**

    Gets the display width.

*/
- (FMLiveSwitchNullableLong*) displayWidth;
/**

    Gets the EBML ID.

*/
+ (NSMutableData*) ebmlId;
/**

    Gets a flag indicating whether the video is interlaced.

*/
- (long long) flagInterlaced;
/**

    Gets the inner bytes.

*/
- (NSMutableData*) getInnerBytes;
/**

    Gets the EBML ID.

*/
- (NSMutableData*) id;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaVideo class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaVideo class.

    @param bytes The bytes.
*/
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/**

    Gets the pixel crop bottom.

*/
- (long long) pixelCropBottom;
/**

    Gets the pixel crop left.

*/
- (long long) pixelCropLeft;
/**

    Gets the pixel crop right.

*/
- (long long) pixelCropRight;
/**

    Gets the pixel crop top.

*/
- (long long) pixelCropTop;
/**

    Gets the pixel height.

*/
- (long long) pixelHeight;
/**

    Gets the pixel width.

*/
- (long long) pixelWidth;
/**

    Sets the alpha mode.

*/
- (void) setAlphaMode:(long long)value;
/**

    Sets the display height.

*/
- (void) setDisplayHeight:(FMLiveSwitchNullableLong*)value;
/**

    Sets the display unit.

*/
- (void) setDisplayUnit:(long long)value;
/**

    Sets the display width.

*/
- (void) setDisplayWidth:(FMLiveSwitchNullableLong*)value;
/**

    Sets a flag indicating whether the video is interlaced.

*/
- (void) setFlagInterlaced:(long long)value;
/**

    Sets the pixel crop bottom.

*/
- (void) setPixelCropBottom:(long long)value;
/**

    Sets the pixel crop left.

*/
- (void) setPixelCropLeft:(long long)value;
/**

    Sets the pixel crop right.

*/
- (void) setPixelCropRight:(long long)value;
/**

    Sets the pixel crop top.

*/
- (void) setPixelCropTop:(long long)value;
/**

    Sets the pixel height.

*/
- (void) setPixelHeight:(long long)value;
/**

    Sets the pixel width.

*/
- (void) setPixelWidth:(long long)value;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaVideo class.

*/
+ (FMLiveSwitchMatroskaVideo*) video;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaVideo class.

    @param bytes The bytes.
*/
+ (FMLiveSwitchMatroskaVideo*) videoWithBytes:(NSMutableData*)bytes;

@end

/**

    Valid Matroska video element display units.

*/
@interface FMLiveSwitchMatroskaVideoDisplayUnit : NSObject

/**

    Gets a value indicating centimeters.

*/
+ (long long) centimeters;
/**

    Gets a value indicating display aspect ratio.

*/
+ (long long) displayAspectRatio;
/**

    Gets a value indicating inches.

*/
+ (long long) inches;
- (instancetype) init;
/**

    Gets a value indicating pixels.

*/
+ (long long) pixels;
+ (FMLiveSwitchMatroskaVideoDisplayUnit*) videoDisplayUnit;

@end

/**

    A Matroska video recorder.

*/
@interface FMLiveSwitchMatroskaVideoRecorder : FMLiveSwitchVideoRecorder

/**

    Updates the file header.

*/
- (void) doUpdateHeader;
/**

    Writes the file header.

*/
- (void) doWriteHeader;
/**

    Write an encoded video frame.

    @param buffer The encoded buffer.
    @param presentationTimestamp The presentation timestamp.
    @return `true` if the encoded frame was written successfully; otherwise, `false`
*/
- (bool) doWriteWithBuffer:(FMLiveSwitchVideoBuffer*)buffer presentationTimestamp:(long long)presentationTimestamp;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaVideoRecorder class.

    @param path The path.
    @param inputFormat The input format.
*/
- (instancetype) initWithPath:(NSString*)path inputFormat:(FMLiveSwitchVideoFormat*)inputFormat;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaVideoRecorder class.

    @param path The path.
    @param inputFormat The input format.
*/
+ (FMLiveSwitchMatroskaVideoRecorder*) videoRecorderWithPath:(NSString*)path inputFormat:(FMLiveSwitchVideoFormat*)inputFormat;

@end

/**

    A Matroska-file-based video sink.

*/
@interface FMLiveSwitchMatroskaVideoSink : FMLiveSwitchVideoSink

/**

    Adds a handler that is raised when an existing file is close in response to
    this sink being deactivated or destroyed.

*/
- (void) addOnFileClose:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when a new file is opened in response to
    this sink being activated and processing a frame.

*/
- (void) addOnFileOpen:(FMLiveSwitchAction0*)value;
/**

    Gets the base timestamp - the timestamp of the first frame
    processed by the recorder after being activated. This timestamp
    will change each time a new file is created in response to the
    sink being activated.

*/
- (long long) baseTimestamp;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchVideoFrame*)frame inputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaVideoSink class.

    @param path The path.
*/
- (instancetype) initWithPath:(NSString*)path;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaVideoSink class.

    @param path The path.
    @param format The format.
*/
- (instancetype) initWithPath:(NSString*)path format:(FMLiveSwitchVideoFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaVideoSink class.

    @param path The path.
    @param input The input.
*/
- (instancetype) initWithPath:(NSString*)path input:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets the last known file path.

*/
- (NSString*) lastFilePath;
/**

    Gets the last timestamp processed by the recorder.

*/
- (long long) lastTimestamp;
/**

    Gets the currently open file path.

*/
- (NSString*) openFilePath;
/**

    Gets the path.

*/
- (NSString*) path;
/**

    Removes a handler that is raised when an existing file is close in response to
    this sink being deactivated or destroyed.

*/
- (void) removeOnFileClose:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when a new file is opened in response to
    this sink being activated and processing a frame.

*/
- (void) removeOnFileOpen:(FMLiveSwitchAction0*)value;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaVideoSink class.

    @param path The path.
*/
+ (FMLiveSwitchMatroskaVideoSink*) videoSinkWithPath:(NSString*)path;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaVideoSink class.

    @param path The path.
    @param format The format.
*/
+ (FMLiveSwitchMatroskaVideoSink*) videoSinkWithPath:(NSString*)path format:(FMLiveSwitchVideoFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchMatroskaVideoSink class.

    @param path The path.
    @param input The input.
*/
+ (FMLiveSwitchMatroskaVideoSink*) videoSinkWithPath:(NSString*)path input:(NSObject<FMLiveSwitchIVideoOutput>*)input;

@end

/**

    An audio source that raises nothing.

*/
@interface FMLiveSwitchNullAudioSource : FMLiveSwitchAudioSource

/**

    Gets whether this source can change the output bitrate.

*/
- (bool) canChangeBitrate;
/**

    Gets whether this source can pause the output bitrate.

*/
- (bool) canPauseBitrate;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Starts the source.

*/
- (FMLiveSwitchFuture<id>*) doStart;
/**

    Stops the source.

*/
- (FMLiveSwitchFuture<id>*) doStop;
/**

    Generates and processes a 20ms PCM frame.

*/
- (void) generateAndProcessPcmFrame;
/**

    Generates and processes a PCM frame.

    @param duration The duration.
*/
- (void) generateAndProcessPcmFrameWithDuration:(int)duration;
/**

    Initializes a new FMLiveSwitchNullAudioSource.

    @param outputFormat The output format.
*/
- (instancetype) initWithOutputFormat:(FMLiveSwitchAudioFormat*)outputFormat;
/**

    Gets the input RTP stream identifier.

*/
- (NSString*) inputRtpStreamId;
/**

    Gets the input synchronization source.

*/
- (long long) inputSynchronizationSource;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Initializes a new FMLiveSwitchNullAudioSource.

    @param outputFormat The output format.
*/
+ (FMLiveSwitchNullAudioSource*) nullAudioSourceWithOutputFormat:(FMLiveSwitchAudioFormat*)outputFormat;
/**

    Processes a control frame response by raising it.

    @param controlFrameResponse The control frame response.
*/
- (void) processControlFrameResponse:(FMLiveSwitchMediaControlFrame*)controlFrameResponse;
/**

    Processes control frame responses by raising them.

    @param controlFrameResponses The control frame responses.
*/
- (void) processControlFrameResponses:(NSMutableArray*)controlFrameResponses;
/**

    Processes a frame by raising it.

    @param frame The frame.
*/
- (void) processFrame:(FMLiveSwitchAudioFrame*)frame;
/**

    Sets the input RTP stream identifier.

*/
- (void) setInputRtpStreamId:(NSString*)value;
/**

    Sets the input synchronization source.

*/
- (void) setInputSynchronizationSource:(long long)value;
/**

    Sets whether this source can change the output bitrate.

    @param canChangeBitrate Whether this source can change the output bitrate.
*/
- (void) updateCanChangeBitrate:(bool)canChangeBitrate;
/**

    Sets whether this source can pause the output bitrate.

    @param canPauseBitrate Whether this source can pause the output bitrate.
*/
- (void) updateCanPauseBitrate:(bool)canPauseBitrate;
/**

    Sets the maximum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

    @param maxOutputBitrate The maximum allowed output bitrate, in kbps.
*/
- (void) updateMaxOutputBitrate:(int)maxOutputBitrate;
/**

    Sets the maximum allowed output encoding.
    A value of null indicates unset (no maximum).

    @param maxOutputEncoding The maximum allowed output encoding.
*/
- (void) updateMaxOutputEncoding:(FMLiveSwitchEncodingInfo*)maxOutputEncoding;
/**

    Sets the minimum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

    @param minOutputBitrate The minimum allowed output bitrate, in kbps.
*/
- (void) updateMinOutputBitrate:(int)minOutputBitrate;
/**

    Sets the minimum allowed output encoding.
    A value of null indicates unset (no minimum).

    @param minOutputEncoding The minimum allowed output encoding.
*/
- (void) updateMinOutputEncoding:(FMLiveSwitchEncodingInfo*)minOutputEncoding;
/**

    Sets whether output is synchronizable.

    @param outputSynchronizable Whether output is synchronizable.
*/
- (void) updateOutputSynchronizable:(bool)outputSynchronizable;
/**

    Sets the system delay in ticks.

    @param systemDelay The system delay.
*/
- (void) updateSystemDelay:(long long)systemDelay;
/**

    Sets the target output bitrate, in kbps.
    A value of -1 indicates unset (no target).

    @param targetOutputBitrate The target output bitrate, in kbps.
*/
- (void) updateTargetOutputBitrate:(int)targetOutputBitrate;
/**

    Sets the target output encoding.
    A value of null indicates unset (no target).

    @param targetOutputEncoding The target output encoding.
*/
- (void) updateTargetOutputEncoding:(FMLiveSwitchEncodingInfo*)targetOutputEncoding;

@end

/**

    A video source that raises nothing.

*/
@interface FMLiveSwitchNullVideoSource : FMLiveSwitchVideoSource

/**

    Gets whether this source can change the output bitrate.

*/
- (bool) canChangeBitrate;
/**

    Gets whether this source can pause the output bitrate.

*/
- (bool) canPauseBitrate;
/**

    Gets the current config.
    A value of null indicates unset (pass-through).

*/
- (FMLiveSwitchVideoConfig*) config;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Starts the source.

*/
- (FMLiveSwitchFuture<id>*) doStart;
/**

    Stops the source.

*/
- (FMLiveSwitchFuture<id>*) doStop;
/**

    Gets the current frame-rate, in fps.
    A value of -1 indicates unset, and will
    default to the target frame-rate.

*/
- (double) frameRate;
/**

    Generates and processes a raw frame.

*/
- (void) generateAndProcessRawFrame;
/**

    Initializes a new FMLiveSwitchNullVideoSource.

    @param outputFormat The output format.
*/
- (instancetype) initWithOutputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Initializes a new FMLiveSwitchNullVideoSource.

    @param outputFormat The output format.
    @param config The configuration.
*/
- (instancetype) initWithOutputFormat:(FMLiveSwitchVideoFormat*)outputFormat config:(FMLiveSwitchVideoConfig*)config;
/**

    Gets the input RTP stream identifier.

*/
- (NSString*) inputRtpStreamId;
/**

    Gets the input synchronization source.

*/
- (long long) inputSynchronizationSource;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets the maximum output frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxFrameRate;
/**

    Gets the maximum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxOutputFrameRate;
/**

    Gets the maximum allowed output size.
    A value of null indicates unset (no maximum).

*/
- (FMLiveSwitchSize*) maxOutputSize;
/**

    Gets the maximum output size.
    A value of null indicates unset (no maximum).

*/
- (FMLiveSwitchSize*) maxSize;
/**

    Gets the maximum supported frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxSupportedFrameRate;
/**

    Gets the maximum supported size.
    A value of null indicates unset (no maximum).

*/
- (FMLiveSwitchSize*) maxSupportedSize;
/**

    Gets the minimum frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (double) minFrameRate;
/**

    Gets the minimum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (double) minOutputFrameRate;
/**

    Gets the minimum allowed output size.
    A value of null indicates unset (no minimum).

*/
- (FMLiveSwitchSize*) minOutputSize;
/**

    Gets the minimum size.
    A value of null indicates unset (no minimum).

*/
- (FMLiveSwitchSize*) minSize;
/**

    Gets the minimum supported frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (double) minSupportedFrameRate;
/**

    Gets the minimum supported size.
    A value of null indicates unset (no minimum).

*/
- (FMLiveSwitchSize*) minSupportedSize;
/**

    Initializes a new FMLiveSwitchNullVideoSource.

    @param outputFormat The output format.
*/
+ (FMLiveSwitchNullVideoSource*) nullVideoSourceWithOutputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Initializes a new FMLiveSwitchNullVideoSource.

    @param outputFormat The output format.
    @param config The configuration.
*/
+ (FMLiveSwitchNullVideoSource*) nullVideoSourceWithOutputFormat:(FMLiveSwitchVideoFormat*)outputFormat config:(FMLiveSwitchVideoConfig*)config;
/**

    Processes a control frame response by raising it.

    @param controlFrameResponse The control frame response.
*/
- (void) processControlFrameResponse:(FMLiveSwitchMediaControlFrame*)controlFrameResponse;
/**

    Processes control frame responses by raising them.

    @param controlFrameResponses The control frame responses.
*/
- (void) processControlFrameResponses:(NSMutableArray*)controlFrameResponses;
/**

    Processes a frame by raising it.

    @param frame The frame.
*/
- (void) processFrame:(FMLiveSwitchVideoFrame*)frame;
/**

    Sets the current config.
    A value of null indicates unset (pass-through).

*/
- (void) setConfig:(FMLiveSwitchVideoConfig*)value;
/**

    Sets the current frame-rate, in fps.
    A value of -1 indicates unset, and will
    default to the target frame-rate.

*/
- (void) setFrameRate:(double)value;
/**

    Sets the input RTP stream identifier.

*/
- (void) setInputRtpStreamId:(NSString*)value;
/**

    Sets the input synchronization source.

*/
- (void) setInputSynchronizationSource:(long long)value;
/**

    Sets the maximum output frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (void) setMaxFrameRate:(double)value;
/**

    Sets the maximum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (void) setMaxOutputFrameRate:(double)value;
/**

    Sets the maximum allowed output size.
    A value of null indicates unset (no maximum).

*/
- (void) setMaxOutputSize:(FMLiveSwitchSize*)value;
/**

    Sets the maximum output size.
    A value of null indicates unset (no maximum).

*/
- (void) setMaxSize:(FMLiveSwitchSize*)value;
/**

    Sets the minimum frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (void) setMinFrameRate:(double)value;
/**

    Sets the minimum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (void) setMinOutputFrameRate:(double)value;
/**

    Sets the minimum allowed output size.
    A value of null indicates unset (no minimum).

*/
- (void) setMinOutputSize:(FMLiveSwitchSize*)value;
/**

    Sets the minimum size.
    A value of null indicates unset (no minimum).

*/
- (void) setMinSize:(FMLiveSwitchSize*)value;
/**

    Sets the current size.
    A value of null indicates unset, and will
    default to the target size.

*/
- (void) setSize:(FMLiveSwitchSize*)value;
/**

    Sets whether FMLiveSwitchNullVideoSource#minOutputFrameRate and
    FMLiveSwitchNullVideoSource#maxOutputFrameRate should return
    FMLiveSwitchNullVideoSource#minSupportedFrameRate and
    FMLiveSwitchNullVideoSource#maxSupportedFrameRate, respectively, or
    response to changes in FMLiveSwitchNullVideoSource#minFrameRate and
    FMLiveSwitchNullVideoSource#maxFrameRate.

*/
- (void) setStaticOutputFrameRate:(bool)value;
/**

    Sets whether FMLiveSwitchNullVideoSource#minOutputSize and
    FMLiveSwitchNullVideoSource#maxOutputSize should return
    FMLiveSwitchNullVideoSource#minSupportedSize and
    FMLiveSwitchNullVideoSource#maxSupportedSize, respectively, or
    response to changes in FMLiveSwitchNullVideoSource#minSize and
    FMLiveSwitchNullVideoSource#maxSize.

*/
- (void) setStaticOutputSize:(bool)value;
/**

    Sets the target config.
    A value of null indicates unset (no target).

*/
- (void) setTargetConfig:(FMLiveSwitchVideoConfig*)value;
/**

    Sets the target frame-rate, in fps.

*/
- (void) setTargetFrameRate:(double)value;
/**

    Sets the target output frame-rate, in fps.

*/
- (void) setTargetOutputFrameRate:(double)value;
/**

    Sets the target output size.

*/
- (void) setTargetOutputSize:(FMLiveSwitchSize*)value;
/**

    Sets the target size.

*/
- (void) setTargetSize:(FMLiveSwitchSize*)value;
/**

    Gets the current size.
    A value of null indicates unset, and will
    default to the target size.

*/
- (FMLiveSwitchSize*) size;
/**

    Gets whether FMLiveSwitchNullVideoSource#minOutputFrameRate and
    FMLiveSwitchNullVideoSource#maxOutputFrameRate should return
    FMLiveSwitchNullVideoSource#minSupportedFrameRate and
    FMLiveSwitchNullVideoSource#maxSupportedFrameRate, respectively, or
    response to changes in FMLiveSwitchNullVideoSource#minFrameRate and
    FMLiveSwitchNullVideoSource#maxFrameRate.

*/
- (bool) staticOutputFrameRate;
/**

    Gets whether FMLiveSwitchNullVideoSource#minOutputSize and
    FMLiveSwitchNullVideoSource#maxOutputSize should return
    FMLiveSwitchNullVideoSource#minSupportedSize and
    FMLiveSwitchNullVideoSource#maxSupportedSize, respectively, or
    response to changes in FMLiveSwitchNullVideoSource#minSize and
    FMLiveSwitchNullVideoSource#maxSize.

*/
- (bool) staticOutputSize;
/**

    Gets the target config.
    A value of null indicates unset (no target).

*/
- (FMLiveSwitchVideoConfig*) targetConfig;
/**

    Gets the target frame-rate, in fps.

*/
- (double) targetFrameRate;
/**

    Gets the target output frame-rate, in fps.

*/
- (double) targetOutputFrameRate;
/**

    Gets the target output size.

*/
- (FMLiveSwitchSize*) targetOutputSize;
/**

    Gets the target size.

*/
- (FMLiveSwitchSize*) targetSize;
/**

    Sets whether this source can change the output bitrate.

    @param canChangeBitrate Whether this source can change the output bitrate.
*/
- (void) updateCanChangeBitrate:(bool)canChangeBitrate;
/**

    Sets whether this source can pause the output bitrate.

    @param canPauseBitrate Whether this source can pause the output bitrate.
*/
- (void) updateCanPauseBitrate:(bool)canPauseBitrate;
/**

    Sets the maximum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

    @param maxOutputBitrate The maximum allowed output bitrate, in kbps.
*/
- (void) updateMaxOutputBitrate:(int)maxOutputBitrate;
/**

    Sets the maximum allowed output encoding.
    A value of null indicates unset (no maximum).

    @param maxOutputEncoding The maximum allowed output encoding.
*/
- (void) updateMaxOutputEncoding:(FMLiveSwitchEncodingInfo*)maxOutputEncoding;
/**

    Sets the maximum allowed output frame-rate.
    A value of -1 indicates unset (no maximum).

    @param maxOutputFrameRate The maximum allowed output frame-rate.
*/
- (void) updateMaxOutputFrameRate:(double)maxOutputFrameRate;
/**

    Sets the maximum allowed output scale.
    A value of -1 indicates unset (no maximum).

    @param maxOutputScale The maximum allowed output scale.
*/
- (void) updateMaxOutputScale:(double)maxOutputScale;
/**

    Sets the maximum allowed output size.
    A value of -1 indicates unset (no maximum).

    @param maxOutputSize The maximum allowed output size.
*/
- (void) updateMaxOutputSize:(FMLiveSwitchSize*)maxOutputSize;
/**

    Sets the minimum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

    @param minOutputBitrate The minimum allowed output bitrate, in kbps.
*/
- (void) updateMinOutputBitrate:(int)minOutputBitrate;
/**

    Sets the minimum allowed output encoding.
    A value of null indicates unset (no minimum).

    @param minOutputEncoding The minimum allowed output encoding.
*/
- (void) updateMinOutputEncoding:(FMLiveSwitchEncodingInfo*)minOutputEncoding;
/**

    Sets the minimum allowed output frame-rate.
    A value of -1 indicates unset (no minimum).

    @param minOutputFrameRate The minimum allowed output frame-rate.
*/
- (void) updateMinOutputFrameRate:(double)minOutputFrameRate;
/**

    Sets the minimum allowed output scale.
    A value of -1 indicates unset (no minimum).

    @param minOutputScale The minimum allowed output scale.
*/
- (void) updateMinOutputScale:(double)minOutputScale;
/**

    Sets the minimum allowed output size.
    A value of -1 indicates unset (no minimum).

    @param minOutputSize The minimum allowed output size.
*/
- (void) updateMinOutputSize:(FMLiveSwitchSize*)minOutputSize;
/**

    Sets whether output is synchronizable.

    @param outputSynchronizable Whether output is synchronizable.
*/
- (void) updateOutputSynchronizable:(bool)outputSynchronizable;
/**

    Sets the system delay in ticks.

    @param systemDelay The system delay.
*/
- (void) updateSystemDelay:(long long)systemDelay;
/**

    Sets the target output bitrate, in kbps.
    A value of -1 indicates unset (no target).

    @param targetOutputBitrate The target output bitrate, in kbps.
*/
- (void) updateTargetOutputBitrate:(int)targetOutputBitrate;
/**

    Sets the target output encoding.
    A value of null indicates unset (no target).

    @param targetOutputEncoding The target output encoding.
*/
- (void) updateTargetOutputEncoding:(FMLiveSwitchEncodingInfo*)targetOutputEncoding;
/**

    Sets the target output frame-rate.
    A value of -1 indicates unset (no target).

    @param targetOutputFrameRate The target output frame-rate.
*/
- (void) updateTargetOutputFrameRate:(double)targetOutputFrameRate;
/**

    Sets the target output scale.
    A value of -1 indicates unset (no target).

    @param targetOutputScale The target output scale.
*/
- (void) updateTargetOutputScale:(double)targetOutputScale;
/**

    Sets the target output size.
    A value of -1 indicates unset (no target).

    @param targetOutputSize The target output size.
*/
- (void) updateTargetOutputSize:(FMLiveSwitchSize*)targetOutputSize;
/**

    Sets the video type.

    @param videoType The video type.
*/
- (void) updateVideoType:(FMLiveSwitchVideoType)videoType;

@end

/**

    A video sink that discards frames.

*/
@interface FMLiveSwitchNullVideoSink : FMLiveSwitchVideoSink

/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchVideoFrame*)frame inputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Gets the current frame count.

*/
- (long long) frameCount;
/**

    Initializes a new FMLiveSwitchNullVideoSink.

*/
- (instancetype) init;
/**

    Initializes a new FMLiveSwitchNullVideoSink.

    @param inputFormat The input format.
*/
- (instancetype) initWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Initializes a new FMLiveSwitchNullVideoSink.

*/
+ (FMLiveSwitchNullVideoSink*) nullVideoSink;
/**

    Initializes a new FMLiveSwitchNullVideoSink.

    @param inputFormat The input format.
*/
+ (FMLiveSwitchNullVideoSink*) nullVideoSinkWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat;
/**

    Gets the output RTP stream identifier.
    If the output RTP stream identifier is null (unset),
    then getting this property returns the InputRtpStreamId.

*/
- (NSString*) outputRtpStreamId;
/**

    Gets the output synchronization source.
    If the output synchronization source is -1 (unset),
    then getting this property returns the InputSynchronizationSource.

*/
- (long long) outputSynchronizationSource;
/**

    Processes a control frame by raising it.

    @param controlFrame The control frame.
*/
- (void) processControlFrame:(FMLiveSwitchMediaControlFrame*)controlFrame;
/**

    Processes control frames by raising them.

    @param controlFrames The control frames.
*/
- (void) processControlFrames:(NSMutableArray*)controlFrames;
/**

    Creates a future that resolves when the specified
    number of frames have been processed.

    @param count 
*/
- (FMLiveSwitchFuture<id>*) processedFramesWithCount:(long long)count;
/**

    Sets the output RTP stream identifier.
    If the output RTP stream identifier is null (unset),
    then getting this property returns the InputRtpStreamId.

*/
- (void) setOutputRtpStreamId:(NSString*)value;
/**

    Sets the output synchronization source.
    If the output synchronization source is -1 (unset),
    then getting this property returns the InputSynchronizationSource.

*/
- (void) setOutputSynchronizationSource:(long long)value;
/**

    Sets the maximum allowed input bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

    @param maxInputBitrate The maximum allowed input bitrate, in kbps.
*/
- (void) updateMaxInputBitrate:(int)maxInputBitrate;
/**

    Sets the maximum allowed input encoding.
    A value of null indicates unset (no maximum).

    @param maxInputEncoding The maximum allowed input encoding.
*/
- (void) updateMaxInputEncoding:(FMLiveSwitchEncodingInfo*)maxInputEncoding;
/**

    Sets the maximum allowed input frame-rate.
    A value of -1 indicates unset (no maximum).

    @param maxInputFrameRate The maximum allowed input frame-rate.
*/
- (void) updateMaxInputFrameRate:(double)maxInputFrameRate;
/**

    Sets the maximum allowed input scale.
    A value of -1 indicates unset (no maximum).

    @param maxInputScale The maximum allowed input scale.
*/
- (void) updateMaxInputScale:(double)maxInputScale;
/**

    Sets the maximum allowed input size.
    A value of -1 indicates unset (no maximum).

    @param maxInputSize The maximum allowed input size.
*/
- (void) updateMaxInputSize:(FMLiveSwitchSize*)maxInputSize;
/**

    Sets the minimum allowed input bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

    @param minInputBitrate The minimum allowed input bitrate, in kbps.
*/
- (void) updateMinInputBitrate:(int)minInputBitrate;
/**

    Sets the minimum allowed input encoding.
    A value of null indicates unset (no minimum).

    @param minInputEncoding The minimum allowed input encoding.
*/
- (void) updateMinInputEncoding:(FMLiveSwitchEncodingInfo*)minInputEncoding;
/**

    Sets the minimum allowed input frame-rate.
    A value of -1 indicates unset (no minimum).

    @param minInputFrameRate The minimum allowed input frame-rate.
*/
- (void) updateMinInputFrameRate:(double)minInputFrameRate;
/**

    Sets the minimum allowed input scale.
    A value of -1 indicates unset (no minimum).

    @param minInputScale The minimum allowed input scale.
*/
- (void) updateMinInputScale:(double)minInputScale;
/**

    Sets the minimum allowed input size.
    A value of -1 indicates unset (no minimum).

    @param minInputSize The minimum allowed input size.
*/
- (void) updateMinInputSize:(FMLiveSwitchSize*)minInputSize;
/**

    Sets the system delay in ticks.

    @param systemDelay The system delay.
*/
- (void) updateSystemDelay:(long long)systemDelay;
/**

    Sets the video type.

    @param videoType The video type.
*/
- (void) updateVideoType:(FMLiveSwitchVideoType)videoType;

@end

/**

    An audio sink that discards frames.

*/
@interface FMLiveSwitchNullAudioSink : FMLiveSwitchAudioSink

/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchAudioFrame*)frame inputBuffer:(FMLiveSwitchAudioBuffer*)inputBuffer;
/**

    Gets the current frame count.

*/
- (long long) frameCount;
/**

    Initializes a new FMLiveSwitchNullAudioSink.

*/
- (instancetype) init;
/**

    Initializes a new FMLiveSwitchNullAudioSink.

    @param inputFormat The input format.
*/
- (instancetype) initWithInputFormat:(FMLiveSwitchAudioFormat*)inputFormat;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Initializes a new FMLiveSwitchNullAudioSink.

*/
+ (FMLiveSwitchNullAudioSink*) nullAudioSink;
/**

    Initializes a new FMLiveSwitchNullAudioSink.

    @param inputFormat The input format.
*/
+ (FMLiveSwitchNullAudioSink*) nullAudioSinkWithInputFormat:(FMLiveSwitchAudioFormat*)inputFormat;
/**

    Gets the output RTP stream identifier.
    If the output RTP stream identifier is null (unset),
    then getting this property returns the InputRtpStreamId.

*/
- (NSString*) outputRtpStreamId;
/**

    Gets the output synchronization source.
    If the output synchronization source is -1 (unset),
    then getting this property returns the InputSynchronizationSource.

*/
- (long long) outputSynchronizationSource;
/**

    Processes a control frame by raising it.

    @param controlFrame The control frame.
*/
- (void) processControlFrame:(FMLiveSwitchMediaControlFrame*)controlFrame;
/**

    Processes control frames by raising them.

    @param controlFrames The control frames.
*/
- (void) processControlFrames:(NSMutableArray*)controlFrames;
/**

    Creates a future that resolves when the specified
    number of frames have been processed.

    @param count 
*/
- (FMLiveSwitchFuture<id>*) processedFramesWithCount:(long long)count;
/**

    Sets the output RTP stream identifier.
    If the output RTP stream identifier is null (unset),
    then getting this property returns the InputRtpStreamId.

*/
- (void) setOutputRtpStreamId:(NSString*)value;
/**

    Sets the output synchronization source.
    If the output synchronization source is -1 (unset),
    then getting this property returns the InputSynchronizationSource.

*/
- (void) setOutputSynchronizationSource:(long long)value;
/**

    Sets the maximum allowed input bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

    @param maxInputBitrate The maximum allowed input bitrate, in kbps.
*/
- (void) updateMaxInputBitrate:(int)maxInputBitrate;
/**

    Sets the maximum allowed input encoding.
    A value of null indicates unset (no maximum).

    @param maxInputEncoding The maximum allowed input encoding.
*/
- (void) updateMaxInputEncoding:(FMLiveSwitchEncodingInfo*)maxInputEncoding;
/**

    Sets the minimum allowed input bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

    @param minInputBitrate The minimum allowed input bitrate, in kbps.
*/
- (void) updateMinInputBitrate:(int)minInputBitrate;
/**

    Sets the minimum allowed input encoding.
    A value of null indicates unset (no minimum).

    @param minInputEncoding The minimum allowed input encoding.
*/
- (void) updateMinInputEncoding:(FMLiveSwitchEncodingInfo*)minInputEncoding;
/**

    Sets the system delay in ticks.

    @param systemDelay The system delay.
*/
- (void) updateSystemDelay:(long long)systemDelay;

@end

/**

    A AudioBuffer containing an RtpHeader.

*/
@interface FMLiveSwitchPacketizedAudioBuffer : FMLiveSwitchAudioBuffer

/**

    Creates a new instance.

*/
- (FMLiveSwitchAudioBuffer*) createInstance;
/**

    Initializes a new instance of the FMLiveSwitchAudioBuffer class.

    @param dataBuffer The data buffer.
    @param format The format.
    @param rtpHeader The RTP header.
*/
- (instancetype) initWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer format:(FMLiveSwitchAudioFormat*)format rtpHeader:(FMLiveSwitchRtpPacketHeader*)rtpHeader;
/**

    Initializes a new instance of the FMLiveSwitchAudioBuffer class.

    @param dataBuffers The data buffers.
    @param format The format.
    @param rtpHeaders The RTP headers.
*/
- (instancetype) initWithDataBuffers:(NSMutableArray*)dataBuffers format:(FMLiveSwitchAudioFormat*)format rtpHeaders:(NSMutableArray*)rtpHeaders;
/**

    Initializes a new instance of the FMLiveSwitchAudioBuffer class.

    @param dataBuffer The data buffer.
    @param format The format.
    @param rtpHeader The RTP header.
*/
+ (FMLiveSwitchPacketizedAudioBuffer*) packetizedAudioBufferWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer format:(FMLiveSwitchAudioFormat*)format rtpHeader:(FMLiveSwitchRtpPacketHeader*)rtpHeader;
/**

    Initializes a new instance of the FMLiveSwitchAudioBuffer class.

    @param dataBuffers The data buffers.
    @param format The format.
    @param rtpHeaders The RTP headers.
*/
+ (FMLiveSwitchPacketizedAudioBuffer*) packetizedAudioBufferWithDataBuffers:(NSMutableArray*)dataBuffers format:(FMLiveSwitchAudioFormat*)format rtpHeaders:(NSMutableArray*)rtpHeaders;

@end

/**

    A video buffer.

*/
@interface FMLiveSwitchVideoBuffer : FMLiveSwitchMediaBuffer<FMLiveSwitchVideoFormat*,FMLiveSwitchVideoBuffer*>

/**

    Clones this instance.

*/
- (FMLiveSwitchVideoBuffer*) clone;
/**

    Creates a new video buffer using the specified format.

    @param format The format.
*/
- (FMLiveSwitchVideoBuffer*) convertWithFormat:(FMLiveSwitchVideoFormat*)format;
/**

    Creates a new video buffer using the specified format.

    @param format The format.
    @param dataBuffer The data buffer.
*/
- (FMLiveSwitchVideoBuffer*) convertWithFormat:(FMLiveSwitchVideoFormat*)format dataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Creates a new video buffer using the specified format.

    @param format The format.
    @param usePool Whether to use the DataBufferPool.
*/
- (FMLiveSwitchVideoBuffer*) convertWithFormat:(FMLiveSwitchVideoFormat*)format usePool:(bool)usePool;
/**

    Copy the transformation attributes from another video buffer.

*/
- (void) copyTransformationAttributesWithSourceBuffer:(FMLiveSwitchVideoBuffer*)sourceBuffer;
/**

    Creates a black (0, 0, 0) video buffer with the specified width/height.

    @param width The width.
    @param height The height.
    @param formatName Name of the format.
*/
+ (FMLiveSwitchVideoBuffer*) createBlackWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/**

    Creates a blue (0, 0, 255) video buffer with the specified width/height.

    @param width The width.
    @param height The height.
    @param formatName Name of the format.
*/
+ (FMLiveSwitchVideoBuffer*) createBlueWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/**

    Creates a custom video buffer with the specified width/height and red/green/blue values
    for the specified format name. If the format is not supported, returns null.

    @param width The width.
    @param height The height.
    @param red The red value.
    @param green The green value.
    @param blue The blue value.
    @param formatName Name of the format.
*/
+ (FMLiveSwitchVideoBuffer*) createCustomWithWidth:(int)width height:(int)height red:(int)red green:(int)green blue:(int)blue formatName:(NSString*)formatName;
/**

    Creates a custom video buffer with the specified width/height and red/green/blue values
    for the specified format name. If the format is not supported, returns null.

    @param width The width.
    @param height The height.
    @param red The red value.
    @param green The green value.
    @param blue The blue value.
    @param formatName Name of the format.
    @param buffer The output data buffer.
*/
+ (FMLiveSwitchVideoBuffer*) createCustomWithWidth:(int)width height:(int)height red:(int)red green:(int)green blue:(int)blue formatName:(NSString*)formatName buffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Creates a cyan (0, 255, 255) video buffer with the specified width/height.

    @param width The width.
    @param height The height.
    @param formatName Name of the format.
*/
+ (FMLiveSwitchVideoBuffer*) createCyanWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/**

    Creates a dark blue (0, 0, 128) video buffer with the specified width/height.

    @param width The width.
    @param height The height.
    @param formatName Name of the format.
*/
+ (FMLiveSwitchVideoBuffer*) createDarkBlueWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/**

    Creates a dark green (0, 128, 0) video buffer with the specified width/height.

    @param width The width.
    @param height The height.
    @param formatName Name of the format.
*/
+ (FMLiveSwitchVideoBuffer*) createDarkGreenWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/**

    Creates a dark red (128, 0, 0) video buffer with the specified width/height.

    @param width The width.
    @param height The height.
    @param formatName Name of the format.
*/
+ (FMLiveSwitchVideoBuffer*) createDarkRedWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/**

    Creates a gray (255, 255, 255) video buffer with the specified width/height.

    @param width The width.
    @param height The height.
    @param formatName Name of the format.
*/
+ (FMLiveSwitchVideoBuffer*) createGrayWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/**

    Creates a green (0, 255, 0) video buffer with the specified width/height.

    @param width The width.
    @param height The height.
    @param formatName Name of the format.
*/
+ (FMLiveSwitchVideoBuffer*) createGreenWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/**

    Creates a new instance.

*/
- (FMLiveSwitchVideoBuffer*) createInstance;
/**

    Creates a magenta (255, 0, 255) video buffer with the specified width/height.

    @param width The width.
    @param height The height.
    @param formatName Name of the format.
*/
+ (FMLiveSwitchVideoBuffer*) createMagentaWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/**

    Creates an olive (128, 128, 0) video buffer with the specified width/height.

    @param width The width.
    @param height The height.
    @param formatName Name of the format.
*/
+ (FMLiveSwitchVideoBuffer*) createOliveWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/**

    Creates a purple (128, 0, 128) video buffer with the specified width/height.

    @param width The width.
    @param height The height.
    @param formatName Name of the format.
*/
+ (FMLiveSwitchVideoBuffer*) createPurpleWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/**

    Creates a red (255, 0, 0) video buffer with the specified width/height.

    @param width The width.
    @param height The height.
    @param formatName Name of the format.
*/
+ (FMLiveSwitchVideoBuffer*) createRedWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/**

    Creates a teal (0, 128, 128) video buffer with the specified width/height.

    @param width The width.
    @param height The height.
    @param formatName Name of the format.
*/
+ (FMLiveSwitchVideoBuffer*) createTealWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/**

    Creates a white (255, 255, 255) video buffer with the specified width/height.

    @param width The width.
    @param height The height.
    @param formatName Name of the format.
*/
+ (FMLiveSwitchVideoBuffer*) createWhiteWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/**

    Creates a yellow (255, 255, 0) video buffer with the specified width/height.

    @param width The width.
    @param height The height.
    @param formatName Name of the format.
*/
+ (FMLiveSwitchVideoBuffer*) createYellowWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/**

    Deserializes an array of instances from JSON.

    @param videoBuffersJson The video buffers JSON.
*/
+ (NSMutableArray*) fromJsonArrayWithVideoBuffersJson:(NSString*)videoBuffersJson;
/**

    Deserializes an instance from JSON.

    @param videoBufferJson The video buffer JSON.
*/
+ (FMLiveSwitchVideoBuffer*) fromJsonWithVideoBufferJson:(NSString*)videoBufferJson;
/**

    Gets the A value at a given index.
    If the video buffer is not RGBA-type, then this will return 255.

    @param index The index.
    @return The A value.
*/
- (int) getAValueWithIndex:(int)index;
/**

    Gets the B value at a given index.

    @param index The index.
    @return The B value, or -1 if the video buffer is not RGB/RGBA-type.
*/
- (int) getBValueWithIndex:(int)index;
/**

    Gets the G value at a given index.

    @param index The index.
    @return The G value, or -1 if the video buffer is not RGB/RGBA-type.
*/
- (int) getGValueWithIndex:(int)index;
/**

    Gets the minimum data buffer length for a given width, height, and format.

    @param width The width.
    @param height The height.
    @param formatName Name of the format.
*/
+ (int) getMinimumBufferLengthWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/**

    Gets the R value at a given index.

    @param index The index.
    @return The R value, or -1 if the video buffer is not RGB/RGBA-type.
*/
- (int) getRValueWithIndex:(int)index;
/**

    Gets the U value at a given index.

    @param index The index.
    @return The U value, or -1 if the video buffer is not YUV-type.
*/
- (int) getUValueWithIndex:(int)index;
/**

    Gets the V value at a given index.

    @param index The index.
    @return The V value, or -1 if the video buffer is not YUV-type.
*/
- (int) getVValueWithIndex:(int)index;
/**

    Gets the Y value at a given index.

    @param index The index.
    @return The Y value, or -1 if the video buffer is not YUV-type.
*/
- (int) getYValueWithIndex:(int)index;
/**

    Gets the height.

*/
- (int) height;
/**

    Gets whether this buffer should be mirrored over the X axis.

*/
- (bool) horizontallyMirrored;
/**

    Initializes a new instance of the FMLiveSwitchVideoBuffer class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchVideoBuffer class.

    @param width The width.
    @param height The height.
    @param dataBuffer The data buffer.
    @param format The format.
*/
- (instancetype) initWithWidth:(int)width height:(int)height dataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer format:(FMLiveSwitchVideoFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchVideoBuffer class.

    @param width The width.
    @param height The height.
    @param dataBuffers The data buffers.
    @param format The format.
*/
- (instancetype) initWithWidth:(int)width height:(int)height dataBuffers:(NSMutableArray*)dataBuffers format:(FMLiveSwitchVideoFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchVideoBuffer class.

    @param width The width.
    @param height The height.
    @param stride The stride.
    @param dataBuffer The data buffer.
    @param format The format.
*/
- (instancetype) initWithWidth:(int)width height:(int)height stride:(int)stride dataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer format:(FMLiveSwitchVideoFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchVideoBuffer class.

    @param width The width.
    @param height The height.
    @param strides The strides.
    @param dataBuffers The data buffers.
    @param format The format.
*/
- (instancetype) initWithWidth:(int)width height:(int)height strides:(NSMutableArray*)strides dataBuffers:(NSMutableArray*)dataBuffers format:(FMLiveSwitchVideoFormat*)format;
/**

    Gets whether inversion is required to reset the mirroring of this buffer.

*/
- (bool) inversionRequired;
/**

    Gets a value indicating whether this buffer has ABGR video.

*/
- (bool) isAbgr;
/**

    Gets a value indicating whether this buffer has ARGB video.

*/
- (bool) isArgb;
/**

    Gets a value indicating whether this buffer has BGR video.

*/
- (bool) isBgr;
/**

    Gets a value indicating whether this buffer has BGRA video.

*/
- (bool) isBgra;
/**

    Gets a value indicating whether this buffer has H.264 video.

*/
- (bool) isH264;
/**

    Gets a value indicating whether this buffer has H.265 video.

*/
- (bool) isH265;
/**

    Gets a value indicating whether this buffer has I420 video.

*/
- (bool) isI420;
/**

    Gets a value indicating whether this buffer contains a keyframe.

*/
- (bool) isKeyFrame;
/**

    Gets a value indicating whether this instance has been muted.

*/
- (bool) isMuted;
/**

    Gets a value indicating whether this buffer has NV12 video.

*/
- (bool) isNv12;
/**

    Gets a value indicating whether this buffer has NV21 video.

*/
- (bool) isNv21;
/**

    Gets a value indicating whether the data is packed into a single data buffer.

*/
- (bool) isPacked;
/**

    Gets a value indicating whether the data is spread across multiple data buffers (planes).

*/
- (bool) isPlanar;
/**

    Gets a value indicating whether this buffer has raw video.

*/
- (bool) isRaw;
/**

    Gets a value indicating whether this buffer has RGB video.

*/
- (bool) isRgb;
/**

    Gets a value indicating whether this buffer has RGBA video.

*/
- (bool) isRgba;
/**

    Gets a value indicating whether this buffer has raw RGBA, BGRA, ARGB, or ABGR video.

*/
- (bool) isRgbaType;
/**

    Gets a value indicating whether this buffer has raw RGB or BGR video.

*/
- (bool) isRgbType;
/**

    Gets a value indicating whether this buffer has VP8 video.

*/
- (bool) isVp8;
/**

    Gets a value indicating whether this buffer has VP9 video.

*/
- (bool) isVp9;
/**

    Gets a value indicating whether this buffer has raw I420, YV12, NV12, or NV21 video.

*/
- (bool) isYuvType;
/**

    Gets a value indicating whether this buffer has YV12 video.

*/
- (bool) isYv12;
/**

    Mutes this instance. This is a one-way operation that clears
    the underlying data buffer.

*/
- (bool) mute;
/**

    Gets the desired orientation of the buffer.

*/
- (int) orientation;
/**

    Resets the transformation attributes back to default values.

*/
- (void) resetTransformationAttributes;
/**

    Gets whether rotation is required to reset the mirroring and orientation of this buffer.

*/
- (int) rotationRequired;
/**

    Gets the A value at a given index.
    If the video buffer is not RGBA-type, then this will return false.

    @param aValue The A value.
    @param index The index.
    @return `true` if the video buffer is RGBA-type.
*/
- (bool) setAValue:(int)aValue index:(int)index;
/**

    Gets the B value at a given index.

    @param bValue The B value.
    @param index The index.
    @return `true` if the video buffer is RGB/RGBA-type.
*/
- (bool) setBValue:(int)bValue index:(int)index;
/**

    Sets the G value at a given index.

    @param gValue The G value.
    @param index The index.
    @return `true` if the video buffer is RGB/RGBA-type.
*/
- (bool) setGValue:(int)gValue index:(int)index;
/**

    Sets the height.

*/
- (void) setHeight:(int)value;
/**

    Sets whether this buffer should be mirrored over the X axis.

*/
- (void) setHorizontallyMirrored:(bool)value;
/**

    Sets the desired orientation of the buffer.

*/
- (void) setOrientation:(int)value;
/**

    Sets the R value at a given index.

    @param rValue The R value.
    @param index The index.
    @return `true` if the video buffer is RGB/RGBA-type.
*/
- (bool) setRValue:(int)rValue index:(int)index;
/**

    Sets the stride.

*/
- (void) setStride:(int)value;
/**

    Sets the strides.

*/
- (void) setStrides:(NSMutableArray*)value;
/**

    Sets the U value at a given index.

    @param uValue The U value.
    @param index The index.
    @return `true` if the video buffer is YUV-type.
*/
- (bool) setUValue:(int)uValue index:(int)index;
/**

    Sets whether this buffer should be mirrored over the Y axis.

*/
- (void) setVerticallyMirrored:(bool)value;
/**

    Sets the V value at a given index.

    @param vValue The V value.
    @param index The index.
    @return `true` if the video buffer is YUV-type.
*/
- (bool) setVValue:(int)vValue index:(int)index;
/**

    Sets the width.

*/
- (void) setWidth:(int)value;
/**

    Sets the Y value at a given index.

    @param yValue The Y value.
    @param index The index.
    @return `true` if the video buffer is YUV-type.
*/
- (bool) setYValue:(int)yValue index:(int)index;
/**

    Gets the stride.

*/
- (int) stride;
/**

    Gets the strides.

*/
- (NSMutableArray*) strides;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array of instances to JSON.

    @param videoBuffers The video buffers.
*/
+ (NSString*) toJsonArrayWithVideoBuffers:(NSMutableArray*)videoBuffers;
/**

    Serializes an instance to JSON.

    @param videoBuffer The video buffer.
*/
+ (NSString*) toJsonWithVideoBuffer:(FMLiveSwitchVideoBuffer*)videoBuffer;
/**

    Creates a packed representation of this
    planar buffer, if in YUV-planar format.
    Otherwise, returns the current buffer.
    If the planar data is not contiguous in
    memory, new memory will be allocated for
    the packed representation.

*/
- (FMLiveSwitchVideoBuffer*) toPacked;
/**

    Creates a packed representation of this
    planar buffer, if in YUV-planar format.
    Otherwise, returns the current buffer.
    If the planar data is not contiguous in
    memory, new memory will be allocated or
    taken from the data buffer pool for
    the packed representation.

    @param usePool Whether to use the data buffer pool for any required memory allocations.
*/
- (FMLiveSwitchVideoBuffer*) toPackedWithUsePool:(bool)usePool;
/**

    Creates a planar representation of this
    packed buffer, if in YUV-packed format.
    Otherwise, returns the current buffer.

*/
- (FMLiveSwitchVideoBuffer*) toPlanar;
/**

    Gets a boolean value on whether the buffer needs to be transformed.

*/
- (bool) transformRequired;
/**

    Gets whether this buffer should be mirrored over the Y axis.

*/
- (bool) verticallyMirrored;
/**

    Initializes a new instance of the FMLiveSwitchVideoBuffer class.

*/
+ (FMLiveSwitchVideoBuffer*) videoBuffer;
/**

    Initializes a new instance of the FMLiveSwitchVideoBuffer class.

    @param width The width.
    @param height The height.
    @param dataBuffer The data buffer.
    @param format The format.
*/
+ (FMLiveSwitchVideoBuffer*) videoBufferWithWidth:(int)width height:(int)height dataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer format:(FMLiveSwitchVideoFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchVideoBuffer class.

    @param width The width.
    @param height The height.
    @param dataBuffers The data buffers.
    @param format The format.
*/
+ (FMLiveSwitchVideoBuffer*) videoBufferWithWidth:(int)width height:(int)height dataBuffers:(NSMutableArray*)dataBuffers format:(FMLiveSwitchVideoFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchVideoBuffer class.

    @param width The width.
    @param height The height.
    @param stride The stride.
    @param dataBuffer The data buffer.
    @param format The format.
*/
+ (FMLiveSwitchVideoBuffer*) videoBufferWithWidth:(int)width height:(int)height stride:(int)stride dataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer format:(FMLiveSwitchVideoFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchVideoBuffer class.

    @param width The width.
    @param height The height.
    @param strides The strides.
    @param dataBuffers The data buffers.
    @param format The format.
*/
+ (FMLiveSwitchVideoBuffer*) videoBufferWithWidth:(int)width height:(int)height strides:(NSMutableArray*)strides dataBuffers:(NSMutableArray*)dataBuffers format:(FMLiveSwitchVideoFormat*)format;
/**

    Gets the width.

*/
- (int) width;

@end

/**

    A VideoBuffer containing an RtpHeader.

*/
@interface FMLiveSwitchPacketizedVideoBuffer : FMLiveSwitchVideoBuffer

/**

    Creates a new instance.

*/
- (FMLiveSwitchVideoBuffer*) createInstance;
/**

    Initializes a new instance of the FMLiveSwitchPacketizedVideoBuffer class.

    @param width The width.
    @param height The height.
    @param dataBuffer The data buffer.
    @param format The format.
    @param rtpHeader The RTP header.
*/
- (instancetype) initWithWidth:(int)width height:(int)height dataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer format:(FMLiveSwitchVideoFormat*)format rtpHeader:(FMLiveSwitchRtpPacketHeader*)rtpHeader;
/**

    Initializes a new instance of the FMLiveSwitchPacketizedVideoBuffer class.

    @param width The width.
    @param height The height.
    @param dataBuffers The data buffers.
    @param format The format.
    @param rtpHeaders The RTP headers.
*/
- (instancetype) initWithWidth:(int)width height:(int)height dataBuffers:(NSMutableArray*)dataBuffers format:(FMLiveSwitchVideoFormat*)format rtpHeaders:(NSMutableArray*)rtpHeaders;
/**

    Initializes a new instance of the FMLiveSwitchPacketizedVideoBuffer class.

    @param width The width.
    @param height The height.
    @param dataBuffer The data buffer.
    @param format The format.
    @param rtpHeader The RTP header.
*/
+ (FMLiveSwitchPacketizedVideoBuffer*) packetizedVideoBufferWithWidth:(int)width height:(int)height dataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer format:(FMLiveSwitchVideoFormat*)format rtpHeader:(FMLiveSwitchRtpPacketHeader*)rtpHeader;
/**

    Initializes a new instance of the FMLiveSwitchPacketizedVideoBuffer class.

    @param width The width.
    @param height The height.
    @param dataBuffers The data buffers.
    @param format The format.
    @param rtpHeaders The RTP headers.
*/
+ (FMLiveSwitchPacketizedVideoBuffer*) packetizedVideoBufferWithWidth:(int)width height:(int)height dataBuffers:(NSMutableArray*)dataBuffers format:(FMLiveSwitchVideoFormat*)format rtpHeaders:(NSMutableArray*)rtpHeaders;

@end

@interface FMLiveSwitchProcessFramePolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchProcessFramePolicy)value;

@end

/**

    A collection of remote medias.

*/
@interface FMLiveSwitchRemoteMediaCollection : FMLiveSwitchCollection<FMLiveSwitchRemoteMedia*,FMLiveSwitchRemoteMediaCollection*>

/**

    Invoked when an element is added to the collection.

    @param value The value.
*/
- (void) addSuccess:(FMLiveSwitchRemoteMedia*)value;
/**

    Creates an array from a list.

    @param list The list.
*/
- (NSMutableArray*) arrayFromList:(NSMutableArray<FMLiveSwitchRemoteMedia*>*)list;
/**

    Creates a collection.

*/
- (FMLiveSwitchRemoteMediaCollection*) createCollection;
/**

    Gets a media by ID.

    @param idValue The identifier.
*/
- (FMLiveSwitchRemoteMedia*) getById:(NSString*)idValue;
- (instancetype) init;
+ (FMLiveSwitchRemoteMediaCollection*) remoteMediaCollection;
/**

    Invoked when an element is removed from the collection.

    @param value The value.
*/
- (void) removeSuccess:(FMLiveSwitchRemoteMedia*)value;

@end

/**

    A collection of remote medias.

    @deprecated Use RemoteMediaCollection instead.
*/
__deprecated_msg("Use RemoteMediaCollection instead.")
@interface FMLiveSwitchMediaCollection : FMLiveSwitchRemoteMediaCollection

- (instancetype) init;
+ (FMLiveSwitchMediaCollection*) mediaCollection;

@end

@interface FMLiveSwitchMediaPipeStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchMediaPipeState)value;

@end

@interface FMLiveSwitchMediaSinkStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchMediaSinkState)value;

@end

@interface FMLiveSwitchMediaSourceStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchMediaSourceState)value;

@end

@interface FMLiveSwitchMultiplexPolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchMultiplexPolicy)value;

@end

/**

    A NACK Config.
    
    NackConfig is for enabling/configuring negative acknowledgement.
    Negative acknowledgements are used by media receivers to request that a media sender retransmit a packet.
    It is highly effective for video in low-latency networks since video is stateful and the cost of losing a packet is high.
    It is far less effective for audio, where any delay is especially harmful and the cost of losing a packet is not significant. Because of this,
    it is enabled by default for video and disabled by default for audio. You can modify the buffer size using NackConfig, but generally,
    it should be left with default values. The option to set these values will most likely be removed in a future release as our adaptive algorithms improve.

*/
@interface FMLiveSwitchNackConfig : NSObject

/**

    Gets a value indicating whether to disable support for Generic NACKs.

*/
- (bool) disableBuffering;
/**

    Initializes a new instance of the FMLiveSwitchNackConfig class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchNackConfig class.

    @param sendBufferLength Length of the send buffer.
    @param receiveBufferLength Length of the receive buffer.
*/
- (instancetype) initWithSendBufferLength:(int)sendBufferLength receiveBufferLength:(int)receiveBufferLength;
/**

    Initializes a new instance of the FMLiveSwitchNackConfig class.

*/
+ (FMLiveSwitchNackConfig*) nackConfig;
/**

    Initializes a new instance of the FMLiveSwitchNackConfig class.

    @param sendBufferLength Length of the send buffer.
    @param receiveBufferLength Length of the receive buffer.
*/
+ (FMLiveSwitchNackConfig*) nackConfigWithSendBufferLength:(int)sendBufferLength receiveBufferLength:(int)receiveBufferLength;
/**

    Gets the number of packets to hold in the generic
    NACK buffer awaiting an earlier packet before releasing them.
    Defaults to 128.

*/
- (int) receiveBufferLength;
/**

    Gets the length of the send buffer.

*/
- (int) sendBufferLength;
/**

    Sets the number of packets to hold in the generic
    NACK buffer awaiting an earlier packet before releasing them.
    Defaults to 128.

*/
- (void) setReceiveBufferLength:(int)value;
/**

    Sets the length of the send buffer.

*/
- (void) setSendBufferLength:(int)value;

@end

@interface FMLiveSwitchNackPolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchNackPolicy)value;

@end

/**

    An Ogg audio recorder.

*/
@interface FMLiveSwitchOggAudioRecorder : FMLiveSwitchAudioRecorder

/**

    Gets the file artist.

*/
- (NSString*) artist;
/**

    Initializes a new instance of the FMLiveSwitchOggAudioRecorder class.

    @param path The path.
    @param inputFormat The input format.
*/
+ (FMLiveSwitchOggAudioRecorder*) audioRecorderWithPath:(NSString*)path inputFormat:(FMLiveSwitchAudioFormat*)inputFormat;
/**

    Updates the file header.

*/
- (void) doUpdateHeader;
/**

    Writes the file header.

*/
- (void) doWriteHeader;
/**

    Write an encoded video frame.

    @param buffer The encoded buffer.
    @param presentationTimestamp The presentation timestamp.
    @return `true` if the encoded frame was written successfully; otherwise, `false`
*/
- (bool) doWriteWithBuffer:(FMLiveSwitchAudioBuffer*)buffer presentationTimestamp:(long long)presentationTimestamp;
/**

    Initializes a new instance of the FMLiveSwitchOggAudioRecorder class.

    @param path The path.
    @param inputFormat The input format.
*/
- (instancetype) initWithPath:(NSString*)path inputFormat:(FMLiveSwitchAudioFormat*)inputFormat;
/**

    Sets the file artist.

*/
- (void) setArtist:(NSString*)value;
/**

    Sets the file title.

*/
- (void) setTitle:(NSString*)value;
/**

    Sets the file vendor.

*/
- (void) setVendor:(NSString*)value;
/**

    Gets the file title.

*/
- (NSString*) title;
/**

    Gets the file vendor.

*/
- (NSString*) vendor;

@end

/**

    An Ogg-file-based audio sink.

*/
@interface FMLiveSwitchOggAudioSink : FMLiveSwitchAudioSink

/**

    Adds a handler that is raised when an existing file is close in response to
    this sink being deactivated or destroyed.

*/
- (void) addOnFileClose:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when a new file is opened in response to
    this sink being activated and processing a frame.

*/
- (void) addOnFileOpen:(FMLiveSwitchAction0*)value;
/**

    Initializes a new instance of the FMLiveSwitchOggAudioSink class.

    @param path The path.
    @param format The format.
*/
+ (FMLiveSwitchOggAudioSink*) audioSinkWithPath:(NSString*)path format:(FMLiveSwitchAudioFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchOggAudioSink class.

    @param path The path.
    @param input The input.
*/
+ (FMLiveSwitchOggAudioSink*) audioSinkWithPath:(NSString*)path input:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Gets the base timestamp - the timestamp of the first frame
    processed by the recorder after being activated. This timestamp
    will change each time a new file is created in response to the
    sink being activated.

*/
- (long long) baseTimestamp;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchAudioFrame*)frame inputBuffer:(FMLiveSwitchAudioBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchOggAudioSink class.

    @param path The path.
    @param format The format.
*/
- (instancetype) initWithPath:(NSString*)path format:(FMLiveSwitchAudioFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchOggAudioSink class.

    @param path The path.
    @param input The input.
*/
- (instancetype) initWithPath:(NSString*)path input:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets the last known file path.

*/
- (NSString*) lastFilePath;
/**

    Gets the last timestamp processed by the recorder.

*/
- (long long) lastTimestamp;
/**

    Gets the currently open file path.

*/
- (NSString*) openFilePath;
/**

    Gets the path.

*/
- (NSString*) path;
/**

    Removes a handler that is raised when an existing file is close in response to
    this sink being deactivated or destroyed.

*/
- (void) removeOnFileClose:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when a new file is opened in response to
    this sink being activated and processing a frame.

*/
- (void) removeOnFileOpen:(FMLiveSwitchAction0*)value;

@end

/**

    An Ogg page.

*/
@interface FMLiveSwitchOggPage : NSObject

/**

    Gets the absolute granule position.

*/
- (int) absoluteGranulePosition;
/**

    Gets whether this page is the first page of the bitstream.

*/
- (bool) beginningOfStream;
/**

    Gets whether this page is a continued (not fresh) packet.

*/
- (bool) continuedPacket;
/**

    Gets whether this page is the last page of the bitstream.

*/
- (bool) endOfStream;
/**

    Gets the page as a byte array.

*/
- (NSMutableData*) getBytes;
/**

    Initializes a new instance of the FMLiveSwitchOggPage class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchOggPage class.

*/
+ (FMLiveSwitchOggPage*) page;
/**

    Gets the data payload.

*/
- (NSMutableData*) payload;
/**

    Gets the page sequence number.

*/
- (int) sequenceNumber;
/**

    Sets the absolute granule position.

*/
- (void) setAbsoluteGranulePosition:(int)value;
/**

    Sets whether this page is the first page of the bitstream.

*/
- (void) setBeginningOfStream:(bool)value;
/**

    Sets whether this page is a continued (not fresh) packet.

*/
- (void) setContinuedPacket:(bool)value;
/**

    Sets whether this page is the last page of the bitstream.

*/
- (void) setEndOfStream:(bool)value;
/**

    Sets the data payload.

*/
- (void) setPayload:(NSMutableData*)value;
/**

    Sets the page sequence number.

*/
- (void) setSequenceNumber:(int)value;
/**

    Sets the stream serial number.

*/
- (void) setStreamSerialNumber:(int)value;
/**

    Gets the stream serial number.

*/
- (int) streamSerialNumber;

@end

/**

    Header type flags for an FMLiveSwitchOggPage. Can be set in the 5th byte of each page.

*/
@interface FMLiveSwitchOggPageHeaderType : NSObject

/**

    Gets a value indicating that all values are set.

*/
+ (uint8_t) all;
/**

    Gets a value indicating whether or not this is the first page in the bitstream.

*/
+ (uint8_t) firstPage;
- (instancetype) init;
/**

    Gets a value indicating whether or not the page is a continuation of a previous page.

*/
+ (uint8_t) isContinued;
/**

    Gets a value indicating whether or not this is the last page in the bitstream.

*/
+ (uint8_t) lastPage;
/**

    Gets a value indicating an empty value.

*/
+ (uint8_t) none;
+ (FMLiveSwitchOggPageHeaderType*) pageHeaderType;

@end

/**

    An Opus depacketizer.

*/
@interface FMLiveSwitchOpusDepacketizer : FMLiveSwitchBasicAudioDepacketizer

/**

    Initializes a new instance of the FMLiveSwitchOpusDepacketizer class.

*/
+ (FMLiveSwitchOpusDepacketizer*) depacketizer;
/**

    Initializes a new instance of the FMLiveSwitchOpusDepacketizer class.

    @param config The configuration.
*/
+ (FMLiveSwitchOpusDepacketizer*) depacketizerWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchOpusDepacketizer class.

    @param input The input.
*/
+ (FMLiveSwitchOpusDepacketizer*) depacketizerWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchOpusDepacketizer class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchOpusDepacketizer class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchOpusDepacketizer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;

@end

/**

    An Opus format.

*/
@interface FMLiveSwitchOpusFormat : FMLiveSwitchAudioFormat

/**

    Creates a new instance.

*/
- (FMLiveSwitchAudioFormat*) createInstance;
/**

    Gets the default clock rate (2).

*/
+ (int) defaultChannelCount;
/**

    Gets the default clock rate (48000).

*/
+ (int) defaultClockRate;
/**

    Gets the default configuration (48000/2).

*/
+ (FMLiveSwitchAudioConfig*) defaultConfig;
/**

    Initializes a new instance of the FMLiveSwitchOpusFormat class.

*/
+ (FMLiveSwitchOpusFormat*) format;
/**

    Initializes a new instance of the FMLiveSwitchOpusFormat class.

    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
+ (FMLiveSwitchOpusFormat*) formatWithClockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Initializes a new instance of the FMLiveSwitchOpusFormat class.

    @param config The configuration.
*/
+ (FMLiveSwitchOpusFormat*) formatWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchOpusFormat class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchOpusFormat class.

    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
- (instancetype) initWithClockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Initializes a new instance of the FMLiveSwitchOpusFormat class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Gets the maximum bitrate supported by this format, in kbps.

*/
- (int) maxBitrate;
/**

    Gets the minimum bitrate supported by this format, in kbps.

*/
- (int) minBitrate;

@end

/**

    An Opus packetizer.

*/
@interface FMLiveSwitchOpusPacketizer : FMLiveSwitchBasicAudioPacketizer

/**

    Initializes a new instance of the FMLiveSwitchOpusPacketizer class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchOpusPacketizer class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchOpusPacketizer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Initializes a new instance of the FMLiveSwitchOpusPacketizer class.

*/
+ (FMLiveSwitchOpusPacketizer*) packetizer;
/**

    Initializes a new instance of the FMLiveSwitchOpusPacketizer class.

    @param config The configuration.
*/
+ (FMLiveSwitchOpusPacketizer*) packetizerWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchOpusPacketizer class.

    @param input The input.
*/
+ (FMLiveSwitchOpusPacketizer*) packetizerWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;

@end

/**

    A PCMA (G.711a) decoder.

*/
@interface FMLiveSwitchPcmaDecoder : FMLiveSwitchAudioDecoder

/**

    Initializes a new instance of the FMLiveSwitchPcmaDecoder class.

*/
+ (FMLiveSwitchPcmaDecoder*) decoder;
/**

    Initializes a new instance of the FMLiveSwitchPcmaDecoder class.

    @param config The configuration.
*/
+ (FMLiveSwitchPcmaDecoder*) decoderWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchPcmaDecoder class.

    @param input The input.
*/
+ (FMLiveSwitchPcmaDecoder*) decoderWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchAudioFrame*)frame inputBuffer:(FMLiveSwitchAudioBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchPcmaDecoder class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchPcmaDecoder class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchPcmaDecoder class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;

@end

/**

    A PCMA (G.711a) depacketizer.

*/
@interface FMLiveSwitchPcmaDepacketizer : FMLiveSwitchBasicAudioDepacketizer

/**

    Initializes a new instance of the FMLiveSwitchPcmaDepacketizer class.

*/
+ (FMLiveSwitchPcmaDepacketizer*) depacketizer;
/**

    Initializes a new instance of the FMLiveSwitchPcmaDepacketizer class.

    @param config The configuration.
*/
+ (FMLiveSwitchPcmaDepacketizer*) depacketizerWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchPcmaDepacketizer class.

    @param input The input.
*/
+ (FMLiveSwitchPcmaDepacketizer*) depacketizerWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchPcmaDepacketizer class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchPcmaDepacketizer class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchPcmaDepacketizer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;

@end

/**

    A PCMA (G.711a) encoder.

*/
@interface FMLiveSwitchPcmaEncoder : FMLiveSwitchAudioEncoder

/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchAudioFrame*)frame inputBuffer:(FMLiveSwitchAudioBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchPcmaEncoder class.

*/
+ (FMLiveSwitchPcmaEncoder*) encoder;
/**

    Initializes a new instance of the FMLiveSwitchPcmaEncoder class.

    @param config The configuration.
*/
+ (FMLiveSwitchPcmaEncoder*) encoderWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchPcmaEncoder class.

    @param input The input.
*/
+ (FMLiveSwitchPcmaEncoder*) encoderWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchPcmaEncoder class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchPcmaEncoder class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchPcmaEncoder class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;

@end

/**

    A PCMA (G.711a) format.

*/
@interface FMLiveSwitchPcmaFormat : FMLiveSwitchG711Format

/**

    Creates a new instance.

*/
- (FMLiveSwitchAudioFormat*) createInstance;
/**

    Initializes a new instance of the FMLiveSwitchPcmaFormat class.

*/
+ (FMLiveSwitchPcmaFormat*) format;
/**

    Initializes a new instance of the FMLiveSwitchPcmaFormat class.

    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
+ (FMLiveSwitchPcmaFormat*) formatWithClockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Initializes a new instance of the FMLiveSwitchPcmaFormat class.

    @param config The configuration.
*/
+ (FMLiveSwitchPcmaFormat*) formatWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchPcmaFormat class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchPcmaFormat class.

    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
- (instancetype) initWithClockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Initializes a new instance of the FMLiveSwitchPcmaFormat class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;

@end

/**

    A PCMA (G.711a) packetizer.

*/
@interface FMLiveSwitchPcmaPacketizer : FMLiveSwitchBasicAudioPacketizer

/**

    Initializes a new instance of the FMLiveSwitchPcmaPacketizer class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchPcmaPacketizer class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchPcmaPacketizer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Initializes a new instance of the FMLiveSwitchPcmaPacketizer class.

*/
+ (FMLiveSwitchPcmaPacketizer*) packetizer;
/**

    Initializes a new instance of the FMLiveSwitchPcmaPacketizer class.

    @param config The configuration.
*/
+ (FMLiveSwitchPcmaPacketizer*) packetizerWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchPcmaPacketizer class.

    @param input The input.
*/
+ (FMLiveSwitchPcmaPacketizer*) packetizerWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;

@end

/**

    A PCMU (G.711u) decoder.

*/
@interface FMLiveSwitchPcmuDecoder : FMLiveSwitchAudioDecoder

/**

    Initializes a new instance of the FMLiveSwitchPcmuDecoder class.

*/
+ (FMLiveSwitchPcmuDecoder*) decoder;
/**

    Initializes a new instance of the FMLiveSwitchPcmuDecoder class.

    @param config The configuration.
*/
+ (FMLiveSwitchPcmuDecoder*) decoderWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchPcmuDecoder class.

    @param input The input.
*/
+ (FMLiveSwitchPcmuDecoder*) decoderWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchAudioFrame*)frame inputBuffer:(FMLiveSwitchAudioBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchPcmuDecoder class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchPcmuDecoder class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchPcmuDecoder class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;

@end

/**

    A PCMA (G.711u) depacketizer.

*/
@interface FMLiveSwitchPcmuDepacketizer : FMLiveSwitchBasicAudioDepacketizer

/**

    Initializes a new instance of the FMLiveSwitchPcmuDepacketizer class.

*/
+ (FMLiveSwitchPcmuDepacketizer*) depacketizer;
/**

    Initializes a new instance of the FMLiveSwitchPcmuDepacketizer class.

    @param config The configuration.
*/
+ (FMLiveSwitchPcmuDepacketizer*) depacketizerWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchPcmuDepacketizer class.

    @param input The input.
*/
+ (FMLiveSwitchPcmuDepacketizer*) depacketizerWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchPcmuDepacketizer class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchPcmuDepacketizer class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchPcmuDepacketizer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;

@end

/**

    A PCMU (G.711u) encoder.

*/
@interface FMLiveSwitchPcmuEncoder : FMLiveSwitchAudioEncoder

/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchAudioFrame*)frame inputBuffer:(FMLiveSwitchAudioBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchPcmuEncoder class.

*/
+ (FMLiveSwitchPcmuEncoder*) encoder;
/**

    Initializes a new instance of the FMLiveSwitchPcmuEncoder class.

    @param config The configuration.
*/
+ (FMLiveSwitchPcmuEncoder*) encoderWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchPcmuEncoder class.

    @param input The input.
*/
+ (FMLiveSwitchPcmuEncoder*) encoderWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchPcmuEncoder class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchPcmuEncoder class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchPcmuEncoder class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;

@end

/**

    A PCMU (G.711u) format.

*/
@interface FMLiveSwitchPcmuFormat : FMLiveSwitchG711Format

/**

    Creates a new instance.

*/
- (FMLiveSwitchAudioFormat*) createInstance;
/**

    Initializes a new instance of the FMLiveSwitchPcmuFormat class.

*/
+ (FMLiveSwitchPcmuFormat*) format;
/**

    Initializes a new instance of the FMLiveSwitchPcmuFormat class.

    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
+ (FMLiveSwitchPcmuFormat*) formatWithClockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Initializes a new instance of the FMLiveSwitchPcmuFormat class.

    @param config The configuration.
*/
+ (FMLiveSwitchPcmuFormat*) formatWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchPcmuFormat class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchPcmuFormat class.

    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
- (instancetype) initWithClockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Initializes a new instance of the FMLiveSwitchPcmuFormat class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;

@end

/**

    A PCMU (G.711u) packetizer.

*/
@interface FMLiveSwitchPcmuPacketizer : FMLiveSwitchBasicAudioPacketizer

/**

    Initializes a new instance of the FMLiveSwitchPcmuPacketizer class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchPcmuPacketizer class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchPcmuPacketizer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Initializes a new instance of the FMLiveSwitchPcmuPacketizer class.

*/
+ (FMLiveSwitchPcmuPacketizer*) packetizer;
/**

    Initializes a new instance of the FMLiveSwitchPcmuPacketizer class.

    @param config The configuration.
*/
+ (FMLiveSwitchPcmuPacketizer*) packetizerWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchPcmuPacketizer class.

    @param input The input.
*/
+ (FMLiveSwitchPcmuPacketizer*) packetizerWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;

@end

/**

    A PCM depacketizer.

*/
@interface FMLiveSwitchPcmDepacketizer : FMLiveSwitchBasicAudioDepacketizer

/**

    Initializes a new instance of the FMLiveSwitchPcmDepacketizer class.

    @param config The configuration.
*/
+ (FMLiveSwitchPcmDepacketizer*) depacketizerWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchPcmDepacketizer class.

    @param input The input.
*/
+ (FMLiveSwitchPcmDepacketizer*) depacketizerWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchPcmDepacketizer class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchPcmDepacketizer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;

@end

/**

    A PCM format.

*/
@interface FMLiveSwitchPcmFormat : FMLiveSwitchAudioFormat

/**

    Initializes a new instance of the FMLiveSwitchPcmFormat class.

    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
+ (FMLiveSwitchPcmFormat*) formatWithClockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Initializes a new instance of the FMLiveSwitchPcmFormat class.

    @param config The configuration.
*/
+ (FMLiveSwitchPcmFormat*) formatWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchPcmFormat class.

    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
- (instancetype) initWithClockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Initializes a new instance of the FMLiveSwitchPcmFormat class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;

@end

/**

    A PCM packetizer.

*/
@interface FMLiveSwitchPcmPacketizer : FMLiveSwitchBasicAudioPacketizer

/**

    Initializes a new instance of the FMLiveSwitchPcmPacketizer class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchPcmPacketizer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchPcmPacketizer class.

    @param config The configuration.
*/
+ (FMLiveSwitchPcmPacketizer*) packetizerWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchPcmPacketizer class.

    @param input The input.
*/
+ (FMLiveSwitchPcmPacketizer*) packetizerWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input;

@end

/**

    An RTCP Feedback PS-PLI packet.

*/
@interface FMLiveSwitchPliControlFrame : FMLiveSwitchPayloadSpecificControlFrame

/**

    Initializes a new instance of the FMLiveSwitchPliControlFrame class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchPliControlFrame class.

    @param buffer The buffer.
*/
- (instancetype) initWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchPliControlFrame class.

*/
+ (FMLiveSwitchPliControlFrame*) pliControlFrame;
/**

    Initializes a new instance of the FMLiveSwitchPliControlFrame class.

    @param buffer The buffer.
*/
+ (FMLiveSwitchPliControlFrame*) pliControlFrameWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Gets the type of the registered feedback message.

*/
+ (int) registeredFeedbackMessageType;

@end

/**

    RED Forward error correction (FEC) config.
    RedFecConfig is for enabling/configuring forward error correction.
    Forward error correction adds redundancy to the media stream (increased bandwidth)
    with the intention that media receivers can recover from packet loss without requiring the media server to retransmit anything.
    It is a last resort for high latency networks.
    It is disabled by default and not currently supported as it does not have sufficient test coverage.

*/
@interface FMLiveSwitchRedFecConfig : NSObject

/**

    Gets the FEC activation threshold. FEC is activated when the RTCP receiver reports indicate that more than this threshold value of packets were lost (but only if supported by the remote peer);
    when this value diminishes blow the threshold, FEC is deactivated.
    The value is denoted in percentage points (between 0 and 100). Affects encoded data only.
    Defaults to 5.

*/
- (int) activationThreshold;
/**

    Gets a value indicating whether to
    use algorithms tuned for bursty packet loss.
    Bursty packet loss is more common on wireless
    networks.
    Defaults to false on desktop platforms and true
    on mobile platforms.

*/
- (bool) bursty;
/**

    Gets the parameters used to protect delta frames.

*/
- (FMLiveSwitchFecProtectionParameters*) deltaParameters;
/**

    Gets a value indicating whether RED Forward Error Correction (FEC) is disabled.

*/
- (bool) disabled;
/**

    Initializes a new instance of the FMLiveSwitchRedFecConfig class.

*/
- (instancetype) init;
/**

    Gets the parameters used to protect key-frames.

*/
- (FMLiveSwitchFecProtectionParameters*) keyFrameParameters;
/**

    Initializes a new instance of the FMLiveSwitchRedFecConfig class.

*/
+ (FMLiveSwitchRedFecConfig*) redFecConfig;
/**

    Sets the FEC activation threshold. FEC is activated when the RTCP receiver reports indicate that more than this threshold value of packets were lost (but only if supported by the remote peer);
    when this value diminishes blow the threshold, FEC is deactivated.
    The value is denoted in percentage points (between 0 and 100). Affects encoded data only.
    Defaults to 5.

*/
- (void) setActivationThreshold:(int)value;
/**

    Sets a value indicating whether to
    use algorithms tuned for bursty packet loss.
    Bursty packet loss is more common on wireless
    networks.
    Defaults to false on desktop platforms and true
    on mobile platforms.

*/
- (void) setBursty:(bool)value;
/**

    Sets the parameters used to protect delta frames.

*/
- (void) setDeltaParameters:(FMLiveSwitchFecProtectionParameters*)value;
/**

    Sets the parameters used to protect key-frames.

*/
- (void) setKeyFrameParameters:(FMLiveSwitchFecProtectionParameters*)value;

@end

@interface FMLiveSwitchRedFecPolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchRedFecPolicy)value;

@end

/**

    An RTCP receiver estimated maximum bitrate (REMB) packet.

*/
@interface FMLiveSwitchRembControlFrame : FMLiveSwitchPayloadSpecificControlFrame

/**

    Gets the bitrate exponent.

*/
- (int) bitrateExponent;
/**

    Gets the bitrate mantissa, in bits per second (bps).

*/
- (int) bitrateMantissa;
/**

    Returns a string representation of this REMB Control Frame

*/
- (NSString*) description;
/**

    Initializes a new instance of the FMLiveSwitchRembControlFrame class.

    @param bitrate Bitrate in bps.
    @param ssrcEntries SSRC entries, for which this feedback is applicable.
*/
- (instancetype) initWithBitrate:(long long)bitrate ssrcEntries:(NSMutableArray*)ssrcEntries;
/**

    Initializes a new instance of the FMLiveSwitchRembControlFrame class.

    @param buffer The buffer.
*/
- (instancetype) initWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Gets the type of the receiver estimated maximum bitrate message.

*/
+ (int) registeredFeedbackMessageType;
/**

    Initializes a new instance of the FMLiveSwitchRembControlFrame class.

    @param bitrate Bitrate in bps.
    @param ssrcEntries SSRC entries, for which this feedback is applicable.
*/
+ (FMLiveSwitchRembControlFrame*) rembControlFrameWithBitrate:(long long)bitrate ssrcEntries:(NSMutableArray*)ssrcEntries;
/**

    Initializes a new instance of the FMLiveSwitchRembControlFrame class.

    @param buffer The buffer.
*/
+ (FMLiveSwitchRembControlFrame*) rembControlFrameWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Sets the bitrate exponent.

*/
- (void) setBitrateExponent:(int)value;
/**

    Sets the bitrate mantissa, in bits per second (bps).

*/
- (void) setBitrateMantissa:(int)value;
/**

    Sets the SSRC entries that this message applies to.

*/
- (void) setSsrcEntries:(NSMutableArray*)value;
/**

    Gets the SSRC entries that this message applies to.

*/
- (NSMutableArray*) ssrcEntries;

@end

@interface FMLiveSwitchRembPolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchRembPolicy)value;

@end

/**

    A collection of remote audio/video tracks.

*/
@interface FMLiveSwitchRemoteMedia : FMLiveSwitchMedia<FMLiveSwitchAudioTrack*,FMLiveSwitchVideoTrack*><FMLiveSwitchIRemoteMedia, FMLiveSwitchIMedia>

/**

    Creates an array of tracks from a list of audio tracks.

    @param tracks The list of tracks.
*/
- (NSMutableArray*) arrayFromAudioTracks:(NSMutableArray<FMLiveSwitchAudioTrack*>*)tracks;
/**

    Creates an array of tracks from a list of video tracks.

    @param tracks The list of tracks.
*/
- (NSMutableArray*) arrayFromVideoTracks:(NSMutableArray<FMLiveSwitchVideoTrack*>*)tracks;
/**

    Gets the first audio sink.

*/
- (FMLiveSwitchAudioSink*) audioSink;
/**

    Gets the current audio sink output
    of the first audio track.

*/
- (FMLiveSwitchSinkOutput*) audioSinkOutput;
/**

    Gets the audio sinks.

*/
- (NSMutableArray*) audioSinks;
/**

    Changes the audio sink output of the first
    audio track while the media is active.

    @param audioSinkOutput The audio sink output.
*/
- (FMLiveSwitchFuture<id>*) changeAudioSinkOutput:(FMLiveSwitchSinkOutput*)audioSinkOutput;
/**

    Changes the video sink output of the first
    video track while the media is active.

    @param videoSinkOutput The video sink output.
*/
- (FMLiveSwitchFuture<id>*) changeVideoSinkOutput:(FMLiveSwitchSinkOutput*)videoSinkOutput;
/**

    Creates an audio track collection.

*/
- (NSMutableArray<FMLiveSwitchAudioTrack*>*) createAudioTrackCollection;
/**

    Creates a video track collection.

*/
- (NSMutableArray<FMLiveSwitchVideoTrack*>*) createVideoTrackCollection;
/**

    Gets the available audio sink outputs
    of the first audio track.

    @return 
            A future with an array of audio sink outputs.
            
*/
- (FMLiveSwitchFuture<NSMutableArray*>*) getAudioSinkOutputs;
/**

    Gets the available video sink outputs
    of the first video track.

    @return 
            A future with an array of video sink outputs.
            
*/
- (FMLiveSwitchFuture<NSMutableArray*>*) getVideoSinkOutputs;
- (instancetype) init;
/**

    Gets the audio/video sinks.

*/
- (NSMutableArray*) mediaSinks;
+ (FMLiveSwitchRemoteMedia*) remoteMedia;
/**

    Sets the current audio sink output
    of the first audio track.

*/
- (void) setAudioSinkOutput:(FMLiveSwitchSinkOutput*)value;
/**

    Sets the current video sink output
    of the first video track.

*/
- (void) setVideoSinkOutput:(FMLiveSwitchSinkOutput*)value;
/**

    Gets the first video sink.

*/
- (FMLiveSwitchVideoSink*) videoSink;
/**

    Gets the current video sink output
    of the first video track.

*/
- (FMLiveSwitchSinkOutput*) videoSinkOutput;
/**

    Gets the video sinks.

*/
- (NSMutableArray*) videoSinks;

@end

/**

    An RTCP report block.

*/
@interface FMLiveSwitchReportBlock : FMLiveSwitchControlFrameEntry

/**

    Gets the cumulative number of packets lost.

*/
- (int) cumulativeNumberOfPacketsLost;
/**

    Gets the backing data buffer.

*/
- (FMLiveSwitchDataBuffer*) dataBuffer;
/**

    Gets the delay since last sender report.

*/
- (long long) delaySinceLastSenderReport;
/**

    Returns a string that represents this instance.

*/
- (NSString*) description;
/**

    Gets the extended highest sequence number received.

*/
- (long long) extendedHighestSequenceNumberReceived;
/**

    Gets the fixed length of a report block.

*/
+ (int) fixedPayloadLength;
/**

    Gets the fraction lost according to RFC 1889.
    The value has a range of 0 (no packet loss) to 255 (all packets lost).

*/
- (int) fractionLost;
/**

    Initializes a new instance of the FMLiveSwitchReportBlock class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchReportBlock class.

    @param dataBuffer The data buffer.
*/
- (instancetype) initWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Initializes a new instance of the FMLiveSwitchReportBlock class.

    @param fractionLost The fraction lost.
    @param cumulativeNumberOfPacketsLost The cumulative number of packets lost.
    @param extendedHighestSequenceNumberReceived The extended highest sequence number received.
    @param interarrivalJitter The interarrival jitter.
    @param lastSenderReportTimestamp The last sender report timestamp.
    @param delaySinceLastSenderReport The delay since last sender report.
*/
- (instancetype) initWithFractionLost:(int)fractionLost cumulativeNumberOfPacketsLost:(int)cumulativeNumberOfPacketsLost extendedHighestSequenceNumberReceived:(long long)extendedHighestSequenceNumberReceived interarrivalJitter:(long long)interarrivalJitter lastSenderReportTimestamp:(long long)lastSenderReportTimestamp delaySinceLastSenderReport:(long long)delaySinceLastSenderReport;
/**

    Initializes a new instance of the FMLiveSwitchReportBlock class.

    @param synchronizationSource The synchronization source.
    @param fractionLost The fraction lost.
    @param cumulativeNumberOfPacketsLost The cumulative number of packets lost.
    @param extendedHighestSequenceNumberReceived The extended highest sequence number received.
    @param interarrivalJitter The interarrival jitter.
    @param lastSenderReportTimestamp The last sender report timestamp.
    @param delaySinceLastSenderReport The delay since last sender report.
*/
- (instancetype) initWithSynchronizationSource:(long long)synchronizationSource fractionLost:(int)fractionLost cumulativeNumberOfPacketsLost:(int)cumulativeNumberOfPacketsLost extendedHighestSequenceNumberReceived:(long long)extendedHighestSequenceNumberReceived interarrivalJitter:(long long)interarrivalJitter lastSenderReportTimestamp:(long long)lastSenderReportTimestamp delaySinceLastSenderReport:(long long)delaySinceLastSenderReport;
/**

    Gets the interarrival jitter.

*/
- (long long) interarrivalJitter;
/**

    Gets the last sender report timestamp.

*/
- (long long) lastSenderReportTimestamp;
/**

    Gets the percentage of lost packets.
    The value has a range of 0.0 (no packet loss) to 1.0 (all packets lost).

*/
- (double) percentLost;
/**

    Initializes a new instance of the FMLiveSwitchReportBlock class.

*/
+ (FMLiveSwitchReportBlock*) reportBlock;
/**

    Initializes a new instance of the FMLiveSwitchReportBlock class.

    @param dataBuffer The data buffer.
*/
+ (FMLiveSwitchReportBlock*) reportBlockWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Initializes a new instance of the FMLiveSwitchReportBlock class.

    @param fractionLost The fraction lost.
    @param cumulativeNumberOfPacketsLost The cumulative number of packets lost.
    @param extendedHighestSequenceNumberReceived The extended highest sequence number received.
    @param interarrivalJitter The interarrival jitter.
    @param lastSenderReportTimestamp The last sender report timestamp.
    @param delaySinceLastSenderReport The delay since last sender report.
*/
+ (FMLiveSwitchReportBlock*) reportBlockWithFractionLost:(int)fractionLost cumulativeNumberOfPacketsLost:(int)cumulativeNumberOfPacketsLost extendedHighestSequenceNumberReceived:(long long)extendedHighestSequenceNumberReceived interarrivalJitter:(long long)interarrivalJitter lastSenderReportTimestamp:(long long)lastSenderReportTimestamp delaySinceLastSenderReport:(long long)delaySinceLastSenderReport;
/**

    Initializes a new instance of the FMLiveSwitchReportBlock class.

    @param synchronizationSource The synchronization source.
    @param fractionLost The fraction lost.
    @param cumulativeNumberOfPacketsLost The cumulative number of packets lost.
    @param extendedHighestSequenceNumberReceived The extended highest sequence number received.
    @param interarrivalJitter The interarrival jitter.
    @param lastSenderReportTimestamp The last sender report timestamp.
    @param delaySinceLastSenderReport The delay since last sender report.
*/
+ (FMLiveSwitchReportBlock*) reportBlockWithSynchronizationSource:(long long)synchronizationSource fractionLost:(int)fractionLost cumulativeNumberOfPacketsLost:(int)cumulativeNumberOfPacketsLost extendedHighestSequenceNumberReceived:(long long)extendedHighestSequenceNumberReceived interarrivalJitter:(long long)interarrivalJitter lastSenderReportTimestamp:(long long)lastSenderReportTimestamp delaySinceLastSenderReport:(long long)delaySinceLastSenderReport;
/**

    Sets the cumulative number of packets lost.

*/
- (void) setCumulativeNumberOfPacketsLost:(int)value;
/**

    Sets the backing data buffer.

*/
- (void) setDataBuffer:(FMLiveSwitchDataBuffer*)value;
/**

    Sets the delay since last sender report.

*/
- (void) setDelaySinceLastSenderReport:(long long)value;
/**

    Sets the extended highest sequence number received.

*/
- (void) setExtendedHighestSequenceNumberReceived:(long long)value;
/**

    Sets the fraction lost according to RFC 1889.
    The value has a range of 0 (no packet loss) to 255 (all packets lost).

*/
- (void) setFractionLost:(int)value;
/**

    Sets the interarrival jitter.

*/
- (void) setInterarrivalJitter:(long long)value;
/**

    Sets the last sender report timestamp.

*/
- (void) setLastSenderReportTimestamp:(long long)value;
/**

    Sets the synchronization source.

*/
- (void) setSynchronizationSource:(long long)value;
/**

    Gets the synchronization source.

*/
- (long long) synchronizationSource;

@end

/**

    An RTCP Sender or Receiver Report control frame.

*/
@interface FMLiveSwitchReportControlFrame : FMLiveSwitchMediaControlFrame

/**

    Gets the report control frame fixed payload header length.

*/
+ (int) fixedPayloadHeaderLength;
/**

    Gets the report block.

    @param synchronizationSource The synchronization source.
*/
- (FMLiveSwitchReportBlock*) getReportBlockWithSynchronizationSource:(long long)synchronizationSource;
/**

    Initializes a new instance of the FMLiveSwitchReportControlFrame class.

    @param payloadType Type of the payload.
    @param reportBlock The report block.
*/
- (instancetype) initWithPayloadType:(int)payloadType reportBlock:(FMLiveSwitchReportBlock*)reportBlock;
/**

    Initializes a new instance of the FMLiveSwitchReportControlFrame class.

    @param payloadType Type of the payload.
    @param reportBlock The report block.
    @param reportBlockOffset The report block offset.
*/
- (instancetype) initWithPayloadType:(int)payloadType reportBlock:(FMLiveSwitchReportBlock*)reportBlock reportBlockOffset:(int)reportBlockOffset;
/**

    Initializes a new instance of the FMLiveSwitchReportControlFrame class.

    @param payloadType The payload type.
    @param reportBlockOffset The offset of the report block.
    @param buffer The backing data buffer.
*/
- (instancetype) initWithPayloadType:(int)payloadType reportBlockOffset:(int)reportBlockOffset buffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchReportControlFrame class.

    @param payloadType Type of the payload.
    @param reportBlocks The report blocks.
*/
- (instancetype) initWithPayloadType:(int)payloadType reportBlocks:(NSMutableArray*)reportBlocks;
/**

    Initializes a new instance of the FMLiveSwitchReportControlFrame class.

    @param payloadType Type of the payload.
    @param reportBlocks The report blocks.
    @param reportBlockOffset The report block offset.
*/
- (instancetype) initWithPayloadType:(int)payloadType reportBlocks:(NSMutableArray*)reportBlocks reportBlockOffset:(int)reportBlockOffset;
/**

    Initializes a new instance of the FMLiveSwitchReportControlFrame class.

    @param payloadType Type of the payload.
    @param synchronizationSource The synchronization source.
    @param reportBlock The report block.
*/
- (instancetype) initWithPayloadType:(int)payloadType synchronizationSource:(long long)synchronizationSource reportBlock:(FMLiveSwitchReportBlock*)reportBlock;
/**

    Initializes a new instance of the FMLiveSwitchReportControlFrame class.

    @param payloadType Type of the payload.
    @param synchronizationSource The synchronization source.
    @param reportBlock The report block.
    @param reportBlockOffset The report block offset.
*/
- (instancetype) initWithPayloadType:(int)payloadType synchronizationSource:(long long)synchronizationSource reportBlock:(FMLiveSwitchReportBlock*)reportBlock reportBlockOffset:(int)reportBlockOffset;
/**

    Initializes a new instance of the FMLiveSwitchReportControlFrame class.

    @param payloadType Type of the payload.
    @param synchronizationSource The synchronization source.
    @param reportBlocks The report blocks.
*/
- (instancetype) initWithPayloadType:(int)payloadType synchronizationSource:(long long)synchronizationSource reportBlocks:(NSMutableArray*)reportBlocks;
/**

    Initializes a new instance of the FMLiveSwitchReportControlFrame class.

    @param payloadType Type of the payload.
    @param synchronizationSource The synchronization source.
    @param reportBlocks The report blocks.
    @param reportBlockOffset The report block offset.
*/
- (instancetype) initWithPayloadType:(int)payloadType synchronizationSource:(long long)synchronizationSource reportBlocks:(NSMutableArray*)reportBlocks reportBlockOffset:(int)reportBlockOffset;
/**

    Gets the feedback message type.

*/
- (int) receptionReportCount;
/**

    Gets the report block.

*/
- (FMLiveSwitchReportBlock*) reportBlock;
/**

    Gets the report blocks.

*/
- (NSMutableArray*) reportBlocks;
/**

    Initializes a new instance of the FMLiveSwitchReportControlFrame class.

    @param payloadType Type of the payload.
    @param reportBlock The report block.
*/
+ (FMLiveSwitchReportControlFrame*) reportControlFrameWithPayloadType:(int)payloadType reportBlock:(FMLiveSwitchReportBlock*)reportBlock;
/**

    Initializes a new instance of the FMLiveSwitchReportControlFrame class.

    @param payloadType Type of the payload.
    @param reportBlock The report block.
    @param reportBlockOffset The report block offset.
*/
+ (FMLiveSwitchReportControlFrame*) reportControlFrameWithPayloadType:(int)payloadType reportBlock:(FMLiveSwitchReportBlock*)reportBlock reportBlockOffset:(int)reportBlockOffset;
/**

    Initializes a new instance of the FMLiveSwitchReportControlFrame class.

    @param payloadType The payload type.
    @param reportBlockOffset The offset of the report block.
    @param buffer The backing data buffer.
*/
+ (FMLiveSwitchReportControlFrame*) reportControlFrameWithPayloadType:(int)payloadType reportBlockOffset:(int)reportBlockOffset buffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchReportControlFrame class.

    @param payloadType Type of the payload.
    @param reportBlocks The report blocks.
*/
+ (FMLiveSwitchReportControlFrame*) reportControlFrameWithPayloadType:(int)payloadType reportBlocks:(NSMutableArray*)reportBlocks;
/**

    Initializes a new instance of the FMLiveSwitchReportControlFrame class.

    @param payloadType Type of the payload.
    @param reportBlocks The report blocks.
    @param reportBlockOffset The report block offset.
*/
+ (FMLiveSwitchReportControlFrame*) reportControlFrameWithPayloadType:(int)payloadType reportBlocks:(NSMutableArray*)reportBlocks reportBlockOffset:(int)reportBlockOffset;
/**

    Initializes a new instance of the FMLiveSwitchReportControlFrame class.

    @param payloadType Type of the payload.
    @param synchronizationSource The synchronization source.
    @param reportBlock The report block.
*/
+ (FMLiveSwitchReportControlFrame*) reportControlFrameWithPayloadType:(int)payloadType synchronizationSource:(long long)synchronizationSource reportBlock:(FMLiveSwitchReportBlock*)reportBlock;
/**

    Initializes a new instance of the FMLiveSwitchReportControlFrame class.

    @param payloadType Type of the payload.
    @param synchronizationSource The synchronization source.
    @param reportBlock The report block.
    @param reportBlockOffset The report block offset.
*/
+ (FMLiveSwitchReportControlFrame*) reportControlFrameWithPayloadType:(int)payloadType synchronizationSource:(long long)synchronizationSource reportBlock:(FMLiveSwitchReportBlock*)reportBlock reportBlockOffset:(int)reportBlockOffset;
/**

    Initializes a new instance of the FMLiveSwitchReportControlFrame class.

    @param payloadType Type of the payload.
    @param synchronizationSource The synchronization source.
    @param reportBlocks The report blocks.
*/
+ (FMLiveSwitchReportControlFrame*) reportControlFrameWithPayloadType:(int)payloadType synchronizationSource:(long long)synchronizationSource reportBlocks:(NSMutableArray*)reportBlocks;
/**

    Initializes a new instance of the FMLiveSwitchReportControlFrame class.

    @param payloadType Type of the payload.
    @param synchronizationSource The synchronization source.
    @param reportBlocks The report blocks.
    @param reportBlockOffset The report block offset.
*/
+ (FMLiveSwitchReportControlFrame*) reportControlFrameWithPayloadType:(int)payloadType synchronizationSource:(long long)synchronizationSource reportBlocks:(NSMutableArray*)reportBlocks reportBlockOffset:(int)reportBlockOffset;
/**

    Sets the report block.

*/
- (void) setReportBlock:(FMLiveSwitchReportBlock*)value;
/**

    Sets the report blocks.

*/
- (void) setReportBlocks:(NSMutableArray*)value;
/**

    Sets the synchronization source.

*/
- (void) setSynchronizationSource:(long long)value;
/**

    Gets the synchronization source.

*/
- (long long) synchronizationSource;

@end

/**

    Utility class for resampling audio data.

*/
@interface FMLiveSwitchResampler : NSObject

/**

    Gets the default low pass order.

*/
+ (int) defaultLowPassOrder;
/**

    Gets the resampling factor.

*/
- (double) factor;
/**

    Gets the length of the output given an input set.

    @param input The input.
*/
- (int) getOutputLengthWithInput:(FMLiveSwitchDataBuffer*)input;
/**

    Initializes a new instance of the FMLiveSwitchResampler class.

    @param factor The resampling factor.
*/
- (instancetype) initWithFactor:(double)factor;
/**

    Initializes a new instance of the FMLiveSwitchResampler class.

    @param sourceClockRate The source clock rate.
    @param targetClockRate The target clock rate.
*/
- (instancetype) initWithSourceClockRate:(int)sourceClockRate targetClockRate:(int)targetClockRate;
/**

    Initializes a new instance of the FMLiveSwitchResampler class.

    @param factor The resampling factor.
*/
+ (FMLiveSwitchResampler*) resamplerWithFactor:(double)factor;
/**

    Initializes a new instance of the FMLiveSwitchResampler class.

    @param sourceClockRate The source clock rate.
    @param targetClockRate The target clock rate.
*/
+ (FMLiveSwitchResampler*) resamplerWithSourceClockRate:(int)sourceClockRate targetClockRate:(int)targetClockRate;
/**

    Resamples the given audio buffer.

    @param input The input to resample.
    @param output The output to target.
*/
- (bool) resampleWithInput:(FMLiveSwitchDataBuffer*)input output:(FMLiveSwitchDataBuffer*)output;
/**

    Resamples the given audio buffer.

    @param input The input to resample.
    @param output The output to target.
    @param lastBatch Whether or not this is the last batch. If `true`, input will be read to the end.
    @return `true` if the resampling operation was successful; otherwise, `false`.
*/
- (bool) resampleWithInput:(FMLiveSwitchDataBuffer*)input output:(FMLiveSwitchDataBuffer*)output lastBatch:(bool)lastBatch;
/**

    Sets the default low pass order.

*/
+ (void) setDefaultLowPassOrder:(int)value;

@end

/**

    An RTCP reference picture selection indication.

*/
@interface FMLiveSwitchRpsi : NSObject

/**

    Initializes a new instance of the FMLiveSwitchRpsi class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchRpsi class.

*/
+ (FMLiveSwitchRpsi*) rpsi;

@end

/**

    An RTCP Feedback PS-RPSI Control Frame.

*/
@interface FMLiveSwitchRpsiControlFrame : FMLiveSwitchPayloadSpecificControlFrame

/**

    Gets the feedback message type byte.

*/
+ (uint8_t) feedbackMessageTypeByte;
/**

    Initializes a new instance of the FMLiveSwitchRpsiControlFrame class.

*/
- (instancetype) init;
/**

    Gets the reference picture selection indication.

*/
- (FMLiveSwitchRpsi*) referencePictureSelectionIndication;
/**

    Initializes a new instance of the FMLiveSwitchRpsiControlFrame class.

*/
+ (FMLiveSwitchRpsiControlFrame*) rpsiControlFrame;
/**

    Sets the reference picture selection indication.

*/
- (void) setReferencePictureSelectionIndication:(FMLiveSwitchRpsi*)value;

@end

/**

    A receiver report control frame.

*/
@interface FMLiveSwitchRRControlFrame : FMLiveSwitchReportControlFrame

/**

    Initializes a new instance of the FMLiveSwitchRRControlFrame class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchRRControlFrame class.

    @param buffer An data buffer.
*/
- (instancetype) initWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchRRControlFrame class.

    @param reportBlock The report block.
*/
- (instancetype) initWithReportBlock:(FMLiveSwitchReportBlock*)reportBlock;
/**

    Initializes a new instance of the FMLiveSwitchRRControlFrame class.

    @param reportBlocks The report blocks.
*/
- (instancetype) initWithReportBlocks:(NSMutableArray*)reportBlocks;
/**

    Initializes a new instance of the FMLiveSwitchRRControlFrame class.

    @param synchronizationSource The synchronization source.
    @param reportBlock The report block.
*/
- (instancetype) initWithSynchronizationSource:(long long)synchronizationSource reportBlock:(FMLiveSwitchReportBlock*)reportBlock;
/**

    Initializes a new instance of the FMLiveSwitchRRControlFrame class.

    @param synchronizationSource The synchronization source.
    @param reportBlocks The report blocks.
*/
- (instancetype) initWithSynchronizationSource:(long long)synchronizationSource reportBlocks:(NSMutableArray*)reportBlocks;
/**

    Gets the receiver report payload type.

*/
+ (int) registeredPayloadType;
/**

    Initializes a new instance of the FMLiveSwitchRRControlFrame class.

*/
+ (FMLiveSwitchRRControlFrame*) rrControlFrame;
/**

    Initializes a new instance of the FMLiveSwitchRRControlFrame class.

    @param buffer An data buffer.
*/
+ (FMLiveSwitchRRControlFrame*) rrControlFrameWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchRRControlFrame class.

    @param reportBlock The report block.
*/
+ (FMLiveSwitchRRControlFrame*) rrControlFrameWithReportBlock:(FMLiveSwitchReportBlock*)reportBlock;
/**

    Initializes a new instance of the FMLiveSwitchRRControlFrame class.

    @param reportBlocks The report blocks.
*/
+ (FMLiveSwitchRRControlFrame*) rrControlFrameWithReportBlocks:(NSMutableArray*)reportBlocks;
/**

    Initializes a new instance of the FMLiveSwitchRRControlFrame class.

    @param synchronizationSource The synchronization source.
    @param reportBlock The report block.
*/
+ (FMLiveSwitchRRControlFrame*) rrControlFrameWithSynchronizationSource:(long long)synchronizationSource reportBlock:(FMLiveSwitchReportBlock*)reportBlock;
/**

    Initializes a new instance of the FMLiveSwitchRRControlFrame class.

    @param synchronizationSource The synchronization source.
    @param reportBlocks The report blocks.
*/
+ (FMLiveSwitchRRControlFrame*) rrControlFrameWithSynchronizationSource:(long long)synchronizationSource reportBlocks:(NSMutableArray*)reportBlocks;

@end

/**

    A WebRTC/ORTC-compatible collection of local audio/video tracks.

*/
@interface FMLiveSwitchRtcLocalMedia<__covariant TView> : FMLiveSwitchLocalMedia<FMLiveSwitchIViewSinkableMedia, FMLiveSwitchIViewableMedia>

/**

    Gets the active audio converter.

*/
- (FMLiveSwitchAudioPipe*) activeAudioConverter;
/**

    Gets the active audio encoder.

*/
- (FMLiveSwitchAudioEncoder*) activeAudioEncoder;
/**

    Gets the active audio packetizer.

*/
- (FMLiveSwitchAudioPipe*) activeAudioPacketizer;
/**

    Gets the active video controller.

*/
- (FMLiveSwitchVideoPipe*) activeVideoController;
/**

    Gets the active video converter.

*/
- (FMLiveSwitchVideoPipe*) activeVideoConverter;
/**

    Gets the active video encoder.

*/
- (FMLiveSwitchVideoEncoder*) activeVideoEncoder;
/**

    Gets the active video packetizer.

*/
- (FMLiveSwitchVideoPipe*) activeVideoPacketizer;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeAudioConverter changes.

*/
- (void) addOnActiveAudioConverterChange:(FMLiveSwitchAction1<FMLiveSwitchAudioPipe*>*)value;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeAudioConverter changes.

*/
- (void (^)(void(^)(FMLiveSwitchAudioPipe*))) addOnActiveAudioConverterChangeWithBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeAudioConverter changes.

*/
- (void) addOnActiveAudioConverterChangeWithBlock:(void(^)(FMLiveSwitchAudioPipe*))valueBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeAudioEncoder changes.

*/
- (void) addOnActiveAudioEncoderChange:(FMLiveSwitchAction1<FMLiveSwitchAudioEncoder*>*)value;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeAudioEncoder changes.

*/
- (void (^)(void(^)(FMLiveSwitchAudioEncoder*))) addOnActiveAudioEncoderChangeWithBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeAudioEncoder changes.

*/
- (void) addOnActiveAudioEncoderChangeWithBlock:(void(^)(FMLiveSwitchAudioEncoder*))valueBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeAudioPacketizer changes.

*/
- (void) addOnActiveAudioPacketizerChange:(FMLiveSwitchAction1<FMLiveSwitchAudioPipe*>*)value;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeAudioPacketizer changes.

*/
- (void (^)(void(^)(FMLiveSwitchAudioPipe*))) addOnActiveAudioPacketizerChangeWithBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeAudioPacketizer changes.

*/
- (void) addOnActiveAudioPacketizerChangeWithBlock:(void(^)(FMLiveSwitchAudioPipe*))valueBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeVideoController changes.

*/
- (void) addOnActiveVideoControllerChange:(FMLiveSwitchAction1<FMLiveSwitchVideoPipe*>*)value;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeVideoController changes.

*/
- (void (^)(void(^)(FMLiveSwitchVideoPipe*))) addOnActiveVideoControllerChangeWithBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeVideoController changes.

*/
- (void) addOnActiveVideoControllerChangeWithBlock:(void(^)(FMLiveSwitchVideoPipe*))valueBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeVideoConverter changes.

*/
- (void) addOnActiveVideoConverterChange:(FMLiveSwitchAction1<FMLiveSwitchVideoPipe*>*)value;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeVideoConverter changes.

*/
- (void (^)(void(^)(FMLiveSwitchVideoPipe*))) addOnActiveVideoConverterChangeWithBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeVideoConverter changes.

*/
- (void) addOnActiveVideoConverterChangeWithBlock:(void(^)(FMLiveSwitchVideoPipe*))valueBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeVideoEncoder changes.

*/
- (void) addOnActiveVideoEncoderChange:(FMLiveSwitchAction1<FMLiveSwitchVideoEncoder*>*)value;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeVideoEncoder changes.

*/
- (void (^)(void(^)(FMLiveSwitchVideoEncoder*))) addOnActiveVideoEncoderChangeWithBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeVideoEncoder changes.

*/
- (void) addOnActiveVideoEncoderChangeWithBlock:(void(^)(FMLiveSwitchVideoEncoder*))valueBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeVideoPacketizer changes.

*/
- (void) addOnActiveVideoPacketizerChange:(FMLiveSwitchAction1<FMLiveSwitchVideoPipe*>*)value;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeVideoPacketizer changes.

*/
- (void (^)(void(^)(FMLiveSwitchVideoPipe*))) addOnActiveVideoPacketizerChangeWithBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeVideoPacketizer changes.

*/
- (void) addOnActiveVideoPacketizerChangeWithBlock:(void(^)(FMLiveSwitchVideoPipe*))valueBlock;
/**

    Gets the acoustic echo cancellation context.

*/
- (FMLiveSwitchAecContext*) aecContext;
/**

    Gets a value indicating whether acoustic echo cancellation is disabled.

*/
- (bool) aecDisabled;
/**

    Gets a value indicating whether audio is disabled.

*/
- (bool) audioDisabled;
/**

    Gets the audio outputs.

*/
- (NSMutableArray*) audioOutputs;
/**

    Gets whether to automatically degrade video based on
    FMLiveSwitchRtcLocalMedia`1#videoBitsPerPixel and FMLiveSwitchRtcLocalMedia`1#videoDegradationPreference
    when bitrate constraints are applied to the local encoders.

*/
- (bool) automaticVideoDegradation;
/**

    Creates an audio recorder.

    @param inputFormat The input format.
*/
- (FMLiveSwitchAudioSink*) createAudioRecorderWithInputFormat:(FMLiveSwitchAudioFormat*)inputFormat;
/**

    Creates an audio source.

    @param config The configuration.
*/
- (FMLiveSwitchAudioSource*) createAudioSourceWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates a frame-rate controller.

    @param outputFormat The video output format.
*/
- (FMLiveSwitchVideoPipe*) createFrameRateControllerWithOutputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Creates a G.722 encoder.

    @param config The configuration.
*/
- (FMLiveSwitchAudioEncoder*) createG722EncoderWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates a G.722 packetizer.

    @param config The configuration.
*/
- (FMLiveSwitchAudioPipe*) createG722PacketizerWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates an H.264 encoder.

*/
- (FMLiveSwitchVideoEncoder*) createH264Encoder;
/**

    Creates H.264 encoders.

*/
- (NSMutableArray*) createH264Encoders;
/**

    Creates an H.264 packetizer.

*/
- (FMLiveSwitchVideoPipe*) createH264Packetizer;
/**

    Creates H.264 packetizers.

*/
- (NSMutableArray*) createH264Packetizers;
/**

    Creates a H.265 encoder.

*/
- (FMLiveSwitchVideoEncoder*) createH265Encoder;
/**

    Creates a H.265 packetizer.

*/
- (FMLiveSwitchVideoPipe*) createH265Packetizer;
/**

    Creates an image converter.

    @param outputFormat The video output format.
*/
- (FMLiveSwitchVideoPipe*) createImageConverterWithOutputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Creates a L16 encoder.

    @param config The configuration.
*/
- (FMLiveSwitchAudioEncoder*) createL16EncoderWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates a L16 packetizer.

    @param config The configuration.
*/
- (FMLiveSwitchAudioPipe*) createL16PacketizerWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates an Opus encoder.

    @param config The configuration.
*/
- (FMLiveSwitchAudioEncoder*) createOpusEncoderWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates an Opus packetizer.

    @param config The configuration.
*/
- (FMLiveSwitchAudioPipe*) createOpusPacketizerWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates a PCMA encoder.

    @param config The configuration.
*/
- (FMLiveSwitchAudioEncoder*) createPcmaEncoderWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates a PCMA packetizer.

    @param config The configuration.
*/
- (FMLiveSwitchAudioPipe*) createPcmaPacketizerWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates a PCMU encoder.

    @param config The configuration.
*/
- (FMLiveSwitchAudioEncoder*) createPcmuEncoderWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates a PCMU packetizer.

    @param config The configuration.
*/
- (FMLiveSwitchAudioPipe*) createPcmuPacketizerWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates a sound converter.

    @param config The configuration.
*/
- (FMLiveSwitchAudioPipe*) createSoundConverterWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates a video recorder.

    @param inputFormat The output format.
*/
- (FMLiveSwitchVideoSink*) createVideoRecorderWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat;
/**

    Creates a video source.

*/
- (FMLiveSwitchVideoSource*) createVideoSource;
/**

    Creates a view sink.

*/
- (FMLiveSwitchViewSink<TView>*) createViewSink;
/**

    Creates a VP8 encoder.

*/
- (FMLiveSwitchVideoEncoder*) createVp8Encoder;
/**

    Creates a VP8 packetizer.

*/
- (FMLiveSwitchVideoPipe*) createVp8Packetizer;
/**

    Creates a VP9 encoder.

*/
- (FMLiveSwitchVideoEncoder*) createVp9Encoder;
/**

    Creates a VP9 packetizer.

*/
- (FMLiveSwitchVideoPipe*) createVp9Packetizer;
/**

    Destroys all media tracks.

*/
- (void) destroy;
/**

    Gets the local audio encodings.

    @return The local audio encodings.
*/
- (NSMutableArray*) doGetAudioEncodings;
/**

    Gets the local video encodings.

    @return The local video encodings.
*/
- (NSMutableArray*) doGetVideoEncodings;
/**

    Sets the local audio encodings.

    @param encodings The local audio encodings.
*/
- (void) doSetAudioEncodings:(NSMutableArray*)encodings;
/**

    Sets the local video encodings.

    @param encodings The local video encodings.
*/
- (void) doSetVideoEncodings:(NSMutableArray*)encodings;
/**

    Gets the G.722 converter.

*/
- (FMLiveSwitchAudioPipe*) g722Converter;
/**

    Gets whether the G.722 codec is disabled.

*/
- (bool) g722Disabled;
/**

    Gets the G.722 encoder.

*/
- (FMLiveSwitchAudioEncoder*) g722Encoder;
/**

    Gets the G.722 packetizer.

*/
- (FMLiveSwitchAudioPipe*) g722Packetizer;
/**

    Gets the first H.264 controller.

*/
- (FMLiveSwitchVideoPipe*) h264Controller;
/**

    Gets the H.264 controllers.

*/
- (NSMutableArray*) h264Controllers;
/**

    Gets the first H.264 converter.

*/
- (FMLiveSwitchVideoPipe*) h264Converter;
/**

    Gets the H.264 converters.

*/
- (NSMutableArray*) h264Converters;
/**

    Gets the H.264 converters array.

*/
- (NSMutableArray*) h264ConvertersArray;
/**

    Gets whether the H.264 codec is disabled.

*/
- (bool) h264Disabled;
/**

    Gets the first H.264 encoder.

*/
- (FMLiveSwitchVideoEncoder*) h264Encoder;
/**

    Gets the first H.264 encoders.

*/
- (NSMutableArray*) h264Encoders;
/**

    Gets the H.264 encoders array.

*/
- (NSMutableArray*) h264EncodersArray;
/**

    Gets the first H.264 packetizer.

*/
- (FMLiveSwitchVideoPipe*) h264Packetizer;
/**

    Gets the first H.264 packetizers.

*/
- (NSMutableArray*) h264Packetizers;
/**

    Gets the first H.264 packetizers array.

*/
- (NSMutableArray*) h264PacketizersArray;
/**

    Gets the H.264 packetizers array array.

*/
- (NSMutableArray*) h264PacketizersArrayArray;
/**

    Gets the first H265 controller.

*/
- (FMLiveSwitchVideoPipe*) h265Controller;
/**

    Gets the H265 controllers.

*/
- (NSMutableArray*) h265Controllers;
/**

    Gets the first H265 converter.

*/
- (FMLiveSwitchVideoPipe*) h265Converter;
/**

    Gets the H265 converters.

*/
- (NSMutableArray*) h265Converters;
/**

    Gets whether the H.265 codec is disabled.

*/
- (bool) h265Disabled;
/**

    Gets the first H265 encoder.

*/
- (FMLiveSwitchVideoEncoder*) h265Encoder;
/**

    Gets the H265 encoders.

*/
- (NSMutableArray*) h265Encoders;
/**

    Gets the first H265 packetizer.

*/
- (FMLiveSwitchVideoPipe*) h265Packetizer;
/**

    Gets the H265 packetizers.

*/
- (NSMutableArray*) h265Packetizers;
/**

    Initializes a new instance of the FMLiveSwitchRtcLocalMedia`1 class.

*/
- (instancetype) init;
/**

    Initializes this instance. Must be called before being used.

*/
- (bool) initialize;
/**

    Initializes this instance. Must be called before being used.

*/
- (bool) initializeWithAudioTrackConfig:(FMLiveSwitchRtcAudioTrackConfig*)audioTrackConfig videoTrackConfig:(FMLiveSwitchRtcVideoTrackConfig*)videoTrackConfig;
/**

    Initializes a new instance of the FMLiveSwitchRtcLocalMedia`1 class.

    @param disableAudio Whether to disable audio.
    @param disableVideo Whether to disable video.
*/
- (instancetype) initWithDisableAudio:(bool)disableAudio disableVideo:(bool)disableVideo;
/**

    Initializes a new instance of the FMLiveSwitchRtcLocalMedia`1 class.

    @param disableAudio Whether to disable audio.
    @param disableVideo Whether to disable video.
    @param aecContext The acoustic echo cancellation context.
*/
- (instancetype) initWithDisableAudio:(bool)disableAudio disableVideo:(bool)disableVideo aecContext:(FMLiveSwitchAecContext*)aecContext;
/**

    Gets the L16 converter.

*/
- (FMLiveSwitchAudioPipe*) l16Converter;
/**

    Gets whether the L16 codec is disabled.

*/
- (bool) l16Disabled;
/**

    Gets the L16 encoder.

*/
- (FMLiveSwitchAudioEncoder*) l16Encoder;
/**

    Gets the L16 packetizer.

*/
- (FMLiveSwitchAudioPipe*) l16Packetizer;
/**

    Gets the first Opus converter.

*/
- (FMLiveSwitchAudioPipe*) opusConverter;
/**

    Gets the Opus converters.

*/
- (NSMutableArray*) opusConverters;
/**

    Gets whether the Opus codec is disabled.

*/
- (bool) opusDisabled;
/**

    Gets the first Opus encoder.

*/
- (FMLiveSwitchAudioEncoder*) opusEncoder;
/**

    Gets the Opus encoders.

*/
- (NSMutableArray*) opusEncoders;
/**

    Gets the first Opus packetizer.

*/
- (FMLiveSwitchAudioPipe*) opusPacketizer;
/**

    Gets the Opus packetizers.

*/
- (NSMutableArray*) opusPacketizers;
/**

    Gets a value indicating whether the packetizer is disabled.
    WebRTC media requires the RTP packetizer so the value must be `false`.
    Media-over-WebSockets must not use the RTP packetizer, so the value must be `true`.
    If the packetizer is not required, this value must be set in the constructor.

*/
- (bool) packetizerDisabled;
/**

    Gets the PCMA converter.

*/
- (FMLiveSwitchAudioPipe*) pcmaConverter;
/**

    Gets whether the PCMA codec is disabled.

*/
- (bool) pcmaDisabled;
/**

    Gets the PCMA encoder.

*/
- (FMLiveSwitchAudioEncoder*) pcmaEncoder;
/**

    Gets the PCMA packetizer.

*/
- (FMLiveSwitchAudioPipe*) pcmaPacketizer;
/**

    Gets the PCMU converter.

*/
- (FMLiveSwitchAudioPipe*) pcmuConverter;
/**

    Gets whether the PCMU codec is disabled.

*/
- (bool) pcmuDisabled;
/**

    Gets the PCMU encoder.

*/
- (FMLiveSwitchAudioEncoder*) pcmuEncoder;
/**

    Gets the PCMU packetizer.

*/
- (FMLiveSwitchAudioPipe*) pcmuPacketizer;
/**

    Removes a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeAudioConverter changes.

*/
- (void) removeOnActiveAudioConverterChange:(FMLiveSwitchAction1<FMLiveSwitchAudioPipe*>*)value;
/**

    Removes a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeAudioEncoder changes.

*/
- (void) removeOnActiveAudioEncoderChange:(FMLiveSwitchAction1<FMLiveSwitchAudioEncoder*>*)value;
/**

    Removes a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeAudioPacketizer changes.

*/
- (void) removeOnActiveAudioPacketizerChange:(FMLiveSwitchAction1<FMLiveSwitchAudioPipe*>*)value;
/**

    Removes a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeVideoController changes.

*/
- (void) removeOnActiveVideoControllerChange:(FMLiveSwitchAction1<FMLiveSwitchVideoPipe*>*)value;
/**

    Removes a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeVideoConverter changes.

*/
- (void) removeOnActiveVideoConverterChange:(FMLiveSwitchAction1<FMLiveSwitchVideoPipe*>*)value;
/**

    Removes a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeVideoEncoder changes.

*/
- (void) removeOnActiveVideoEncoderChange:(FMLiveSwitchAction1<FMLiveSwitchVideoEncoder*>*)value;
/**

    Removes a handler that is raised when the FMLiveSwitchRtcLocalMedia`1#activeVideoPacketizer changes.

*/
- (void) removeOnActiveVideoPacketizerChange:(FMLiveSwitchAction1<FMLiveSwitchVideoPipe*>*)value;
/**

    Initializes a new instance of the FMLiveSwitchRtcLocalMedia`1 class.

*/
+ (FMLiveSwitchRtcLocalMedia*) rtcLocalMedia;
/**

    Initializes a new instance of the FMLiveSwitchRtcLocalMedia`1 class.

    @param disableAudio Whether to disable audio.
    @param disableVideo Whether to disable video.
*/
+ (FMLiveSwitchRtcLocalMedia*) rtcLocalMediaWithDisableAudio:(bool)disableAudio disableVideo:(bool)disableVideo;
/**

    Initializes a new instance of the FMLiveSwitchRtcLocalMedia`1 class.

    @param disableAudio Whether to disable audio.
    @param disableVideo Whether to disable video.
    @param aecContext The acoustic echo cancellation context.
*/
+ (FMLiveSwitchRtcLocalMedia*) rtcLocalMediaWithDisableAudio:(bool)disableAudio disableVideo:(bool)disableVideo aecContext:(FMLiveSwitchAecContext*)aecContext;
/**

    Sets whether to automatically degrade video based on
    FMLiveSwitchRtcLocalMedia`1#videoBitsPerPixel and FMLiveSwitchRtcLocalMedia`1#videoDegradationPreference
    when bitrate constraints are applied to the local encoders.

*/
- (void) setAutomaticVideoDegradation:(bool)value;
/**

    Sets a value indicating whether the packetizer is disabled.
    WebRTC media requires the RTP packetizer so the value must be `false`.
    Media-over-WebSockets must not use the RTP packetizer, so the value must be `true`.
    If the packetizer is not required, this value must be set in the constructor.

*/
- (void) setPacketizerDisabled:(bool)value;
/**

    Sets the video degradation preference when bitrate
    constraints require a compromise on frame-rate and/or resolution.

*/
- (void) setVideoBitsPerPixel:(double)value;
/**

    Sets the video degradation preference when bitrate
    constraints require a compromise on frame-rate and/or resolution.

*/
- (void) setVideoDegradationPreference:(FMLiveSwitchVideoDegradationPreference)value;
/**

    Toggles audio recording.

*/
- (bool) toggleAudioRecording;
/**

    Toggles video recording.

*/
- (bool) toggleVideoRecording;
/**

    Gets the video degradation preference when bitrate
    constraints require a compromise on frame-rate and/or resolution.

*/
- (double) videoBitsPerPixel;
/**

    Gets the video degradation preference when bitrate
    constraints require a compromise on frame-rate and/or resolution.

*/
- (FMLiveSwitchVideoDegradationPreference) videoDegradationPreference;
/**

    Gets a value indicating whether video is disabled.

*/
- (bool) videoDisabled;
/**

    Gets the video outputs.

*/
- (NSMutableArray*) videoOutputs;
/**

    Gets the video view, if video is not disabled.

*/
- (TView) view;
/**

    Gets the video view sink, if video is not disabled.

*/
- (FMLiveSwitchViewSink<TView>*) viewSink;
/**

    Gets the first VP8 controller.

*/
- (FMLiveSwitchVideoPipe*) vp8Controller;
/**

    Gets the VP8 controllers.

*/
- (NSMutableArray*) vp8Controllers;
/**

    Gets the first VP8 converter.

*/
- (FMLiveSwitchVideoPipe*) vp8Converter;
/**

    Gets the VP8 converters.

*/
- (NSMutableArray*) vp8Converters;
/**

    Gets whether the VP8 codec is disabled.

*/
- (bool) vp8Disabled;
/**

    Gets the first VP8 encoder.

*/
- (FMLiveSwitchVideoEncoder*) vp8Encoder;
/**

    Gets the VP8 encoders.

*/
- (NSMutableArray*) vp8Encoders;
/**

    Gets the first VP8 packetizer.

*/
- (FMLiveSwitchVideoPipe*) vp8Packetizer;
/**

    Gets the VP8 packetizers.

*/
- (NSMutableArray*) vp8Packetizers;
/**

    Gets the first VP9 controller.

*/
- (FMLiveSwitchVideoPipe*) vp9Controller;
/**

    Gets the VP9 controllers.

*/
- (NSMutableArray*) vp9Controllers;
/**

    Gets the first VP9 converter.

*/
- (FMLiveSwitchVideoPipe*) vp9Converter;
/**

    Gets the VP9 converters.

*/
- (NSMutableArray*) vp9Converters;
/**

    Gets whether the VP9 codec is disabled.

*/
- (bool) vp9Disabled;
/**

    Gets the first VP9 encoder.

*/
- (FMLiveSwitchVideoEncoder*) vp9Encoder;
/**

    Gets the VP9 encoders.

*/
- (NSMutableArray*) vp9Encoders;
/**

    Gets the first VP9 packetizer.

*/
- (FMLiveSwitchVideoPipe*) vp9Packetizer;
/**

    Gets the VP9 packetizers.

*/
- (NSMutableArray*) vp9Packetizers;

@end

/**

    A WebRTC/ORTC-compatible collection of remote audio/video tracks.

*/
@interface FMLiveSwitchRtcRemoteMedia<__covariant TView> : FMLiveSwitchRemoteMedia<FMLiveSwitchIViewSinkableMedia, FMLiveSwitchIViewableMedia>

/**

    Gets the active audio converter.

*/
- (FMLiveSwitchAudioPipe*) activeAudioConverter;
/**

    Gets the active audio decoder.

*/
- (FMLiveSwitchAudioDecoder*) activeAudioDecoder;
/**

    Gets the active audio depacketizer.

*/
- (FMLiveSwitchAudioPipe*) activeAudioDepacketizer;
/**

    Gets the active audio sink.

*/
- (FMLiveSwitchAudioSink*) activeAudioSink;
/**

    Gets the active audio synchronizer.

*/
- (FMLiveSwitchAudioSynchronizer*) activeAudioSynchronizer;
/**

    Gets the active video converter.

*/
- (FMLiveSwitchVideoPipe*) activeVideoConverter;
/**

    Gets the active video decoder.

*/
- (FMLiveSwitchVideoDecoder*) activeVideoDecoder;
/**

    Gets the active video depacketizer.

*/
- (FMLiveSwitchVideoPipe*) activeVideoDepacketizer;
/**

    Gets the active video synchronizer.

*/
- (FMLiveSwitchVideoSynchronizer*) activeVideoSynchronizer;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeAudioConverter changes.

*/
- (void) addOnActiveAudioConverterChange:(FMLiveSwitchAction1<FMLiveSwitchAudioPipe*>*)value;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeAudioConverter changes.

*/
- (void (^)(void(^)(FMLiveSwitchAudioPipe*))) addOnActiveAudioConverterChangeWithBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeAudioConverter changes.

*/
- (void) addOnActiveAudioConverterChangeWithBlock:(void(^)(FMLiveSwitchAudioPipe*))valueBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeAudioDecoder changes.

*/
- (void) addOnActiveAudioDecoderChange:(FMLiveSwitchAction1<FMLiveSwitchAudioDecoder*>*)value;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeAudioDecoder changes.

*/
- (void (^)(void(^)(FMLiveSwitchAudioDecoder*))) addOnActiveAudioDecoderChangeWithBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeAudioDecoder changes.

*/
- (void) addOnActiveAudioDecoderChangeWithBlock:(void(^)(FMLiveSwitchAudioDecoder*))valueBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeAudioDepacketizer changes.

*/
- (void) addOnActiveAudioDepacketizerChange:(FMLiveSwitchAction1<FMLiveSwitchAudioPipe*>*)value;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeAudioDepacketizer changes.

*/
- (void (^)(void(^)(FMLiveSwitchAudioPipe*))) addOnActiveAudioDepacketizerChangeWithBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeAudioDepacketizer changes.

*/
- (void) addOnActiveAudioDepacketizerChangeWithBlock:(void(^)(FMLiveSwitchAudioPipe*))valueBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeAudioSink changes.

*/
- (void) addOnActiveAudioSinkChange:(FMLiveSwitchAction1<FMLiveSwitchAudioSink*>*)value;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeAudioSink changes.

*/
- (void (^)(void(^)(FMLiveSwitchAudioSink*))) addOnActiveAudioSinkChangeWithBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeAudioSink changes.

*/
- (void) addOnActiveAudioSinkChangeWithBlock:(void(^)(FMLiveSwitchAudioSink*))valueBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeAudioSynchronizer changes.

*/
- (void) addOnActiveAudioSynchronizerChange:(FMLiveSwitchAction1<FMLiveSwitchAudioSynchronizer*>*)value;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeAudioSynchronizer changes.

*/
- (void (^)(void(^)(FMLiveSwitchAudioSynchronizer*))) addOnActiveAudioSynchronizerChangeWithBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeAudioSynchronizer changes.

*/
- (void) addOnActiveAudioSynchronizerChangeWithBlock:(void(^)(FMLiveSwitchAudioSynchronizer*))valueBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeVideoConverter changes.

*/
- (void) addOnActiveVideoConverterChange:(FMLiveSwitchAction1<FMLiveSwitchVideoPipe*>*)value;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeVideoConverter changes.

*/
- (void (^)(void(^)(FMLiveSwitchVideoPipe*))) addOnActiveVideoConverterChangeWithBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeVideoConverter changes.

*/
- (void) addOnActiveVideoConverterChangeWithBlock:(void(^)(FMLiveSwitchVideoPipe*))valueBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeVideoDecoder changes.

*/
- (void) addOnActiveVideoDecoderChange:(FMLiveSwitchAction1<FMLiveSwitchVideoDecoder*>*)value;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeVideoDecoder changes.

*/
- (void (^)(void(^)(FMLiveSwitchVideoDecoder*))) addOnActiveVideoDecoderChangeWithBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeVideoDecoder changes.

*/
- (void) addOnActiveVideoDecoderChangeWithBlock:(void(^)(FMLiveSwitchVideoDecoder*))valueBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeVideoDepacketizer changes.

*/
- (void) addOnActiveVideoDepacketizerChange:(FMLiveSwitchAction1<FMLiveSwitchVideoPipe*>*)value;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeVideoDepacketizer changes.

*/
- (void (^)(void(^)(FMLiveSwitchVideoPipe*))) addOnActiveVideoDepacketizerChangeWithBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeVideoDepacketizer changes.

*/
- (void) addOnActiveVideoDepacketizerChangeWithBlock:(void(^)(FMLiveSwitchVideoPipe*))valueBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeVideoSynchronizer changes.

*/
- (void) addOnActiveVideoSynchronizerChange:(FMLiveSwitchAction1<FMLiveSwitchVideoSynchronizer*>*)value;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeVideoSynchronizer changes.

*/
- (void (^)(void(^)(FMLiveSwitchVideoSynchronizer*))) addOnActiveVideoSynchronizerChangeWithBlock;
/**

    Adds a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeVideoSynchronizer changes.

*/
- (void) addOnActiveVideoSynchronizerChangeWithBlock:(void(^)(FMLiveSwitchVideoSynchronizer*))valueBlock;
/**

    Gets the acoustic echo cancellation context.

*/
- (FMLiveSwitchAecContext*) aecContext;
/**

    Gets a value indicating whether acoustic echo cancellation is disabled.

*/
- (bool) aecDisabled;
/**

    Gets a value indicating whether audio is disabled.

*/
- (bool) audioDisabled;
/**

    Gets the audio inputs.

*/
- (NSMutableArray*) audioInputs;
/**

    Creates an audio recorder.

    @param inputFormat The input format.
*/
- (FMLiveSwitchAudioSink*) createAudioRecorderWithInputFormat:(FMLiveSwitchAudioFormat*)inputFormat;
/**

    Creates an audio sink.

    @param config The configuration.
*/
- (FMLiveSwitchAudioSink*) createAudioSinkWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates an audio synchronizer.

    @param format The format.
*/
- (FMLiveSwitchAudioSynchronizer*) createAudioSynchronizerWithFormat:(FMLiveSwitchAudioFormat*)format;
/**

    Creates a G.722 decoder.

    @param config The configuration.
*/
- (FMLiveSwitchAudioDecoder*) createG722DecoderWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates a G.722 depacketizer.

    @param config The configuration.
*/
- (FMLiveSwitchAudioPipe*) createG722DepacketizerWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates an H.264 decoder.

*/
- (FMLiveSwitchVideoDecoder*) createH264Decoder;
/**

    Creates H.264 decoders.

*/
- (NSMutableArray*) createH264Decoders;
/**

    Creates an H.264 depacketizer.

*/
- (FMLiveSwitchVideoPipe*) createH264Depacketizer;
/**

    Creates H.264 depacketizers.

*/
- (NSMutableArray*) createH264Depacketizers;
/**

    Creates a H.265 decoder.

*/
- (FMLiveSwitchVideoDecoder*) createH265Decoder;
/**

    Creates a H.265 depacketizer.

*/
- (FMLiveSwitchVideoPipe*) createH265Depacketizer;
/**

    Creates an image converter.

    @param outputFormat The output format.
*/
- (FMLiveSwitchVideoPipe*) createImageConverterWithOutputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Creates a PCMA decoder.

    @param config The configuration.
*/
- (FMLiveSwitchAudioDecoder*) createL16DecoderWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates a L16 depacketizer.

    @param config The configuration.
*/
- (FMLiveSwitchAudioPipe*) createL16DepacketizerWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates an Opus decoder.

    @param config The configuration.
*/
- (FMLiveSwitchAudioDecoder*) createOpusDecoderWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates an Opus depacketizer.

    @param config The configuration.
*/
- (FMLiveSwitchAudioPipe*) createOpusDepacketizerWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates a PCMA decoder.

    @param config The configuration.
*/
- (FMLiveSwitchAudioDecoder*) createPcmaDecoderWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates a PCMA depacketizer.

    @param config The configuration.
*/
- (FMLiveSwitchAudioPipe*) createPcmaDepacketizerWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates a PCMU decoder.

    @param config The configuration.
*/
- (FMLiveSwitchAudioDecoder*) createPcmuDecoderWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates a PCMU depacketizer.

    @param config The configuration.
*/
- (FMLiveSwitchAudioPipe*) createPcmuDepacketizerWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates a sound converter.

    @param config The configuration.
*/
- (FMLiveSwitchAudioPipe*) createSoundConverterWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Creates a video recorder.

    @param inputFormat The output format.
*/
- (FMLiveSwitchVideoSink*) createVideoRecorderWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat;
/**

    Creates a video synchronizer.

    @param format The format.
*/
- (FMLiveSwitchVideoSynchronizer*) createVideoSynchronizerWithFormat:(FMLiveSwitchVideoFormat*)format;
/**

    Creates a view sink.

*/
- (FMLiveSwitchViewSink<TView>*) createViewSink;
/**

    Creates a VP8 decoder.

*/
- (FMLiveSwitchVideoDecoder*) createVp8Decoder;
/**

    Creates a VP8 depacketizer.

*/
- (FMLiveSwitchVideoPipe*) createVp8Depacketizer;
/**

    Creates a VP9 decoder.

*/
- (FMLiveSwitchVideoDecoder*) createVp9Decoder;
/**

    Creates a VP9 depacketizer.

*/
- (FMLiveSwitchVideoPipe*) createVp9Depacketizer;
/**

    Gets a value indicating whether the depacketizer is disabled.
    WebRTC media requires the RTP depacketizer so the value must be `false`.
    Media-over-WebSockets must not use the RTP depacketizer, so the value must be `true`.
    If the depacketizer is not required, this value must be set in the constructor.

*/
- (bool) depacketizerDisabled;
/**

    Destroys all media tracks.

*/
- (void) destroy;
/**

    Gets the G.722 converter.

*/
- (FMLiveSwitchAudioPipe*) g722Converter;
/**

    Gets the G.722 decoder.

*/
- (FMLiveSwitchAudioDecoder*) g722Decoder;
/**

    Gets the G.722 depacketizer.

*/
- (FMLiveSwitchAudioPipe*) g722Depacketizer;
/**

    Gets whether the G.722 codec is disabled.

*/
- (bool) g722Disabled;
/**

    Gets the G.722 sink.

*/
- (FMLiveSwitchAudioSink*) g722Sink;
/**

    Gets the G.722 synchronizer.

*/
- (FMLiveSwitchAudioSynchronizer*) g722Synchronizer;
/**

    Gets the H.264 converter.

*/
- (FMLiveSwitchVideoPipe*) h264Converter;
/**

    Gets the H.264 converters.

*/
- (NSMutableArray*) h264Converters;
/**

    Gets first the H.264 decoder.

*/
- (FMLiveSwitchVideoDecoder*) h264Decoder;
/**

    Gets the H.264 decoders.

*/
- (NSMutableArray*) h264Decoders;
/**

    Gets the first H.264 depacketizer.

*/
- (FMLiveSwitchVideoPipe*) h264Depacketizer;
/**

    Gets the first H.264 depacketizers.

*/
- (NSMutableArray*) h264Depacketizers;
/**

    Gets the H.264 depacketizers array.

*/
- (NSMutableArray*) h264DepacketizersArray;
/**

    Gets whether the H.264 codec is disabled.

*/
- (bool) h264Disabled;
/**

    Gets the H.264 synchronizer.

*/
- (FMLiveSwitchVideoSynchronizer*) h264Synchronizer;
/**

    Gets the H.264 synchronizers.

*/
- (NSMutableArray*) h264Synchronizers;
/**

    Gets the H.265 converter.

*/
- (FMLiveSwitchVideoPipe*) h265Converter;
/**

    Gets the H.265 decoder.

*/
- (FMLiveSwitchVideoDecoder*) h265Decoder;
/**

    Gets the H.265 depacketizer.

*/
- (FMLiveSwitchVideoPipe*) h265Depacketizer;
/**

    Gets whether the H.265 codec is disabled.

*/
- (bool) h265Disabled;
/**

    Gets the H.265 synchronizer.

*/
- (FMLiveSwitchVideoSynchronizer*) h265Synchronizer;
/**

    Initializes this instance. Must be called before being used.

*/
- (bool) initialize;
/**

    Initializes this instance. Must be called before being used.

*/
- (bool) initializeWithAudioTrackConfig:(FMLiveSwitchRtcAudioTrackConfig*)audioTrackConfig videoTrackConfig:(FMLiveSwitchRtcVideoTrackConfig*)videoTrackConfig;
/**

    Initializes a new instance of the FMLiveSwitchRtcRemoteMedia`1 class.

    @param disableAudio Whether to disable audio.
    @param disableVideo Whether to disable video.
*/
- (instancetype) initWithDisableAudio:(bool)disableAudio disableVideo:(bool)disableVideo;
/**

    Initializes a new instance of the FMLiveSwitchRtcRemoteMedia`1 class.

    @param disableAudio Whether to disable audio.
    @param disableVideo Whether to disable video.
    @param aecContext The acoustic echo cancellation context.
*/
- (instancetype) initWithDisableAudio:(bool)disableAudio disableVideo:(bool)disableVideo aecContext:(FMLiveSwitchAecContext*)aecContext;
/**

    Gets the L16 converter.

*/
- (FMLiveSwitchAudioPipe*) l16Converter;
/**

    Gets the L16 decoder.

*/
- (FMLiveSwitchAudioDecoder*) l16Decoder;
/**

    Gets the L16 depacketizer.

*/
- (FMLiveSwitchAudioPipe*) l16Depacketizer;
/**

    Gets whether the L16 codec is disabled.

*/
- (bool) l16Disabled;
/**

    Gets the L16 sink.

*/
- (FMLiveSwitchAudioSink*) l16Sink;
/**

    Gets the L16 synchronizer.

*/
- (FMLiveSwitchAudioSynchronizer*) l16Synchronizer;
/**

    Gets the Opus converter.

*/
- (FMLiveSwitchAudioPipe*) opusConverter;
/**

    Gets the Opus decoder.

*/
- (FMLiveSwitchAudioDecoder*) opusDecoder;
/**

    Gets the Opus depacketizer.

*/
- (FMLiveSwitchAudioPipe*) opusDepacketizer;
/**

    Gets whether the Opus codec is disabled.

*/
- (bool) opusDisabled;
/**

    Gets the Opus sink.

*/
- (FMLiveSwitchAudioSink*) opusSink;
/**

    Gets the Opus synchronizer.

*/
- (FMLiveSwitchAudioSynchronizer*) opusSynchronizer;
/**

    Gets the PCMA converter.

*/
- (FMLiveSwitchAudioPipe*) pcmaConverter;
/**

    Gets the PCMA decoder.

*/
- (FMLiveSwitchAudioDecoder*) pcmaDecoder;
/**

    Gets the PCMA depacketizer.

*/
- (FMLiveSwitchAudioPipe*) pcmaDepacketizer;
/**

    Gets whether the PCMA codec is disabled.

*/
- (bool) pcmaDisabled;
/**

    Gets the PCMA sink.

*/
- (FMLiveSwitchAudioSink*) pcmaSink;
/**

    Gets the PCMA synchronizer.

*/
- (FMLiveSwitchAudioSynchronizer*) pcmaSynchronizer;
/**

    Gets the PCMU converter.

*/
- (FMLiveSwitchAudioPipe*) pcmuConverter;
/**

    Gets the PCMU decoder.

*/
- (FMLiveSwitchAudioDecoder*) pcmuDecoder;
/**

    Gets the PCMU depacketizer.

*/
- (FMLiveSwitchAudioPipe*) pcmuDepacketizer;
/**

    Gets whether the PCMU codec is disabled.

*/
- (bool) pcmuDisabled;
/**

    Gets the PCMU sink.

*/
- (FMLiveSwitchAudioSink*) pcmuSink;
/**

    Gets the PCMU synchronizer.

*/
- (FMLiveSwitchAudioSynchronizer*) pcmuSynchronizer;
/**

    Removes a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeAudioConverter changes.

*/
- (void) removeOnActiveAudioConverterChange:(FMLiveSwitchAction1<FMLiveSwitchAudioPipe*>*)value;
/**

    Removes a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeAudioDecoder changes.

*/
- (void) removeOnActiveAudioDecoderChange:(FMLiveSwitchAction1<FMLiveSwitchAudioDecoder*>*)value;
/**

    Removes a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeAudioDepacketizer changes.

*/
- (void) removeOnActiveAudioDepacketizerChange:(FMLiveSwitchAction1<FMLiveSwitchAudioPipe*>*)value;
/**

    Removes a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeAudioSink changes.

*/
- (void) removeOnActiveAudioSinkChange:(FMLiveSwitchAction1<FMLiveSwitchAudioSink*>*)value;
/**

    Removes a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeAudioSynchronizer changes.

*/
- (void) removeOnActiveAudioSynchronizerChange:(FMLiveSwitchAction1<FMLiveSwitchAudioSynchronizer*>*)value;
/**

    Removes a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeVideoConverter changes.

*/
- (void) removeOnActiveVideoConverterChange:(FMLiveSwitchAction1<FMLiveSwitchVideoPipe*>*)value;
/**

    Removes a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeVideoDecoder changes.

*/
- (void) removeOnActiveVideoDecoderChange:(FMLiveSwitchAction1<FMLiveSwitchVideoDecoder*>*)value;
/**

    Removes a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeVideoDepacketizer changes.

*/
- (void) removeOnActiveVideoDepacketizerChange:(FMLiveSwitchAction1<FMLiveSwitchVideoPipe*>*)value;
/**

    Removes a handler that is raised when the FMLiveSwitchRtcRemoteMedia`1#activeVideoSynchronizer changes.

*/
- (void) removeOnActiveVideoSynchronizerChange:(FMLiveSwitchAction1<FMLiveSwitchVideoSynchronizer*>*)value;
/**

    Initializes a new instance of the FMLiveSwitchRtcRemoteMedia`1 class.

    @param disableAudio Whether to disable audio.
    @param disableVideo Whether to disable video.
*/
+ (FMLiveSwitchRtcRemoteMedia*) rtcRemoteMediaWithDisableAudio:(bool)disableAudio disableVideo:(bool)disableVideo;
/**

    Initializes a new instance of the FMLiveSwitchRtcRemoteMedia`1 class.

    @param disableAudio Whether to disable audio.
    @param disableVideo Whether to disable video.
    @param aecContext The acoustic echo cancellation context.
*/
+ (FMLiveSwitchRtcRemoteMedia*) rtcRemoteMediaWithDisableAudio:(bool)disableAudio disableVideo:(bool)disableVideo aecContext:(FMLiveSwitchAecContext*)aecContext;
/**

    Sets a value indicating whether the depacketizer is disabled.
    WebRTC media requires the RTP depacketizer so the value must be `false`.
    Media-over-WebSockets must not use the RTP depacketizer, so the value must be `true`.
    If the depacketizer is not required, this value must be set in the constructor.

*/
- (void) setDepacketizerDisabled:(bool)value;
/**

    Toggles audio recording.

*/
- (bool) toggleAudioRecording;
/**

    Toggles video recording.

*/
- (bool) toggleVideoRecording;
/**

    Gets a value indicating whether video is disabled.

*/
- (bool) videoDisabled;
/**

    Gets the video inputs.

*/
- (NSMutableArray*) videoInputs;
/**

    Gets the video view, if video is not disabled.

*/
- (TView) view;
/**

    Gets the video view sink, if video is not disabled.

*/
- (FMLiveSwitchViewSink<TView>*) viewSink;
/**

    Gets the VP8 converter.

*/
- (FMLiveSwitchVideoPipe*) vp8Converter;
/**

    Gets the VP8 decoder.

*/
- (FMLiveSwitchVideoDecoder*) vp8Decoder;
/**

    Gets the VP8 depacketizer.

*/
- (FMLiveSwitchVideoPipe*) vp8Depacketizer;
/**

    Gets whether the VP8 codec is disabled.

*/
- (bool) vp8Disabled;
/**

    Gets the VP8 synchronizer.

*/
- (FMLiveSwitchVideoSynchronizer*) vp8Synchronizer;
/**

    Gets the VP9 converter.

*/
- (FMLiveSwitchVideoPipe*) vp9Converter;
/**

    Gets the VP9 decoder.

*/
- (FMLiveSwitchVideoDecoder*) vp9Decoder;
/**

    Gets the VP9 depacketizer.

*/
- (FMLiveSwitchVideoPipe*) vp9Depacketizer;
/**

    Gets whether the VP9 codec is disabled.

*/
- (bool) vp9Disabled;
/**

    Gets the VP9 synchronizer.

*/
- (FMLiveSwitchVideoSynchronizer*) vp9Synchronizer;

@end

/**

    An RTP packet.

*/
@interface FMLiveSwitchRtpPacket : NSObject

/**

    Gets the buffer.

*/
- (FMLiveSwitchDataBuffer*) buffer;
/**

    Gets the number of FMLiveSwitchRtpPacket#contributingSources.

*/
- (int) contributingSourceCount;
/**

    Gets the contributing sources.

*/
- (NSMutableArray*) contributingSources;
/**

    Gets the length of the FMLiveSwitchRtpPacket#contributingSources in bytes.

*/
- (int) contributingSourcesLength;
/**

    Gets the offset of the FMLiveSwitchRtpPacket#contributingSources array.

*/
- (int) contributingSourcesOffset;
/**

    Gets a value indicating whether this FMLiveSwitchRtpPacket has a header extension.
    If the extension bit is set, the fixed header MUST be followed by exactly one header extension.

*/
- (bool) extension;
/**

    Gets the length of the fixed header.

*/
+ (int) fixedHeaderLength;
/**

    Retrieves the difference between two sequence numbers
    while accounting for overflow rollover.

    @param sequenceNumber The current sequence number.
    @param lastSequenceNumber The last (previous) sequence number.
    @return The difference between the two sequence numbers.
*/
+ (int) getSequenceNumberDeltaWithSequenceNumber:(int)sequenceNumber lastSequenceNumber:(int)lastSequenceNumber;
/**

    Gets the header.

*/
- (FMLiveSwitchDataBuffer*) header;
/**

    Gets the header extension.

*/
- (FMLiveSwitchDataBuffer*) headerExtension;
/**

    Gets the header extension ID.

*/
- (int) headerExtensionId;
/**

    Gets the length of the FMLiveSwitchRtpPacket#headerExtension in bytes.

*/
- (int) headerExtensionLength;
/**

    Gets the offset of the FMLiveSwitchRtpPacket#headerExtensionId.

*/
- (int) headerExtensionOffset;
/**

    Gets the length of the fixed and variable headers.

*/
- (int) headerLength;
/**

    Initializes a new instance of the FMLiveSwitchRtpPacket class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchRtpPacket class.

    @param payload The payload for the RTP packet.
*/
- (instancetype) initWithPayload:(FMLiveSwitchDataBuffer*)payload;
/**

    Gets a value indicating whether this FMLiveSwitchRtpPacket has the marker flag set.

*/
- (bool) marker;
/**

    Gets a value indicating whether this FMLiveSwitchRtpPacket is padded.

*/
- (bool) padding;
/**

    Gets the padding length.

*/
- (int) paddingLength;
/**

    Gets the packet payload.

*/
- (FMLiveSwitchDataBuffer*) payload;
/**

    Gets the length of the FMLiveSwitchRtpPacket#payload.

*/
- (int) payloadLength;
/**

    Gets the offset of the FMLiveSwitchRtpPacket#payload.

*/
- (int) payloadOffset;
/**

    Gets the payload type.

*/
- (int) payloadType;
/**

    Initializes a new instance of the FMLiveSwitchRtpPacket class.

*/
+ (FMLiveSwitchRtpPacket*) rtpPacket;
/**

    Initializes a new instance of the FMLiveSwitchRtpPacket class.

    @param payload The payload for the RTP packet.
*/
+ (FMLiveSwitchRtpPacket*) rtpPacketWithPayload:(FMLiveSwitchDataBuffer*)payload;
/**

    Gets the sequence number.

*/
- (int) sequenceNumber;
/**

    Sets the contributing sources.

*/
- (void) setContributingSources:(NSMutableArray*)value;
/**

    Sets the header extension.

*/
- (void) setHeaderExtension:(FMLiveSwitchDataBuffer*)value;
/**

    Sets the header extension ID.

*/
- (void) setHeaderExtensionId:(int)value;
/**

    Sets a value indicating whether this FMLiveSwitchRtpPacket has the marker flag set.

*/
- (void) setMarker:(bool)value;
/**

    Sets a value indicating whether this FMLiveSwitchRtpPacket is padded.

*/
- (void) setPadding:(bool)value;
/**

    Sets the packet payload.

*/
- (void) setPayload:(FMLiveSwitchDataBuffer*)value;
/**

    Sets the payload type.

*/
- (void) setPayloadType:(int)value;
/**

    Sets the sequence number.

*/
- (void) setSequenceNumber:(int)value;
/**

    Sets the synchronization source.

*/
- (void) setSynchronizationSource:(long long)value;
/**

    Sets the timestamp.

*/
- (void) setTimestamp:(long long)value;
/**

    Sets the version.
    This field identifies the version of RTP.  The version defined by
    this specification is two(2).  (The value 1 is used by the first
    draft version of RTP and the value 0 is used by the protocol
    initially implemented in the "vat" audio tool.)

*/
- (void) setVersion:(int)value;
/**

    Gets the synchronization source.

*/
- (long long) synchronizationSource;
/**

    Gets the timestamp.

*/
- (long long) timestamp;
/**

    Gets the length of the variable header.

*/
- (int) variableHeaderLength;
/**

    Gets the version.
    This field identifies the version of RTP.  The version defined by
    this specification is two(2).  (The value 1 is used by the first
    draft version of RTP and the value 0 is used by the protocol
    initially implemented in the "vat" audio tool.)

*/
- (int) version;
/**

    Parses the specified buffer.

    @param buffer The buffer.
    @return Rtp.Packet
*/
+ (FMLiveSwitchRtpPacket*) wrapWithBuffer:(FMLiveSwitchDataBuffer*)buffer;

@end

/**

    An RTP packet header.

*/
@interface FMLiveSwitchRtpPacketHeader : NSObject

/**

    Calculates the length of the header. At least 12 bytes.

*/
- (int) calculateHeaderLength;
/**

    Clones this instance.

*/
- (FMLiveSwitchRtpPacketHeader*) clone;
/**

    Gets the number of contributing sources.

*/
- (int) contributingSourceCount;
/**

    Gets the contributing sources.

*/
- (NSMutableArray*) contributingSources;
/**

    Gets if there is an extension.

*/
- (bool) extension;
/**

    Gets the length of the fixed header.

*/
+ (int) fixedHeaderLength;
/**

    Gets the header extension.

*/
- (NSObject<FMLiveSwitchIRtpHeaderExtension>*) headerExtension;
/**

    Creates a new instance of the FMLiveSwitchRtpPacketHeader class.

*/
- (instancetype) init;
/**

    Gets if the marker bit is set.

*/
- (bool) marker;
/**

    Gets if the packet has padding.

*/
- (bool) padding;
/**

    Gets the number of bytes of padding.

*/
- (int) paddingLength;
/**

    Gets the payload type.

*/
- (int) payloadType;
/**

    Reads a header from a buffer. If padding exists, also calculates the padding length.

    @param buffer The source buffer
*/
+ (FMLiveSwitchRtpPacketHeader*) readFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Creates a new instance of the FMLiveSwitchRtpPacketHeader class.

*/
+ (FMLiveSwitchRtpPacketHeader*) rtpPacketHeader;
/**

    Gets the sequence number.

*/
- (int) sequenceNumber;
/**

    Sets the number of contributing sources.

*/
- (void) setContributingSourceCount:(int)value;
/**

    Sets the contributing sources.

*/
- (void) setContributingSources:(NSMutableArray*)value;
/**

    Sets the header extension.

*/
- (void) setHeaderExtension:(NSObject<FMLiveSwitchIRtpHeaderExtension>*)value;
/**

    Sets if the marker bit is set.

*/
- (void) setMarker:(bool)value;
/**

    Sets if the packet has padding.

*/
- (void) setPadding:(bool)value;
/**

    Sets the payload type.

*/
- (void) setPayloadType:(int)value;
/**

    Sets the sequence number.

*/
- (void) setSequenceNumber:(int)value;
/**

    Sets the synchronization source.

*/
- (void) setSynchronizationSource:(long long)value;
/**

    Sets the timestamp.

*/
- (void) setTimestamp:(long long)value;
/**

    Sets the version of the packet. Should be 2.

*/
- (void) setVersion:(int)value;
/**

    Gets the synchronization source.

*/
- (long long) synchronizationSource;
/**

    Gets the timestamp.

*/
- (long long) timestamp;
/**

    Gets the version of the packet. Should be 2.

*/
- (int) version;
/**

    Writes this header to a buffer starting at the offset.

    @param buffer The target buffer.
    @param offset The starting offset.
*/
- (void) writeToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;

@end

/**

    An RTCP source description chunk.

*/
@interface FMLiveSwitchSdesChunk : NSObject

/**

    Gets the Canonical Name (if set) in this SDES chunk.

*/
- (NSString*) canonicalName;
/**

    Gets the data buffer.

*/
- (FMLiveSwitchDataBuffer*) dataBuffer;
/**

    Gets the fixed payload header length.

*/
+ (int) fixedPayloadHeaderLength;
/**

    Initializes a new instance of the FMLiveSwitchSdesChunk class.

    @param buffer The buffer.
*/
- (instancetype) initWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchSdesChunk class.

    @param synchronizationSource The synchronization source.
    @param sourceDescriptionItem The source description item.
*/
- (instancetype) initWithSynchronizationSource:(long long)synchronizationSource sourceDescriptionItem:(FMLiveSwitchSdesItem*)sourceDescriptionItem;
/**

    Initializes a new instance of the FMLiveSwitchSdesChunk class.

    @param synchronizationSource The synchronization source.
    @param sourceDescriptionItems The source description items.
*/
- (instancetype) initWithSynchronizationSource:(long long)synchronizationSource sourceDescriptionItems:(NSMutableArray*)sourceDescriptionItems;
/**

    Gets the Media Stream Indentification (if set) in this SDES chunk.

*/
- (NSString*) mid;
/**

    Initializes a new instance of the FMLiveSwitchSdesChunk class.

    @param buffer The buffer.
*/
+ (FMLiveSwitchSdesChunk*) sdesChunkWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchSdesChunk class.

    @param synchronizationSource The synchronization source.
    @param sourceDescriptionItem The source description item.
*/
+ (FMLiveSwitchSdesChunk*) sdesChunkWithSynchronizationSource:(long long)synchronizationSource sourceDescriptionItem:(FMLiveSwitchSdesItem*)sourceDescriptionItem;
/**

    Initializes a new instance of the FMLiveSwitchSdesChunk class.

    @param synchronizationSource The synchronization source.
    @param sourceDescriptionItems The source description items.
*/
+ (FMLiveSwitchSdesChunk*) sdesChunkWithSynchronizationSource:(long long)synchronizationSource sourceDescriptionItems:(NSMutableArray*)sourceDescriptionItems;
/**

    Sets the SSRC/CSRC identifier.

*/
- (void) setSynchronizationSource:(long long)value;
/**

    Gets the source description items.

*/
- (NSMutableArray*) sourceDescriptionItems;
/**

    Gets the SSRC/CSRC identifier.

*/
- (long long) synchronizationSource;

@end

/**

    An RTCP SDES packet.

*/
@interface FMLiveSwitchSdesControlFrame : FMLiveSwitchMediaControlFrame

/**

    Gets the source description chunks.

*/
- (NSMutableArray*) chunks;
/**

    Gets the length of the fixed payload header.

*/
+ (int) fixedPayloadHeaderLength;
/**

    Initializes a new instance of the FMLiveSwitchSdesControlFrame class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchSdesControlFrame class.

    @param buffer The buffer.
*/
- (instancetype) initWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchSdesControlFrame class.

    @param chunk The chunk.
*/
- (instancetype) initWithChunk:(FMLiveSwitchSdesChunk*)chunk;
/**

    Initializes a new instance of the FMLiveSwitchSdesControlFrame class.

    @param chunks The chunks.
*/
- (instancetype) initWithChunks:(NSMutableArray*)chunks;
/**

    Gets the session description payload type.

*/
+ (int) registeredPayloadType;
/**

    Initializes a new instance of the FMLiveSwitchSdesControlFrame class.

*/
+ (FMLiveSwitchSdesControlFrame*) sdesControlFrame;
/**

    Initializes a new instance of the FMLiveSwitchSdesControlFrame class.

    @param buffer The buffer.
*/
+ (FMLiveSwitchSdesControlFrame*) sdesControlFrameWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchSdesControlFrame class.

    @param chunk The chunk.
*/
+ (FMLiveSwitchSdesControlFrame*) sdesControlFrameWithChunk:(FMLiveSwitchSdesChunk*)chunk;
/**

    Initializes a new instance of the FMLiveSwitchSdesControlFrame class.

    @param chunks The chunks.
*/
+ (FMLiveSwitchSdesControlFrame*) sdesControlFrameWithChunks:(NSMutableArray*)chunks;
/**

    Gets the source count.

*/
- (int) sourceCount;

@end

/**

    An RTCP source description item.

*/
@interface FMLiveSwitchSdesItem : NSObject

/**

    Gets the data buffer.

*/
- (FMLiveSwitchDataBuffer*) dataBuffer;
/**

    Gets the fixed payload header length.

*/
+ (int) fixedPayloadHeaderLength;
/**

    Initializes a new instance of the FMLiveSwitchSdesItem class.

    @param buffer The buffer.
*/
- (instancetype) initWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchSdesItem class.

    @param type The type.
    @param text The text.
*/
- (instancetype) initWithType:(int)type text:(NSString*)text;
/**

    Gets the length.

*/
- (int) length;
/**

    Initializes a new instance of the FMLiveSwitchSdesItem class.

    @param buffer The buffer.
*/
+ (FMLiveSwitchSdesItem*) sdesItemWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchSdesItem class.

    @param type The type.
    @param text The text.
*/
+ (FMLiveSwitchSdesItem*) sdesItemWithType:(int)type text:(NSString*)text;
/**

    Gets the text.

*/
- (NSString*) text;
/**

    Gets the type.

*/
- (int) type;

@end

/**

    An SDES Item Type.

*/
@interface FMLiveSwitchSdesItemType : NSObject

/**

    Gets the canonical name (CNAME) type.

*/
+ (uint8_t) canonicalName;
/**

    Gets the email address (EMAIL) type.

*/
+ (uint8_t) emailAddress;
- (instancetype) init;
/**

    Gets the location (LOC) type.

*/
+ (uint8_t) location;
/**

    Gets the Media Identification (MID) type as defined in http://www.iana.org/go/draft-ietf-mmusic-sdp-bundle-negotiation-52 .

*/
+ (uint8_t) mid;
/**

    Gets the notice/status (NOTE) type.

*/
+ (uint8_t) notice;
/**

    Gets the null type.

*/
+ (uint8_t) null;
/**

    Gets the phone number (PHONE) type.

*/
+ (uint8_t) phoneNumber;
/**

    Gets the private extensions (PRIV) type.

*/
+ (uint8_t) privateExtensions;
/**

    Gets the repaired RTP stream identifier (RepairedRtpStreamId) type.

*/
+ (uint8_t) repairedRtpStreamId;
/**

    Gets the RTP stream identifier (RtpStreamId) type.

*/
+ (uint8_t) rtpStreamId;
+ (FMLiveSwitchSdesItemType*) sdesItemType;
/**

    Gets the name of the tool (TOOL) type.

*/
+ (uint8_t) toolName;
/**

    Gets the name of the user (NAME) type.

*/
+ (uint8_t) userName;

@end

@interface FMLiveSwitchSdesPolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchSdesPolicy)value;

@end

/**

    An IP address and port, along with optional
    public IP addresses for listening behind a 1:1 NAT.

*/
@interface FMLiveSwitchServerAddress : FMLiveSwitchTransportAddress

/**

    Initializes a new instance of the FMLiveSwitchServerAddress class.

    @param ipAddress The IP address.
    @param port The port.
*/
- (instancetype) initWithIPAddress:(NSString*)ipAddress port:(int)port;
/**

    Initializes a new instance of the FMLiveSwitchServerAddress class.

    @param ipAddress The IP address.
    @param port The port.
    @param publicIPAddress The public IP address.
*/
- (instancetype) initWithIPAddress:(NSString*)ipAddress port:(int)port publicIPAddress:(NSString*)publicIPAddress;
/**

    Initializes a new instance of the FMLiveSwitchServerAddress class.

    @param ipAddress The IP address.
    @param port The port.
    @param publicIPAddresses The public IP addresses.
*/
- (instancetype) initWithIPAddress:(NSString*)ipAddress port:(int)port publicIPAddresses:(NSMutableArray*)publicIPAddresses;
/**

    Gets the first public IP address.

*/
- (NSString*) publicIPAddress;
/**

    Gets the public IP addresses.

*/
- (NSMutableArray*) publicIPAddresses;
/**

    Initializes a new instance of the FMLiveSwitchServerAddress class.

    @param ipAddress The IP address.
    @param port The port.
*/
+ (FMLiveSwitchServerAddress*) serverAddressWithIPAddress:(NSString*)ipAddress port:(int)port;
/**

    Initializes a new instance of the FMLiveSwitchServerAddress class.

    @param ipAddress The IP address.
    @param port The port.
    @param publicIPAddress The public IP address.
*/
+ (FMLiveSwitchServerAddress*) serverAddressWithIPAddress:(NSString*)ipAddress port:(int)port publicIPAddress:(NSString*)publicIPAddress;
/**

    Initializes a new instance of the FMLiveSwitchServerAddress class.

    @param ipAddress The IP address.
    @param port The port.
    @param publicIPAddresses The public IP addresses.
*/
+ (FMLiveSwitchServerAddress*) serverAddressWithIPAddress:(NSString*)ipAddress port:(int)port publicIPAddresses:(NSMutableArray*)publicIPAddresses;

@end

@interface FMLiveSwitchSignallingStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchSignallingState)value;

@end

/**

    A sink output (e.g. device, track, screen).

*/
@interface FMLiveSwitchSinkOutput : NSObject

/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Deserializes an instance array from JSON.

    @param sinkOutputsJson The sink outputs JSON.
*/
+ (NSMutableArray*) fromJsonArrayWithSinkOutputsJson:(NSString*)sinkOutputsJson;
/**

    Deserializes an instance from JSON.

    @param sinkOutputJson The sink output JSON.
*/
+ (FMLiveSwitchSinkOutput*) fromJsonWithSinkOutputJson:(NSString*)sinkOutputJson;
/**

    Gets the identifier.

*/
- (NSString*) id;
/**

    Initializes a new instance of the FMLiveSwitchSinkOutput class.

    @param idValue The identifier.
    @param name The name.
*/
- (instancetype) initWithId:(NSString*)idValue name:(NSString*)name;
/**

    Gets the name.

*/
- (NSString*) name;
/**

    Initializes a new instance of the FMLiveSwitchSinkOutput class.

    @param idValue The identifier.
    @param name The name.
*/
+ (FMLiveSwitchSinkOutput*) sinkOutputWithId:(NSString*)idValue name:(NSString*)name;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an instance array to JSON.

    @param sinkOutputs The sink outputs.
*/
+ (NSString*) toJsonArrayWithSinkOutputs:(NSMutableArray*)sinkOutputs;
/**

    Serializes an instance to JSON.

    @param sinkOutput The sink output.
*/
+ (NSString*) toJsonWithSinkOutput:(FMLiveSwitchSinkOutput*)sinkOutput;

@end

/**

    An RTCP slice loss indication.

*/
@interface FMLiveSwitchSli : NSObject

/**

    Gets the backing `DataBuffer`.

*/
- (FMLiveSwitchDataBuffer*) dataBuffer;
/**

    Gets the macroblock (MB) address of the first lost macroblock.

*/
- (int) first;
/**

    Initializes a new instance of the FMLiveSwitchSli class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchSli class.

    @param buffer The buffer.
*/
- (instancetype) initWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Gets the number of lost macroblocks, in scan order.

*/
- (int) number;
/**

    Gets the six least significant bits of the codec-specific
    identifier that is used to reference the picture in which the loss
    of the macroblock(s) has occurred.

*/
- (int) pictureId;
/**

    Sets the macroblock (MB) address of the first lost macroblock.

*/
- (void) setFirst:(int)value;
/**

    Sets the number of lost macroblocks, in scan order.

*/
- (void) setNumber:(int)value;
/**

    Sets the six least significant bits of the codec-specific
    identifier that is used to reference the picture in which the loss
    of the macroblock(s) has occurred.

*/
- (void) setPictureId:(int)value;
/**

    Initializes a new instance of the FMLiveSwitchSli class.

*/
+ (FMLiveSwitchSli*) sli;
/**

    Initializes a new instance of the FMLiveSwitchSli class.

    @param buffer The buffer.
*/
+ (FMLiveSwitchSli*) sliWithBuffer:(FMLiveSwitchDataBuffer*)buffer;

@end

/**

    An RTCP Feedback PS-SLI packet.

*/
@interface FMLiveSwitchSliControlFrame : FMLiveSwitchPayloadSpecificControlFrame

/**

    Initializes a new instance of the FMLiveSwitchSliControlFrame class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchSliControlFrame class.

    @param buffer The buffer.
*/
- (instancetype) initWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchSliControlFrame class.

    @param sli The sli.
*/
- (instancetype) initWithSli:(FMLiveSwitchSli*)sli;
/**

    Initializes a new instance of the FMLiveSwitchSliControlFrame class.

    @param slis The slis.
*/
- (instancetype) initWithSlis:(NSMutableArray*)slis;
/**

    Gets the the registered fedback message type.

*/
+ (int) registeredFedbackMessageType;
/**

    Gets the slice loss indications.

*/
- (NSMutableArray*) sliceLossIndications;
/**

    Gets the number of SLIs in the FCI field.

*/
- (int) sliceLossIndicationsCount;
/**

    Initializes a new instance of the FMLiveSwitchSliControlFrame class.

*/
+ (FMLiveSwitchSliControlFrame*) sliControlFrame;
/**

    Initializes a new instance of the FMLiveSwitchSliControlFrame class.

    @param buffer The buffer.
*/
+ (FMLiveSwitchSliControlFrame*) sliControlFrameWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchSliControlFrame class.

    @param sli The sli.
*/
+ (FMLiveSwitchSliControlFrame*) sliControlFrameWithSli:(FMLiveSwitchSli*)sli;
/**

    Initializes a new instance of the FMLiveSwitchSliControlFrame class.

    @param slis The slis.
*/
+ (FMLiveSwitchSliControlFrame*) sliControlFrameWithSlis:(NSMutableArray*)slis;

@end

/**

    A pipe that converts sound.

*/
@interface FMLiveSwitchSoundConverter : FMLiveSwitchAudioPipe

/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchAudioFrame*)frame inputBuffer:(FMLiveSwitchAudioBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchSoundConverter class.

    @param input The input.
    @param outputConfig The output configuration.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input outputConfig:(FMLiveSwitchAudioConfig*)outputConfig;
/**

    Initializes a new instance of the FMLiveSwitchSoundConverter class.

    @param inputConfig The input configuration.
    @param outputConfig The output configuration.
*/
- (instancetype) initWithInputConfig:(FMLiveSwitchAudioConfig*)inputConfig outputConfig:(FMLiveSwitchAudioConfig*)outputConfig;
/**

    Initializes a new instance of the FMLiveSwitchSoundConverter class.

    @param inputs The inputs.
    @param outputConfig The output configuration.
*/
- (instancetype) initWithInputs:(NSMutableArray*)inputs outputConfig:(FMLiveSwitchAudioConfig*)outputConfig;
/**

    Initializes a new instance of the FMLiveSwitchSoundConverter class.

    @param outputConfig The output configuration.
*/
- (instancetype) initWithOutputConfig:(FMLiveSwitchAudioConfig*)outputConfig;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Initializes a new instance of the FMLiveSwitchSoundConverter class.

    @param input The input.
    @param outputConfig The output configuration.
*/
+ (FMLiveSwitchSoundConverter*) soundConverterWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input outputConfig:(FMLiveSwitchAudioConfig*)outputConfig;
/**

    Initializes a new instance of the FMLiveSwitchSoundConverter class.

    @param inputConfig The input configuration.
    @param outputConfig The output configuration.
*/
+ (FMLiveSwitchSoundConverter*) soundConverterWithInputConfig:(FMLiveSwitchAudioConfig*)inputConfig outputConfig:(FMLiveSwitchAudioConfig*)outputConfig;
/**

    Initializes a new instance of the FMLiveSwitchSoundConverter class.

    @param inputs The inputs.
    @param outputConfig The output configuration.
*/
+ (FMLiveSwitchSoundConverter*) soundConverterWithInputs:(NSMutableArray*)inputs outputConfig:(FMLiveSwitchAudioConfig*)outputConfig;
/**

    Initializes a new instance of the FMLiveSwitchSoundConverter class.

    @param outputConfig The output configuration.
*/
+ (FMLiveSwitchSoundConverter*) soundConverterWithOutputConfig:(FMLiveSwitchAudioConfig*)outputConfig;

@end

/**

    A pipe that reframes sound chunks into different durations.

*/
@interface FMLiveSwitchSoundReframer : FMLiveSwitchAudioPipe

/**

    Gets whether the timestamp should be reset
    using the wall clock after FMLiveSwitchSoundReframer#timestampResetInterval
    milliseconds elapse between frames.

*/
- (bool) disableTimestampReset;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchAudioFrame*)frame inputBuffer:(FMLiveSwitchAudioBuffer*)inputBuffer;
/**

    Gets whether the timestamp should be reset
    before the next frame is processed.

*/
- (bool) forceTimestampReset;
/**

    Gets the frame duration in milliseconds.
    Defaults to 20.

*/
- (int) frameDuration;
/**

    Initializes a new instance of the FMLiveSwitchSoundReframer class.

    @param config The configuration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchSoundReframer class.

    @param config The configuration.
    @param frameDuration The frame duration.
*/
- (instancetype) initWithConfig:(FMLiveSwitchAudioConfig*)config frameDuration:(int)frameDuration;
/**

    Initializes a new instance of the FMLiveSwitchSoundReframer class.

    @param input The input.
    @param frameDuration The frame duration.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input frameDuration:(int)frameDuration;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Sets whether the timestamp should be reset
    using the wall clock after FMLiveSwitchSoundReframer#timestampResetInterval
    milliseconds elapse between frames.

*/
- (void) setDisableTimestampReset:(bool)value;
/**

    Sets whether the timestamp should be reset
    before the next frame is processed.

*/
- (void) setForceTimestampReset:(bool)value;
/**

    Sets the amount of time in milliseconds
    between audio frames that will trigger a reset of
    the timestamp to the wall clock.
    Defaults to 1000ms.

*/
- (void) setTimestampResetInterval:(int)value;
/**

    Initializes a new instance of the FMLiveSwitchSoundReframer class.

    @param config The configuration.
*/
+ (FMLiveSwitchSoundReframer*) soundReframerWithConfig:(FMLiveSwitchAudioConfig*)config;
/**

    Initializes a new instance of the FMLiveSwitchSoundReframer class.

    @param config The configuration.
    @param frameDuration The frame duration.
*/
+ (FMLiveSwitchSoundReframer*) soundReframerWithConfig:(FMLiveSwitchAudioConfig*)config frameDuration:(int)frameDuration;
/**

    Initializes a new instance of the FMLiveSwitchSoundReframer class.

    @param input The input.
    @param frameDuration The frame duration.
*/
+ (FMLiveSwitchSoundReframer*) soundReframerWithInput:(NSObject<FMLiveSwitchIAudioOutput>*)input frameDuration:(int)frameDuration;
/**

    Gets the amount of time in milliseconds
    between audio frames that will trigger a reset of
    the timestamp to the wall clock.
    Defaults to 1000ms.

*/
- (int) timestampResetInterval;

@end

/**

    A sound reframer context that can reframe
    sound chunks into consistent durations.

*/
@interface FMLiveSwitchSoundReframerContext : NSObject

/**

    Adds a handler that is raised when a frame is ready.

*/
- (void) addOnFrame:(FMLiveSwitchAction1<FMLiveSwitchAudioFrame*>*)value;
/**

    Adds a handler that is raised when a frame is ready.

*/
- (void (^)(void(^)(FMLiveSwitchAudioFrame*))) addOnFrameWithBlock;
/**

    Adds a handler that is raised when a frame is ready.

*/
- (void) addOnFrameWithBlock:(void(^)(FMLiveSwitchAudioFrame*))valueBlock;
/**

    Gets the next timestamp.

*/
- (long long) autoTimestampWithTimestampDelta:(int)timestampDelta;
/**

    Gets the config.

*/
- (FMLiveSwitchAudioConfig*) config;
/**

    Gets whether timestamp resetting should
    be disabled entirely. Only applies if timestamps
    are auto-generated (i.e. not set on the frames).

*/
- (bool) disableTimestampReset;
/**

    Gets whether to force a timestamp reset
    with the next raised frame. If set to `true`,
    this value will be reset to `false` after
    the wall-clock reset takes place. Only applies
    if timestamps are auto-generated (i.e. not set
    on the frames).

*/
- (bool) forceTimestampReset;
/**

    Gets the frame duration.

*/
- (int) frameDuration;
/**

    Initializes a new instance of the FMLiveSwitchSoundReframerContext class.

    @param frameDuration The frame duration.
    @param config The configuration.
*/
- (instancetype) initWithFrameDuration:(int)frameDuration config:(FMLiveSwitchAudioConfig*)config;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) processFrame:(FMLiveSwitchAudioFrame*)frame inputBuffer:(FMLiveSwitchAudioBuffer*)inputBuffer;
/**

    Removes a handler that is raised when a frame is ready.

*/
- (void) removeOnFrame:(FMLiveSwitchAction1<FMLiveSwitchAudioFrame*>*)value;
/**

    Sets whether timestamp resetting should
    be disabled entirely. Only applies if timestamps
    are auto-generated (i.e. not set on the frames).

*/
- (void) setDisableTimestampReset:(bool)value;
/**

    Sets whether to force a timestamp reset
    with the next raised frame. If set to `true`,
    this value will be reset to `false` after
    the wall-clock reset takes place. Only applies
    if timestamps are auto-generated (i.e. not set
    on the frames).

*/
- (void) setForceTimestampReset:(bool)value;
/**

    Sets the amount of time in milliseconds
    between audio frames that will trigger a wall-clock
    reset of the timestamp. Only applies if timestamps
    are auto-generated (i.e. not set on the frames).
    Defaults to 1000.

*/
- (void) setTimestampResetInterval:(int)value;
/**

    Initializes a new instance of the FMLiveSwitchSoundReframerContext class.

    @param frameDuration The frame duration.
    @param config The configuration.
*/
+ (FMLiveSwitchSoundReframerContext*) soundReframerContextWithFrameDuration:(int)frameDuration config:(FMLiveSwitchAudioConfig*)config;
/**

    Gets the amount of time in milliseconds
    between audio frames that will trigger a wall-clock
    reset of the timestamp. Only applies if timestamps
    are auto-generated (i.e. not set on the frames).
    Defaults to 1000.

*/
- (int) timestampResetInterval;

@end

/**

    Sound utility methods.

*/
@interface FMLiveSwitchSoundUtility : NSObject

/**

    Calculates the number of bytes in a given audio chunk
    given its duration (ms), clock rate, and channel count.

    @param duration The duration in ms.
    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
+ (int) calculateDataLengthFloatPreciseWithDuration:(double)duration clockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Calculates the number of bytes in a given audio chunk
    given its duration (ms), clock rate, and channel count.

    @param duration The duration in ms.
    @param config The configuration.
*/
+ (int) calculateDataLengthFloatPreciseWithDuration:(double)duration config:(FMLiveSwitchAudioConfig*)config;
/**

    Calculates the number of bytes in a given audio chunk
    given its duration (ms), clock rate, and channel count.

    @param duration The duration in ms.
    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
+ (int) calculateDataLengthFloatWithDuration:(int)duration clockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Calculates the number of bytes in a given audio chunk
    given its duration (ms), clock rate, and channel count.

    @param duration The duration in ms.
    @param config The configuration.
*/
+ (int) calculateDataLengthFloatWithDuration:(int)duration config:(FMLiveSwitchAudioConfig*)config;
/**

    Calculates a data length in bytes given a timestamp delta and channel count.

    @param timestampDelta The timestamp delta.
    @param channelCount The channel count.
*/
+ (int) calculateDataLengthFromTimestampDelta:(int)timestampDelta channelCount:(int)channelCount;
/**

    Calculates a data length in bytes given a timestamp delta, channel count, and number of bytes per sample.

    @param timestampDelta The timestamp delta.
    @param channelCount The channel count.
    @param bytesPerSample The number of bytes per sample.
*/
+ (int) calculateDataLengthFromTimestampDelta:(int)timestampDelta channelCount:(int)channelCount bytesPerSample:(int)bytesPerSample;
/**

    Calculates the number of bytes in a given audio chunk
    given its duration (ms), clock rate, and channel count.

    @param duration The duration in ms.
    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
+ (int) calculateDataLengthPreciseWithDuration:(double)duration clockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Calculates the number of bytes in a given audio chunk
    given its duration (ms), clock rate, and channel count.

    @param duration The duration in ms.
    @param config The configuration.
*/
+ (int) calculateDataLengthPreciseWithDuration:(double)duration config:(FMLiveSwitchAudioConfig*)config;
/**

    Calculates the number of bytes in a given audio chunk
    given its duration (ms), clock rate, and channel count.

    @param duration The duration in ms.
    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
+ (int) calculateDataLengthWithDuration:(int)duration clockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Calculates the number of bytes in a given audio chunk
    given its duration (ms), clock rate, and channel count.

    @param duration The duration in ms.
    @param config The configuration.
*/
+ (int) calculateDataLengthWithDuration:(int)duration config:(FMLiveSwitchAudioConfig*)config;
/**

    Calculates the duration of an audio chunk given its data
    length (the number of bytes), clock rate, and channel count.

    @param dataLength The length of the audio chunk.
    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
+ (int) calculateDurationFloatWithDataLength:(int)dataLength clockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Calculates the duration of an audio chunk given its data
    length (the number of bytes), clock rate, and channel count.

    @param dataLength The length of the audio chunk.
    @param config The configuration.
*/
+ (int) calculateDurationFloatWithDataLength:(int)dataLength config:(FMLiveSwitchAudioConfig*)config;
/**

    Calculates a duration in milliseconds given a system timestamp delta in ticks.

    @param systemTimestampDelta The system timestamp delta.
*/
+ (int) calculateDurationFromSystemTimestampDelta:(int)systemTimestampDelta;
/**

    Calculates a duration in milliseconds given a timestamp delta and its clock rate.

    @param timestampDelta The timestamp delta.
    @param clockRate The clock rate.
*/
+ (int) calculateDurationFromTimestampDelta:(int)timestampDelta clockRate:(int)clockRate;
/**

    Calculates the duration of an audio chunk given its data
    length (the number of bytes), clock rate, and channel count.

    @param dataLength The length of the audio chunk.
    @param clockRate The clock rate.
    @param channelCount The channel count.
*/
+ (int) calculateDurationWithDataLength:(int)dataLength clockRate:(int)clockRate channelCount:(int)channelCount;
/**

    Calculates the duration of an audio chunk given its data
    length (the number of bytes), clock rate, and channel count.

    @param dataLength The length of the audio chunk.
    @param config The configuration.
*/
+ (int) calculateDurationWithDataLength:(int)dataLength config:(FMLiveSwitchAudioConfig*)config;
/**

    Calculates the length of an output data buffer
    after conversion from an input to an output
    channel count.

    @param inputLength The input data buffer length.
    @param inputChannelCount The input channel count.
    @param outputChannelCount The output channel count.
*/
+ (int) calculateOutputLengthForChannelCountWithInputLength:(int)inputLength inputChannelCount:(int)inputChannelCount outputChannelCount:(int)outputChannelCount;
/**

    Calculates a system timestamp delta in ticks given a duration in milliseconds.

    @param duration The duration in milliseconds.
*/
+ (int) calculateSystemTimestampDeltaFromDuration:(int)duration;
/**

    Calculates a system timestamp delta given a timestamp delta and its clock rate.

    @param timestampDelta The timestamp delta.
    @param clockRate The clock rate.
*/
+ (long long) calculateSystemTimestampDeltaFromTimestampDelta:(long long)timestampDelta clockRate:(int)clockRate;
/**

    Calculates a timestamp delta given a data length and channel count.

    @param dataLength The data length in bytes.
    @param channelCount The channel count.
*/
+ (int) calculateTimestampDeltaFromDataLength:(int)dataLength channelCount:(int)channelCount;
/**

    Calculates a timestamp delta given a data length in bytes, channel count, and number of bytes per sample.

    @param dataLength The data length in bytes.
    @param channelCount The channel count.
    @param bytesPerSample The number of bytes per sample.
*/
+ (int) calculateTimestampDeltaFromDataLength:(int)dataLength channelCount:(int)channelCount bytesPerSample:(int)bytesPerSample;
/**

    Calculates a timestamp delta given its clock rate and a duration in milliseconds.

    @param duration The duration in milliseconds.
    @param clockRate The clock rate.
*/
+ (int) calculateTimestampDeltaFromDuration:(int)duration clockRate:(int)clockRate;
/**

    Calculates a timestamp delta given its clock rate and a system timestamp delta.

    @param systemTimestampDelta The system timestamp delta.
    @param clockRate The clock rate.
*/
+ (long long) calculateTimestampDeltaFromSystemTimestampDelta:(long long)systemTimestampDelta clockRate:(int)clockRate;
/**

    Converts a data buffer to a new channel count. The input
    data buffer length must be a multiple of the input frame
    size. If the input channel count is greater than the output
    channel count, the input channel count must divide evenly
    into the output channel count, and vice versa if the output
    channel count is greater than the input channel count.

    @param input The input data buffer.
    @param inputChannelCount The input channel count.
    @param output The output data buffer.
    @param outputChannelCount The output channel count.
*/
+ (FMLiveSwitchDataBuffer*) convertChannelCountWithInput:(FMLiveSwitchDataBuffer*)input inputChannelCount:(int)inputChannelCount output:(FMLiveSwitchDataBuffer*)output outputChannelCount:(int)outputChannelCount;
/**

    Converts a short value to a floating-point value.

    @param value The short value.
    @return The floating-point value.
*/
+ (float) floatFromShort:(short)value;
- (instancetype) init;
/**

    Converts each sample into two identical samples.

    @return A new FMLiveSwitchDataBufferPooled or `null`.
*/
+ (FMLiveSwitchDataBuffer*) monoToStereoWithMono:(FMLiveSwitchDataBuffer*)mono stereo:(FMLiveSwitchDataBuffer*)stereo;
/**

    Reads a PCM short value from a byte array.

    @param input The source byte array.
    @param index The source index in the byte array.
    @return Short value.  This is an int for performance reasons but can be safely
            cast to a short as needed.
*/
+ (short) readPcmShortWithInput:(NSMutableData*)input index:(int)index;
/**

    Converts a floating-point value to a short value.

    @param value The floating-point value.
    @return The short value.
*/
+ (short) shortFromFloat:(float)value;
+ (FMLiveSwitchSoundUtility*) soundUtility;
/**

    Converts each pair of samples into one mixed sample.

    @return A new FMLiveSwitchDataBufferPooled or `null`.
*/
+ (FMLiveSwitchDataBuffer*) stereoToMonoWithStereo:(FMLiveSwitchDataBuffer*)stereo mono:(FMLiveSwitchDataBuffer*)mono;
/**

    Writes a PCM short value to a byte array.

    @param input The short value to write.
    @param output The target byte array.
    @param index The target index in the byte array.
*/
+ (void) writePcmShortWithInput:(short)input output:(NSMutableData*)output index:(int)index;

@end

/**

    A source input (e.g. device, track, screen).

*/
@interface FMLiveSwitchSourceInput : NSObject

/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Deserializes an instance array from JSON.

    @param sourceInputsJson The source inputs JSON.
*/
+ (NSMutableArray*) fromJsonArrayWithSourceInputsJson:(NSString*)sourceInputsJson;
/**

    Deserializes an instance from JSON.

    @param sourceInputJson The source input JSON.
*/
+ (FMLiveSwitchSourceInput*) fromJsonWithSourceInputJson:(NSString*)sourceInputJson;
/**

    Gets the identifier.

*/
- (NSString*) id;
/**

    Initializes a new instance of the FMLiveSwitchSourceInput class.

    @param idValue The identifier.
    @param name The name.
*/
- (instancetype) initWithId:(NSString*)idValue name:(NSString*)name;
/**

    Gets the name.

*/
- (NSString*) name;
/**

    Sets the identifier.

*/
- (void) setId:(NSString*)value;
/**

    Sets the name.

*/
- (void) setName:(NSString*)value;
/**

    Initializes a new instance of the FMLiveSwitchSourceInput class.

    @param idValue The identifier.
    @param name The name.
*/
+ (FMLiveSwitchSourceInput*) sourceInputWithId:(NSString*)idValue name:(NSString*)name;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an instance array to JSON.

    @param sourceInputs The source inputs.
*/
+ (NSString*) toJsonArrayWithSourceInputs:(NSMutableArray*)sourceInputs;
/**

    Serializes an instance to JSON.

    @param sourceInput The source input.
*/
+ (NSString*) toJsonWithSourceInput:(FMLiveSwitchSourceInput*)sourceInput;

@end

/**

    A sender report control frame.

*/
@interface FMLiveSwitchSRControlFrame : FMLiveSwitchReportControlFrame

/**

    Gets the fixed payload header length of a Sender Report.

*/
+ (int) fixedSenderInfoPayloadLength;
/**

    Initializes a new instance of the FMLiveSwitchSRControlFrame class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchSRControlFrame class.

    @param buffer The data buffer.
*/
- (instancetype) initWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchSRControlFrame class.

    @param reportBlock The report block.
*/
- (instancetype) initWithReportBlock:(FMLiveSwitchReportBlock*)reportBlock;
/**

    Initializes a new instance of the FMLiveSwitchSRControlFrame class.

    @param reportBlocks The report blocks.
*/
- (instancetype) initWithReportBlocks:(NSMutableArray*)reportBlocks;
/**

    Initializes a new instance of the FMLiveSwitchSRControlFrame class.

    @param synchronizationSource The synchronization source.
    @param ntpTimestamp The time when this report was sent (NTP-style).
    @param rtpTimestamp The time when this report was sent (RTP-style).
    @param packetCount The sender's packet count.
    @param octetCount The sender's octet count.
*/
- (instancetype) initWithSynchronizationSource:(long long)synchronizationSource ntpTimestamp:(long long)ntpTimestamp rtpTimestamp:(long long)rtpTimestamp packetCount:(long long)packetCount octetCount:(long long)octetCount;
/**

    Initializes a new instance of the FMLiveSwitchSRControlFrame class.

    @param synchronizationSource The synchronization source.
    @param ntpTimestamp The time when this report was sent (NTP-style).
    @param rtpTimestamp The time when this report was sent (RTP-style).
    @param packetCount The sender's packet count.
    @param octetCount The sender's octet count.
    @param reportBlock The report block.
*/
- (instancetype) initWithSynchronizationSource:(long long)synchronizationSource ntpTimestamp:(long long)ntpTimestamp rtpTimestamp:(long long)rtpTimestamp packetCount:(long long)packetCount octetCount:(long long)octetCount reportBlock:(FMLiveSwitchReportBlock*)reportBlock;
/**

    Initializes a new instance of the FMLiveSwitchSRControlFrame class.

    @param synchronizationSource The synchronization source.
    @param ntpTimestamp The time when this report was sent (NTP-style).
    @param rtpTimestamp The time when this report was sent (RTP-style).
    @param packetCount The sender's packet count.
    @param octetCount The sender's octet count.
    @param reportBlocks The report blocks.
*/
- (instancetype) initWithSynchronizationSource:(long long)synchronizationSource ntpTimestamp:(long long)ntpTimestamp rtpTimestamp:(long long)rtpTimestamp packetCount:(long long)packetCount octetCount:(long long)octetCount reportBlocks:(NSMutableArray*)reportBlocks;
/**

    Gets the time when this report was sent (NTP-style).

*/
- (long long) ntpTimestamp;
/**

    Gets the sender's octet count.

*/
- (long long) octetCount;
/**

    Gets the sender's packet count.

*/
- (long long) packetCount;
/**

    Gets the sender report payload type.

*/
+ (int) registeredPayloadType;
/**

    Gets the report block offset.

*/
+ (int) reportBlockOffset;
/**

    Gets the time when this report was sent (RTP-style).

*/
- (long long) rtpTimestamp;
/**

    Sets the time when this report was sent (NTP-style).

*/
- (void) setNtpTimestamp:(long long)value;
/**

    Sets the sender's octet count.

*/
- (void) setOctetCount:(long long)value;
/**

    Sets the sender's packet count.

*/
- (void) setPacketCount:(long long)value;
/**

    Sets the time when this report was sent (RTP-style).

*/
- (void) setRtpTimestamp:(long long)value;
/**

    Initializes a new instance of the FMLiveSwitchSRControlFrame class.

*/
+ (FMLiveSwitchSRControlFrame*) srControlFrame;
/**

    Initializes a new instance of the FMLiveSwitchSRControlFrame class.

    @param buffer The data buffer.
*/
+ (FMLiveSwitchSRControlFrame*) srControlFrameWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchSRControlFrame class.

    @param reportBlock The report block.
*/
+ (FMLiveSwitchSRControlFrame*) srControlFrameWithReportBlock:(FMLiveSwitchReportBlock*)reportBlock;
/**

    Initializes a new instance of the FMLiveSwitchSRControlFrame class.

    @param reportBlocks The report blocks.
*/
+ (FMLiveSwitchSRControlFrame*) srControlFrameWithReportBlocks:(NSMutableArray*)reportBlocks;
/**

    Initializes a new instance of the FMLiveSwitchSRControlFrame class.

    @param synchronizationSource The synchronization source.
    @param ntpTimestamp The time when this report was sent (NTP-style).
    @param rtpTimestamp The time when this report was sent (RTP-style).
    @param packetCount The sender's packet count.
    @param octetCount The sender's octet count.
*/
+ (FMLiveSwitchSRControlFrame*) srControlFrameWithSynchronizationSource:(long long)synchronizationSource ntpTimestamp:(long long)ntpTimestamp rtpTimestamp:(long long)rtpTimestamp packetCount:(long long)packetCount octetCount:(long long)octetCount;
/**

    Initializes a new instance of the FMLiveSwitchSRControlFrame class.

    @param synchronizationSource The synchronization source.
    @param ntpTimestamp The time when this report was sent (NTP-style).
    @param rtpTimestamp The time when this report was sent (RTP-style).
    @param packetCount The sender's packet count.
    @param octetCount The sender's octet count.
    @param reportBlock The report block.
*/
+ (FMLiveSwitchSRControlFrame*) srControlFrameWithSynchronizationSource:(long long)synchronizationSource ntpTimestamp:(long long)ntpTimestamp rtpTimestamp:(long long)rtpTimestamp packetCount:(long long)packetCount octetCount:(long long)octetCount reportBlock:(FMLiveSwitchReportBlock*)reportBlock;
/**

    Initializes a new instance of the FMLiveSwitchSRControlFrame class.

    @param synchronizationSource The synchronization source.
    @param ntpTimestamp The time when this report was sent (NTP-style).
    @param rtpTimestamp The time when this report was sent (RTP-style).
    @param packetCount The sender's packet count.
    @param octetCount The sender's octet count.
    @param reportBlocks The report blocks.
*/
+ (FMLiveSwitchSRControlFrame*) srControlFrameWithSynchronizationSource:(long long)synchronizationSource ntpTimestamp:(long long)ntpTimestamp rtpTimestamp:(long long)rtpTimestamp packetCount:(long long)packetCount octetCount:(long long)octetCount reportBlocks:(NSMutableArray*)reportBlocks;

@end

/**

    A stream synchronization context.

*/
@interface FMLiveSwitchSynchronizeContext : NSObject

/**

    Initializes a new instance of the FMLiveSwitchSynchronizeContext class.

    @param ntpTimestampTicks The NTP timestamp ticks.
    @param systemTimestamp The system timestamp.
    @deprecated Use SynchronizeContext(systemTimestamp) instead.
*/
- (instancetype) initWithNtpTimestampTicks:(long long)ntpTimestampTicks systemTimestamp:(long long)systemTimestamp __deprecated_msg("Use SynchronizeContext(systemTimestamp) instead.");
/**

    Initializes a new instance of the FMLiveSwitchSynchronizeContext class.

    @param systemTimestamp The system timestamp.
*/
- (instancetype) initWithSystemTimestamp:(long long)systemTimestamp;
/**

    Gets the NTP timestamp ticks.

    @deprecated Use SystemTimestamp instead.
*/
- (long long) ntpTimestampTicks __deprecated_msg("Use SystemTimestamp instead.");
/**

    Sets the NTP timestamp ticks.

    @deprecated Use SystemTimestamp instead.
*/
- (void) setNtpTimestampTicks:(long long)value __deprecated_msg("Use SystemTimestamp instead.");
/**

    Sets the system timestamp.
    Uses a clock known only to the remote sender,
    but consistent across synchronized streams.

*/
- (void) setSystemTimestamp:(long long)value;
/**

    Initializes a new instance of the FMLiveSwitchSynchronizeContext class.

    @param ntpTimestampTicks The NTP timestamp ticks.
    @param systemTimestamp The system timestamp.
    @deprecated Use SynchronizeContext(systemTimestamp) instead.
*/
+ (FMLiveSwitchSynchronizeContext*) synchronizeContextWithNtpTimestampTicks:(long long)ntpTimestampTicks systemTimestamp:(long long)systemTimestamp __deprecated_msg("Use SynchronizeContext(systemTimestamp) instead.");
/**

    Initializes a new instance of the FMLiveSwitchSynchronizeContext class.

    @param systemTimestamp The system timestamp.
*/
+ (FMLiveSwitchSynchronizeContext*) synchronizeContextWithSystemTimestamp:(long long)systemTimestamp;
/**

    Gets the system timestamp.
    Uses a clock known only to the remote sender,
    but consistent across synchronized streams.

*/
- (long long) systemTimestamp;

@end

/**

    A stream collection.

*/
@interface FMLiveSwitchStreamCollection : FMLiveSwitchCollection<FMLiveSwitchStream*,FMLiveSwitchStreamCollection*>

/**

    Creates an array from a list.

    @param list The list.
*/
- (NSMutableArray*) arrayFromList:(NSMutableArray<FMLiveSwitchStream*>*)list;
/**

    Creates a collection.

*/
- (FMLiveSwitchStreamCollection*) createCollection;
/**

    Gets a stream by its type.

*/
- (FMLiveSwitchStream*) getByType:(FMLiveSwitchStreamType)type;
/**

    Gets some streams by their type.

*/
- (NSMutableArray<FMLiveSwitchStream*>*) getManyByType:(FMLiveSwitchStreamType)type;
- (instancetype) init;
+ (FMLiveSwitchStreamCollection*) streamCollection;

@end

/**

    A STUN server.

*/
@interface FMLiveSwitchStunServer : FMLiveSwitchDynamic

/**

    Gets the create callback to create a datagram socket.

*/
- (FMLiveSwitchFunction1<FMLiveSwitchDatagramSocketCreateArgs*,FMLiveSwitchDatagramSocket*>*) createDatagramSocket;
/**

    Creates an error response with a ganeric Stun server error.

    @param request The request.
    @param remoteAddress The remote address.
    @param errorMessage The erro messager.
*/
- (FMLiveSwitchStunMessage*) createErrorResponseWithRequest:(FMLiveSwitchStunMessage*)request remoteAddress:(FMLiveSwitchTransportAddress*)remoteAddress errorMessage:(NSString*)errorMessage;
/**

    Creates an exception response.

    @param request The request.
    @param remoteAddress The remote address.
    @param error The Stun error.
*/
- (FMLiveSwitchStunMessage*) createExceptionResponseWithRequest:(FMLiveSwitchStunMessage*)request remoteAddress:(FMLiveSwitchTransportAddress*)remoteAddress error:(FMLiveSwitchStunError*)error;
/**

    Gets the create callback to create a stream socket.

*/
- (FMLiveSwitchFunction1<FMLiveSwitchStreamSocketCreateArgs*,FMLiveSwitchStreamSocket*>*) createStreamSocket;
/**

    Gets whether to prevent the server from
    listening for TCP requests.

*/
- (bool) disableTcp;
/**

    Gets whether to prevent the server from
    listening for TLS requests.

*/
- (bool) disableTls;
/**

    Gets whether to prevent the server from
    listening for UDP requests.

*/
- (bool) disableUdp;
/**

    Gets a prefix.

*/
- (NSString*) getPrefixWithUdp:(bool)udp secure:(bool)secure;
- (instancetype) init;
/**

    Gets the label.

*/
- (NSString*) label;
/**

    Gets the local TCP address.

*/
- (FMLiveSwitchServerAddress*) localTcpAddress;
/**

    Gets the local TCP addresses.

*/
- (NSMutableArray*) localTcpAddresses;
/**

    Gets the local UDP address.

*/
- (FMLiveSwitchServerAddress*) localUdpAddress;
/**

    Gets the local UDP addresses.

*/
- (NSMutableArray*) localUdpAddresses;
/**

    Processes the buffer.

    @param buffer The buffer.
    @param udpServerSocket The UDP server socket.
    @param tcpServerSocket The TCP server socket.
    @param localAddress The local address.
    @param remoteAddress The remote address.
    @param readLength Length of the read.
*/
- (bool) processBuffer:(FMLiveSwitchDataBuffer*)buffer udpServerSocket:(FMLiveSwitchDatagramSocket*)udpServerSocket tcpServerSocket:(FMLiveSwitchStreamSocket*)tcpServerSocket localAddress:(FMLiveSwitchServerAddress*)localAddress remoteAddress:(FMLiveSwitchTransportAddress*)remoteAddress readLength:(int*)readLength;
/**

    Processes the specified request.

    @param request The request.
    @param udpServerSocket The UDP server socket.
    @param tcpServerSocket The TCP server socket.
    @param localAddress The local address.
    @param remoteAddress The remote address.
*/
- (FMLiveSwitchStunMessage*) processWithRequest:(FMLiveSwitchStunMessage*)request udpServerSocket:(FMLiveSwitchDatagramSocket*)udpServerSocket tcpServerSocket:(FMLiveSwitchStreamSocket*)tcpServerSocket localAddress:(FMLiveSwitchServerAddress*)localAddress remoteAddress:(FMLiveSwitchTransportAddress*)remoteAddress;
/**

    Sets the create callback to create a datagram socket.

*/
- (void) setCreateDatagramSocket:(FMLiveSwitchFunction1<FMLiveSwitchDatagramSocketCreateArgs*,FMLiveSwitchDatagramSocket*>*)value;
/**

    Sets the create callback to create a datagram socket.

*/
- (void (^)(FMLiveSwitchDatagramSocket*(^)(FMLiveSwitchDatagramSocketCreateArgs*))) setCreateDatagramSocketBlock;
/**

    Sets the create callback to create a datagram socket.

*/
- (void) setCreateDatagramSocketBlock:(FMLiveSwitchDatagramSocket*(^)(FMLiveSwitchDatagramSocketCreateArgs*))valueBlock;
/**

    Sets the create callback to create a stream socket.

*/
- (void) setCreateStreamSocket:(FMLiveSwitchFunction1<FMLiveSwitchStreamSocketCreateArgs*,FMLiveSwitchStreamSocket*>*)value;
/**

    Sets the create callback to create a stream socket.

*/
- (void (^)(FMLiveSwitchStreamSocket*(^)(FMLiveSwitchStreamSocketCreateArgs*))) setCreateStreamSocketBlock;
/**

    Sets the create callback to create a stream socket.

*/
- (void) setCreateStreamSocketBlock:(FMLiveSwitchStreamSocket*(^)(FMLiveSwitchStreamSocketCreateArgs*))valueBlock;
/**

    Sets whether to prevent the server from
    listening for TCP requests.

*/
- (void) setDisableTcp:(bool)value;
/**

    Sets whether to prevent the server from
    listening for TLS requests.

*/
- (void) setDisableTls:(bool)value;
/**

    Sets whether to prevent the server from
    listening for UDP requests.

*/
- (void) setDisableUdp:(bool)value;
/**

    Sets timeout for asynchronous data sending over stream sockets in ms. Defaults to unset.

*/
- (void) setStreamSendTimeout:(int)value;
/**

    Starts the server.

*/
- (bool) start;
/**

    Starts the server.

    @param udpAddresses The UDP addresses to listen on.
*/
- (bool) startWithUdpAddresses:(NSMutableArray*)udpAddresses;
/**

    Starts the server.

    @param udpAddresses The UDP addresses to listen on.
    @param tcpAddresses The TCP addresses to listen on.
*/
- (bool) startWithUdpAddresses:(NSMutableArray*)udpAddresses tcpAddresses:(NSMutableArray*)tcpAddresses;
/**

    Starts the server.

    @param udpAddresses The UDP addresses to listen on.
    @param tcpAddresses The TCP addresses to listen on.
    @param tlsAddresses The TLS addresses to listen on.
*/
- (bool) startWithUdpAddresses:(NSMutableArray*)udpAddresses tcpAddresses:(NSMutableArray*)tcpAddresses tlsAddresses:(NSMutableArray*)tlsAddresses;
/**

    Stops the server.

*/
- (bool) stop;
/**

    Gets timeout for asynchronous data sending over stream sockets in ms. Defaults to unset.

*/
- (int) streamSendTimeout;
+ (FMLiveSwitchStunServer*) stunServer;
/**

    Gets the TCP server addresses.

*/
- (NSMutableArray*) tcpAddresses;
/**

    Gets the TLS server addresses.

*/
- (NSMutableArray*) tlsAddresses;
/**

    Gets the UDP server addresses.

*/
- (NSMutableArray*) udpAddresses;

@end

@interface FMLiveSwitchTrickleIcePolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchTrickleIcePolicy)value;

@end

/**

    Arguments for the FMLiveSwitchTurnServer's authentication callback.

*/
@interface FMLiveSwitchTurnAuthArgs : NSObject

/**

    Initializes a new instance of the FMLiveSwitchTurnAuthArgs class.

    @param username The username from the request.
    @param realm The realm from the request.
    @param operation The operation.
*/
- (instancetype) initWithUsername:(NSString*)username realm:(NSString*)realm operation:(FMLiveSwitchTurnAuthOperation)operation;
/**

    Gets the operation.

*/
- (FMLiveSwitchTurnAuthOperation) operation;
/**

    Gets the realm from the request.

*/
- (NSString*) realm;
/**

    Initializes a new instance of the FMLiveSwitchTurnAuthArgs class.

    @param username The username from the request.
    @param realm The realm from the request.
    @param operation The operation.
*/
+ (FMLiveSwitchTurnAuthArgs*) turnAuthArgsWithUsername:(NSString*)username realm:(NSString*)realm operation:(FMLiveSwitchTurnAuthOperation)operation;
/**

    Gets the username from the request.

*/
- (NSString*) username;

@end

@interface FMLiveSwitchTurnAuthOperationWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchTurnAuthOperation)value;

@end

/**

    The result of attempting to authenticate a TURN request.

*/
@interface FMLiveSwitchTurnAuthResult : NSObject

/**

    Initializes a new instance of the FMLiveSwitchTurnAuthResult class
    using a long-term key.

    @param longTermKeyBytes The long-term key bytes, calculated as the MD5 hash
            of the following UTF8-encoded input: "username:realm:password".
*/
+ (FMLiveSwitchTurnAuthResult*) fromLongTermKeyBytes:(NSMutableData*)longTermKeyBytes;
/**

    Initializes a new instance of the FMLiveSwitchTurnAuthResult class
    using a plaintext password.

    @param password The user's password in plain text.
*/
+ (FMLiveSwitchTurnAuthResult*) fromPassword:(NSString*)password;
/**

    Gets the long-term key bytes, calculated as the MD5 hash of the
    following UTF8-encoded input: "username:realm:password" (for convenience,
    use STUN.CreateLongTermKey to calculate).

*/
- (NSMutableData*) longTermKeyBytes;
/**

    Gets the user's password in plain text.

*/
- (NSString*) password;

@end

/**

    An TURN/STUN server.

*/
@interface FMLiveSwitchTurnServer : FMLiveSwitchStunServer

/**

    Gets the number of active allocations.

*/
- (int) allocationCount;
/**

    Gets the maximum allowed port to be
    used when allocating sockets.
    The default value is 65535.

*/
- (int) allocationPortMax;
/**

    Gets the minimum allowed port to be
    used when allocating sockets.
    The default value is 49152.

*/
- (int) allocationPortMin;
/**

    Creates an exception response.

    @param request The request.
    @param remoteAddress The remote address.
    @param error The error.
*/
- (FMLiveSwitchStunMessage*) createExceptionResponseWithRequest:(FMLiveSwitchStunMessage*)request remoteAddress:(FMLiveSwitchTransportAddress*)remoteAddress error:(FMLiveSwitchStunError*)error;
/**

    Gets the default lifetime for new allocations
    in seconds. Defaults to 600 (10 minutes).

*/
- (long long) defaultAllocateLifetime;
/**

    Gets the default lifetime for refreshed allocations
    in seconds. Defaults to 600 (10 minutes).

*/
- (long long) defaultRefreshLifetime;
/**

    Gets a value indicating whether to
    disable the in-memory bypass of the network
    when communicating between two relay candidates.

*/
- (bool) disableBypass;
/**

    Gets the list of forbidden peer CIDRs.
    Addresses matching this list are banned from
    receiving relayed data packets.

*/
- (NSMutableArray*) forbiddenPeerCidrs;
/**

    Gets whether the server should force the
    default lifetime for new allocations (true) or allow
    clients to request their own lifetime within the
    min/max range (false). Defaults to false.

*/
- (bool) forceDefaultAllocateLifetime;
/**

    Gets whether the server should force the
    default lifetime for refreshed allocations (true) or allow
    clients to request their own lifetime within the
    min/max range (false). Defaults to false.

*/
- (bool) forceDefaultRefreshLifetime;
/**

    Initializes a new instance of the FMLiveSwitchTurnServer class.

    @param authCallback The authentication callback.
*/
- (instancetype) initWithAuthCallback:(FMLiveSwitchFunction1<FMLiveSwitchTurnAuthArgs*,FMLiveSwitchTurnAuthResult*>*)authCallback;
/**

    Initializes a new instance of the FMLiveSwitchTurnServer class.

    @param authCallbackBlock The authentication callback.
*/
- (instancetype) initWithAuthCallbackBlock:(FMLiveSwitchTurnAuthResult*(^)(FMLiveSwitchTurnAuthArgs*))authCallbackBlock;
/**

    Gets the label.

*/
- (NSString*) label;
/**

    Gets the maximum lifetime for new
    allocations in seconds. Defaults to 3600
    (1 hour).

*/
- (long long) maxAllocateLifetime;
/**

    Gets the maximum lifetime for refreshed
    allocations in seconds. Defaults to 3600
    (1 hour).

*/
- (long long) maxRefreshLifetime;
/**

    Gets the minimum lifetime for new allocations
    in seconds. Equal to 600 (10 minutes).

*/
- (long long) minAllocateLifetime;
/**

    Gets the minimum lifetime for refreshed allocations
    in seconds. Equal to 600 (10 minutes).

*/
- (long long) minRefreshLifetime;
/**

    Gets the current nonce.

*/
- (NSString*) nonce;
/**

    Processes the buffer.

    @param buffer The buffer.
    @param udpServerSocket The UDP server socket.
    @param tcpServerSocket The TCP server socket.
    @param localAddress The local address.
    @param remoteAddress The remote address.
    @param readLength Length of the read.
*/
- (bool) processBuffer:(FMLiveSwitchDataBuffer*)buffer udpServerSocket:(FMLiveSwitchDatagramSocket*)udpServerSocket tcpServerSocket:(FMLiveSwitchStreamSocket*)tcpServerSocket localAddress:(FMLiveSwitchServerAddress*)localAddress remoteAddress:(FMLiveSwitchTransportAddress*)remoteAddress readLength:(int*)readLength;
/**

    Processes the specified request.

    @param request The request.
    @param udpServerSocket The UDP server socket.
    @param tcpServerSocket The TCP server socket.
    @param localAddress The local address.
    @param remoteAddress The remote address.
*/
- (FMLiveSwitchStunMessage*) processWithRequest:(FMLiveSwitchStunMessage*)request udpServerSocket:(FMLiveSwitchDatagramSocket*)udpServerSocket tcpServerSocket:(FMLiveSwitchStreamSocket*)tcpServerSocket localAddress:(FMLiveSwitchServerAddress*)localAddress remoteAddress:(FMLiveSwitchTransportAddress*)remoteAddress;
/**

    Gets the realm used for this server.

*/
- (NSString*) realm;
/**

    Sets the maximum allowed port to be
    used when allocating sockets.
    The default value is 65535.

*/
- (void) setAllocationPortMax:(int)value;
/**

    Sets the minimum allowed port to be
    used when allocating sockets.
    The default value is 49152.

*/
- (void) setAllocationPortMin:(int)value;
/**

    Sets the default lifetime for new allocations
    in seconds. Defaults to 600 (10 minutes).

*/
- (void) setDefaultAllocateLifetime:(long long)value;
/**

    Sets the default lifetime for refreshed allocations
    in seconds. Defaults to 600 (10 minutes).

*/
- (void) setDefaultRefreshLifetime:(long long)value;
/**

    Sets a value indicating whether to
    disable the in-memory bypass of the network
    when communicating between two relay candidates.

*/
- (void) setDisableBypass:(bool)value;
/**

    Sets the list of forbidden peer CIDRs.
    Addresses matching this list are banned from
    receiving relayed data packets.

*/
- (void) setForbiddenPeerCidrs:(NSMutableArray*)value;
/**

    Sets whether the server should force the
    default lifetime for new allocations (true) or allow
    clients to request their own lifetime within the
    min/max range (false). Defaults to false.

*/
- (void) setForceDefaultAllocateLifetime:(bool)value;
/**

    Sets whether the server should force the
    default lifetime for refreshed allocations (true) or allow
    clients to request their own lifetime within the
    min/max range (false). Defaults to false.

*/
- (void) setForceDefaultRefreshLifetime:(bool)value;
/**

    Sets the maximum lifetime for new
    allocations in seconds. Defaults to 3600
    (1 hour).

*/
- (void) setMaxAllocateLifetime:(long long)value;
/**

    Sets the maximum lifetime for refreshed
    allocations in seconds. Defaults to 3600
    (1 hour).

*/
- (void) setMaxRefreshLifetime:(long long)value;
/**

    Sets the realm used for this server.

*/
- (void) setRealm:(NSString*)value;
/**

    Sets whether the server should enforce
    stale-nonce security by sending a 438 Stale Nonce
    in response to allocate requests with a stale
    or non-existent nonce.

*/
- (void) setStaleNonceSecurity:(bool)value;
/**

    Gets whether the server should enforce
    stale-nonce security by sending a 438 Stale Nonce
    in response to allocate requests with a stale
    or non-existent nonce.

*/
- (bool) staleNonceSecurity;
/**

    Starts the server.

    @param udpAddresses The UDP addresses to listen on.
    @param tcpAddresses The TCP addresses to listen on.
    @param tlsAddresses The TLS addresses to listen on.
*/
- (bool) startWithUdpAddresses:(NSMutableArray*)udpAddresses tcpAddresses:(NSMutableArray*)tcpAddresses tlsAddresses:(NSMutableArray*)tlsAddresses;
/**

    Stops the server.

*/
- (bool) stop;
/**

    Initializes a new instance of the FMLiveSwitchTurnServer class.

    @param authCallback The authentication callback.
*/
+ (FMLiveSwitchTurnServer*) turnServerWithAuthCallback:(FMLiveSwitchFunction1<FMLiveSwitchTurnAuthArgs*,FMLiveSwitchTurnAuthResult*>*)authCallback;
/**

    Initializes a new instance of the FMLiveSwitchTurnServer class.

    @param authCallbackBlock The authentication callback.
*/
+ (FMLiveSwitchTurnServer*) turnServerWithAuthCallbackBlock:(FMLiveSwitchTurnAuthResult*(^)(FMLiveSwitchTurnAuthArgs*))authCallbackBlock;

@end

/**

    A video branch.

*/
@interface FMLiveSwitchVideoBranch : FMLiveSwitchMediaBranch<NSObject<FMLiveSwitchIVideoOutput>*,FMLiveSwitchIVideoOutputCollection*,NSObject<FMLiveSwitchIVideoInput>*,FMLiveSwitchIVideoInputCollection*,NSObject<FMLiveSwitchIVideoElement>*,FMLiveSwitchVideoSource*,FMLiveSwitchVideoSink*,FMLiveSwitchVideoPipe*,FMLiveSwitchVideoTrack*,FMLiveSwitchVideoBranch*,FMLiveSwitchVideoFrame*,FMLiveSwitchVideoBuffer*,FMLiveSwitchVideoBufferCollection*,FMLiveSwitchVideoFormat*><FMLiveSwitchIVideoElement, FMLiveSwitchIMediaElement, FMLiveSwitchIElement>

/**

    Creates an array of tracks from a list of tracks.

    @param tracks The list of tracks.
*/
- (NSMutableArray*) arrayFromTracks:(NSMutableArray<FMLiveSwitchVideoTrack*>*)tracks;
/**

    Initializes a new instance of the FMLiveSwitchVideoBranch class.

    @param tracks The tracks.
*/
- (instancetype) initWithTracks:(NSMutableArray*)tracks;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Initializes a new instance of the FMLiveSwitchVideoBranch class.

    @param tracks The tracks.
*/
+ (FMLiveSwitchVideoBranch*) videoBranchWithTracks:(NSMutableArray*)tracks;

@end

/**

    A video buffer collection.

*/
@interface FMLiveSwitchVideoBufferCollection : FMLiveSwitchMediaBufferCollection<FMLiveSwitchVideoBuffer*,FMLiveSwitchVideoBufferCollection*,FMLiveSwitchVideoFormat*>

/**

    Creates an array from a list.

    @param list The list.
*/
- (NSMutableArray*) arrayFromList:(NSMutableArray<FMLiveSwitchVideoBuffer*>*)list;
/**

    Creates a collection.

*/
- (FMLiveSwitchVideoBufferCollection*) createCollection;
- (instancetype) init;
+ (FMLiveSwitchVideoBufferCollection*) videoBufferCollection;

@end

/**

    A video decoder.

*/
@interface FMLiveSwitchVideoDecoder : FMLiveSwitchVideoPipe

/**

    Gets a value indicating whether decoding should be delayed.

*/
- (bool) delayDecode;
/**

    Gets a flag indicating whether decoding should be bypassed for
    incoming media packets when a key frame request has been made via
    a PLI message. Default is true.

*/
- (bool) delayDecodeOnPendingKeyFrame;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchVideoFrame*)frame inputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Process track stats from an input.

    @param trackStats The track stats.
*/
- (void) doProcessTrackStatsFromInputWithTrackStats:(FMLiveSwitchMediaTrackStats*)trackStats;
/**

    Gets the last frame height.

*/
- (int) frameHeight;
/**

    Gets the current frame rate.

*/
- (double) frameRate;
/**

    Gets the number of decoded frames.

*/
- (long long) framesDecoded;
/**

    Gets the last frame width.

*/
- (int) frameWidth;
/**

    Initializes a new instance of the FMLiveSwitchVideoDecoder class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
- (instancetype) initWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat outputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Determines whether a data buffer represents a keyframe.

    @param dataBuffer The data buffer.
*/
- (bool) isKeyFrameWithDataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Gets the maximum allowed input bitrate, in kbps.
    A value of -1 indicates unset (no maximum).
    Returns -1 by default.

*/
- (int) maxInputBitrate;
/**

    Gets the maximum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no maximum).
    Returns -1 by default.

*/
- (int) maxOutputBitrate;
/**

    Gets the minimum allowed input bitrate, in kbps.
    A value of -1 indicates unset (no maximum).
    Returns -1 by default.

*/
- (int) minInputBitrate;
/**

    Gets the minimum allowed output bitrate, in kbps.
    A value of -1 indicates unset (no minimum).
    Returns -1 by default.

*/
- (int) minOutputBitrate;
/**

    Raises a frame.

    @param frame The frame.
*/
- (void) raiseFrame:(FMLiveSwitchVideoFrame*)frame;
/**

    Sends a key-frame request.

*/
- (void) sendKeyFrameRequestWithReason:(NSString*)reason;
/**

    Sets a flag indicating whether decoding should be bypassed for
    incoming media packets when a key frame request has been made via
    a PLI message. Default is true.

*/
- (void) setDelayDecodeOnPendingKeyFrame:(bool)value;
/**

    Initializes a new instance of the FMLiveSwitchVideoDecoder class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
+ (FMLiveSwitchVideoDecoder*) videoDecoderWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat outputFormat:(FMLiveSwitchVideoFormat*)outputFormat;

@end

/**

    An audio pipe for synchronizing
    playout with other streams.

*/
@interface FMLiveSwitchAudioSynchronizer : FMLiveSwitchAudioPipe<FMLiveSwitchISynchronizer>

/**

    Activates synchronizing.

    @param master Whether this is a master.
    @param slaves The slaves, if this is a master.
*/
- (void) activateWithMaster:(bool)master slaves:(NSMutableArray*)slaves;
/**

    Gets whether synchronization is active.

*/
- (bool) active;
/**

    Initializes a new instance of the FMLiveSwitchAudioSynchronizer class.

    @param format The format.
*/
+ (FMLiveSwitchAudioSynchronizer*) audioSynchronizerWithFormat:(FMLiveSwitchAudioFormat*)format;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchAudioFrame*)frame inputBuffer:(FMLiveSwitchAudioBuffer*)inputBuffer;
/**

    Gets the system timestamp from the head of the queue.

*/
- (long long) headSystemTimestamp;
/**

    Initializes a new instance of the FMLiveSwitchAudioSynchronizer class.

    @param format The format.
*/
- (instancetype) initWithFormat:(FMLiveSwitchAudioFormat*)format;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets whether this is the master.

*/
- (bool) master;
/**

    Gets the master system timestamp.

*/
- (long long) masterSystemTimestamp;
/**

    Gets the maximum amount of data to allow in the queue, in bytes.

*/
- (long long) maxData;
/**

    Gets the maximum amount of delay to allow in the queue, in milliseconds.

*/
- (int) maxDelay;
/**

    Gets the number of pending frames.

*/
- (int) queueCount;
/**

    Sets the master system timestamp.

*/
- (void) setMasterSystemTimestamp:(long long)value;
/**

    Sets the maximum amount of data to allow in the queue, in bytes.

*/
- (void) setMaxData:(long long)value;
/**

    Sets the maximum amount of delay to allow in the queue, in milliseconds.

*/
- (void) setMaxDelay:(int)value;
/**

    Gets the slaves.

*/
- (NSMutableArray*) slaves;

@end

/**

    An video pipe for synchronizing
    playout with other streams.

*/
@interface FMLiveSwitchVideoSynchronizer : FMLiveSwitchVideoPipe<FMLiveSwitchISynchronizer>

/**

    Activates synchronizing.

    @param master Whether this is a master.
    @param slaves The slaves, if this is a master.
*/
- (void) activateWithMaster:(bool)master slaves:(NSMutableArray*)slaves;
/**

    Gets whether synchronization is active.

*/
- (bool) active;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchVideoFrame*)frame inputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Gets the system timestamp from the head of the queue.

*/
- (long long) headSystemTimestamp;
/**

    Initializes a new instance of the FMLiveSwitchVideoSynchronizer class.

    @param format The format.
*/
- (instancetype) initWithFormat:(FMLiveSwitchVideoFormat*)format;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets whether this is the master.

*/
- (bool) master;
/**

    Gets the master system timestamp.

*/
- (long long) masterSystemTimestamp;
/**

    Gets the maximum amount of data to allow in the queue, in bytes.

*/
- (long long) maxData;
/**

    Gets the maximum amount of delay to allow in the queue, in milliseconds.

*/
- (int) maxDelay;
/**

    Gets the number of pending frames.

*/
- (int) queueCount;
/**

    Sets the master system timestamp.

*/
- (void) setMasterSystemTimestamp:(long long)value;
/**

    Sets the maximum amount of data to allow in the queue, in bytes.

*/
- (void) setMaxData:(long long)value;
/**

    Sets the maximum amount of delay to allow in the queue, in milliseconds.

*/
- (void) setMaxDelay:(int)value;
/**

    Gets the slaves.

*/
- (NSMutableArray*) slaves;
/**

    Initializes a new instance of the FMLiveSwitchVideoSynchronizer class.

    @param format The format.
*/
+ (FMLiveSwitchVideoSynchronizer*) videoSynchronizerWithFormat:(FMLiveSwitchVideoFormat*)format;

@end

/**

    A video encoder.

*/
@interface FMLiveSwitchVideoEncoder : FMLiveSwitchVideoPipe

/**

    Adds a handler that is raised when the bitrate changes.

*/
- (void) addOnBitrateChange:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the bitrate changes.

*/
- (void) addOnBitrateChangeWithCaller:(FMLiveSwitchAction1<FMLiveSwitchVideoEncoder*>*)value;
/**

    Adds a handler that is raised when the bitrate changes.

*/
- (void (^)(void(^)(FMLiveSwitchVideoEncoder*))) addOnBitrateChangeWithCallerWithBlock;
/**

    Adds a handler that is raised when the bitrate changes.

*/
- (void) addOnBitrateChangeWithCallerWithBlock:(void(^)(FMLiveSwitchVideoEncoder*))valueBlock;
/**

    Gets the current bitrate, in kbps.
    A value of -1 indicates unset.

*/
- (int) bitrate;
/**

    Gets whether this pipe can change the output bitrate.

*/
- (bool) canChangeBitrate;
/**

    Processes the control frames.

    @param controlFrames The control frames.
*/
- (void) doProcessControlFrames:(NSMutableArray*)controlFrames;
/**

    Processes track stats from an output.

    @param trackStats The track stats.
*/
- (void) doProcessTrackStatsFromOutputWithTrackStats:(FMLiveSwitchMediaTrackStats*)trackStats;
/**

    Gets a value indicating whether a keyframe should be forced.

*/
- (bool) forceKeyFrame;
/**

    Gets the last frame height.

*/
- (int) frameHeight;
/**

    Gets the current frame rate.

*/
- (double) frameRate;
/**

    Gets the number of encoded frames.

*/
- (long long) framesEncoded;
/**

    Gets the last frame width.

*/
- (int) frameWidth;
/**

    Initializes a new instance of the FMLiveSwitchVideoEncoder class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
- (instancetype) initWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat outputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Initializes a new instance of the FMLiveSwitchVideoEncoder class.

    @param inputFormat The input format.
    @param outputFormat The output format.
    @param logContext The log context.
*/
- (instancetype) initWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat outputFormat:(FMLiveSwitchVideoFormat*)outputFormat logContext:(FMLiveSwitchLogContext*)logContext;
/**

    Gets the maximum bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

*/
- (int) maxBitrate;
/**

    Gets the maximum possible codec bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

*/
- (int) maxCodecBitrate;
/**

    Gets the maximum output bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

*/
- (int) maxOutputBitrate;
/**

    Gets the minimum bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

*/
- (int) minBitrate;
/**

    Gets the minimum possible codec bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

*/
- (int) minCodecBitrate;
/**

    Gets the minimum output bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

*/
- (int) minOutputBitrate;
/**

    Processes the frame.

    @param frame The frame.
*/
- (bool) processFrame:(FMLiveSwitchVideoFrame*)frame;
/**

    Raises the frame.

    @param frame The frame.
*/
- (void) raiseFrame:(FMLiveSwitchVideoFrame*)frame;
/**

    Removes a handler that is raised when the bitrate changes.

*/
- (void) removeOnBitrateChange:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the bitrate changes.

*/
- (void) removeOnBitrateChangeWithCaller:(FMLiveSwitchAction1<FMLiveSwitchVideoEncoder*>*)value;
/**

    Sets the current bitrate, in kbps.
    A value of -1 indicates unset.

*/
- (void) setBitrate:(int)value;
/**

    Sets a value indicating whether a keyframe should be forced.

*/
- (void) setForceKeyFrame:(bool)value;
/**

    Sets the maximum bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

*/
- (void) setMaxBitrate:(int)value;
/**

    Sets the maximum output bitrate, in kbps.
    A value of -1 indicates unset (no maximum).

*/
- (void) setMaxOutputBitrate:(int)value;
/**

    Sets the minimum bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

*/
- (void) setMinBitrate:(int)value;
/**

    Sets the minimum output bitrate, in kbps.
    A value of -1 indicates unset (no minimum).

*/
- (void) setMinOutputBitrate:(int)value;
/**

    Sets whether FMLiveSwitchVideoEncoder#minOutputBitrate and
    FMLiveSwitchVideoEncoder#maxOutputBitrate should return
    FMLiveSwitchVideoEncoder#minCodecBitrate and
    FMLiveSwitchVideoEncoder#maxCodecBitrate, respectively, or
    response to changes in FMLiveSwitchVideoEncoder#minBitrate and
    FMLiveSwitchVideoEncoder#maxBitrate.

*/
- (void) setStaticOutputBitrate:(bool)value;
/**

    Sets the target bitrate, in kbps.
    A value of -1 indicates unset (no target).

*/
- (void) setTargetBitrate:(int)value;
/**

    Sets the target output bitrate, in kbps.
    A value of -1 indicates unset (no target).

*/
- (void) setTargetOutputBitrate:(int)value;
/**

    Gets whether FMLiveSwitchVideoEncoder#minOutputBitrate and
    FMLiveSwitchVideoEncoder#maxOutputBitrate should return
    FMLiveSwitchVideoEncoder#minCodecBitrate and
    FMLiveSwitchVideoEncoder#maxCodecBitrate, respectively, or
    response to changes in FMLiveSwitchVideoEncoder#minBitrate and
    FMLiveSwitchVideoEncoder#maxBitrate.

*/
- (bool) staticOutputBitrate;
/**

    Gets the target bitrate, in kbps.
    A value of -1 indicates unset (no target).

*/
- (int) targetBitrate;
/**

    Gets the target output bitrate, in kbps.
    A value of -1 indicates unset (no target).

*/
- (int) targetOutputBitrate;
/**

    Initializes a new instance of the FMLiveSwitchVideoEncoder class.

    @param inputFormat The input format.
    @param outputFormat The output format.
*/
+ (FMLiveSwitchVideoEncoder*) videoEncoderWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat outputFormat:(FMLiveSwitchVideoFormat*)outputFormat;
/**

    Initializes a new instance of the FMLiveSwitchVideoEncoder class.

    @param inputFormat The input format.
    @param outputFormat The output format.
    @param logContext The log context.
*/
+ (FMLiveSwitchVideoEncoder*) videoEncoderWithInputFormat:(FMLiveSwitchVideoFormat*)inputFormat outputFormat:(FMLiveSwitchVideoFormat*)outputFormat logContext:(FMLiveSwitchLogContext*)logContext;

@end

/**

    A collection of video formats.

*/
@interface FMLiveSwitchVideoFormatCollection : FMLiveSwitchMediaFormatCollection<FMLiveSwitchVideoFormat*,FMLiveSwitchVideoFormatCollection*>

/**

    Creates an array from a list.

    @param list The list.
*/
- (NSMutableArray*) arrayFromList:(NSMutableArray<FMLiveSwitchVideoFormat*>*)list;
/**

    Creates a collection.

*/
- (FMLiveSwitchVideoFormatCollection*) createCollection;
- (instancetype) init;
+ (FMLiveSwitchVideoFormatCollection*) videoFormatCollection;

@end

/**

    A video frame.

*/
@interface FMLiveSwitchVideoFrame : FMLiveSwitchMediaFrame<FMLiveSwitchVideoBuffer*,FMLiveSwitchVideoBufferCollection*,FMLiveSwitchVideoFormat*,FMLiveSwitchVideoFrame*>

/**

    Clones this instance.

*/
- (FMLiveSwitchVideoFrame*) clone;
/**

    Creates a new instance.

*/
- (FMLiveSwitchVideoFrame*) createInstance;
/**

    Creates a media buffer collection.

*/
- (FMLiveSwitchVideoBufferCollection*) createMediaBufferCollection;
/**

    Returns a string that represents this instance.

*/
- (NSString*) description;
/**

    Generates a black video frame for the given width, height, and format.

    @param width The width.
    @param height The height.
    @param formatName The format name.
*/
+ (FMLiveSwitchVideoFrame*) generateFrameWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/**

    Initializes a new instance of the FMLiveSwitchVideoFrame class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchVideoFrame class.

    @param buffer The buffer.
*/
- (instancetype) initWithBuffer:(FMLiveSwitchVideoBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchVideoFrame class.

    @param buffers The buffers.
*/
- (instancetype) initWithBuffers:(NSMutableArray*)buffers;
/**

    Initializes a new instance of the FMLiveSwitchVideoFrame class.

*/
+ (FMLiveSwitchVideoFrame*) videoFrame;
/**

    Initializes a new instance of the FMLiveSwitchVideoFrame class.

    @param buffer The buffer.
*/
+ (FMLiveSwitchVideoFrame*) videoFrameWithBuffer:(FMLiveSwitchVideoBuffer*)buffer;
/**

    Initializes a new instance of the FMLiveSwitchVideoFrame class.

    @param buffers The buffers.
*/
+ (FMLiveSwitchVideoFrame*) videoFrameWithBuffers:(NSMutableArray*)buffers;

@end

/**

    A video stream.

*/
@interface FMLiveSwitchVideoStream : FMLiveSwitchMediaStream<NSObject<FMLiveSwitchIVideoOutput>*,FMLiveSwitchIVideoOutputCollection*,NSObject<FMLiveSwitchIVideoInput>*,FMLiveSwitchIVideoInputCollection*,NSObject<FMLiveSwitchIVideoElement>*,FMLiveSwitchVideoSource*,FMLiveSwitchVideoSink*,FMLiveSwitchVideoPipe*,FMLiveSwitchVideoTrack*,FMLiveSwitchVideoBranch*,FMLiveSwitchVideoFrame*,FMLiveSwitchVideoBuffer*,FMLiveSwitchVideoBufferCollection*,FMLiveSwitchVideoFormat*,FMLiveSwitchVideoFormatCollection*><FMLiveSwitchIVideoStream, FMLiveSwitchIMediaStream, FMLiveSwitchIStream, FMLiveSwitchIVideoInput, FMLiveSwitchIMediaInput, FMLiveSwitchIInput, FMLiveSwitchIVideoOutput, FMLiveSwitchIMediaOutput, FMLiveSwitchIOutput, FMLiveSwitchIVideoElement, FMLiveSwitchIMediaElement, FMLiveSwitchIElement>

/**

    Adds a handler that is raised when a keyframe request is discarded due to policy
    restrictions or lack of support by the remote endpoint.

*/
- (void) addOnDiscardKeyFrameRequest:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Adds a handler that is raised when a keyframe request is discarded due to policy
    restrictions or lack of support by the remote endpoint.

*/
- (void (^)(void(^)(NSMutableArray*))) addOnDiscardKeyFrameRequestWithBlock;
/**

    Adds a handler that is raised when a keyframe request is discarded due to policy
    restrictions or lack of support by the remote endpoint.

*/
- (void) addOnDiscardKeyFrameRequestWithBlock:(void(^)(NSMutableArray*))valueBlock;
/**

    Creates a format.

    @param attribute The attribute.
    @param formatParametersAttribute The format parameters attribute.
*/
- (FMLiveSwitchVideoFormat*) createFormatWithAttribute:(FMLiveSwitchSdpRtpMapAttribute*)attribute formatParametersAttribute:(FMLiveSwitchSdpFormatParametersAttribute*)formatParametersAttribute;
/**

    Creates a format.

    @param name The format name.
    @param clockRate The clock rate.
    @param parameters The parameters.
    @param payloadType The payload type.
*/
- (FMLiveSwitchVideoFormat*) createFormatWithName:(NSString*)name clockRate:(int)clockRate parameters:(NSString*)parameters payloadType:(int)payloadType;
/**

    Creates an input collection.

    @param output The output.
*/
- (FMLiveSwitchIVideoInputCollection*) createInputCollectionWithOutput:(NSObject<FMLiveSwitchIVideoOutput>*)output;
/**

    Creates a media format collection.

*/
- (FMLiveSwitchVideoFormatCollection*) createMediaFormatCollection;
/**

    Creates an output collection.

    @param input The input.
*/
- (FMLiveSwitchIVideoOutputCollection*) createOutputCollectionWithInput:(NSObject<FMLiveSwitchIVideoInput>*)input;
/**

    Creates a RED format.

*/
- (FMLiveSwitchVideoFormat*) createRedFormat;
/**

    Creates a ulpfec format.

*/
- (FMLiveSwitchVideoFormat*) createUlpFecFormat;
/**

    Destroys this instance.

*/
- (bool) destroy;
/**

    Creates a format array from a format list.

    @param formatList The format list.
*/
- (NSMutableArray*) formatArrayFromListWithFormatList:(NSMutableArray<FMLiveSwitchVideoFormat*>*)formatList;
/**

    Gets whether an input source is muted.

    @param input The input.
*/
- (bool) getInputSourceMutedWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Gets whether an output sink is muted.

    @param output The output.
*/
- (bool) getOutputSinkMutedWithOutput:(NSObject<FMLiveSwitchIVideoInput>*)output;
/**

    Gets whether H.264 is disabled.

*/
- (bool) h264Disabled;
/**

    Gets whether H.265 is disabled.

*/
- (bool) h265Disabled;
/**

    Initializes a new instance of the FMLiveSwitchVideoStream class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchVideoStream class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchVideoStream class.

    @param input The input.
    @param output The output.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input output:(NSObject<FMLiveSwitchIVideoInput>*)output;
/**

    Initializes a new instance of the FMLiveSwitchVideoStream class.

    @param inputs The inputs.
*/
- (instancetype) initWithInputs:(NSMutableArray*)inputs;
/**

    Initializes a new instance of the FMLiveSwitchVideoStream class.

    @param inputs The inputs.
    @param outputs The outputs.
*/
- (instancetype) initWithInputs:(NSMutableArray*)inputs outputs:(NSMutableArray*)outputs;
/**

    Initializes a new instance of the FMLiveSwitchVideoStream class.

    @param localMedia The local media.
*/
- (instancetype) initWithLocalMedia:(FMLiveSwitchLocalMedia*)localMedia;
/**

    Initializes a new instance of the FMLiveSwitchVideoStream class.

    @param localMedia The local media.
    @param remoteMedia The remote media.
*/
- (instancetype) initWithLocalMedia:(FMLiveSwitchLocalMedia*)localMedia remoteMedia:(FMLiveSwitchRemoteMedia*)remoteMedia;
/**

    Initializes a new instance of the FMLiveSwitchVideoStream class.

    @param localTrack The local track.
*/
- (instancetype) initWithLocalTrack:(FMLiveSwitchVideoTrack*)localTrack;
/**

    Initializes a new instance of the FMLiveSwitchVideoStream class.

    @param localTrack The local track.
    @param remoteTrack The remote track.
*/
- (instancetype) initWithLocalTrack:(FMLiveSwitchVideoTrack*)localTrack remoteTrack:(FMLiveSwitchVideoTrack*)remoteTrack;
/**

    Initializes a new instance of the FMLiveSwitchVideoStream class.

    @param output The output.
*/
- (instancetype) initWithOutput:(NSObject<FMLiveSwitchIVideoInput>*)output;
/**

    Initializes a new instance of the FMLiveSwitchVideoStream class.

    @param outputs The outputs.
*/
- (instancetype) initWithOutputs:(NSMutableArray*)outputs;
/**

    Initializes a new instance of the FMLiveSwitchVideoStream class.

    @param remoteMedia The remote media.
*/
- (instancetype) initWithRemoteMedia:(FMLiveSwitchRemoteMedia*)remoteMedia;
/**

    Creates an input array from an input list.

    @param inputList The input list.
*/
- (NSMutableArray*) inputArrayFromListWithInputList:(NSMutableArray<NSObject<FMLiveSwitchIVideoInput>*>*)inputList;
/**

    Gets the maximum allowed input encoding.

*/
- (FMLiveSwitchEncodingInfo*) maxInputEncoding;
/**

    Gets the maximum allowed input frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxInputFrameRate;
/**

    Gets the maximum allowed input height.
    A value of -1 indicates unset (no minimum).

*/
- (int) maxInputHeight;
/**

    Gets the maximum allowed input scale.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxInputScale;
/**

    Gets the maximum allowed input size.
    A value of null indicates unset (no maximum).

*/
- (FMLiveSwitchSize*) maxInputSize;
/**

    Gets the maximum allowed input width.
    A value of -1 indicates unset (no minimum).

*/
- (int) maxInputWidth;
/**

    Gets the maximum allowed output encoding.

*/
- (FMLiveSwitchEncodingInfo*) maxOutputEncoding;
/**

    Gets the maximum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxOutputFrameRate;
/**

    Gets the maximum allowed output height.
    A value of -1 indicates unset (no minimum).

*/
- (int) maxOutputHeight;
/**

    Gets the maximum allowed output scale.
    A value of -1 indicates unset (no maximum).

*/
- (double) maxOutputScale;
/**

    Gets the maximum allowed output size.
    A value of null indicates unset (no maximum).

*/
- (FMLiveSwitchSize*) maxOutputSize;
/**

    Gets the maximum allowed output width.
    A value of -1 indicates unset (no minimum).

*/
- (int) maxOutputWidth;
/**

    Gets the minimum allowed input encoding.

*/
- (FMLiveSwitchEncodingInfo*) minInputEncoding;
/**

    Gets the minimum allowed input frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (double) minInputFrameRate;
/**

    Gets the minimum allowed input height.
    A value of -1 indicates unset (no minimum).

*/
- (int) minInputHeight;
/**

    Gets the minimum allowed input scale.
    A value of -1 indicates unset (no minimum).

*/
- (double) minInputScale;
/**

    Gets the minimum allowed input size.
    A value of null indicates unset (no minimum).

*/
- (FMLiveSwitchSize*) minInputSize;
/**

    Gets the minimum allowed input width.
    A value of -1 indicates unset (no minimum).

*/
- (int) minInputWidth;
/**

    Gets the minimum allowed output encoding.

*/
- (FMLiveSwitchEncodingInfo*) minOutputEncoding;
/**

    Gets the minimum allowed output frame-rate, in fps.
    A value of -1 indicates unset (no minimum).

*/
- (double) minOutputFrameRate;
/**

    Gets the minimum allowed output height.
    A value of -1 indicates unset (no minimum).

*/
- (int) minOutputHeight;
/**

    Gets the minimum allowed output scale.
    A value of -1 indicates unset (no minimum).

*/
- (double) minOutputScale;
/**

    Gets the minimum allowed output size.
    A value of null indicates unset (no minimum).

*/
- (FMLiveSwitchSize*) minOutputSize;
/**

    Gets the minimum allowed output width.
    A value of -1 indicates unset (no minimum).

*/
- (int) minOutputWidth;
/**

    Creates an output array from an output list.

    @param outputList The output list.
*/
- (NSMutableArray*) outputArrayFromListWithOutputList:(NSMutableArray<NSObject<FMLiveSwitchIVideoOutput>*>*)outputList;
/**

    Gets whether the stream frame-rate is over-constrained.
    A stream frame-rate is over-constrained if the input
    frame-rate or output frame-rate is over-constrained.

*/
- (bool) overConstrainedFrameRate;
/**

    Gets whether the input is over-contrained.
    An input is over-constrained if it's
    input bitrate, input scale, input frame-rate,
    input size is over-contrained.

*/
- (bool) overConstrainedInput;
/**

    Gets whether the minimum allowed input frame-rate exceeds the maximum allowed input frame-rate.

*/
- (bool) overConstrainedInputFrameRate;
/**

    Gets whether the minimum allowed input height exceeds the maximum allowed input height.

*/
- (bool) overConstrainedInputHeight;
/**

    Gets whether the minimum allowed input scale exceeds the maximum allowed input scale.

*/
- (bool) overConstrainedInputScale;
/**

    Gets whether the minimum allowed input size exceeds the maximum allowed input size.

*/
- (bool) overConstrainedInputSize;
/**

    Gets whether the minimum allowed input width exceeds the maximum allowed input width.

*/
- (bool) overConstrainedInputWidth;
/**

    Gets whether the output is over-contrained.
    An output is over-constrained if it's
    output bitrate, output scale, output frame-rate,
    output size is over-contrained.

*/
- (bool) overConstrainedOutput;
/**

    Gets whether the minimum allowed output frame-rate exceeds the maximum allowed output frame-rate.

*/
- (bool) overConstrainedOutputFrameRate;
/**

    Gets whether the minimum allowed output height exceeds the maximum allowed output height.

*/
- (bool) overConstrainedOutputHeight;
/**

    Gets whether the minimum allowed output scale exceeds the maximum allowed output scale.

*/
- (bool) overConstrainedOutputScale;
/**

    Gets whether the minimum allowed output size exceeds the maximum allowed output size.

*/
- (bool) overConstrainedOutputSize;
/**

    Gets whether the minimum allowed output width exceeds the maximum allowed output width.

*/
- (bool) overConstrainedOutputWidth;
/**

    Gets whether the stream scale is over-constrained.
    A stream scale is over-constrained if the input
    scale or output scale is over-constrained.

*/
- (bool) overConstrainedScale;
/**

    Gets whether the stream size is over-constrained.
    A stream size is over-constrained if the input
    size or output size is over-constrained.

*/
- (bool) overConstrainedSize;
/**

    Processes the frame.

    @param frame The frame.
*/
- (bool) processFrame:(FMLiveSwitchVideoFrame*)frame;
/**

    Processes an SDP content attribute.

    @param sdpContentAttribute The SDP content attribute.
    @param isLocalDescription Whether the SDP content attribute comes from a local description.
*/
- (void) processSdpContentAttribute:(FMLiveSwitchSdpContentAttribute*)sdpContentAttribute isLocalDescription:(bool)isLocalDescription;
/**

    Raises a keyframe request to the local track.

    @param synchronizationSources The synchronization sources.
*/
- (void) raiseKeyFrameRequestWithSynchronizationSources:(NSMutableArray*)synchronizationSources;
/**

    Removes a handler that is raised when a keyframe request is discarded due to policy
    restrictions or lack of support by the remote endpoint.

*/
- (void) removeOnDiscardKeyFrameRequest:(FMLiveSwitchAction1<NSMutableArray*>*)value;
/**

    Sets whether H.264 is disabled.

*/
- (void) setH264Disabled:(bool)value;
/**

    Sets whether H.265 is disabled.

*/
- (void) setH265Disabled:(bool)value;
/**

    Sets whether an input source is muted.

    @param input The input.
    @param value The value.
*/
- (void) setInputSourceMutedWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input value:(bool)value;
/**

    Sets whether an output sink is muted.

    @param output The output.
    @param value The value.
*/
- (void) setOutputSinkMutedWithOutput:(NSObject<FMLiveSwitchIVideoInput>*)output value:(bool)value;
/**

    Sets whether VP8 is disabled.

*/
- (void) setVp8Disabled:(bool)value;
/**

    Sets whether VP9 is disabled.

*/
- (void) setVp9Disabled:(bool)value;
/**

    Gets the target output encoding.

*/
- (FMLiveSwitchEncodingInfo*) targetOutputEncoding;
/**

    Gets the target output frame-rate, in fps.
    A value of -1 indicates unset (no target).

*/
- (double) targetOutputFrameRate;
/**

    Gets the target output height.
    A value of -1 indicates unset (no minimum).

*/
- (int) targetOutputHeight;
/**

    Gets the target output scale.
    A value of -1 indicates unset (no target).

*/
- (double) targetOutputScale;
/**

    Gets the target output size.
    A value of null indicates unset (no target).

*/
- (FMLiveSwitchSize*) targetOutputSize;
/**

    Gets the target output width.
    A value of -1 indicates unset (no minimum).

*/
- (int) targetOutputWidth;
/**

    Initializes a new instance of the FMLiveSwitchVideoStream class.

*/
+ (FMLiveSwitchVideoStream*) videoStream;
/**

    Initializes a new instance of the FMLiveSwitchVideoStream class.

    @param input The input.
*/
+ (FMLiveSwitchVideoStream*) videoStreamWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Initializes a new instance of the FMLiveSwitchVideoStream class.

    @param input The input.
    @param output The output.
*/
+ (FMLiveSwitchVideoStream*) videoStreamWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input output:(NSObject<FMLiveSwitchIVideoInput>*)output;
/**

    Initializes a new instance of the FMLiveSwitchVideoStream class.

    @param inputs The inputs.
*/
+ (FMLiveSwitchVideoStream*) videoStreamWithInputs:(NSMutableArray*)inputs;
/**

    Initializes a new instance of the FMLiveSwitchVideoStream class.

    @param inputs The inputs.
    @param outputs The outputs.
*/
+ (FMLiveSwitchVideoStream*) videoStreamWithInputs:(NSMutableArray*)inputs outputs:(NSMutableArray*)outputs;
/**

    Initializes a new instance of the FMLiveSwitchVideoStream class.

    @param localMedia The local media.
*/
+ (FMLiveSwitchVideoStream*) videoStreamWithLocalMedia:(FMLiveSwitchLocalMedia*)localMedia;
/**

    Initializes a new instance of the FMLiveSwitchVideoStream class.

    @param localMedia The local media.
    @param remoteMedia The remote media.
*/
+ (FMLiveSwitchVideoStream*) videoStreamWithLocalMedia:(FMLiveSwitchLocalMedia*)localMedia remoteMedia:(FMLiveSwitchRemoteMedia*)remoteMedia;
/**

    Initializes a new instance of the FMLiveSwitchVideoStream class.

    @param localTrack The local track.
*/
+ (FMLiveSwitchVideoStream*) videoStreamWithLocalTrack:(FMLiveSwitchVideoTrack*)localTrack;
/**

    Initializes a new instance of the FMLiveSwitchVideoStream class.

    @param localTrack The local track.
    @param remoteTrack The remote track.
*/
+ (FMLiveSwitchVideoStream*) videoStreamWithLocalTrack:(FMLiveSwitchVideoTrack*)localTrack remoteTrack:(FMLiveSwitchVideoTrack*)remoteTrack;
/**

    Initializes a new instance of the FMLiveSwitchVideoStream class.

    @param output The output.
*/
+ (FMLiveSwitchVideoStream*) videoStreamWithOutput:(NSObject<FMLiveSwitchIVideoInput>*)output;
/**

    Initializes a new instance of the FMLiveSwitchVideoStream class.

    @param outputs The outputs.
*/
+ (FMLiveSwitchVideoStream*) videoStreamWithOutputs:(NSMutableArray*)outputs;
/**

    Initializes a new instance of the FMLiveSwitchVideoStream class.

    @param remoteMedia The remote media.
*/
+ (FMLiveSwitchVideoStream*) videoStreamWithRemoteMedia:(FMLiveSwitchRemoteMedia*)remoteMedia;
/**

    Gets the video type.

*/
- (FMLiveSwitchVideoType) videoType;
/**

    Gets whether VP8 is disabled.

*/
- (bool) vp8Disabled;
/**

    Gets whether VP9 is disabled.

*/
- (bool) vp9Disabled;

@end

/**

    A video track.

*/
@interface FMLiveSwitchVideoTrack : FMLiveSwitchMediaTrack<NSObject<FMLiveSwitchIVideoOutput>*,FMLiveSwitchIVideoOutputCollection*,NSObject<FMLiveSwitchIVideoInput>*,FMLiveSwitchIVideoInputCollection*,NSObject<FMLiveSwitchIVideoElement>*,FMLiveSwitchVideoSource*,FMLiveSwitchVideoSink*,FMLiveSwitchVideoPipe*,FMLiveSwitchVideoTrack*,FMLiveSwitchVideoBranch*,FMLiveSwitchVideoFrame*,FMLiveSwitchVideoBuffer*,FMLiveSwitchVideoBufferCollection*,FMLiveSwitchVideoFormat*><FMLiveSwitchIVideoTrack, FMLiveSwitchIMediaTrack>

/**

    Adds an element.

    @param element 
*/
- (void) addElement:(NSObject<FMLiveSwitchIVideoElement>*)element;
/**

    Adds a handler that is raised whenever the video's frame size is known, once per frame.

*/
- (void) addOnSize:(FMLiveSwitchAction1<FMLiveSwitchSize*>*)value;
/**

    Adds a handler that is raised whenever the video's frame size changes.

*/
- (void) addOnSizeChange:(FMLiveSwitchAction1<FMLiveSwitchSize*>*)value;
/**

    Adds a handler that is raised whenever the video's frame size changes.

*/
- (void (^)(void(^)(FMLiveSwitchSize*))) addOnSizeChangeWithBlock;
/**

    Adds a handler that is raised whenever the video's frame size changes.

*/
- (void) addOnSizeChangeWithBlock:(void(^)(FMLiveSwitchSize*))valueBlock;
/**

    Adds a handler that is raised whenever the video's frame size is known, once per frame.

*/
- (void (^)(void(^)(FMLiveSwitchSize*))) addOnSizeWithBlock;
/**

    Adds a handler that is raised whenever the video's frame size is known, once per frame.

*/
- (void) addOnSizeWithBlock:(void(^)(FMLiveSwitchSize*))valueBlock;
/**

    Creates an array of inputs from a list of inputs.

    @param inputs The list of inputs.
*/
- (NSMutableArray*) arrayFromInputs:(NSMutableArray<NSObject<FMLiveSwitchIVideoInput>*>*)inputs;
/**

    Creates an array of outputs from a list of outputs.

    @param outputs The list of outputs.
*/
- (NSMutableArray*) arrayFromOutputs:(NSMutableArray<NSObject<FMLiveSwitchIVideoOutput>*>*)outputs;
/**

    Creates an array of sinks from a list of sinks.

    @param sinks The list of sinks.
*/
- (NSMutableArray*) arrayFromSinks:(NSMutableArray<FMLiveSwitchVideoSink*>*)sinks;
/**

    Creates a branch from an array of tracks.

    @param tracks The tracks.
*/
- (FMLiveSwitchVideoBranch*) branchFromTracks:(NSMutableArray*)tracks;
/**

    Destroys this media track.

*/
- (bool) destroy;
/**

    Gets the elements.

*/
- (NSMutableArray*) elements;
/**

    Grabs the next raw video frame.

*/
- (FMLiveSwitchFuture<FMLiveSwitchVideoBuffer*>*) grabFrame;
/**

    Initializes a new instance of the FMLiveSwitchVideoTrack class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchVideoTrack class.

    @param element The element.
*/
- (instancetype) initWithElement:(NSObject<FMLiveSwitchIVideoElement>*)element;
/**

    Initializes a new instance of the FMLiveSwitchVideoTrack class.

    @param tracks The branch of tracks.
*/
- (instancetype) initWithTracks:(NSMutableArray*)tracks;
/**

    Determines whether the specified element is a branch.

    @param element The element.
*/
- (bool) isBranchWithElement:(NSObject<FMLiveSwitchIVideoElement>*)element;
/**

    Determines whether the specified element is an input.

    @param element The element.
*/
- (bool) isInputWithElement:(NSObject<FMLiveSwitchIVideoElement>*)element;
/**

    Determines whether the specified element is an output.

    @param element The element.
*/
- (bool) isOutputWithElement:(NSObject<FMLiveSwitchIVideoElement>*)element;
/**

    Determines whether the specified element is a pipe.

    @param element The element.
*/
- (bool) isPipeWithElement:(NSObject<FMLiveSwitchIVideoElement>*)element;
/**

    Determines whether the specified element is a sink.

    @param element The element.
*/
- (bool) isSinkWithElement:(NSObject<FMLiveSwitchIVideoElement>*)element;
/**

    Determines whether the specified element is a source.

    @param element The element.
*/
- (bool) isSourceWithElement:(NSObject<FMLiveSwitchIVideoElement>*)element;
/**

    Determines whether the specified element is a stream.

    @param element The element.
*/
- (bool) isStreamWithElement:(NSObject<FMLiveSwitchIVideoElement>*)element;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Removes a handler that is raised whenever the video's frame size is known, once per frame.

*/
- (void) removeOnSize:(FMLiveSwitchAction1<FMLiveSwitchSize*>*)value;
/**

    Removes a handler that is raised whenever the video's frame size changes.

*/
- (void) removeOnSizeChange:(FMLiveSwitchAction1<FMLiveSwitchSize*>*)value;
/**

    Gets the size of the last processed video frame, if known.

*/
- (FMLiveSwitchSize*) size;
/**

    Initializes a new instance of the FMLiveSwitchVideoTrack class.

*/
+ (FMLiveSwitchVideoTrack*) videoTrack;
/**

    Initializes a new instance of the FMLiveSwitchVideoTrack class.

    @param element The element.
*/
+ (FMLiveSwitchVideoTrack*) videoTrackWithElement:(NSObject<FMLiveSwitchIVideoElement>*)element;
/**

    Initializes a new instance of the FMLiveSwitchVideoTrack class.

    @param tracks The branch of tracks.
*/
+ (FMLiveSwitchVideoTrack*) videoTrackWithTracks:(NSMutableArray*)tracks;

@end

/**

    A WebRTC/ORTC-compatible video track configuration.

*/
@interface FMLiveSwitchRtcVideoTrackConfig : NSObject

/**

    Gets whether the H.264 codec should be disabled.
    Defaults to `false`.

*/
- (bool) h264Disabled;
/**

    Gets whether the H.265 codec should be disabled.
    Defaults to `false`.

*/
- (bool) h265Disabled;
- (instancetype) init;
+ (FMLiveSwitchRtcVideoTrackConfig*) rtcVideoTrackConfig;
/**

    Sets whether the H.264 codec should be disabled.
    Defaults to `false`.

*/
- (void) setH264Disabled:(bool)value;
/**

    Sets whether the H.265 codec should be disabled.
    Defaults to `false`.

*/
- (void) setH265Disabled:(bool)value;
/**

    Sets whether the VP8 codec should be disabled.
    Defaults to `false`.

*/
- (void) setVp8Disabled:(bool)value;
/**

    Sets whether the VP9 codec should be disabled.
    Defaults to `false`.

*/
- (void) setVp9Disabled:(bool)value;
/**

    Gets whether the VP8 codec should be disabled.
    Defaults to `false`.

*/
- (bool) vp8Disabled;
/**

    Gets whether the VP9 codec should be disabled.
    Defaults to `false`.

*/
- (bool) vp9Disabled;

@end

/**

    A VP8 depacketizer.

*/
@interface FMLiveSwitchVp8Depacketizer : FMLiveSwitchVideoDepacketizer<FMLiveSwitchVp8Fragment*>

/**

    Initializes a new instance of the FMLiveSwitchVp8Depacketizer class.

*/
+ (FMLiveSwitchVp8Depacketizer*) depacketizer;
/**

    Initializes a new instance of the FMLiveSwitchVp8Depacketizer class.

    @param input The input.
*/
+ (FMLiveSwitchVp8Depacketizer*) depacketizerWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Creates a fragment from a data buffer.

    @param header The RTP header for this packet.
    @param dataBuffer The data buffer.
    @return A fragment.
*/
- (FMLiveSwitchVp8Fragment*) doCreateFragmentWithHeader:(FMLiveSwitchRtpPacketHeader*)header dataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Initializes a new instance of the FMLiveSwitchVp8Depacketizer class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchVp8Depacketizer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Determines whether a gap between two fragments is allowed.

    @param fragment The fragment.
    @param lastFragment The last fragment.
    @return `true` if the gap is allowed; otherwise, `false`.
*/
- (bool) isGapAllowedWithFragment:(FMLiveSwitchVp8Fragment*)fragment lastFragment:(FMLiveSwitchVp8Fragment*)lastFragment;
/**

    Determines whether a buffer represents the start of a keyframe.

    @param inputBuffer The buffer.
    @return `true` if the buffer represents the start of a keyframe; otherwise, `false`.
*/
- (bool) isKeyFrameWithInputBuffer:(FMLiveSwitchDataBuffer*)inputBuffer;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;

@end

/**

    A VP8 format.

*/
@interface FMLiveSwitchVp8Format : FMLiveSwitchVideoFormat

/**

    Creates a new instance.

*/
- (FMLiveSwitchVideoFormat*) createInstance;
/**

    Initializes a new instance of the FMLiveSwitchVp8Format class.

*/
+ (FMLiveSwitchVp8Format*) format;
/**

    Initializes a new instance of the FMLiveSwitchVp8Format class.

    @param clockRate The clock rate.
*/
+ (FMLiveSwitchVp8Format*) formatWithClockRate:(int)clockRate;
/**

    Initializes a new instance of the FMLiveSwitchVp8Format class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchVp8Format class.

    @param clockRate The clock rate.
*/
- (instancetype) initWithClockRate:(int)clockRate;
/**

    Gets the maximum bitrate supported by this format, in kbps.

*/
- (int) maxBitrate;
/**

    Gets the minimum bitrate supported by this format, in kbps.

*/
- (int) minBitrate;

@end

/**

    A VP8 packet fragment.

*/
@interface FMLiveSwitchVp8Fragment : FMLiveSwitchVideoFragment

/**

    Initializes a new instance of the FMLiveSwitchVp8Fragment class.

    @param header The rtp packet header.
    @param dataBuffer The data buffer.
*/
+ (FMLiveSwitchVp8Fragment*) fragmentWithHeader:(FMLiveSwitchRtpPacketHeader*)header dataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Initializes a new instance of the FMLiveSwitchVp8Fragment class.

    @param header The rtp packet header.
    @param dataBuffer The data buffer.
*/
- (instancetype) initWithHeader:(FMLiveSwitchRtpPacketHeader*)header dataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Gets the key index.

*/
- (int) keyIndex;
/**

    Gets whether layer sync is set.

*/
- (bool) layerSync;
/**

    Gets whether this fragment belongs to a non-reference frame.

*/
- (bool) nonReferenceFrame;
/**

    Gets the partition index.

*/
- (int) partitionIndex;
/**

    Gets the picture ID.

*/
- (int) pictureId;
/**

    Gets the RTP sequence number.

*/
- (int) rtpSequenceNumber;
/**

    Gets the RTP timestamp.

*/
- (long long) rtpTimestamp;
/**

    Gets whether this fragment is the start of a partition.

*/
- (bool) startOfPartition;
/**

    Gets the temporal layer index.

*/
- (int) temporalLayerIndex;
/**

    Gets the temporal level zero index.

*/
- (int) temporalLevelZeroIndex;

@end

/**

    A VP8 packetizer.

*/
@interface FMLiveSwitchVp8Packetizer : FMLiveSwitchVideoPacketizer

/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchVideoFrame*)frame inputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Gets the header padding.

*/
+ (int) headerPadding;
/**

    Initializes a new instance of the FMLiveSwitchVp8Packetizer class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchVp8Packetizer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets the maximum packet size (affects packetization).

*/
+ (int) maxPacketSize;
/**

    Initializes a new instance of the FMLiveSwitchVp8Packetizer class.

*/
+ (FMLiveSwitchVp8Packetizer*) packetizer;
/**

    Initializes a new instance of the FMLiveSwitchVp8Packetizer class.

    @param input The input.
*/
+ (FMLiveSwitchVp8Packetizer*) packetizerWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input;

@end

/**

    Utility methods.

*/
@interface FMLiveSwitchVp8Utility : NSObject

/**

    Derives the height.

    @param buffer The buffer.
*/
+ (int) deriveHeightWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Derives the width.

    @param buffer The buffer.
*/
+ (int) deriveWidthWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Retrieves the difference between two picture IDs
    while accounting for overflow rollover.

    @param pictureId The current picture ID.
    @param lastPictureId The last picture ID.
    @return The difference between the picture IDs.
*/
+ (int) getPictureIdDeltaWithPictureId:(int)pictureId lastPictureId:(int)lastPictureId;
- (instancetype) init;
/**

    Determines whether the buffer holds a keyframe.
    The data buffer must represent the payload of
    a VP8 packet.

    @param buffer The buffer.
*/
+ (bool) isKeyFrameWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
+ (FMLiveSwitchVp8Utility*) utility;

@end

/**

    Utility methods.

*/
@interface FMLiveSwitchVp8UtilityExtension : NSObject

/**

    Determines whether a gap in the sequence of two fragments is allowed.

*/
+ (bool) isGapAllowedWithFragment:(FMLiveSwitchVp8Fragment*)fragment lastFragment:(FMLiveSwitchVp8Fragment*)lastFragment;

@end

/**

    A VP9 depacketizer.

*/
@interface FMLiveSwitchVp9Depacketizer : FMLiveSwitchVideoDepacketizer<FMLiveSwitchVp9Fragment*>

/**

    Initializes a new instance of the FMLiveSwitchVp9Depacketizer class.

*/
+ (FMLiveSwitchVp9Depacketizer*) depacketizer;
/**

    Initializes a new instance of the FMLiveSwitchVp9Depacketizer class.

    @param input The input.
*/
+ (FMLiveSwitchVp9Depacketizer*) depacketizerWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Creates a fragment from a data buffer.

    @param header The rtp header for this packet.
    @param dataBuffer The data buffer.
*/
- (FMLiveSwitchVp9Fragment*) doCreateFragmentWithHeader:(FMLiveSwitchRtpPacketHeader*)header dataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Initializes a new instance of the FMLiveSwitchVp9Depacketizer class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchVp9Depacketizer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Checks if the databuffer contains a keyframe.

    @param inputBuffer VideoBuffer containing video data.
*/
- (bool) isKeyFrameWithInputBuffer:(FMLiveSwitchDataBuffer*)inputBuffer;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets whether RTP sequence numbering has
    been violated.

*/
- (bool) sequenceNumberingViolated;

@end

/**

    A VP9 format.

*/
@interface FMLiveSwitchVp9Format : FMLiveSwitchVideoFormat

/**

    Creates a new instance.

*/
- (FMLiveSwitchVideoFormat*) createInstance;
/**

    Initializes a new instance of the FMLiveSwitchVp9Format class.

*/
+ (FMLiveSwitchVp9Format*) format;
/**

    Initializes a new instance of the FMLiveSwitchVp9Format class.

    @param clockRate The clock rate.
*/
+ (FMLiveSwitchVp9Format*) formatWithClockRate:(int)clockRate;
/**

    Initializes a new instance of the FMLiveSwitchVp9Format class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchVp9Format class.

    @param clockRate The clock rate.
*/
- (instancetype) initWithClockRate:(int)clockRate;
/**

    Gets the maximum bitrate supported by this format, in kbps.

*/
- (int) maxBitrate;
/**

    Gets the minimum bitrate supported by this format, in kbps.

*/
- (int) minBitrate;

@end

/**

    A VP9 packet fragment.

*/
@interface FMLiveSwitchVp9Fragment : FMLiveSwitchVideoFragment

/**

    Initializes a new instance of the FMLiveSwitchVp9Fragment class.

    @param header The rtp packet header.
    @param dataBuffer The data buffer.
*/
+ (FMLiveSwitchVp9Fragment*) fragmentWithHeader:(FMLiveSwitchRtpPacketHeader*)header dataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;
/**

    Initializes a new instance of the FMLiveSwitchVp9Fragment class.

    @param header The rtp packet header.
    @param dataBuffer The data buffer.
*/
- (instancetype) initWithHeader:(FMLiveSwitchRtpPacketHeader*)header dataBuffer:(FMLiveSwitchDataBuffer*)dataBuffer;

@end

/**

    A VP8 packetizer.

*/
@interface FMLiveSwitchVp9Packetizer : FMLiveSwitchVideoPacketizer

/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchVideoFrame*)frame inputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Gets the header padding.

*/
+ (int) headerPadding;
/**

    Initializes a new instance of the FMLiveSwitchVp9Packetizer class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchVp9Packetizer class.

    @param input The input.
*/
- (instancetype) initWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets the maximum packet size (affects packetization).

*/
+ (int) maxPacketSize;
/**

    Initializes a new instance of the FMLiveSwitchVp9Packetizer class.

*/
+ (FMLiveSwitchVp9Packetizer*) packetizer;
/**

    Initializes a new instance of the FMLiveSwitchVp9Packetizer class.

    @param input The input.
*/
+ (FMLiveSwitchVp9Packetizer*) packetizerWithInput:(NSObject<FMLiveSwitchIVideoOutput>*)input;

@end

/**

    Utility methods.

*/
@interface FMLiveSwitchVp9Utility : NSObject

/**

    Derives the height.

    @param buffer The buffer.
*/
+ (int) deriveHeightWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Derives the width.

    @param buffer The buffer.
*/
+ (int) deriveWidthWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
- (instancetype) init;
/**

    Determines whether the buffer holds a keyframe.

    @param buffer The buffer.
*/
+ (bool) isKeyFrameWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
+ (FMLiveSwitchVp9Utility*) utility;

@end

/**

    A WAVE audio recorder.

*/
@interface FMLiveSwitchWaveAudioRecorder : FMLiveSwitchAudioRecorder

/**

    Initializes a new instance of the FMLiveSwitchWaveAudioRecorder class.

    @param path The path.
    @param inputFormat The input format.
*/
+ (FMLiveSwitchWaveAudioRecorder*) audioRecorderWithPath:(NSString*)path inputFormat:(FMLiveSwitchAudioFormat*)inputFormat;
/**

    Updates the file header.

*/
- (void) doUpdateHeader;
/**

    Writes the file header.

*/
- (void) doWriteHeader;
/**

    Write an encoded video frame.

    @param buffer The encoded buffer.
    @param presentationTimestamp The presentation timestamp.
    @return `true` if the encoded frame was written successfully; otherwise, `false`
*/
- (bool) doWriteWithBuffer:(FMLiveSwitchAudioBuffer*)buffer presentationTimestamp:(long long)presentationTimestamp;
/**

    Initializes a new instance of the FMLiveSwitchWaveAudioRecorder class.

    @param path The path.
    @param inputFormat The input format.
*/
- (instancetype) initWithPath:(NSString*)path inputFormat:(FMLiveSwitchAudioFormat*)inputFormat;

@end

/**

    A WAVE-file-based audio sink.

*/
@interface FMLiveSwitchWaveAudioSink : FMLiveSwitchAudioSink

/**

    Adds a handler that is raised when an existing file is close in response to
    this sink being deactivated or destroyed.

*/
- (void) addOnFileClose:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when a new file is opened in response to
    this sink being activated and processing a frame.

*/
- (void) addOnFileOpen:(FMLiveSwitchAction0*)value;
/**

    Initializes a new instance of the FMLiveSwitchWaveAudioSink class.

    @param path The path.
    @param format The format.
*/
+ (FMLiveSwitchWaveAudioSink*) audioSinkWithPath:(NSString*)path format:(FMLiveSwitchAudioFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchWaveAudioSink class.

    @param path The path.
    @param input The input.
*/
+ (FMLiveSwitchWaveAudioSink*) audioSinkWithPath:(NSString*)path input:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Gets the base timestamp - the timestamp of the first frame
    processed by the recorder after being activated. This timestamp
    will change each time a new file is created in response to the
    sink being activated.

*/
- (long long) baseTimestamp;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchAudioFrame*)frame inputBuffer:(FMLiveSwitchAudioBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchWaveAudioSink class.

    @param path The path.
    @param format The format.
*/
- (instancetype) initWithPath:(NSString*)path format:(FMLiveSwitchAudioFormat*)format;
/**

    Initializes a new instance of the FMLiveSwitchWaveAudioSink class.

    @param path The path.
    @param input The input.
*/
- (instancetype) initWithPath:(NSString*)path input:(NSObject<FMLiveSwitchIAudioOutput>*)input;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets the last known file path.

*/
- (NSString*) lastFilePath;
/**

    Gets the last timestamp processed by the recorder.

*/
- (long long) lastTimestamp;
/**

    Gets the currently open file path.

*/
- (NSString*) openFilePath;
/**

    Gets the path.

*/
- (NSString*) path;
/**

    Removes a handler that is raised when an existing file is close in response to
    this sink being deactivated or destroyed.

*/
- (void) removeOnFileClose:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when a new file is opened in response to
    this sink being activated and processing a frame.

*/
- (void) removeOnFileOpen:(FMLiveSwitchAction0*)value;

@end

/**

    A YUV4MPEG video recorder.

*/
@interface FMLiveSwitchYuv4MpegVideoRecorder : FMLiveSwitchVideoRecorder

/**

    Updates the file header.

*/
- (void) doUpdateHeader;
/**

    Writes the file header.

*/
- (void) doWriteHeader;
/**

    Write an encoded video frame.

    @param buffer The encoded buffer.
    @param presentationTimestamp The presentation timestamp.
    @return `true` if the encoded frame was written successfully; otherwise, `false`
*/
- (bool) doWriteWithBuffer:(FMLiveSwitchVideoBuffer*)buffer presentationTimestamp:(long long)presentationTimestamp;
/**

    Initializes a new instance of the FMLiveSwitchYuv4MpegVideoRecorder class.

    @param path The path.
*/
- (instancetype) initWithPath:(NSString*)path;
/**

    Initializes a new instance of the FMLiveSwitchYuv4MpegVideoRecorder class.

    @param path The path.
*/
+ (FMLiveSwitchYuv4MpegVideoRecorder*) videoRecorderWithPath:(NSString*)path;

@end

/**

    A YUV4MPEG-file-based video sink.

*/
@interface FMLiveSwitchYuv4MpegVideoSink : FMLiveSwitchVideoSink

/**

    Adds a handler that is raised when an existing file is close in response to
    this sink being deactivated or destroyed.

*/
- (void) addOnFileClose:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when a new file is opened in response to
    this sink being activated and processing a frame.

*/
- (void) addOnFileOpen:(FMLiveSwitchAction0*)value;
/**

    Gets the base timestamp - the timestamp of the first frame
    processed by the recorder after being activated. This timestamp
    will change each time a new file is created in response to the
    sink being activated.

*/
- (long long) baseTimestamp;
/**

    Destroys this instance.

*/
- (void) doDestroy;
/**

    Processes a frame.

    @param frame The frame.
    @param inputBuffer The input buffer.
*/
- (void) doProcessFrame:(FMLiveSwitchVideoFrame*)frame inputBuffer:(FMLiveSwitchVideoBuffer*)inputBuffer;
/**

    Initializes a new instance of the FMLiveSwitchYuv4MpegVideoSink class.

    @param path The path.
*/
- (instancetype) initWithPath:(NSString*)path;
/**

    Initializes a new instance of the FMLiveSwitchYuv4MpegVideoSink class.

    @param path The path.
    @param input The input.
*/
- (instancetype) initWithPath:(NSString*)path input:(NSObject<FMLiveSwitchIVideoOutput>*)input;
/**

    Gets a label that identifies this class.

*/
- (NSString*) label;
/**

    Gets the last known file path.

*/
- (NSString*) lastFilePath;
/**

    Gets the last timestamp processed by the recorder.

*/
- (long long) lastTimestamp;
/**

    Gets the currently open file path.

*/
- (NSString*) openFilePath;
/**

    Gets the path.

*/
- (NSString*) path;
/**

    Removes a handler that is raised when an existing file is close in response to
    this sink being deactivated or destroyed.

*/
- (void) removeOnFileClose:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when a new file is opened in response to
    this sink being activated and processing a frame.

*/
- (void) removeOnFileOpen:(FMLiveSwitchAction0*)value;
/**

    Initializes a new instance of the FMLiveSwitchYuv4MpegVideoSink class.

    @param path The path.
*/
+ (FMLiveSwitchYuv4MpegVideoSink*) videoSinkWithPath:(NSString*)path;
/**

    Initializes a new instance of the FMLiveSwitchYuv4MpegVideoSink class.

    @param path The path.
    @param input The input.
*/
+ (FMLiveSwitchYuv4MpegVideoSink*) videoSinkWithPath:(NSString*)path input:(NSObject<FMLiveSwitchIVideoOutput>*)input;

@end

/**

    A YUV4MPEG-file-based video source.

*/
@interface FMLiveSwitchYuv4MpegVideoSource : FMLiveSwitchVideoSource

/**

    Adds a handler that is raised when the file ends.

*/
- (void) addOnEnded:(FMLiveSwitchAction0*)value;
/**

    Starts the source.

*/
- (FMLiveSwitchFuture<id>*) doStart;
/**

    Stops the source.

*/
- (FMLiveSwitchFuture<id>*) doStop;
/**

    Initializes a new instance of the FMLiveSwitchYuv4MpegVideoSource class.

    @param path The path.
*/
- (instancetype) initWithPath:(NSString*)path;
/**

    Gets the label.

*/
- (NSString*) label;
/**

    Gets the path.

*/
- (NSString*) path;
/**

    Removes a handler that is raised when the file ends.

*/
- (void) removeOnEnded:(FMLiveSwitchAction0*)value;
/**

    Initializes a new instance of the FMLiveSwitchYuv4MpegVideoSource class.

    @param path The path.
*/
+ (FMLiveSwitchYuv4MpegVideoSource*) videoSourceWithPath:(NSString*)path;

@end

/**

    A STUN address family.

*/
@interface FMLiveSwitchStunAddressFamily : NSObject

+ (FMLiveSwitchStunAddressFamily*) addressFamily;
- (instancetype) init;
/**

    Gets the value indicating the IPv4 address family.

*/
+ (uint8_t) ipv4;
/**

    Gets the value indicating the IPv6 address family.

*/
+ (uint8_t) ipv6;

@end

/**

    A STUN attribute.

*/
@interface FMLiveSwitchStunAttribute : NSObject

/**

    Gets the ALTERNATE-SERVER type.

*/
+ (int) alternateServerType;
+ (FMLiveSwitchStunAttribute*) attribute;
/**

    Gets the CHANNEL-NUMBER type.

*/
+ (int) channelNumberType;
/**

    Gets the CONNECTION-ID type.

*/
+ (int) connectionIdType;
/**

    Gets the CONTROLLED type.

*/
+ (int) controlledType;
/**

    Gets the CONTROLLING type.

*/
+ (int) controllingType;
/**

    Gets the DATA type.

*/
+ (int) dataType;
/**

    Gets the DONT-FRAGMENT type.

*/
+ (int) dontFragmentType;
/**

    Gets the ERROR-CODE type.

*/
+ (int) errorCodeType;
/**

    Gets the EVEN-PORT type.

*/
+ (int) evenPortType;
/**

    Gets the FINGERPRINT type.

*/
+ (int) fingerprintType;
/**

    Gets the length of the attribute, including header and padding.

*/
- (int) getLength;
/**

    Gets the length of the padding.

*/
- (int) getPaddingLengthWithValueLength:(int)valueLength;
/**

    Gets the length of the attribute value.

*/
- (int) getValueLength;
- (instancetype) init;
/**

    Gets the LIFETIME type.

*/
+ (int) lifetimeType;
/**

    Gets the MAPPED-ADDRESS type.

*/
+ (int) mappedAddressType;
/**

    Gets the MESSAGE-INTEGRITY type.

*/
+ (int) messageIntegrityType;
/**

    Reads the length of the next attribute from a data buffer, including header and padding.

    @param buffer The buffer.
    @param offset The offset.
*/
+ (int) nextLengthWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Gets the NONCE type.

*/
+ (int) nonceType;
/**

    Gets the PRIORITY type.

*/
+ (int) priorityType;
/**

    Reads an address type.

    @param buffer The buffer.
    @param offset The offset.
*/
+ (FMLiveSwitchAddressType) readAddressTypeWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Reads an FMLiveSwitchStunAttribute from a data buffer.

    @param buffer The buffer.
    @param offset The offset.
    @param offsetPlus The offset plus the attribute length.
    @param transactionId The STUN message transaction ID.
    @param messageBuffer The STUN message thus far as a byte array.
*/
+ (FMLiveSwitchStunAttribute*) readFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset offsetPlus:(int*)offsetPlus transactionId:(FMLiveSwitchDataBuffer*)transactionId messageBuffer:(FMLiveSwitchDataBuffer*)messageBuffer;
/**

    Reads an FMLiveSwitchStunAttribute from a data buffer.

    @param buffer The buffer.
    @param offset The offset.
    @param transactionId The STUN message transaction ID.
    @param messageBuffer The STUN message thus far as a byte array.
*/
+ (FMLiveSwitchStunAttribute*) readFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset transactionId:(FMLiveSwitchDataBuffer*)transactionId messageBuffer:(FMLiveSwitchDataBuffer*)messageBuffer;
/**

    Reads an IP address.

    @param buffer The buffer.
    @param offset The offset.
    @param addressType The address type.
*/
+ (NSString*) readIPAddressWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset addressType:(FMLiveSwitchAddressType)addressType;
/**

    Reads a port.

    @param buffer The buffer.
    @param offset The offset.
*/
+ (int) readPortWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Reads an XOR'd IP address.

    @param buffer The buffer.
    @param offset The offset.
    @param addressType The address type.
    @param transactionId The transaction identifier.
*/
+ (NSString*) readXorIPAddressWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset addressType:(FMLiveSwitchAddressType)addressType transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Reads an XOR'd port.

    @param buffer The buffer.
    @param offset The offset.
    @param transactionId The transaction identifier.
*/
+ (int) readXorPortWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Gets the REALM type.

*/
+ (int) realmType;
/**

    Gets the REQUESTED-ADDRESS-FAMILY type.

*/
+ (int) requestedAddressFamilyType;
/**

    Gets the REQUESTED-TRANSPORT type.

*/
+ (int) requestedTransportType;
/**

    Gets the RESERVATION-TOKEN type.

*/
+ (int) reservationTokenType;
/**

    Gets the SOFTWARE type.

*/
+ (int) softwareType;
/**

    Gets the comprehension-optional TRANSACTION_TRANSMIT_COUNTER type defined in RFC 7982.

*/
+ (int) transactionTransmitCounterType;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Gets the UNKNOWN-ATTRIBUTES type.

*/
+ (int) unknownAttributesType;
/**

    Gets the USE-CANDIDATE type.

*/
+ (int) useCandidateType;
/**

    Gets the USERNAME type.

*/
+ (int) usernameType;
/**

    Writes an address type.

    @param buffer The buffer.
    @param offset The offset.
    @param addressType The address type.
*/
+ (void) writeAddressTypeWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset addressType:(FMLiveSwitchAddressType)addressType;
/**

    Writes an IP address.

    @param buffer The buffer.
    @param offset The offset.
    @param addressType The address type.
    @param ipAddress The IP address.
*/
- (void) writeIPAddressWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset addressType:(FMLiveSwitchAddressType)addressType ipAddress:(NSString*)ipAddress;
/**

    Writes a port.

    @param buffer The buffer.
    @param offset The offset.
    @param port The port.
*/
- (void) writePortWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset port:(int)port;
/**

    Writes the attribute to a data buffer.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Writes the attribute to a data buffer.

    @param buffer The buffer.
    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (void) writeToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset offsetPlus:(int*)offsetPlus;
/**

    Writes the attribute value to a data buffer.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Writes an XOR'd IP address.

    @param buffer The buffer.
    @param offset The offset.
    @param addressType The address type.
    @param ipAddress The IP address.
    @param transactionId The transaction identifier.
*/
- (void) writeXorIPAddressWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset addressType:(FMLiveSwitchAddressType)addressType ipAddress:(NSString*)ipAddress transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Writes an XOR'd port.

    @param buffer The buffer.
    @param offset The offset.
    @param port The port.
    @param transactionId The transaction identifier.
*/
- (void) writeXorPortWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset port:(int)port transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Gets the XOR-MAPPED-ADDRESS type.

*/
+ (int) xorMappedAddressType;
/**

    Gets the XOR-PEER-ADDRESS type.

*/
+ (int) xorPeerAddressType;
/**

    Gets the XOR-RELAYED-ADDRESS type.

*/
+ (int) xorRelayedAddressType;

@end

/**

    The alternate server represents an alternate transport address
    identifying a different STUN server that the STUN client should try.

*/
@interface FMLiveSwitchStunAlternateServerAttribute : FMLiveSwitchStunAttribute

/**

    Initializes a new instance of the FMLiveSwitchStunAlternateServerAttribute class.

    @param ipAddress The IP address.
    @param port The port.
*/
+ (FMLiveSwitchStunAlternateServerAttribute*) alternateServerAttributeWithIPAddress:(NSString*)ipAddress port:(int)port;
/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Gets the length of the value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunAlternateServerAttribute class.

    @param ipAddress The IP address.
    @param port The port.
*/
- (instancetype) initWithIPAddress:(NSString*)ipAddress port:(int)port;
/**

    Gets the IP address.

*/
- (NSString*) ipAddress;
/**

    Gets the port.

*/
- (int) port;
/**

    Initializes a new instance of the FMLiveSwitchStunAlternateServerAttribute class.

    @param buffer The buffer.
    @param offset The offset.
*/
+ (FMLiveSwitchStunAlternateServerAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Sets the IP address.

*/
- (void) setIPAddress:(NSString*)value;
/**

    Sets the port.

*/
- (void) setPort:(int)value;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Writes the value to.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;

@end

/**

    Common functionality of various STUN/TURN server exceptions that occur while processing Allocation and Binding requests.

*/
@interface FMLiveSwitchStunError : FMLiveSwitchError

/**

    Creates error for the given error code and with a given message.

    @param code The error code.
    @param message The error message.
*/
+ (FMLiveSwitchError*) createStunErrorWithCode:(int)code message:(FMLiveSwitchStunMessage*)message;
/**

    Initializes a new instance of the FMLiveSwitchStunError class.

    @param code The error code.
    @param message The error message.
*/
+ (FMLiveSwitchStunError*) errorWithCode:(FMLiveSwitchErrorCode)code message:(NSString*)message;
/**

    Initializes a new instance of the FMLiveSwitchStunError class.

    @param code The error code.
    @param message The error message.
*/
- (instancetype) initWithCode:(FMLiveSwitchErrorCode)code message:(NSString*)message;
/**

    Gets the STUN code.

*/
- (int) stunCode;
/**

    Gets the STUN code.

    @deprecated Use StunCode instead.
*/
- (int) stunErrorCode __deprecated_msg("Use StunCode instead.");

@end

/**

    The request was malformed. The client SHOULD NOT
    retry the request without modification from the previous
    attempt. The server may not be able to generate a valid
    MESSAGE-INTEGRITY for this error, so the client MUST NOT expect
    a valid MESSAGE-INTEGRITY attribute on this response.

*/
@interface FMLiveSwitchStunBadRequestError : FMLiveSwitchStunError

/**

    Initializes a new instance of the FMLiveSwitchStunBadRequestError class.

*/
+ (FMLiveSwitchStunBadRequestError*) badRequestError;
/**

    Initializes a new instance of the FMLiveSwitchStunBadRequestError class.

    @param message The message.
*/
+ (FMLiveSwitchStunBadRequestError*) badRequestErrorWithMessage:(NSString*)message;
/**

    Gets the description for this FMLiveSwitchStunError.

*/
- (NSString*) getDescription;
/**

    Initializes a new instance of the FMLiveSwitchStunBadRequestError class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchStunBadRequestError class.

    @param message The message.
*/
- (instancetype) initWithMessage:(NSString*)message;

@end

/**

    A STUN message.

*/
@interface FMLiveSwitchStunMessage : NSObject

/**

    Gets the allocate method.

*/
+ (int) allocateMethod;
/**

    Gets the message attributes.

*/
- (NSMutableArray*) attributes;
/**

    Gets the binding method.

*/
+ (int) bindingMethod;
/**

    Gets the channel-bind method.

*/
+ (int) channelBindMethod;
/**

    Gets the connection-attempt method.

*/
+ (int) connectionAttemptMethod;
/**

    Gets the connection-bind method.

*/
+ (int) connectionBindMethod;
/**

    Gets the connect method.

*/
+ (int) connectMethod;
/**

    Creates a message.

    @param method The method.
    @param messageType Type of the message.
    @param transactionId The transaction ID.
*/
+ (FMLiveSwitchStunMessage*) createMessageWithMethod:(int)method messageType:(FMLiveSwitchStunMessageType)messageType transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Gets the create-permission method.

*/
+ (int) createPermissionMethod;
/**

    Gets the data method.

*/
+ (int) dataMethod;
/**

    Generates a random transaction ID.

*/
+ (FMLiveSwitchDataBuffer*) generateTransactionId;
/**

    Gets the alternate-server attribute.

*/
- (FMLiveSwitchStunAlternateServerAttribute*) getAlternateServer;
/**

    Gets the channel-number attribute.

*/
- (FMLiveSwitchStunTurnChannelNumberAttribute*) getChannelNumber;
/**

    Gets the connection-id attribute.

*/
- (FMLiveSwitchStunTurnConnectionIdAttribute*) getConnectionId;
/**

    Gets the data attribute.

*/
- (FMLiveSwitchStunTurnDataAttribute*) getData;
/**

    Gets the don't-fragment attribute.

*/
- (FMLiveSwitchStunTurnDontFragmentAttribute*) getDontFragment;
/**

    Gets the error-code attribute.

*/
- (FMLiveSwitchStunErrorCodeAttribute*) getErrorCode;
/**

    Gets the even-port attribute.

*/
- (FMLiveSwitchStunTurnEvenPortAttribute*) getEvenPort;
/**

    Gets the fingerprint attribute.

*/
- (FMLiveSwitchStunFingerprintAttribute*) getFingerprint;
/**

    Gets the ICE-controlled attribute.

*/
- (FMLiveSwitchStunIceControlledAttribute*) getIceControlled;
/**

    Gets the ICE-controlling attribute.

*/
- (FMLiveSwitchStunIceControllingAttribute*) getIceControlling;
/**

    Gets the length of the message.

*/
- (int) getLength;
/**

    Gets the lifetime attribute.

*/
- (FMLiveSwitchStunTurnLifetimeAttribute*) getLifetime;
/**

    Gets the mapped-address attribute.

*/
- (FMLiveSwitchStunMappedAddressAttribute*) getMappedAddress;
/**

    Gets the message-integrity attribute.

*/
- (FMLiveSwitchStunMessageIntegrityAttribute*) getMessageIntegrity;
/**

    Gets the nonce attribute.

*/
- (FMLiveSwitchStunNonceAttribute*) getNonce;
/**

    Gets the length of the payload.

*/
- (int) getPayloadLength;
/**

    Gets the priority attribute.

*/
- (FMLiveSwitchStunIcePriorityAttribute*) getPriority;
/**

    Gets the realm attribute.

*/
- (FMLiveSwitchStunRealmAttribute*) getRealm;
/**

    Gets the requested-address-family attribute.

*/
- (FMLiveSwitchStunTurnRequestedAddressFamilyAttribute*) getRequestedAddressFamily;
/**

    Gets the requested-transport attribute.

*/
- (FMLiveSwitchStunTurnRequestedTransportAttribute*) getRequestedTransport;
/**

    Gets the reservation-token attribute.

*/
- (FMLiveSwitchStunTurnReservationTokenAttribute*) getReservationToken;
/**

    Gets the software attribute.

*/
- (FMLiveSwitchStunSoftwareAttribute*) getSoftware;
/**

    Gets the transaction-transmit-counter attribute.

*/
- (FMLiveSwitchStunTransactionTransmitCounterAttribute*) getTransactionTransmitCounter;
/**

    Gets the unknown-attributes attribute.

*/
- (FMLiveSwitchStunUnknownAttributesAttribute*) getUnknownAttributes;
/**

    Gets the use-candidate attribute.

*/
- (FMLiveSwitchStunIceUseCandidateAttribute*) getUseCandidate;
/**

    Gets the username attribute.

*/
- (FMLiveSwitchStunUsernameAttribute*) getUsername;
/**

    Gets the XOR-mapped-address attribute.

*/
- (FMLiveSwitchStunXorMappedAddressAttribute*) getXorMappedAddress;
/**

    Gets the XOR-peer-address attribute.

*/
- (FMLiveSwitchStunTurnXorPeerAddressAttribute*) getXorPeerAddress;
/**

    Gets the XOR-relayed-address attribute.

*/
- (FMLiveSwitchStunTurnXorRelayedAddressAttribute*) getXorRelayedAddress;
/**

    Initializes a new instance of the FMLiveSwitchStunMessage class.

    @param messageType The type of the message.
    @param transactionId The transaction ID.
*/
- (instancetype) initWithMessageType:(FMLiveSwitchStunMessageType)messageType transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Gets the "magic cookie" bytes.

*/
+ (NSMutableData*) magicCookieBytes;
/**

    Gets the "magic cookie" value.

*/
+ (long long) magicCookieValue;
/**

    Gets the message type.

*/
- (FMLiveSwitchStunMessageType) messageType;
/**

    Initializes a new instance of the FMLiveSwitchStunMessage class.

    @param messageType The type of the message.
    @param transactionId The transaction ID.
*/
+ (FMLiveSwitchStunMessage*) messageWithMessageType:(FMLiveSwitchStunMessageType)messageType transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Gets the method.

*/
- (int) method;
/**

    Reads a FMLiveSwitchStunMessage instance from a buffer.

    @param buffer The buffer.
*/
+ (FMLiveSwitchStunMessage*) readFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Reads a FMLiveSwitchStunMessage instance from a buffer.

    @param buffer The buffer.
    @param offset The offset.
*/
+ (FMLiveSwitchStunMessage*) readFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Reads an FMLiveSwitchStunMessage instance from a buffer.

    @param buffer The buffer.
    @param offset The offset.
    @param length The length of the parsed segment.
*/
+ (FMLiveSwitchStunMessage*) readFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset length:(int*)length;
/**

    Gets the refresh method.

*/
+ (int) refreshMethod;
/**

    Gets the send method.

*/
+ (int) sendMethod;
/**

    Set the alternate-server attribute.

    @param attribute The alternate-server attribute.
*/
- (void) setAlternateServerWithAttribute:(FMLiveSwitchStunAlternateServerAttribute*)attribute;
/**

    Sets the channel-number attribute.

    @param attribute The channel-number attribute.
*/
- (void) setChannelNumberWithAttribute:(FMLiveSwitchStunTurnChannelNumberAttribute*)attribute;
/**

    Sets the connection-id attribute.

    @param attribute The connection-id attribute.
*/
- (void) setConnectionIdWithAttribute:(FMLiveSwitchStunTurnConnectionIdAttribute*)attribute;
/**

    Sets the data attribute.

    @param attribute The data attribute.
*/
- (void) setDataWithAttribute:(FMLiveSwitchStunTurnDataAttribute*)attribute;
/**

    Sets the don't-fragment attribute.

    @param attribute The don't-fragment attribute.
*/
- (void) setDontFragmentWithAttribute:(FMLiveSwitchStunTurnDontFragmentAttribute*)attribute;
/**

    Set the error-code attribute.

    @param attribute The error-code attribute.
*/
- (void) setErrorCodeWithAttribute:(FMLiveSwitchStunErrorCodeAttribute*)attribute;
/**

    Sets the even-port attribute.

    @param attribute The even-port attribute.
*/
- (void) setEvenPortWithAttribute:(FMLiveSwitchStunTurnEvenPortAttribute*)attribute;
/**

    Set the fingerprint attribute.

    @param attribute The fingerprint attribute.
*/
- (void) setFingerprintWithAttribute:(FMLiveSwitchStunFingerprintAttribute*)attribute;
/**

    Sets the ICE-controlled attribute.

    @param attribute The ICE-controlled attribute.
*/
- (void) setIceControlledWithAttribute:(FMLiveSwitchStunIceControlledAttribute*)attribute;
/**

    Sets the ICE-controlling attribute.

    @param attribute The ICE-controlling attribute.
*/
- (void) setIceControllingWithAttribute:(FMLiveSwitchStunIceControllingAttribute*)attribute;
/**

    Sets the lifetime attribute.

    @param attribute The lifetime attribute.
*/
- (void) setLifetimeWithAttribute:(FMLiveSwitchStunTurnLifetimeAttribute*)attribute;
/**

    Set the mapped-address attribute.

    @param attribute The mapped-address attribute.
*/
- (void) setMappedAddressWithAttribute:(FMLiveSwitchStunMappedAddressAttribute*)attribute;
/**

    Set the message-integrity attribute.

    @param attribute The message-integrity attribute.
*/
- (void) setMessageIntegrityWithAttribute:(FMLiveSwitchStunMessageIntegrityAttribute*)attribute;
/**

    Set the nonce attribute.

    @param attribute The nonce attribute.
*/
- (void) setNonceWithAttribute:(FMLiveSwitchStunNonceAttribute*)attribute;
/**

    Sets the priority attribute.

    @param attribute The priority attribute.
*/
- (void) setPriorityWithAttribute:(FMLiveSwitchStunIcePriorityAttribute*)attribute;
/**

    Set the realm attribute.

    @param attribute The realm attribute.
*/
- (void) setRealmWithAttribute:(FMLiveSwitchStunRealmAttribute*)attribute;
/**

    Sets the requested-address-family attribute.

    @param attribute The requested-address-family attribute.
*/
- (void) setRequestedAddressFamilyWithAttribute:(FMLiveSwitchStunTurnRequestedAddressFamilyAttribute*)attribute;
/**

    Sets the requested-transport attribute.

    @param attribute The requested-transport attribute.
*/
- (void) setRequestedTransportWithAttribute:(FMLiveSwitchStunTurnRequestedTransportAttribute*)attribute;
/**

    Sets the reservation-token attribute.

    @param attribute The reservation-token attribute.
*/
- (void) setReservationTokenWithAttribute:(FMLiveSwitchStunTurnReservationTokenAttribute*)attribute;
/**

    Set the software attribute.

    @param attribute The software attribute.
*/
- (void) setSoftwareWithAttribute:(FMLiveSwitchStunSoftwareAttribute*)attribute;
/**

    Set the transaction-transmit-counter attribute.

    @param attribute The transaction-transmit-counter attribute.
*/
- (void) setTransactionTransmitCounterWithAttribute:(FMLiveSwitchStunTransactionTransmitCounterAttribute*)attribute;
/**

    Set the unknown-attributes attribute.

    @param attribute The unknown-attributes attribute.
*/
- (void) setUnknownAttributesWithAttribute:(FMLiveSwitchStunUnknownAttributesAttribute*)attribute;
/**

    Sets the use-candidate attribute.

    @param attribute The use-candidate attribute.
*/
- (void) setUseCandidateWithAttribute:(FMLiveSwitchStunIceUseCandidateAttribute*)attribute;
/**

    Set the username attribute.

    @param attribute The username attribute.
*/
- (void) setUsernameWithAttribute:(FMLiveSwitchStunUsernameAttribute*)attribute;
/**

    Set the XOR-mapped-address attribute.

    @param attribute The XOR-mapped-address attribute.
*/
- (void) setXorMappedAddressWithAttribute:(FMLiveSwitchStunXorMappedAddressAttribute*)attribute;
/**

    Sets the XOR-peer-address attribute.

    @param attribute The XOR-peer-address attribute.
*/
- (void) setXorPeerAddressWithAttribute:(FMLiveSwitchStunTurnXorPeerAddressAttribute*)attribute;
/**

    Sets the XOR-relayed-address attribute.

    @param attribute The XOR-relayed-address attribute.
*/
- (void) setXorRelayedAddressWithAttribute:(FMLiveSwitchStunTurnXorRelayedAddressAttribute*)attribute;
/**

    Gets the transaction ID.

*/
- (FMLiveSwitchDataBuffer*) transactionId;
/**

    Writes the message to a data buffer.

    @param buffer The buffer.
*/
- (void) writeToWithBuffer:(FMLiveSwitchDataBuffer*)buffer;
/**

    Writes the message to a data buffer.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Writes the message to a data buffer.

    @param buffer The buffer.
    @param offset The offset.
    @param offsetPlus The offset plus the value length.
*/
- (void) writeToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset offsetPlus:(int*)offsetPlus;

@end

/**

    A generic STUN binding message.

*/
@interface FMLiveSwitchStunBindingMessage : FMLiveSwitchStunMessage

/**

    Initializes a new instance of the FMLiveSwitchStunBindingMessage class.

    @param messageType The type of the message.
    @param transactionId The transaction ID.
*/
+ (FMLiveSwitchStunBindingMessage*) bindingMessageWithMessageType:(FMLiveSwitchStunMessageType)messageType transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Initializes a new instance of the FMLiveSwitchStunBindingMessage class.

    @param messageType The type of the message.
    @param transactionId The transaction ID.
*/
- (instancetype) initWithMessageType:(FMLiveSwitchStunMessageType)messageType transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Gets the method.

*/
- (int) method;

@end

/**

    A STUN binding indication.

*/
@interface FMLiveSwitchStunBindingIndication : FMLiveSwitchStunBindingMessage

/**

    Initializes a new instance of the FMLiveSwitchStunBindingIndication class.

*/
+ (FMLiveSwitchStunBindingIndication*) bindingIndication;
/**

    Initializes a new instance of the FMLiveSwitchStunBindingIndication class.

*/
- (instancetype) init;

@end

/**

    A STUN binding request.

*/
@interface FMLiveSwitchStunBindingRequest : FMLiveSwitchStunBindingMessage

/**

    Initializes a new instance of the FMLiveSwitchStunBindingRequest class.

*/
+ (FMLiveSwitchStunBindingRequest*) bindingRequest;
/**

    Initializes a new instance of the FMLiveSwitchStunBindingRequest class.

*/
+ (FMLiveSwitchStunBindingRequest*) bindingRequestWithTransactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Initializes a new instance of the FMLiveSwitchStunBindingRequest class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchStunBindingRequest class.

*/
- (instancetype) initWithTransactionId:(FMLiveSwitchDataBuffer*)transactionId;

@end

/**

    A STUN binding response.

*/
@interface FMLiveSwitchStunBindingResponse : FMLiveSwitchStunBindingMessage

/**

    Initializes a new instance of the FMLiveSwitchStunBindingResponse class.

    @param transactionId The transaction ID.
    @param success Whether the request was successful.
*/
+ (FMLiveSwitchStunBindingResponse*) bindingResponseWithTransactionId:(FMLiveSwitchDataBuffer*)transactionId success:(bool)success;
/**

    Initializes a new instance of the FMLiveSwitchStunBindingResponse class.

    @param transactionId The transaction ID.
    @param success Whether the request was successful.
*/
- (instancetype) initWithTransactionId:(FMLiveSwitchDataBuffer*)transactionId success:(bool)success;

@end

/**

    The ERROR-CODE attribute is used in error response messages.  It
    contains a numeric error code value in the range of 300 to 699 plus a
    textual reason phrase encoded in UTF-8 [RFC3629], and is consistent
    in its code assignments and semantics with SIP [RFC3261] and HTTP
    [RFC2616]. The reason phrase is meant for user consumption, and can
    be anything appropriate for the error code.  Recommended reason
    phrases for the defined error codes are included in the IANA registry
    for error codes.  The reason phrase MUST be a UTF-8 [RFC3629] encoded
    sequence of less than 128 characters (which can be as long as 763
    bytes).

*/
@interface FMLiveSwitchStunErrorCodeAttribute : FMLiveSwitchStunAttribute

/**

    Gets the error code.

*/
- (int) code;
/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Initializes a new instance of the FMLiveSwitchStunErrorCodeAttribute class.

    @param code The error code.
*/
+ (FMLiveSwitchStunErrorCodeAttribute*) errorCodeAttributeWithCode:(int)code;
/**

    Initializes a new instance of the FMLiveSwitchStunErrorCodeAttribute class.

    @param code The error code.
    @param reason The error reason.
*/
+ (FMLiveSwitchStunErrorCodeAttribute*) errorCodeAttributeWithCode:(int)code reason:(NSString*)reason;
/**

    Gets the length of the attribute value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunErrorCodeAttribute class.

    @param code The error code.
*/
- (instancetype) initWithCode:(int)code;
/**

    Initializes a new instance of the FMLiveSwitchStunErrorCodeAttribute class.

    @param code The error code.
    @param reason The error reason.
*/
- (instancetype) initWithCode:(int)code reason:(NSString*)reason;
/**

    Initializes a new instance of the FMLiveSwitchStunErrorCodeAttribute class.

    @param buffer The buffer.
    @param offset The offset.
    @param length The length.
*/
+ (FMLiveSwitchStunErrorCodeAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset length:(int)length;
/**

    Gets the error reason.

*/
- (NSString*) reason;
/**

    Sets the error code.

*/
- (void) setCode:(int)value;
/**

    Sets the error reason.

*/
- (void) setReason:(NSString*)value;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Writes the attribute value to a data buffer.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;

@end

/**

    The FINGERPRINT attribute MAY be present in all STUN messages.  The
    value of the attribute is computed as the CRC-32 of the STUN message
    up to (but excluding) the FINGERPRINT attribute itself, XOR'ed with
    the 32-bit value 0x5354554e (the XOR helps in cases where an
    application packet is also using CRC-32 in it).  The 32-bit CRC is
    the one defined in ITU V.42 [ITU.V42.2002], which has a generator
    polynomial of x32+x26+x23+x22+x16+x12+x11+x10+x8+x7+x5+x4+x2+x+1.
    When present, the FINGERPRINT attribute MUST be the last attribute in
    the message, and thus will appear after MESSAGE-INTEGRITY.

*/
@interface FMLiveSwitchStunFingerprintAttribute : FMLiveSwitchStunAttribute

/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Initializes a new instance of the FMLiveSwitchStunFingerprintAttribute class.

*/
+ (FMLiveSwitchStunFingerprintAttribute*) fingerprintAttribute;
/**

    Gets the length of the attribute value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunFingerprintAttribute class.

*/
- (instancetype) init;
/**

    Gets the message buffer.

*/
- (FMLiveSwitchDataBuffer*) messageBuffer;
/**

    Initializes a new instance of the FMLiveSwitchStunFingerprintAttribute class.

    @param buffer The buffer.
    @param offset The offset.
    @param messageBuffer The message buffer thus far.
*/
+ (FMLiveSwitchStunFingerprintAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset messageBuffer:(FMLiveSwitchDataBuffer*)messageBuffer;
/**

    Sets the message buffer.

*/
- (void) setMessageBuffer:(FMLiveSwitchDataBuffer*)value;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Writes the attribute value to a data buffer.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;

@end

/**

    The ICE-CONTROLLED attribute is present in a Binding request and
    indicates that the client believes it is currently in the controlled
    role.

*/
@interface FMLiveSwitchStunIceControlledAttribute : FMLiveSwitchStunAttribute

/**

    Initializes a new instance of the FMLiveSwitchStunIceControlledAttribute class.

    @param value The tiebreaker value.
*/
+ (FMLiveSwitchStunIceControlledAttribute*) controlledAttribute:(long long)value;
/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Gets the length of the attribute value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunIceControlledAttribute class.

    @param value The tiebreaker value.
*/
- (instancetype) initWithValue:(long long)value;
/**

    Initializes a new instance of the FMLiveSwitchStunIceControlledAttribute class.

    @param buffer The buffer.
    @param offset The offset.
*/
+ (FMLiveSwitchStunIceControlledAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Sets the tiebreaker value.

*/
- (void) setValue:(long long)value;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Gets the tiebreaker value.

*/
- (long long) value;
/**

    Writes the attribute value to a data buffer.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;

@end

/**

    The ICE-CONTROLLING attribute is present in a Binding request and
    indicates that the client believes it is currently in the controlling
    role.

*/
@interface FMLiveSwitchStunIceControllingAttribute : FMLiveSwitchStunAttribute

/**

    Initializes a new instance of the FMLiveSwitchStunIceControllingAttribute class.

    @param value The tiebreaker value.
*/
+ (FMLiveSwitchStunIceControllingAttribute*) controllingAttribute:(long long)value;
/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Gets the length of the attribute value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunIceControllingAttribute class.

    @param value The tiebreaker value.
*/
- (instancetype) initWithValue:(long long)value;
/**

    Initializes a new instance of the FMLiveSwitchStunIceControllingAttribute class.

    @param buffer The buffer.
    @param offset The offset.
*/
+ (FMLiveSwitchStunIceControllingAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Sets the tiebreaker value.

*/
- (void) setValue:(long long)value;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Gets the tiebreaker value.

*/
- (long long) value;
/**

    Writes the attribute value to a data buffer.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;

@end

/**

    The PRIORITY attribute indicates the priority that is to be
    associated with a peer reflexive candidate, should one be discovered
    by this check.

*/
@interface FMLiveSwitchStunIcePriorityAttribute : FMLiveSwitchStunAttribute

/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Gets the length of the attribute value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunIcePriorityAttribute class.

    @param priority The priority.
*/
- (instancetype) initWithPriority:(long long)priority;
/**

    Gets the priority.

*/
- (long long) priority;
/**

    Initializes a new instance of the FMLiveSwitchStunIcePriorityAttribute class.

    @param priority The priority.
*/
+ (FMLiveSwitchStunIcePriorityAttribute*) priorityAttributeWithPriority:(long long)priority;
/**

    Initializes a new instance of the FMLiveSwitchStunIcePriorityAttribute class.

    @param buffer The buffer.
    @param offset The offset.
*/
+ (FMLiveSwitchStunIcePriorityAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Sets the priority.

*/
- (void) setPriority:(long long)value;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Writes the attribute value to a data buffer.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;

@end

/**

    487 Role Conflict. The Binding request contained either the ICE-CONTROLLING or ICE-CONTROLLED attribute, indicating a role that conflicted with the server.
    The server ran a tie-breaker based on the tie-breaker value in the request and determined that the client needs to switch roles.

*/
@interface FMLiveSwitchStunIceRoleConflictError : FMLiveSwitchStunError

/**

    Gets the description for this FMLiveSwitchStunError.

*/
- (NSString*) getDescription;
/**

    Gets the ICE-controlled attribute.

*/
- (FMLiveSwitchStunIceControlledAttribute*) iceControlled;
/**

    Gets the ICE-controlling attribute.

*/
- (FMLiveSwitchStunIceControllingAttribute*) iceControlling;
/**

    Initializes a new instance of the FMLiveSwitchStunIceRoleConflictError class.

    @param iceControlled The ICE-controlled attribute.
    @param iceControlling The ICE-controlling attribute.
*/
- (instancetype) initWithIceControlled:(FMLiveSwitchStunIceControlledAttribute*)iceControlled iceControlling:(FMLiveSwitchStunIceControllingAttribute*)iceControlling;
/**

    Initializes a new instance of the FMLiveSwitchStunIceRoleConflictError class.

    @param message The message.
    @param iceControlled The ICE-controlled attribute.
    @param iceControlling The ICE-controlling attribute.
*/
- (instancetype) initWithMessage:(NSString*)message iceControlled:(FMLiveSwitchStunIceControlledAttribute*)iceControlled iceControlling:(FMLiveSwitchStunIceControllingAttribute*)iceControlling;
/**

    Initializes a new instance of the FMLiveSwitchStunIceRoleConflictError class.

    @param iceControlled The ICE-controlled attribute.
    @param iceControlling The ICE-controlling attribute.
*/
+ (FMLiveSwitchStunIceRoleConflictError*) roleConflictErrorWithIceControlled:(FMLiveSwitchStunIceControlledAttribute*)iceControlled iceControlling:(FMLiveSwitchStunIceControllingAttribute*)iceControlling;
/**

    Initializes a new instance of the FMLiveSwitchStunIceRoleConflictError class.

    @param message The message.
    @param iceControlled The ICE-controlled attribute.
    @param iceControlling The ICE-controlling attribute.
*/
+ (FMLiveSwitchStunIceRoleConflictError*) roleConflictErrorWithMessage:(NSString*)message iceControlled:(FMLiveSwitchStunIceControlledAttribute*)iceControlled iceControlling:(FMLiveSwitchStunIceControllingAttribute*)iceControlling;

@end

/**

    The USE-CANDIDATE attribute indicates that the candidate pair
    resulting from this check should be used for transmission of media.

*/
@interface FMLiveSwitchStunIceUseCandidateAttribute : FMLiveSwitchStunAttribute

/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Gets the length of the attribute value.

    @return 
            The length of the attribute value.
            
*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunIceUseCandidateAttribute class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchStunIceUseCandidateAttribute class.

    @param buffer The buffer.
    @param offset The offset.
*/
+ (FMLiveSwitchStunIceUseCandidateAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Initializes a new instance of the FMLiveSwitchStunIceUseCandidateAttribute class.

*/
+ (FMLiveSwitchStunIceUseCandidateAttribute*) useCandidateAttribute;
/**

    Writes the attribute value to a data buffer.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;

@end

/**

    431 Integrity Check Failure.

*/
@interface FMLiveSwitchStunIntegrityCheckFailureError : FMLiveSwitchStunError

/**

    Gets the description for this FMLiveSwitchStunError.

*/
- (NSString*) getDescription;
/**

    Initializes a new instance of the FMLiveSwitchStunIntegrityCheckFailureError class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchStunIntegrityCheckFailureError class.

    @param message The message.
*/
- (instancetype) initWithMessage:(NSString*)message;
/**

    Initializes a new instance of the FMLiveSwitchStunIntegrityCheckFailureError class.

*/
+ (FMLiveSwitchStunIntegrityCheckFailureError*) integrityCheckFailureError;
/**

    Initializes a new instance of the FMLiveSwitchStunIntegrityCheckFailureError class.

    @param message The message.
*/
+ (FMLiveSwitchStunIntegrityCheckFailureError*) integrityCheckFailureErrorWithMessage:(NSString*)message;

@end

/**

    The MAPPED-ADDRESS attribute indicates a reflexive transport address
    of the client.  It consists of an 8-bit address family and a 16-bit
    port, followed by a fixed-length value representing the IP address.
    If the address family is IPv4, the address MUST be 32 bits.  If the
    address family is IPv6, the address MUST be 128 bits.  All fields
    must be in network byte order.

*/
@interface FMLiveSwitchStunMappedAddressAttribute : FMLiveSwitchStunAttribute

/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Gets the length of the value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunMappedAddressAttribute class.

    @param ipAddress The IP address.
    @param port The port.
*/
- (instancetype) initWithIPAddress:(NSString*)ipAddress port:(int)port;
/**

    Gets the IP address.

*/
- (NSString*) ipAddress;
/**

    Initializes a new instance of the FMLiveSwitchStunMappedAddressAttribute class.

    @param ipAddress The IP address.
    @param port The port.
*/
+ (FMLiveSwitchStunMappedAddressAttribute*) mappedAddressAttributeWithIPAddress:(NSString*)ipAddress port:(int)port;
/**

    Gets the port.

*/
- (int) port;
/**

    Initializes a new instance of the FMLiveSwitchStunMappedAddressAttribute class.

    @param buffer The buffer.
    @param offset The offset.
*/
+ (FMLiveSwitchStunMappedAddressAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Sets the IP address.

*/
- (void) setIPAddress:(NSString*)value;
/**

    Sets the port.

*/
- (void) setPort:(int)value;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Writes the value to.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;

@end

/**

    The MESSAGE-INTEGRITY attribute contains an HMAC-SHA1 [RFC2104] of
    the STUN message.  The MESSAGE-INTEGRITY attribute can be present in
    any STUN message type.  Since it uses the SHA1 hash, the HMAC will be
    20 bytes.  The text used as input to HMAC is the STUN message,
    including the header, up to and including the attribute preceding the
    MESSAGE-INTEGRITY attribute.  With the exception of the FINGERPRINT
    attribute, which appears after MESSAGE-INTEGRITY, agents MUST ignore
    all other attributes that follow MESSAGE-INTEGRITY.

*/
@interface FMLiveSwitchStunMessageIntegrityAttribute : FMLiveSwitchStunAttribute

/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Gets the length of the attribute value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunMessageIntegrityAttribute class.

    @param keyBuffer The key as a buffer.
*/
- (instancetype) initWithKeyBuffer:(NSMutableData*)keyBuffer;
/**

    After creating a message-integrity attribute using the byte array representation,
    this method determines whether the supplied key is valid.

    @param keyBuffer The key as a buffer.
    @return `true` if the key is valid; otherwise, `false`.
            
*/
- (bool) isValidWithKeyBuffer:(NSMutableData*)keyBuffer;
/**

    Gets the message buffer.

*/
- (FMLiveSwitchDataBuffer*) messageBuffer;
/**

    Initializes a new instance of the FMLiveSwitchStunMessageIntegrityAttribute class.

    @param keyBuffer The key as a buffer.
*/
+ (FMLiveSwitchStunMessageIntegrityAttribute*) messageIntegrityAttributeWithKeyBuffer:(NSMutableData*)keyBuffer;
/**

    Initializes a new instance of the FMLiveSwitchStunMessageIntegrityAttribute class.

    @param buffer The buffer.
    @param offset The offset.
    @param length The length.
    @param messageBuffer The message buffer thus far.
*/
+ (FMLiveSwitchStunMessageIntegrityAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset length:(int)length messageBuffer:(FMLiveSwitchDataBuffer*)messageBuffer;
/**

    Sets the message buffer.

*/
- (void) setMessageBuffer:(FMLiveSwitchDataBuffer*)value;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Writes the attribute value to a data buffer.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;

@end

@interface FMLiveSwitchStunMessageTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchStunMessageType)value;

@end

/**

    432 Missing username; the username attribute is not present in the request.

*/
@interface FMLiveSwitchStunMissingUsernameError : FMLiveSwitchStunError

/**

    Gets the description for this FMLiveSwitchStunError.

*/
- (NSString*) getDescription;
/**

    Initializes a new instance of the FMLiveSwitchStunMissingUsernameError class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchStunMissingUsernameError class.

    @param message The message.
*/
- (instancetype) initWithMessage:(NSString*)message;
/**

    Initializes a new instance of the FMLiveSwitchStunMissingUsernameError class.

*/
+ (FMLiveSwitchStunMissingUsernameError*) missingUsernameError;
/**

    Initializes a new instance of the FMLiveSwitchStunMissingUsernameError class.

    @param message The message.
*/
+ (FMLiveSwitchStunMissingUsernameError*) missingUsernameErrorWithMessage:(NSString*)message;

@end

/**

    The NONCE attribute may be present in requests and responses.  It
    contains a sequence of qdtext or quoted-pair, which are defined in
    RFC 3261 [RFC3261].  Note that this means that the NONCE attribute
    will not contain actual quote characters.  See RFC 2617 [RFC2617],
    Section 4.3, for guidance on selection of nonce values in a server.

*/
@interface FMLiveSwitchStunNonceAttribute : FMLiveSwitchStunAttribute

/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Gets the length of the attribute value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunNonceAttribute class.

    @param value The nonce value.
*/
- (instancetype) initWithValue:(NSString*)value;
/**

    Initializes a new instance of the FMLiveSwitchStunNonceAttribute class.

    @param value The nonce value.
*/
+ (FMLiveSwitchStunNonceAttribute*) nonceAttribute:(NSString*)value;
/**

    Initializes a new instance of the FMLiveSwitchStunNonceAttribute class.

    @param buffer The buffer.
    @param offset The offset.
    @param length The length.
*/
+ (FMLiveSwitchStunNonceAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset length:(int)length;
/**

    Sets the nonce value.

*/
- (void) setValue:(NSString*)value;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Gets the nonce value.

*/
- (NSString*) value;
/**

    Writes the attribute value to a data buffer.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;

@end

/**

    The REALM attribute may be present in requests and responses.  It
    contains text that meets the grammar for "realm-value" as described
    in RFC 3261 [RFC3261] but without the double quotes and their
    surrounding whitespace.  That is, it is an unquoted realm-value (and
    is therefore a sequence of qdtext or quoted-pair).  It MUST be a
    UTF-8 [RFC3629] encoded sequence of less than 128 characters (which
    can be as long as 763 bytes), and MUST have been processed using
    SASLprep [RFC4013].

*/
@interface FMLiveSwitchStunRealmAttribute : FMLiveSwitchStunAttribute

/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Gets the length of the attribute value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunRealmAttribute class.

    @param value The realm value.
*/
- (instancetype) initWithValue:(NSString*)value;
/**

    Initializes a new instance of the FMLiveSwitchStunRealmAttribute class.

    @param buffer The buffer.
    @param offset The offset.
    @param length The length.
*/
+ (FMLiveSwitchStunRealmAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset length:(int)length;
/**

    Initializes a new instance of the FMLiveSwitchStunRealmAttribute class.

    @param value The realm value.
*/
+ (FMLiveSwitchStunRealmAttribute*) realmAttribute:(NSString*)value;
/**

    Sets the realm value.

*/
- (void) setValue:(NSString*)value;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Gets the realm value.

*/
- (NSString*) value;
/**

    Writes the attribute value to a data buffer.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;

@end

/**

    500 Server Error. RFC5389. Indicates that the server has suffered a temporary error. The client should try again.

*/
@interface FMLiveSwitchStunServerError : FMLiveSwitchStunError

/**

    Gets the description for this FMLiveSwitchStunError.

*/
- (NSString*) getDescription;
/**

    Initializes a new instance of the FMLiveSwitchStunServerError class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchStunServerError class.

    @param message The message.
*/
- (instancetype) initWithMessage:(NSString*)message;
/**

    Initializes a new instance of the FMLiveSwitchStunServerError class.

*/
+ (FMLiveSwitchStunServerError*) serverError;
/**

    Initializes a new instance of the FMLiveSwitchStunServerError class.

    @param message The message.
*/
+ (FMLiveSwitchStunServerError*) serverErrorWithMessage:(NSString*)message;

@end

/**

    The SOFTWARE attribute contains a textual description of the software
    being used by the agent sending the message.  It is used by clients
    and servers.  Its value SHOULD include manufacturer and version
    number.  The attribute has no impact on operation of the protocol,
    and serves only as a tool for diagnostic and debugging purposes.  The
    value of SOFTWARE is variable length.  It MUST be a UTF-8 [RFC3629]
    encoded sequence of less than 128 characters (which can be as long as
    763 bytes).

*/
@interface FMLiveSwitchStunSoftwareAttribute : FMLiveSwitchStunAttribute

/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Gets the length of the attribute value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunSoftwareAttribute class.

    @param value The textual description of the software being used by
            the agent sending the message.
*/
- (instancetype) initWithValue:(NSString*)value;
/**

    Initializes a new instance of the FMLiveSwitchStunSoftwareAttribute class.

    @param buffer The buffer.
    @param offset The offset.
    @param length The length.
*/
+ (FMLiveSwitchStunSoftwareAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset length:(int)length;
/**

    Sets the textual description of the software being used by
    the agent sending the message.

*/
- (void) setValue:(NSString*)value;
/**

    Initializes a new instance of the FMLiveSwitchStunSoftwareAttribute class.

    @param value The textual description of the software being used by
            the agent sending the message.
*/
+ (FMLiveSwitchStunSoftwareAttribute*) softwareAttribute:(NSString*)value;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Gets the textual description of the software being used by
    the agent sending the message.

*/
- (NSString*) value;
/**

    Writes the attribute value to a data buffer.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;

@end

/**

    430 Stale Credentials. The shared secret sent in the request is expired; the client should obtain a new shared secret.

*/
@interface FMLiveSwitchStunStaleCredentialsError : FMLiveSwitchStunError

/**

    Gets the description for this FMLiveSwitchStunError.

*/
- (NSString*) getDescription;
/**

    Initializes a new instance of the FMLiveSwitchStunStaleCredentialsError class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchStunStaleCredentialsError class.

    @param message The message.
*/
- (instancetype) initWithMessage:(NSString*)message;
/**

    Initializes a new instance of the FMLiveSwitchStunStaleCredentialsError class.

*/
+ (FMLiveSwitchStunStaleCredentialsError*) staleCredentialsError;
/**

    Initializes a new instance of the FMLiveSwitchStunStaleCredentialsError class.

    @param message The message.
*/
+ (FMLiveSwitchStunStaleCredentialsError*) staleCredentialsErrorWithMessage:(NSString*)message;

@end

/**

    438 Stale Nonce. RFC5389. Indicates that the NONCE used by the client was no longer valid. The client should retry, using the
    NONCE provided in the response.

*/
@interface FMLiveSwitchStunStaleNonceError : FMLiveSwitchStunError

/**

    Gets the description for this FMLiveSwitchStunError.

*/
- (NSString*) getDescription;
/**

    Initializes a new instance of the FMLiveSwitchStunStaleNonceError class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchStunStaleNonceError class.

    @param message The message.
*/
- (instancetype) initWithMessage:(NSString*)message;
/**

    Initializes a new instance of the FMLiveSwitchStunStaleNonceError class.

    @param message The message.
    @param nonce The nonce attribute.
    @param realm The realm attribute.
*/
- (instancetype) initWithMessage:(NSString*)message nonce:(FMLiveSwitchStunNonceAttribute*)nonce realm:(FMLiveSwitchStunRealmAttribute*)realm;
/**

    Initializes a new instance of the FMLiveSwitchStunStaleNonceError class.

    @param nonce The nonce attribute.
    @param realm The realm attribute.
*/
- (instancetype) initWithNonce:(FMLiveSwitchStunNonceAttribute*)nonce realm:(FMLiveSwitchStunRealmAttribute*)realm;
/**

    Gets the nonce attribute.

*/
- (FMLiveSwitchStunNonceAttribute*) nonce;
/**

    Gets the realm attribute.

*/
- (FMLiveSwitchStunRealmAttribute*) realm;
/**

    Initializes a new instance of the FMLiveSwitchStunStaleNonceError class.

*/
+ (FMLiveSwitchStunStaleNonceError*) staleNonceError;
/**

    Initializes a new instance of the FMLiveSwitchStunStaleNonceError class.

    @param message The message.
*/
+ (FMLiveSwitchStunStaleNonceError*) staleNonceErrorWithMessage:(NSString*)message;
/**

    Initializes a new instance of the FMLiveSwitchStunStaleNonceError class.

    @param message The message.
    @param nonce The nonce attribute.
    @param realm The realm attribute.
*/
+ (FMLiveSwitchStunStaleNonceError*) staleNonceErrorWithMessage:(NSString*)message nonce:(FMLiveSwitchStunNonceAttribute*)nonce realm:(FMLiveSwitchStunRealmAttribute*)realm;
/**

    Initializes a new instance of the FMLiveSwitchStunStaleNonceError class.

    @param nonce The nonce attribute.
    @param realm The realm attribute.
*/
+ (FMLiveSwitchStunStaleNonceError*) staleNonceErrorWithNonce:(FMLiveSwitchStunNonceAttribute*)nonce realm:(FMLiveSwitchStunRealmAttribute*)realm;

@end

/**

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |        Reserved(Padding)      |    Req        |     Resp      |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    Transaction Transmit Counter comprehension-optional STUN attribute.

*/
@interface FMLiveSwitchStunTransactionTransmitCounterAttribute : FMLiveSwitchStunAttribute

/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Gets the length of the value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunTransactionTransmitCounterAttribute class.

    @param numRequests The number of times the request is transmitted with the same transaction ID to the server.
*/
- (instancetype) initWithNumRequests:(int)numRequests;
/**

    Initializes a new instance of the FMLiveSwitchStunTransactionTransmitCounterAttribute class.

    @param numRequests The number of times the request is transmitted with the same transaction ID to the server.
    @param numResponses The number of times a response with the same transaction ID is sent from the server.
*/
- (instancetype) initWithNumRequests:(int)numRequests numResponses:(int)numResponses;
/**

    Gets the number of times the request is transmitted with the same transaction ID to the server.

*/
- (int) numRequests;
/**

    Gets the number of times a response with the same transaction ID is sent from the server. MUST be set to zero in requests and ignored by the receiver.

*/
- (int) numResponses;
/**

    Initializes a new instance of the FMLiveSwitchStunTransactionTransmitCounterAttribute class.

    @param buffer The buffer.
    @param offset The offset.
*/
+ (FMLiveSwitchStunTransactionTransmitCounterAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Sets the number of times the request is transmitted with the same transaction ID to the server.

*/
- (void) setNumRequests:(int)value;
/**

    Sets the number of times a response with the same transaction ID is sent from the server. MUST be set to zero in requests and ignored by the receiver.

*/
- (void) setNumResponses:(int)value;
/**

    Initializes a new instance of the FMLiveSwitchStunTransactionTransmitCounterAttribute class.

    @param numRequests The number of times the request is transmitted with the same transaction ID to the server.
*/
+ (FMLiveSwitchStunTransactionTransmitCounterAttribute*) transactionTransmitCounterAttributeWithNumRequests:(int)numRequests;
/**

    Initializes a new instance of the FMLiveSwitchStunTransactionTransmitCounterAttribute class.

    @param numRequests The number of times the request is transmitted with the same transaction ID to the server.
    @param numResponses The number of times a response with the same transaction ID is sent from the server.
*/
+ (FMLiveSwitchStunTransactionTransmitCounterAttribute*) transactionTransmitCounterAttributeWithNumRequests:(int)numRequests numResponses:(int)numResponses;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Writes the value to.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;

@end

/**

    The client should contact an alternate server for
    this request.  This error response MUST only be sent if the
    request included a USERNAME attribute and a valid MESSAGE-
    INTEGRITY attribute; otherwise, it MUST NOT be sent and error
    code 400 (Bad Request) is suggested.  This error response MUST
    be protected with the MESSAGE-INTEGRITY attribute, and receivers
    MUST validate the MESSAGE-INTEGRITY of this response before
    redirecting themselves to an alternate server.
    
    Note: Failure to generate and validate message integrity
    for a 300 response allows an on-path attacker to falsify a
    300 response thus causing subsequent STUN messages to be
    sent to a victim.

*/
@interface FMLiveSwitchStunTryAlternateStunError : FMLiveSwitchStunError

/**

    Gets the alternate server attribute.

*/
- (FMLiveSwitchStunAlternateServerAttribute*) alternateServer;
/**

    Gets the description for this FMLiveSwitchStunError.

*/
- (NSString*) getDescription;

@end

/**

    440 Address Family Not Supported. RFC 6156. Indicates that the server does not support the address family requested by the client.

*/
@interface FMLiveSwitchStunTurnAddressFamilyNotSupportedError : FMLiveSwitchStunError

/**

    Initializes a new instance of the FMLiveSwitchStunTurnAddressFamilyNotSupportedError class.

*/
+ (FMLiveSwitchStunTurnAddressFamilyNotSupportedError*) addressFamilyNotSupportedError;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnAddressFamilyNotSupportedError class.

    @param message The message.
*/
+ (FMLiveSwitchStunTurnAddressFamilyNotSupportedError*) addressFamilyNotSupportedErrorWithMessage:(NSString*)message;
/**

    Gets the description for this FMLiveSwitchStunError.

*/
- (NSString*) getDescription;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnAddressFamilyNotSupportedError class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnAddressFamilyNotSupportedError class.

    @param message The message.
*/
- (instancetype) initWithMessage:(NSString*)message;

@end

/**

    A generic STUN allocate message.

*/
@interface FMLiveSwitchStunTurnAllocateMessage : FMLiveSwitchStunMessage

/**

    Initializes a new instance of the FMLiveSwitchStunTurnAllocateMessage class.

    @param messageType The type of the message.
    @param transactionId The transaction ID.
*/
+ (FMLiveSwitchStunTurnAllocateMessage*) allocateMessageWithMessageType:(FMLiveSwitchStunMessageType)messageType transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnAllocateMessage class.

    @param messageType The type of the message.
    @param transactionId The transaction ID.
*/
- (instancetype) initWithMessageType:(FMLiveSwitchStunMessageType)messageType transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Gets the method.

*/
- (int) method;

@end

/**

    A STUN allocate request.

*/
@interface FMLiveSwitchStunTurnAllocateRequest : FMLiveSwitchStunTurnAllocateMessage

/**

    Initializes a new instance of the FMLiveSwitchStunTurnAllocateRequest class.

*/
+ (FMLiveSwitchStunTurnAllocateRequest*) allocateRequest;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnAllocateRequest class.

*/
- (instancetype) init;

@end

/**

    A STUN allocate response.

*/
@interface FMLiveSwitchStunTurnAllocateResponse : FMLiveSwitchStunTurnAllocateMessage

/**

    Initializes a new instance of the FMLiveSwitchStunTurnAllocateResponse class.

    @param transactionId The transaction ID.
    @param success Whether the request was successful.
*/
+ (FMLiveSwitchStunTurnAllocateResponse*) allocateResponseWithTransactionId:(FMLiveSwitchDataBuffer*)transactionId success:(bool)success;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnAllocateResponse class.

    @param transactionId The transaction ID.
    @param success Whether the request was successful.
*/
- (instancetype) initWithTransactionId:(FMLiveSwitchDataBuffer*)transactionId success:(bool)success;

@end

/**

    437 Allocation Mismatch. RFC 5766. This indicates that the client has picked a 5-tuple that the server sees as already in use.
    One way this could happen is if an intervening NAT assigned a mapped transport address that was used by another client that recently
    crashed.  The client considers the current transaction as having failed. The client SHOULD pick another client transport address
    and retry the Allocate request (using a different transaction id).
    The client SHOULD try three different client transport addresses before giving up on this server.Once the client gives up on the
    server, it SHOULD NOT try to create another allocation on the server for 2 minutes.

*/
@interface FMLiveSwitchStunTurnAllocationMismatchError : FMLiveSwitchStunError

/**

    Initializes a new instance of the FMLiveSwitchStunTurnAllocationMismatchError class.

*/
+ (FMLiveSwitchStunTurnAllocationMismatchError*) allocationMismatchError;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnAllocationMismatchError class.

    @param message The message.
*/
+ (FMLiveSwitchStunTurnAllocationMismatchError*) allocationMismatchErrorWithMessage:(NSString*)message;
/**

    Gets the description for this FMLiveSwitchStunError.

*/
- (NSString*) getDescription;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnAllocationMismatchError class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnAllocationMismatchError class.

    @param message The message.
*/
- (instancetype) initWithMessage:(NSString*)message;

@end

/**

    486 Allocation Quota Reached. The server is currently unable to create any more allocations with this username.  The client considers the current
    transaction as having failed. The client SHOULD wait at least 1 minute before trying to create any more allocations on the server.

*/
@interface FMLiveSwitchStunTurnAllocationQuotaReachedError : FMLiveSwitchStunError

/**

    Initializes a new instance of the FMLiveSwitchStunTurnAllocationQuotaReachedError class.

*/
+ (FMLiveSwitchStunTurnAllocationQuotaReachedError*) allocationQuotaReachedError;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnAllocationQuotaReachedError class.

    @param message The message.
*/
+ (FMLiveSwitchStunTurnAllocationQuotaReachedError*) allocationQuotaReachedErrorWithMessage:(NSString*)message;
/**

    Gets the description for this FMLiveSwitchStunError.

*/
- (NSString*) getDescription;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnAllocationQuotaReachedError class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnAllocationQuotaReachedError class.

    @param message The message.
*/
- (instancetype) initWithMessage:(NSString*)message;

@end

/**

    A generic STUN channel-bind message.

*/
@interface FMLiveSwitchStunTurnChannelBindMessage : FMLiveSwitchStunMessage

/**

    Initializes a new instance of the FMLiveSwitchStunTurnChannelBindMessage class.

    @param messageType The type of the message.
    @param transactionId The transaction ID.
*/
+ (FMLiveSwitchStunTurnChannelBindMessage*) channelBindMessageWithMessageType:(FMLiveSwitchStunMessageType)messageType transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnChannelBindMessage class.

    @param messageType The type of the message.
    @param transactionId The transaction ID.
*/
- (instancetype) initWithMessageType:(FMLiveSwitchStunMessageType)messageType transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Gets the method.

*/
- (int) method;

@end

/**

    A STUN channel-bind request.

*/
@interface FMLiveSwitchStunTurnChannelBindRequest : FMLiveSwitchStunTurnChannelBindMessage

/**

    Initializes a new instance of the FMLiveSwitchStunTurnChannelBindRequest class.

*/
+ (FMLiveSwitchStunTurnChannelBindRequest*) channelBindRequest;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnChannelBindRequest class.

*/
- (instancetype) init;

@end

/**

    A STUN channel-bind response.

*/
@interface FMLiveSwitchStunTurnChannelBindResponse : FMLiveSwitchStunTurnChannelBindMessage

/**

    Initializes a new instance of the FMLiveSwitchStunTurnChannelBindResponse class.

    @param transactionId The transaction ID.
    @param success Whether the request was successful.
*/
+ (FMLiveSwitchStunTurnChannelBindResponse*) channelBindResponseWithTransactionId:(FMLiveSwitchDataBuffer*)transactionId success:(bool)success;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnChannelBindResponse class.

    @param transactionId The transaction ID.
    @param success Whether the request was successful.
*/
- (instancetype) initWithTransactionId:(FMLiveSwitchDataBuffer*)transactionId success:(bool)success;

@end

/**

    The CHANNEL-NUMBER attribute contains the number of the channel.

*/
@interface FMLiveSwitchStunTurnChannelNumberAttribute : FMLiveSwitchStunAttribute

/**

    Gets the channel number.

*/
- (int) channelNumber;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnChannelNumberAttribute class.

    @param channelNumber The channel number.
*/
+ (FMLiveSwitchStunTurnChannelNumberAttribute*) channelNumberAttributeWithChannelNumber:(int)channelNumber;
/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Gets the length of the attribute value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnChannelNumberAttribute class.

    @param channelNumber The channel number.
*/
- (instancetype) initWithChannelNumber:(int)channelNumber;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnChannelNumberAttribute class.

    @param buffer The buffer.
    @param offset The offset.
*/
+ (FMLiveSwitchStunTurnChannelNumberAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Sets the channel number.

*/
- (void) setChannelNumber:(int)value;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Gets the value as a byte array.

*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;

@end

/**

    446 Connection Already exists. This indicates that either 1) the server is currently processing a Connect request for this allocation with
    the same XOR-PEER-ADDRESS; OR 2) the server has already successfully processed a Connect request for this allocation with the same XOR-PEER-ADDRESS,
    and the resulting client and peer data connections are either pending or active

*/
@interface FMLiveSwitchStunTurnConnectionAlreadyExistsError : FMLiveSwitchStunError

/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectionAlreadyExistsError class.

*/
+ (FMLiveSwitchStunTurnConnectionAlreadyExistsError*) connectionAlreadyExistsError;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectionAlreadyExistsError class.

    @param message The message.
*/
+ (FMLiveSwitchStunTurnConnectionAlreadyExistsError*) connectionAlreadyExistsErrorWithMessage:(NSString*)message;
/**

    Gets the description for this FMLiveSwitchStunError.

*/
- (NSString*) getDescription;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectionAlreadyExistsError class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectionAlreadyExistsError class.

    @param message The message.
*/
- (instancetype) initWithMessage:(NSString*)message;

@end

/**

    A generic STUN data message.

*/
@interface FMLiveSwitchStunTurnDataMessage : FMLiveSwitchStunMessage

/**

    Initializes a new instance of the FMLiveSwitchStunTurnDataMessage class.

    @param messageType The type of the message.
    @param transactionId The transaction ID.
*/
+ (FMLiveSwitchStunTurnDataMessage*) dataMessageWithMessageType:(FMLiveSwitchStunMessageType)messageType transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnDataMessage class.

    @param messageType The type of the message.
    @param transactionId The transaction ID.
*/
- (instancetype) initWithMessageType:(FMLiveSwitchStunMessageType)messageType transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Gets the method.

*/
- (int) method;

@end

/**

    A STUN connection-attempt indication.

*/
@interface FMLiveSwitchStunTurnConnectionAttemptIndication : FMLiveSwitchStunTurnDataMessage

/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectionAttemptIndication class.

*/
+ (FMLiveSwitchStunTurnConnectionAttemptIndication*) connectionAttemptIndication;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectionAttemptIndication class.

*/
- (instancetype) init;

@end

/**

    A generic STUN connection-attempt message.

*/
@interface FMLiveSwitchStunTurnConnectionAttemptMessage : FMLiveSwitchStunMessage

/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectionAttemptMessage class.

    @param messageType The type of the message.
    @param transactionId The transaction ID.
*/
+ (FMLiveSwitchStunTurnConnectionAttemptMessage*) connectionAttemptMessageWithMessageType:(FMLiveSwitchStunMessageType)messageType transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectionAttemptMessage class.

    @param messageType The type of the message.
    @param transactionId The transaction ID.
*/
- (instancetype) initWithMessageType:(FMLiveSwitchStunMessageType)messageType transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Gets the method.

*/
- (int) method;

@end

/**

    A generic STUN connection-bind message.

*/
@interface FMLiveSwitchStunTurnConnectionBindMessage : FMLiveSwitchStunMessage

/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectionBindMessage class.

    @param messageType The type of the message.
    @param transactionId The transaction ID.
*/
+ (FMLiveSwitchStunTurnConnectionBindMessage*) connectionBindMessageWithMessageType:(FMLiveSwitchStunMessageType)messageType transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectionBindMessage class.

    @param messageType The type of the message.
    @param transactionId The transaction ID.
*/
- (instancetype) initWithMessageType:(FMLiveSwitchStunMessageType)messageType transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Gets the method.

*/
- (int) method;

@end

/**

    A STUN connection-bind request.

*/
@interface FMLiveSwitchStunTurnConnectionBindRequest : FMLiveSwitchStunTurnConnectionBindMessage

/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectionBindRequest class.

*/
+ (FMLiveSwitchStunTurnConnectionBindRequest*) connectionBindRequest;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectionBindRequest class.

*/
- (instancetype) init;

@end

/**

    A STUN connection-bind response.

*/
@interface FMLiveSwitchStunTurnConnectionBindResponse : FMLiveSwitchStunTurnConnectionBindMessage

/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectionBindResponse class.

    @param transactionId The transaction ID.
    @param success Whether the request was successful.
*/
+ (FMLiveSwitchStunTurnConnectionBindResponse*) connectionBindResponseWithTransactionId:(FMLiveSwitchDataBuffer*)transactionId success:(bool)success;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectionBindResponse class.

    @param transactionId The transaction ID.
    @param success Whether the request was successful.
*/
- (instancetype) initWithTransactionId:(FMLiveSwitchDataBuffer*)transactionId success:(bool)success;

@end

/**

    The CONNECTION-ID attribute uniquely identifies a peer data connection.

*/
@interface FMLiveSwitchStunTurnConnectionIdAttribute : FMLiveSwitchStunAttribute

/**

    Gets the connection ID.

*/
- (long long) connectionId;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectionIdAttribute class.

    @param connectionId The connection ID.
*/
+ (FMLiveSwitchStunTurnConnectionIdAttribute*) connectionIdAttributeWithConnectionId:(long long)connectionId;
/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Gets the length of the attribute value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectionIdAttribute class.

    @param connectionId The connection ID.
*/
- (instancetype) initWithConnectionId:(long long)connectionId;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnChannelNumberAttribute class.

    @param buffer The buffer.
    @param offset The offset.
*/
+ (FMLiveSwitchStunTurnConnectionIdAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Sets the connection ID.

*/
- (void) setConnectionId:(long long)value;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Writes the attribute value to a data buffer.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;

@end

/**

    447 Connection Timeout or Failure. This indicates that the TURN server was unable to connect to the peer. The client MAY retry with the same
    XOR-PEER-ADDRESS attribute, but MUST wait at least 10 seconds.

*/
@interface FMLiveSwitchStunTurnConnectionTimeoutOrFailureError : FMLiveSwitchStunError

/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectionTimeoutOrFailureError class.

*/
+ (FMLiveSwitchStunTurnConnectionTimeoutOrFailureError*) connectionTimeoutOrFailureError;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectionTimeoutOrFailureError class.

    @param message The message.
*/
+ (FMLiveSwitchStunTurnConnectionTimeoutOrFailureError*) connectionTimeoutOrFailureErrorWithMessage:(NSString*)message;
/**

    Gets the description for this FMLiveSwitchStunError.

*/
- (NSString*) getDescription;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectionTimeoutOrFailureError class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectionTimeoutOrFailureError class.

    @param message The message.
*/
- (instancetype) initWithMessage:(NSString*)message;

@end

/**

    A generic STUN connect message.

*/
@interface FMLiveSwitchStunTurnConnectMessage : FMLiveSwitchStunMessage

/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectMessage class.

    @param messageType The type of the message.
    @param transactionId The transaction ID.
*/
+ (FMLiveSwitchStunTurnConnectMessage*) connectMessageWithMessageType:(FMLiveSwitchStunMessageType)messageType transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectMessage class.

    @param messageType The type of the message.
    @param transactionId The transaction ID.
*/
- (instancetype) initWithMessageType:(FMLiveSwitchStunMessageType)messageType transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Gets the method.

*/
- (int) method;

@end

/**

    A STUN connect request.

*/
@interface FMLiveSwitchStunTurnConnectRequest : FMLiveSwitchStunTurnConnectMessage

/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectRequest class.

*/
+ (FMLiveSwitchStunTurnConnectRequest*) connectRequest;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectRequest class.

*/
- (instancetype) init;

@end

/**

    A STUN connect response.

*/
@interface FMLiveSwitchStunTurnConnectResponse : FMLiveSwitchStunTurnConnectMessage

/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectResponse class.

    @param transactionId The transaction ID.
    @param success Whether the request was successful.
*/
+ (FMLiveSwitchStunTurnConnectResponse*) connectResponseWithTransactionId:(FMLiveSwitchDataBuffer*)transactionId success:(bool)success;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnConnectResponse class.

    @param transactionId The transaction ID.
    @param success Whether the request was successful.
*/
- (instancetype) initWithTransactionId:(FMLiveSwitchDataBuffer*)transactionId success:(bool)success;

@end

/**

    A generic STUN create-permission message.

*/
@interface FMLiveSwitchStunTurnCreatePermissionMessage : FMLiveSwitchStunMessage

/**

    Initializes a new instance of the FMLiveSwitchStunTurnCreatePermissionMessage class.

    @param messageType The type of the message.
    @param transactionId The transaction ID.
*/
+ (FMLiveSwitchStunTurnCreatePermissionMessage*) createPermissionMessageWithMessageType:(FMLiveSwitchStunMessageType)messageType transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnCreatePermissionMessage class.

    @param messageType The type of the message.
    @param transactionId The transaction ID.
*/
- (instancetype) initWithMessageType:(FMLiveSwitchStunMessageType)messageType transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Gets the method.

*/
- (int) method;

@end

/**

    A STUN create-permission request.

*/
@interface FMLiveSwitchStunTurnCreatePermissionRequest : FMLiveSwitchStunTurnCreatePermissionMessage

/**

    Initializes a new instance of the FMLiveSwitchStunTurnCreatePermissionRequest class.

*/
+ (FMLiveSwitchStunTurnCreatePermissionRequest*) createPermissionRequest;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnCreatePermissionRequest class.

*/
- (instancetype) init;

@end

/**

    A STUN create-permission response.

*/
@interface FMLiveSwitchStunTurnCreatePermissionResponse : FMLiveSwitchStunTurnCreatePermissionMessage

/**

    Initializes a new instance of the FMLiveSwitchStunTurnCreatePermissionResponse class.

    @param transactionId The transaction ID.
    @param success Whether the request was successful.
*/
+ (FMLiveSwitchStunTurnCreatePermissionResponse*) createPermissionResponseWithTransactionId:(FMLiveSwitchDataBuffer*)transactionId success:(bool)success;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnCreatePermissionResponse class.

    @param transactionId The transaction ID.
    @param success Whether the request was successful.
*/
- (instancetype) initWithTransactionId:(FMLiveSwitchDataBuffer*)transactionId success:(bool)success;

@end

/**

    The DATA attribute is present in all Send and Data indications.
    The value portion of this attribute is variable length and consists of
    the application data.

*/
@interface FMLiveSwitchStunTurnDataAttribute : FMLiveSwitchStunAttribute

/**

    Gets the data.

*/
- (FMLiveSwitchDataBuffer*) data;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnDataAttribute class.

    @param data The data.
*/
+ (FMLiveSwitchStunTurnDataAttribute*) dataAttributeWithData:(FMLiveSwitchDataBuffer*)data;
/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Gets the length of the attribute value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnDataAttribute class.

    @param data The data.
*/
- (instancetype) initWithData:(FMLiveSwitchDataBuffer*)data;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnDataAttribute class.

    @param buffer The buffer.
    @param offset The offset.
    @param length The length.
*/
+ (FMLiveSwitchStunTurnDataAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset length:(int)length;
/**

    Sets the data.

*/
- (void) setData:(FMLiveSwitchDataBuffer*)value;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Writes the attribute value to a data buffer.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;

@end

/**

    A STUN data indication.

*/
@interface FMLiveSwitchStunTurnDataIndication : FMLiveSwitchStunTurnDataMessage

/**

    Initializes a new instance of the FMLiveSwitchStunTurnDataIndication class.

*/
+ (FMLiveSwitchStunTurnDataIndication*) dataIndication;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnDataIndication class.

*/
- (instancetype) init;

@end

/**

    This attribute is used by the client to request that the server set
    the DF (Don't Fragment) bit in the IP header when relaying the
    application data onward to the peer.

*/
@interface FMLiveSwitchStunTurnDontFragmentAttribute : FMLiveSwitchStunAttribute

/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnDontFragmentAttribute class.

*/
+ (FMLiveSwitchStunTurnDontFragmentAttribute*) dontFragmentAttribute;
/**

    Gets the length of the attribute value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnDontFragmentAttribute class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnDontFragmentAttribute class.

    @param buffer The buffer.
    @param offset The offset.
*/
+ (FMLiveSwitchStunTurnDontFragmentAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Writes the attribute value to a data buffer.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;

@end

/**

    This attribute allows the client to request that the port in the
    relayed transport address be even, and (optionally) that the server
    reserve the next-higher port number.

*/
@interface FMLiveSwitchStunTurnEvenPortAttribute : FMLiveSwitchStunAttribute

/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnEvenPortAttribute class.

    @param reserveNextHigher Whether the server should reserve the next-higher port number.
*/
+ (FMLiveSwitchStunTurnEvenPortAttribute*) evenPortAttributeWithReserveNextHigher:(bool)reserveNextHigher;
/**

    Gets the length of the attribute value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnEvenPortAttribute class.

    @param reserveNextHigher Whether the server should reserve the next-higher port number.
*/
- (instancetype) initWithReserveNextHigher:(bool)reserveNextHigher;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnEvenPortAttribute class.

    @param buffer The buffer.
    @param offset The offset.
*/
+ (FMLiveSwitchStunTurnEvenPortAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Gets whether the server should reserve the next-higher port number.

*/
- (bool) reserveNextHigher;
/**

    Sets whether the server should reserve the next-higher port number.

*/
- (void) setReserveNextHigher:(bool)value;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Writes the attribute value to a data buffer.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;

@end

/**

    403 Forbidden. RFC 5766. Indicates that the request is valid, but the server is refusing
    to perform it, likely due to administrative restrictions. The client considers the current
    transaction as having failed. The client MAY notify the user or operator and SHOULD NOT retry the
    same request with this server until it believes the problem has been fixed.

*/
@interface FMLiveSwitchStunTurnForbiddenError : FMLiveSwitchStunError

/**

    Initializes a new instance of the FMLiveSwitchStunTurnForbiddenError class.

*/
+ (FMLiveSwitchStunTurnForbiddenError*) forbiddenError;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnForbiddenError class.

    @param message The message.
*/
+ (FMLiveSwitchStunTurnForbiddenError*) forbiddenErrorWithMessage:(NSString*)message;
/**

    Gets the description for this FMLiveSwitchStunError.

*/
- (NSString*) getDescription;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnForbiddenError class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnForbiddenError class.

    @param message The message.
*/
- (instancetype) initWithMessage:(NSString*)message;

@end

/**

    508 Insufficient Capacity. The server has no more relayed transport addresses available, or has none with the requested properties, or the one that was
    reserved is no longer available. The client considers the current operation as having failed. If the client is using either the EVEN-PORT or the
    RESERVATION-TOKEN attribute, then the client MAY choose to remove or modify this attribute and try again immediately.  Otherwise, the client SHOULD
    wait at least 1 minute before trying to create any more allocations on this server.

*/
@interface FMLiveSwitchStunTurnInsufficientCapacityError : FMLiveSwitchStunError

/**

    Gets the description for this FMLiveSwitchStunError.

*/
- (NSString*) getDescription;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnInsufficientCapacityError class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnInsufficientCapacityError class.

    @param message The message.
*/
- (instancetype) initWithMessage:(NSString*)message;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnInsufficientCapacityError class.

*/
+ (FMLiveSwitchStunTurnInsufficientCapacityError*) insufficientCapacityError;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnInsufficientCapacityError class.

    @param message The message.
*/
+ (FMLiveSwitchStunTurnInsufficientCapacityError*) insufficientCapacityErrorWithMessage:(NSString*)message;

@end

/**

    The LIFETIME attribute represents the duration for which the server
    will maintain an allocation in the absence of a refresh (in seconds).

*/
@interface FMLiveSwitchStunTurnLifetimeAttribute : FMLiveSwitchStunAttribute

/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Gets the length of the attribute value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnLifetimeAttribute class.

    @param lifetime The allocation duration in seconds.
*/
- (instancetype) initWithLifetime:(long long)lifetime;
/**

    Gets the allocation duration in seconds.

*/
- (long long) lifetime;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnLifetimeAttribute class.

    @param lifetime The allocation duration in seconds.
*/
+ (FMLiveSwitchStunTurnLifetimeAttribute*) lifetimeAttributeWithLifetime:(long long)lifetime;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnLifetimeAttribute class.

    @param buffer The buffer.
    @param offset The offset.
*/
+ (FMLiveSwitchStunTurnLifetimeAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Sets the allocation duration in seconds.

*/
- (void) setLifetime:(long long)value;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Writes the attribute value to a data buffer.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;

@end

/**

    405 Mobility Forbidden. RFC 8016. Indicates that the request is valid, but the server is refusing to perform it,
    likely due to administrative restrictions. The client considers the current transaction as having failed.
    The client can notify the user or operator.  The client SHOULD NOT retry sending the Allocate request
    containing the MOBILITY-TICKET with this server until it believes the problem has been fixed.

*/
@interface FMLiveSwitchStunTurnMobilityForbiddenError : FMLiveSwitchStunError

/**

    Gets the description for this FMLiveSwitchStunError.

*/
- (NSString*) getDescription;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnMobilityForbiddenError class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnMobilityForbiddenError class.

    @param message The message.
*/
- (instancetype) initWithMessage:(NSString*)message;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnMobilityForbiddenError class.

*/
+ (FMLiveSwitchStunTurnMobilityForbiddenError*) mobilityForbiddenError;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnMobilityForbiddenError class.

    @param message The message.
*/
+ (FMLiveSwitchStunTurnMobilityForbiddenError*) mobilityForbiddenErrorWithMessage:(NSString*)message;

@end

/**

    443 Peer Address Family Mismatch. A peer address was of a different address family than that of the relayed transport address of the allocation.

*/
@interface FMLiveSwitchStunTurnPeerAddressFamilyMismatchError : FMLiveSwitchStunError

/**

    Gets the description for this FMLiveSwitchStunError.

*/
- (NSString*) getDescription;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnPeerAddressFamilyMismatchError class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnPeerAddressFamilyMismatchError class.

    @param message The message.
*/
- (instancetype) initWithMessage:(NSString*)message;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnPeerAddressFamilyMismatchError class.

*/
+ (FMLiveSwitchStunTurnPeerAddressFamilyMismatchError*) peerAddressFamilyMismatchError;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnPeerAddressFamilyMismatchError class.

    @param message The message.
*/
+ (FMLiveSwitchStunTurnPeerAddressFamilyMismatchError*) peerAddressFamilyMismatchErrorWithMessage:(NSString*)message;

@end

/**

    A generic STUN refresh message.

*/
@interface FMLiveSwitchStunTurnRefreshMessage : FMLiveSwitchStunMessage

/**

    Initializes a new instance of the FMLiveSwitchStunTurnRefreshMessage class.

    @param messageType The type of the message.
    @param transactionId The transaction ID.
*/
- (instancetype) initWithMessageType:(FMLiveSwitchStunMessageType)messageType transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Gets the method.

*/
- (int) method;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnRefreshMessage class.

    @param messageType The type of the message.
    @param transactionId The transaction ID.
*/
+ (FMLiveSwitchStunTurnRefreshMessage*) refreshMessageWithMessageType:(FMLiveSwitchStunMessageType)messageType transactionId:(FMLiveSwitchDataBuffer*)transactionId;

@end

/**

    A STUN refresh request.

*/
@interface FMLiveSwitchStunTurnRefreshRequest : FMLiveSwitchStunTurnRefreshMessage

/**

    Initializes a new instance of the FMLiveSwitchStunTurnRefreshRequest class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnRefreshRequest class.

*/
+ (FMLiveSwitchStunTurnRefreshRequest*) refreshRequest;

@end

/**

    A STUN refresh response.

*/
@interface FMLiveSwitchStunTurnRefreshResponse : FMLiveSwitchStunTurnRefreshMessage

/**

    Initializes a new instance of the FMLiveSwitchStunTurnRefreshResponse class.

    @param transactionId The transaction ID.
    @param success Whether the request was successful.
*/
- (instancetype) initWithTransactionId:(FMLiveSwitchDataBuffer*)transactionId success:(bool)success;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnRefreshResponse class.

    @param transactionId The transaction ID.
    @param success Whether the request was successful.
*/
+ (FMLiveSwitchStunTurnRefreshResponse*) refreshResponseWithTransactionId:(FMLiveSwitchDataBuffer*)transactionId success:(bool)success;

@end

/**

    The REQUESTED-ADDRESS-FAMILY attribute is used by clients to request
    the allocation of a specific address type from a server.

*/
@interface FMLiveSwitchStunTurnRequestedAddressFamilyAttribute : FMLiveSwitchStunAttribute

/**

    Gets the address family.

*/
- (int) addressFamily;
/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Gets the length of the attribute value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnRequestedAddressFamilyAttribute class.

    @param addressFamily The address family.
*/
- (instancetype) initWithAddressFamily:(int)addressFamily;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnRequestedAddressFamilyAttribute class.

    @param buffer The buffer.
    @param offset The offset.
*/
+ (FMLiveSwitchStunTurnRequestedAddressFamilyAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnRequestedAddressFamilyAttribute class.

    @param addressFamily The address family.
*/
+ (FMLiveSwitchStunTurnRequestedAddressFamilyAttribute*) requestedAddressFamilyAttributeWithAddressFamily:(int)addressFamily;
/**

    Sets the address family.

*/
- (void) setAddressFamily:(int)value;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Writes the attribute value to a data buffer.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;

@end

/**

    This attribute is used by the client to request a specific transport
    protocol for the allocated transport address.

*/
@interface FMLiveSwitchStunTurnRequestedTransportAttribute : FMLiveSwitchStunAttribute

/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Gets the length of the attribute value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnRequestedTransportAttribute class.

*/
- (instancetype) initWithProtocol:(int)protocol;
/**

    Gets the transport protocol.

*/
- (int) protocol;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnRequestedTransportAttribute class.

    @param buffer The buffer.
    @param offset The offset.
*/
+ (FMLiveSwitchStunTurnRequestedTransportAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnRequestedTransportAttribute class.

*/
+ (FMLiveSwitchStunTurnRequestedTransportAttribute*) requestedTransportAttributeWithProtocol:(int)protocol;
/**

    Sets the transport protocol.

*/
- (void) setProtocol:(int)value;
/**

    Gets the TCP transport protocol.

*/
+ (int) tcpProtocol;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Gets the UDP transport protocol.

*/
+ (int) udpProtocol;
/**

    Writes the attribute value to a data buffer.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;

@end

/**

    The RESERVATION-TOKEN attribute contains a token that uniquely
    identifies a relayed transport address being held in reserve by the
    server.

*/
@interface FMLiveSwitchStunTurnReservationTokenAttribute : FMLiveSwitchStunAttribute

/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Gets the length of the attribute value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnReservationTokenAttribute class.

    @param token The reservation token.
*/
- (instancetype) initWithToken:(FMLiveSwitchDataBuffer*)token;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnReservationTokenAttribute class.

    @param buffer The buffer.
    @param offset The offset.
*/
+ (FMLiveSwitchStunTurnReservationTokenAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnReservationTokenAttribute class.

    @param token The reservation token.
*/
+ (FMLiveSwitchStunTurnReservationTokenAttribute*) reservationTokenAttributeWithToken:(FMLiveSwitchDataBuffer*)token;
/**

    Sets the reservation token.

*/
- (void) setToken:(FMLiveSwitchDataBuffer*)value;
/**

    Gets the reservation token.

*/
- (FMLiveSwitchDataBuffer*) token;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Writes the attribute value to a data buffer.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;

@end

/**

    A generic STUN send message.

*/
@interface FMLiveSwitchStunTurnSendMessage : FMLiveSwitchStunMessage

/**

    Initializes a new instance of the FMLiveSwitchStunTurnSendMessage class.

    @param messageType The type of the message.
    @param transactionId The transaction ID.
*/
- (instancetype) initWithMessageType:(FMLiveSwitchStunMessageType)messageType transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Gets the method.

*/
- (int) method;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnSendMessage class.

    @param messageType The type of the message.
    @param transactionId The transaction ID.
*/
+ (FMLiveSwitchStunTurnSendMessage*) sendMessageWithMessageType:(FMLiveSwitchStunMessageType)messageType transactionId:(FMLiveSwitchDataBuffer*)transactionId;

@end

/**

    A STUN send indication.

*/
@interface FMLiveSwitchStunTurnSendIndication : FMLiveSwitchStunTurnSendMessage

/**

    Initializes a new instance of the FMLiveSwitchStunTurnSendIndication class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnSendIndication class.

*/
+ (FMLiveSwitchStunTurnSendIndication*) sendIndication;

@end

/**

    442 Unsupported Transport Protocol. The client should not receive this error in response to a request for a UDP allocation. The
    client MAY notify the user or operator and SHOULD NOT reattempt the request with this server until it believes the problem has
    been fixed.

*/
@interface FMLiveSwitchStunTurnUnsupportedTransportProtocolError : FMLiveSwitchStunError

/**

    Gets the description for this FMLiveSwitchStunError.

*/
- (NSString*) getDescription;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnUnsupportedTransportProtocolError class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnUnsupportedTransportProtocolError class.

    @param message The message.
*/
- (instancetype) initWithMessage:(NSString*)message;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnUnsupportedTransportProtocolError class.

*/
+ (FMLiveSwitchStunTurnUnsupportedTransportProtocolError*) unsupportedTransportProtocolError;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnUnsupportedTransportProtocolError class.

    @param message The message.
*/
+ (FMLiveSwitchStunTurnUnsupportedTransportProtocolError*) unsupportedTransportProtocolErrorWithMessage:(NSString*)message;

@end

/**

    441 Wrong Credentials. RFC 5766. Indicates that wrong credential were used by the client. The client should not receive this error
    in response to an Allocate request.  The client MAY notify the user or operator and SHOULD NOT retry the same request with this server
    until it believes the problem has been fixed.

*/
@interface FMLiveSwitchStunTurnWrongCredentialsError : FMLiveSwitchStunError

/**

    Gets the description for this FMLiveSwitchStunError.

*/
- (NSString*) getDescription;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnWrongCredentialsError class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnWrongCredentialsError class.

    @param message The message.
*/
- (instancetype) initWithMessage:(NSString*)message;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnWrongCredentialsError class.

*/
+ (FMLiveSwitchStunTurnWrongCredentialsError*) wrongCredentialsError;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnWrongCredentialsError class.

    @param message The message.
*/
+ (FMLiveSwitchStunTurnWrongCredentialsError*) wrongCredentialsErrorWithMessage:(NSString*)message;

@end

/**

    The XOR-PEER-ADDRESS specifies the address and port of the peer as
    seen from the TURN server.

*/
@interface FMLiveSwitchStunTurnXorPeerAddressAttribute : FMLiveSwitchStunAttribute

/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Gets the length of the value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnXorPeerAddressAttribute class.

    @param ipAddress The IP address.
    @param port The port.
    @param transactionId The transaction ID.
*/
- (instancetype) initWithIPAddress:(NSString*)ipAddress port:(int)port transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Gets the IP address.

*/
- (NSString*) ipAddress;
/**

    Gets the port.

*/
- (int) port;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnXorPeerAddressAttribute class.

    @param buffer The buffer.
    @param offset The offset.
    @param transactionId The transaction ID.
*/
+ (FMLiveSwitchStunTurnXorPeerAddressAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Sets the IP address.

*/
- (void) setIPAddress:(NSString*)value;
/**

    Sets the port.

*/
- (void) setPort:(int)value;
/**

    Gets the transaction ID.

*/
- (FMLiveSwitchDataBuffer*) transactionId;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Writes the value to.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnXorPeerAddressAttribute class.

    @param ipAddress The IP address.
    @param port The port.
    @param transactionId The transaction ID.
*/
+ (FMLiveSwitchStunTurnXorPeerAddressAttribute*) xorPeerAddressAttributeWithIPAddress:(NSString*)ipAddress port:(int)port transactionId:(FMLiveSwitchDataBuffer*)transactionId;

@end

/**

    The XOR-RELAYED-ADDRESS is present in Allocate responses.  It
    specifies the address and port that the server allocated to the
    client.

*/
@interface FMLiveSwitchStunTurnXorRelayedAddressAttribute : FMLiveSwitchStunAttribute

/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Gets the length of the value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnXorRelayedAddressAttribute class.

    @param ipAddress The IP address.
    @param port The port.
    @param transactionId The transaction ID.
*/
- (instancetype) initWithIPAddress:(NSString*)ipAddress port:(int)port transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Gets the IP address.

*/
- (NSString*) ipAddress;
/**

    Gets the port.

*/
- (int) port;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnXorRelayedAddressAttribute class.

    @param buffer The buffer.
    @param offset The offset.
    @param transactionId The transaction ID.
*/
+ (FMLiveSwitchStunTurnXorRelayedAddressAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Sets the IP address.

*/
- (void) setIPAddress:(NSString*)value;
/**

    Sets the port.

*/
- (void) setPort:(int)value;
/**

    Gets the transaction ID.

*/
- (FMLiveSwitchDataBuffer*) transactionId;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Writes the value to.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Initializes a new instance of the FMLiveSwitchStunTurnXorRelayedAddressAttribute class.

    @param ipAddress The IP address.
    @param port The port.
    @param transactionId The transaction ID.
*/
+ (FMLiveSwitchStunTurnXorRelayedAddressAttribute*) xorRelayedAddressAttributeWithIPAddress:(NSString*)ipAddress port:(int)port transactionId:(FMLiveSwitchDataBuffer*)transactionId;

@end

/**

    401  Unauthorized. RFC5389. Indicates that the request did not contain the correct
    credentials to proceed.  The client should retry the request with proper credentials.

*/
@interface FMLiveSwitchStunUnauthorizedStunError : FMLiveSwitchStunError

/**

    Gets the description for this FMLiveSwitchStunError.

*/
- (NSString*) getDescription;
/**

    Initializes a new instance of the FMLiveSwitchStunUnauthorizedStunError class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchStunUnauthorizedStunError class.

    @param message The message.
*/
- (instancetype) initWithMessage:(NSString*)message;
/**

    Initializes a new instance of the FMLiveSwitchStunUnauthorizedStunError class.

    @param nonce The nonce attribute.
    @param realm The realm attribute.
    @param message The message
*/
- (instancetype) initWithNonce:(FMLiveSwitchStunNonceAttribute*)nonce realm:(FMLiveSwitchStunRealmAttribute*)realm message:(NSString*)message;
/**

    Gets the nonce attribute.

*/
- (FMLiveSwitchStunNonceAttribute*) nonce;
/**

    Gets the realm attribute.

*/
- (FMLiveSwitchStunRealmAttribute*) realm;
/**

    Initializes a new instance of the FMLiveSwitchStunUnauthorizedStunError class.

*/
+ (FMLiveSwitchStunUnauthorizedStunError*) unauthorizedStunError;
/**

    Initializes a new instance of the FMLiveSwitchStunUnauthorizedStunError class.

    @param message The message.
*/
+ (FMLiveSwitchStunUnauthorizedStunError*) unauthorizedStunErrorWithMessage:(NSString*)message;
/**

    Initializes a new instance of the FMLiveSwitchStunUnauthorizedStunError class.

    @param nonce The nonce attribute.
    @param realm The realm attribute.
    @param message The message
*/
+ (FMLiveSwitchStunUnauthorizedStunError*) unauthorizedStunErrorWithNonce:(FMLiveSwitchStunNonceAttribute*)nonce realm:(FMLiveSwitchStunRealmAttribute*)realm message:(NSString*)message;

@end

/**

    420  Unknown Attribute. RFC5389. Indicates that the server received a STUN packet containing a comprehension-required
    attribute that it did not understand. The server MUST put this unknown attribute in the UNKNOWN-ATTRIBUTE
    attribute of its error response.

*/
@interface FMLiveSwitchStunUnknownAttributeError : FMLiveSwitchStunError

/**

    Gets the description for this FMLiveSwitchStunError.

*/
- (NSString*) getDescription;
/**

    Initializes a new instance of the FMLiveSwitchStunUnknownAttributeError class.

    @param message The message.
    @param unknownAttributes The unknown attributes attribute.
*/
- (instancetype) initWithMessage:(NSString*)message unknownAttributes:(FMLiveSwitchStunUnknownAttributesAttribute*)unknownAttributes;
/**

    Initializes a new instance of the FMLiveSwitchStunUnknownAttributeError class.

    @param unknownAttributes The unknown attributes attribute.
*/
- (instancetype) initWithUnknownAttributes:(FMLiveSwitchStunUnknownAttributesAttribute*)unknownAttributes;
/**

    Initializes a new instance of the FMLiveSwitchStunUnknownAttributeError class.

    @param message The message.
    @param unknownAttributes The unknown attributes attribute.
*/
+ (FMLiveSwitchStunUnknownAttributeError*) unknownAttributeErrorWithMessage:(NSString*)message unknownAttributes:(FMLiveSwitchStunUnknownAttributesAttribute*)unknownAttributes;
/**

    Initializes a new instance of the FMLiveSwitchStunUnknownAttributeError class.

    @param unknownAttributes The unknown attributes attribute.
*/
+ (FMLiveSwitchStunUnknownAttributeError*) unknownAttributeErrorWithUnknownAttributes:(FMLiveSwitchStunUnknownAttributesAttribute*)unknownAttributes;
/**

    Gets the unknown attributes attribute.

*/
- (FMLiveSwitchStunUnknownAttributesAttribute*) unknownAttributes;

@end

/**

    The UNKNOWN-ATTRIBUTES attribute is present only in an error response
    when the response code in the ERROR-CODE attribute is 420.

*/
@interface FMLiveSwitchStunUnknownAttributesAttribute : FMLiveSwitchStunAttribute

/**

    Gets the length of the attribute value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunUnknownAttributesAttribute class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchStunUnknownAttributesAttribute class.

    @param buffer The buffer.
    @param offset The offset.
    @param length The length.
*/
+ (FMLiveSwitchStunUnknownAttributesAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset length:(int)length;
/**

    Sets the array of unknown attribute types.

*/
- (void) setTypes:(NSMutableArray*)value;
/**

    Gets the array of unknown attribute types.

*/
- (NSMutableArray*) types;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Initializes a new instance of the FMLiveSwitchStunUnknownAttributesAttribute class.

*/
+ (FMLiveSwitchStunUnknownAttributesAttribute*) unknownAttributesAttribute;
/**

    Writes the attribute value to a data buffer.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;

@end

/**

    The USERNAME attribute is used for message integrity.  It identifies
    the username and password combination used in the message-integrity
    check.

*/
@interface FMLiveSwitchStunUsernameAttribute : FMLiveSwitchStunAttribute

/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Gets the length of the attribute value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunUsernameAttribute class.

    @param value The username value.
*/
- (instancetype) initWithValue:(NSString*)value;
/**

    Initializes a new instance of the FMLiveSwitchStunUsernameAttribute class.

    @param buffer The buffer.
    @param offset The offset.
    @param length The length.
*/
+ (FMLiveSwitchStunUsernameAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset length:(int)length;
/**

    Sets the username value.

*/
- (void) setValue:(NSString*)value;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Initializes a new instance of the FMLiveSwitchStunUsernameAttribute class.

    @param value The username value.
*/
+ (FMLiveSwitchStunUsernameAttribute*) usernameAttribute:(NSString*)value;
/**

    Gets the username value.

*/
- (NSString*) value;
/**

    Writes the attribute value to a data buffer.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;

@end

/**

    STUN-wide methods.

*/
@interface FMLiveSwitchStunUtility : NSObject

/**

    Creates a long term key from the given username, realm, and password by calculating
    the MD5 hash of their values concatenated as "username:realm:password".

    @param username The username.
    @param realm The realm.
    @param password The password.
*/
+ (NSMutableData*) createLongTermKeyWithUsername:(NSString*)username realm:(NSString*)realm password:(NSString*)password;
/**

    Creates a short term key from the given password by encoding it as a UTF-8 byte array.

    @param password The password.
*/
+ (NSMutableData*) createShortTermKeyWithPassword:(NSString*)password;

@end

/**

    The XOR-MAPPED-ADDRESS attribute is identical to the MAPPED-ADDRESS
    attribute, except that the reflexive transport address is obfuscated
    through the XOR function.

*/
@interface FMLiveSwitchStunXorMappedAddressAttribute : FMLiveSwitchStunAttribute

/**

    Returns a string that represents this instance.

    @return 
            A string that represents this instance.
            
*/
- (NSString*) description;
/**

    Gets the length of the value.

*/
- (int) getValueLength;
/**

    Initializes a new instance of the FMLiveSwitchStunXorMappedAddressAttribute class.

    @param ipAddress The IP address.
    @param port The port.
    @param transactionId The transaction ID.
*/
- (instancetype) initWithIPAddress:(NSString*)ipAddress port:(int)port transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Gets the IP address.

*/
- (NSString*) ipAddress;
/**

    Gets the port.

*/
- (int) port;
/**

    Initializes a new instance of the FMLiveSwitchStunXorMappedAddressAttribute class.

    @param buffer The buffer.
    @param offset The offset.
    @param transactionId The transaction ID.
*/
+ (FMLiveSwitchStunXorMappedAddressAttribute*) readValueFromWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset transactionId:(FMLiveSwitchDataBuffer*)transactionId;
/**

    Sets the IP address.

*/
- (void) setIPAddress:(NSString*)value;
/**

    Sets the port.

*/
- (void) setPort:(int)value;
/**

    Gets the transaction ID.

*/
- (FMLiveSwitchDataBuffer*) transactionId;
/**

    Gets the type value.

*/
- (int) typeValue;
/**

    Writes the value to.

    @param buffer The buffer.
    @param offset The offset.
*/
- (void) writeValueToWithBuffer:(FMLiveSwitchDataBuffer*)buffer offset:(int)offset;
/**

    Initializes a new instance of the FMLiveSwitchStunXorMappedAddressAttribute class.

    @param ipAddress The IP address.
    @param port The port.
    @param transactionId The transaction ID.
*/
+ (FMLiveSwitchStunXorMappedAddressAttribute*) xorMappedAddressAttributeWithIPAddress:(NSString*)ipAddress port:(int)port transactionId:(FMLiveSwitchDataBuffer*)transactionId;

@end

/**

    A channel.

*/
@interface FMLiveSwitchChannel : FMLiveSwitchDynamic

/**

    Adds a handler that is raised when the client's channel claim has been updated.
    Parameters:
    - oldConnectionInfo - the old channel claim
    - newConnectionInfo - the new channel claim

*/
- (void) addOnClaimUpdate:(FMLiveSwitchAction2<FMLiveSwitchChannelClaim*,FMLiveSwitchChannelClaim*>*)value;
/**

    Adds a handler that is raised when the client's channel claim has been updated.
    Parameters:
    - oldConnectionInfo - the old channel claim
    - newConnectionInfo - the new channel claim

*/
- (void (^)(void(^)(FMLiveSwitchChannelClaim*, FMLiveSwitchChannelClaim*))) addOnClaimUpdateWithBlock;
/**

    Adds a handler that is raised when the client's channel claim has been updated.
    Parameters:
    - oldConnectionInfo - the old channel claim
    - newConnectionInfo - the new channel claim

*/
- (void) addOnClaimUpdateWithBlock:(void(^)(FMLiveSwitchChannelClaim*, FMLiveSwitchChannelClaim*))valueBlock;
/**

    Adds a handler that is raised when a channel/client-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void) addOnClientMessage:(FMLiveSwitchAction2<FMLiveSwitchClientInfo*,NSString*>*)value;
/**

    Adds a handler that is raised when a channel/client-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void (^)(void(^)(FMLiveSwitchClientInfo*, NSString*))) addOnClientMessageWithBlock;
/**

    Adds a handler that is raised when a channel/client-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void) addOnClientMessageWithBlock:(void(^)(FMLiveSwitchClientInfo*, NSString*))valueBlock;
/**

    Adds a handler that is raised when a channel/device-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void) addOnDeviceMessage:(FMLiveSwitchAction2<FMLiveSwitchClientInfo*,NSString*>*)value;
/**

    Adds a handler that is raised when a channel/device-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void (^)(void(^)(FMLiveSwitchClientInfo*, NSString*))) addOnDeviceMessageWithBlock;
/**

    Adds a handler that is raised when a channel/device-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void) addOnDeviceMessageWithBlock:(void(^)(FMLiveSwitchClientInfo*, NSString*))valueBlock;
/**

    Adds a handler that is raised when the client is kicked from the channel.

*/
- (void) addOnKick:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when a new MCU video layout is received from the server.
    Parameters:
    - videoLayout - the new MCU video layout

*/
- (void) addOnMcuVideoLayout:(FMLiveSwitchAction1<FMLiveSwitchVideoLayout*>*)value;
/**

    Adds a handler that is raised when a new MCU video layout is received from the server.
    Parameters:
    - videoLayout - the new MCU video layout

*/
- (void (^)(void(^)(FMLiveSwitchVideoLayout*))) addOnMcuVideoLayoutWithBlock;
/**

    Adds a handler that is raised when a new MCU video layout is received from the server.
    Parameters:
    - videoLayout - the new MCU video layout

*/
- (void) addOnMcuVideoLayoutWithBlock:(void(^)(FMLiveSwitchVideoLayout*))valueBlock;
/**

    Adds a handler that is raised when a channel-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void) addOnMessage:(FMLiveSwitchAction2<FMLiveSwitchClientInfo*,NSString*>*)value;
/**

    Adds a handler that is raised when a channel-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void (^)(void(^)(FMLiveSwitchClientInfo*, NSString*))) addOnMessageWithBlock;
/**

    Adds a handler that is raised when a channel-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void) addOnMessageWithBlock:(void(^)(FMLiveSwitchClientInfo*, NSString*))valueBlock;
/**

    Adds a handler that is raised when a remote client wants to open a peer connection.
    Parameters:
    - peerConnectionOffer - the peer connection offer

*/
- (void) addOnPeerConnectionOffer:(FMLiveSwitchAction1<FMLiveSwitchPeerConnectionOffer*>*)value;
/**

    Adds a handler that is raised when a remote client wants to open a peer connection.
    Parameters:
    - peerConnectionOffer - the peer connection offer

*/
- (void (^)(void(^)(FMLiveSwitchPeerConnectionOffer*))) addOnPeerConnectionOfferWithBlock;
/**

    Adds a handler that is raised when a remote client wants to open a peer connection.
    Parameters:
    - peerConnectionOffer - the peer connection offer

*/
- (void) addOnPeerConnectionOfferWithBlock:(void(^)(FMLiveSwitchPeerConnectionOffer*))valueBlock;
/**

    Adds a handler that is raised when a remote client joins this channel.
    Parameters:
    - clientInfo - the remote client information

*/
- (void) addOnRemoteClientJoin:(FMLiveSwitchAction1<FMLiveSwitchClientInfo*>*)value;
/**

    Adds a handler that is raised when a remote client joins this channel.
    Parameters:
    - clientInfo - the remote client information

*/
- (void (^)(void(^)(FMLiveSwitchClientInfo*))) addOnRemoteClientJoinWithBlock;
/**

    Adds a handler that is raised when a remote client joins this channel.
    Parameters:
    - clientInfo - the remote client information

*/
- (void) addOnRemoteClientJoinWithBlock:(void(^)(FMLiveSwitchClientInfo*))valueBlock;
/**

    Adds a handler that is raised when a remote client leaves this channel.
    Parameters:
    - clientInfo - the remote client information

*/
- (void) addOnRemoteClientLeave:(FMLiveSwitchAction1<FMLiveSwitchClientInfo*>*)value;
/**

    Adds a handler that is raised when a remote client leaves this channel.
    Parameters:
    - clientInfo - the remote client information

*/
- (void (^)(void(^)(FMLiveSwitchClientInfo*))) addOnRemoteClientLeaveWithBlock;
/**

    Adds a handler that is raised when a remote client leaves this channel.
    Parameters:
    - clientInfo - the remote client information

*/
- (void) addOnRemoteClientLeaveWithBlock:(void(^)(FMLiveSwitchClientInfo*))valueBlock;
/**

    Adds a handler that is raised when a remote client updates their config.
    Parameters:
    - oldClientInfo - the old remote client information
    - newClientInfo - the new remote client information

*/
- (void) addOnRemoteClientUpdate:(FMLiveSwitchAction2<FMLiveSwitchClientInfo*,FMLiveSwitchClientInfo*>*)value;
/**

    Adds a handler that is raised when a remote client updates their config.
    Parameters:
    - oldClientInfo - the old remote client information
    - newClientInfo - the new remote client information

*/
- (void (^)(void(^)(FMLiveSwitchClientInfo*, FMLiveSwitchClientInfo*))) addOnRemoteClientUpdateWithBlock;
/**

    Adds a handler that is raised when a remote client updates their config.
    Parameters:
    - oldClientInfo - the old remote client information
    - newClientInfo - the new remote client information

*/
- (void) addOnRemoteClientUpdateWithBlock:(void(^)(FMLiveSwitchClientInfo*, FMLiveSwitchClientInfo*))valueBlock;
/**

    Adds a handler that is raised when a remote upstream (SFU or MCU)
    connection is closed by a remote client.
    Parameters:
    - connectionInfo - the remote connection information

*/
- (void) addOnRemoteUpstreamConnectionClose:(FMLiveSwitchAction1<FMLiveSwitchConnectionInfo*>*)value;
/**

    Adds a handler that is raised when a remote upstream (SFU or MCU)
    connection is closed by a remote client.
    Parameters:
    - connectionInfo - the remote connection information

*/
- (void (^)(void(^)(FMLiveSwitchConnectionInfo*))) addOnRemoteUpstreamConnectionCloseWithBlock;
/**

    Adds a handler that is raised when a remote upstream (SFU or MCU)
    connection is closed by a remote client.
    Parameters:
    - connectionInfo - the remote connection information

*/
- (void) addOnRemoteUpstreamConnectionCloseWithBlock:(void(^)(FMLiveSwitchConnectionInfo*))valueBlock;
/**

    Adds a handler that is raised when a remote upstream (SFU or MCU)
    connection is opened by a remote client.
    Parameters:
    - connectionInfo - the remote connection information

*/
- (void) addOnRemoteUpstreamConnectionOpen:(FMLiveSwitchAction1<FMLiveSwitchConnectionInfo*>*)value;
/**

    Adds a handler that is raised when a remote upstream (SFU or MCU)
    connection is opened by a remote client.
    Parameters:
    - connectionInfo - the remote connection information

*/
- (void (^)(void(^)(FMLiveSwitchConnectionInfo*))) addOnRemoteUpstreamConnectionOpenWithBlock;
/**

    Adds a handler that is raised when a remote upstream (SFU or MCU)
    connection is opened by a remote client.
    Parameters:
    - connectionInfo - the remote connection information

*/
- (void) addOnRemoteUpstreamConnectionOpenWithBlock:(void(^)(FMLiveSwitchConnectionInfo*))valueBlock;
/**

    Adds a handler that is raised when a remote upstream (SFU or MCU)
    connection is updated by a remote client.
    Parameters:
    - oldConnectionInfo - the old remote connection information
    - newConnectionInfo - the new remote connection information

*/
- (void) addOnRemoteUpstreamConnectionUpdate:(FMLiveSwitchAction2<FMLiveSwitchConnectionInfo*,FMLiveSwitchConnectionInfo*>*)value;
/**

    Adds a handler that is raised when a remote upstream (SFU or MCU)
    connection is updated by a remote client.
    Parameters:
    - oldConnectionInfo - the old remote connection information
    - newConnectionInfo - the new remote connection information

*/
- (void (^)(void(^)(FMLiveSwitchConnectionInfo*, FMLiveSwitchConnectionInfo*))) addOnRemoteUpstreamConnectionUpdateWithBlock;
/**

    Adds a handler that is raised when a remote upstream (SFU or MCU)
    connection is updated by a remote client.
    Parameters:
    - oldConnectionInfo - the old remote connection information
    - newConnectionInfo - the new remote connection information

*/
- (void) addOnRemoteUpstreamConnectionUpdateWithBlock:(void(^)(FMLiveSwitchConnectionInfo*, FMLiveSwitchConnectionInfo*))valueBlock;
/**

    Adds a handler that is raised when a channel/user-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void) addOnUserMessage:(FMLiveSwitchAction2<FMLiveSwitchClientInfo*,NSString*>*)value;
/**

    Adds a handler that is raised when a channel/user-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void (^)(void(^)(FMLiveSwitchClientInfo*, NSString*))) addOnUserMessageWithBlock;
/**

    Adds a handler that is raised when a channel/user-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void) addOnUserMessageWithBlock:(void(^)(FMLiveSwitchClientInfo*, NSString*))valueBlock;
/**

    Gets the application identifier.

*/
- (NSString*) applicationId;
/**

    Gets the claim.

*/
- (FMLiveSwitchChannelClaim*) claim;
/**

    Gets the client identifier.

*/
- (NSString*) clientId;
/**

    Gets the client roles.

*/
- (NSMutableArray*) clientRoles;
/**

    Gets the client tag.

*/
- (NSString*) clientTag;
/**

    Closes all active connections.

*/
- (FMLiveSwitchFuture<id>*) closeAll;
/**

    Gets the active connections.

*/
- (FMLiveSwitchManagedConnectionCollection*) connections;
/**

    Creates an audio-only MCU connection.

    @param audioStream The audio stream.
*/
- (FMLiveSwitchMcuConnection*) createMcuConnectionWithAudioStream:(FMLiveSwitchAudioStream*)audioStream;
/**

    Creates an audio/data MCU connection.

    @param audioStream The audio stream.
    @param dataStream The data stream.
*/
- (FMLiveSwitchMcuConnection*) createMcuConnectionWithAudioStream:(FMLiveSwitchAudioStream*)audioStream dataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Creates an audio/data MCU connection with a specific media
    identifier that can be targeted by SFU downstream connections.
    The media identifer is only relevant if this connection will send media.

    @param audioStream The audio stream.
    @param dataStream The data stream.
    @param mediaId The media identifier, unique to this channel, for persistent SFU downstream connections.
*/
- (FMLiveSwitchMcuConnection*) createMcuConnectionWithAudioStream:(FMLiveSwitchAudioStream*)audioStream dataStream:(FMLiveSwitchDataStream*)dataStream mediaId:(NSString*)mediaId;
/**

    Creates an audio-only MCU connection with a specific media
    identifier that can be targeted by SFU downstream connections.
    The media identifer is only relevant if this connection will send media.

    @param audioStream The audio stream.
    @param mediaId The media identifier, unique to this channel, for persistent SFU downstream connections.
*/
- (FMLiveSwitchMcuConnection*) createMcuConnectionWithAudioStream:(FMLiveSwitchAudioStream*)audioStream mediaId:(NSString*)mediaId;
/**

    Creates an audio/video MCU connection.

    @param audioStream The audio stream.
    @param videoStream The video stream.
*/
- (FMLiveSwitchMcuConnection*) createMcuConnectionWithAudioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream;
/**

    Creates an audio/video/data MCU connection.

    @param audioStream The audio stream.
    @param videoStream The video stream.
    @param dataStream The data stream.
*/
- (FMLiveSwitchMcuConnection*) createMcuConnectionWithAudioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream dataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Creates an audio/video MCU connection with a specific media
    identifier that can be targeted by SFU downstream connections.
    The media identifer is only relevant if this connection will send media.

    @param audioStream The audio stream.
    @param videoStream The video stream.
    @param dataStream The data stream.
    @param mediaId The media identifier, unique to this channel, for persistent SFU downstream connections.
*/
- (FMLiveSwitchMcuConnection*) createMcuConnectionWithAudioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream dataStream:(FMLiveSwitchDataStream*)dataStream mediaId:(NSString*)mediaId;
/**

    Creates an audio/video MCU connection with a specific media
    identifier that can be targeted by SFU downstream connections.
    The media identifer is only relevant if this connection will send media.

    @param audioStream The audio stream.
    @param videoStream The video stream.
    @param mediaId The media identifier, unique to this channel, for persistent SFU downstream connections.
*/
- (FMLiveSwitchMcuConnection*) createMcuConnectionWithAudioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream mediaId:(NSString*)mediaId;
/**

    Creates a data-only MCU connection.

    @param dataStream The data stream.
*/
- (FMLiveSwitchMcuConnection*) createMcuConnectionWithDataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Creates a data-only MCU connection with a specific media
    identifier that can be targeted by SFU downstream connections.
    The media identifer is only relevant if this connection will send media.

    @param dataStream The data stream.
    @param mediaId The media identifier, unique to this channel, for persistent SFU downstream connections.
*/
- (FMLiveSwitchMcuConnection*) createMcuConnectionWithDataStream:(FMLiveSwitchDataStream*)dataStream mediaId:(NSString*)mediaId;
/**

    Creates a video-only MCU connection.

    @param videoStream The video stream.
*/
- (FMLiveSwitchMcuConnection*) createMcuConnectionWithVideoStream:(FMLiveSwitchVideoStream*)videoStream;
/**

    Creates a video/data MCU connection.

    @param videoStream The video stream.
    @param dataStream The data stream.
*/
- (FMLiveSwitchMcuConnection*) createMcuConnectionWithVideoStream:(FMLiveSwitchVideoStream*)videoStream dataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Creates a video/data MCU connection with a specific media
    identifier that can be targeted by SFU downstream connections.
    The media identifer is only relevant if this connection will send media.

    @param videoStream The video stream.
    @param dataStream The data stream.
    @param mediaId The media identifier, unique to this channel, for persistent SFU downstream connections.
*/
- (FMLiveSwitchMcuConnection*) createMcuConnectionWithVideoStream:(FMLiveSwitchVideoStream*)videoStream dataStream:(FMLiveSwitchDataStream*)dataStream mediaId:(NSString*)mediaId;
/**

    Creates a video-only MCU connection with a specific media
    identifier that can be targeted by SFU downstream connections.
    The media identifer is only relevant if this connection will send media.

    @param videoStream The video stream.
    @param mediaId The media identifier, unique to this channel, for persistent SFU downstream connections.
*/
- (FMLiveSwitchMcuConnection*) createMcuConnectionWithVideoStream:(FMLiveSwitchVideoStream*)videoStream mediaId:(NSString*)mediaId;
/**

    Creates an audio-only peer connection in the answering role.

    @param peerConnectionOffer The peer connection offer.
    @param audioStream The audio stream.
*/
- (FMLiveSwitchPeerConnection*) createPeerConnectionWithPeerConnectionOffer:(FMLiveSwitchPeerConnectionOffer*)peerConnectionOffer audioStream:(FMLiveSwitchAudioStream*)audioStream;
/**

    Creates an audio/data peer connection in the answering role.

    @param peerConnectionOffer The peer connection offer.
    @param audioStream The audio stream.
    @param dataStream The data stream.
*/
- (FMLiveSwitchPeerConnection*) createPeerConnectionWithPeerConnectionOffer:(FMLiveSwitchPeerConnectionOffer*)peerConnectionOffer audioStream:(FMLiveSwitchAudioStream*)audioStream dataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Creates an audio/video peer connection in the answering role.

    @param peerConnectionOffer The peer connection offer.
    @param audioStream The audio stream.
    @param videoStream The video stream.
*/
- (FMLiveSwitchPeerConnection*) createPeerConnectionWithPeerConnectionOffer:(FMLiveSwitchPeerConnectionOffer*)peerConnectionOffer audioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream;
/**

    Creates an audio/video/data peer connection in the answering role.

    @param peerConnectionOffer The peer connection offer.
    @param audioStream The audio stream.
    @param videoStream The video stream.
    @param dataStream The data stream.
*/
- (FMLiveSwitchPeerConnection*) createPeerConnectionWithPeerConnectionOffer:(FMLiveSwitchPeerConnectionOffer*)peerConnectionOffer audioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream dataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Creates a data-only peer connection in the answering role.

    @param peerConnectionOffer The peer connection offer.
    @param dataStream The data stream.
*/
- (FMLiveSwitchPeerConnection*) createPeerConnectionWithPeerConnectionOffer:(FMLiveSwitchPeerConnectionOffer*)peerConnectionOffer dataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Creates a video-only peer connection in the answering role.

    @param peerConnectionOffer The peer connection offer.
    @param videoStream The video stream.
*/
- (FMLiveSwitchPeerConnection*) createPeerConnectionWithPeerConnectionOffer:(FMLiveSwitchPeerConnectionOffer*)peerConnectionOffer videoStream:(FMLiveSwitchVideoStream*)videoStream;
/**

    Creates a video/data peer connection in the answering role.

    @param peerConnectionOffer The peer connection offer.
    @param videoStream The video stream.
    @param dataStream The data stream.
*/
- (FMLiveSwitchPeerConnection*) createPeerConnectionWithPeerConnectionOffer:(FMLiveSwitchPeerConnectionOffer*)peerConnectionOffer videoStream:(FMLiveSwitchVideoStream*)videoStream dataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Creates an audio-only peer connection in the offering role.

    @param remoteClientInfo The remote client information.
    @param audioStream The audio stream.
*/
- (FMLiveSwitchPeerConnection*) createPeerConnectionWithRemoteClientInfo:(FMLiveSwitchClientInfo*)remoteClientInfo audioStream:(FMLiveSwitchAudioStream*)audioStream;
/**

    Creates an audio/data peer connection in the offering role.

    @param remoteClientInfo The remote client information.
    @param audioStream The audio stream.
    @param dataStream The data stream.
*/
- (FMLiveSwitchPeerConnection*) createPeerConnectionWithRemoteClientInfo:(FMLiveSwitchClientInfo*)remoteClientInfo audioStream:(FMLiveSwitchAudioStream*)audioStream dataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Creates an audio/video peer connection in the offering role.

    @param remoteClientInfo The remote client information.
    @param audioStream The audio stream.
    @param videoStream The video stream.
*/
- (FMLiveSwitchPeerConnection*) createPeerConnectionWithRemoteClientInfo:(FMLiveSwitchClientInfo*)remoteClientInfo audioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream;
/**

    Creates an audio/video/data peer connection in the offering role.

    @param remoteClientInfo The remote client information.
    @param audioStream The audio stream.
    @param videoStream The video stream.
    @param dataStream The data stream.
*/
- (FMLiveSwitchPeerConnection*) createPeerConnectionWithRemoteClientInfo:(FMLiveSwitchClientInfo*)remoteClientInfo audioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream dataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Creates a data-only peer connection in the offering role.

    @param remoteClientInfo The remote client information.
    @param dataStream The data stream.
*/
- (FMLiveSwitchPeerConnection*) createPeerConnectionWithRemoteClientInfo:(FMLiveSwitchClientInfo*)remoteClientInfo dataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Creates a video-only peer connection in the offering role.

    @param remoteClientInfo The remote client information.
    @param videoStream The video stream.
*/
- (FMLiveSwitchPeerConnection*) createPeerConnectionWithRemoteClientInfo:(FMLiveSwitchClientInfo*)remoteClientInfo videoStream:(FMLiveSwitchVideoStream*)videoStream;
/**

    Creates a video/data peer connection in the offering role.

    @param remoteClientInfo The remote client information.
    @param videoStream The video stream.
    @param dataStream The data stream.
*/
- (FMLiveSwitchPeerConnection*) createPeerConnectionWithRemoteClientInfo:(FMLiveSwitchClientInfo*)remoteClientInfo videoStream:(FMLiveSwitchVideoStream*)videoStream dataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Creates an audio-only SFU downstream connection to the SFU or MCU
    upstream connection identified by the remote connection info.

    @param remoteConnectionInfo The remote connection information.
    @param audioStream The audio stream.
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteConnectionInfo:(FMLiveSwitchConnectionInfo*)remoteConnectionInfo audioStream:(FMLiveSwitchAudioStream*)audioStream;
/**

    Creates an audio/data SFU downstream connection.

    @param remoteConnectionInfo The remote connection information.
    @param audioStream The audio stream.
    @param dataStream The data stream.
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteConnectionInfo:(FMLiveSwitchConnectionInfo*)remoteConnectionInfo audioStream:(FMLiveSwitchAudioStream*)audioStream dataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Creates an audio-only SFU downstream connection to the SFU or MCU
    upstream connection identified by the remote connection info.

    @param remoteConnectionInfo The remote connection information.
    @param audioStream The audio stream.
    @param useWebSocketsForMedia Use WebSockets to stream this media instead of WebRTC.
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteConnectionInfo:(FMLiveSwitchConnectionInfo*)remoteConnectionInfo audioStream:(FMLiveSwitchAudioStream*)audioStream useWebSocketsForMedia:(bool)useWebSocketsForMedia;
/**

    Creates an audio/video SFU downstream connection to the SFU or MCU
    upstream connection identified by the remote connection info.

    @param remoteConnectionInfo The remote connection information.
    @param audioStream The audio stream.
    @param videoStream The video stream.
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteConnectionInfo:(FMLiveSwitchConnectionInfo*)remoteConnectionInfo audioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream;
/**

    Creates an audio/video/data SFU downstream connection.

    @param remoteConnectionInfo The remote connection information.
    @param audioStream The audio stream.
    @param videoStream The video stream.
    @param dataStream The data stream.
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteConnectionInfo:(FMLiveSwitchConnectionInfo*)remoteConnectionInfo audioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream dataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Creates an audio/video/data SFU downstream connection.

    @param remoteConnectionInfo The remote connection information.
    @param audioStream The audio stream.
    @param videoStream The video stream.
    @param dataStream The data stream.
    @param useWebSocketsForMedia Use WebSockets to stream the media instead of WebRTC.
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteConnectionInfo:(FMLiveSwitchConnectionInfo*)remoteConnectionInfo audioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream dataStream:(FMLiveSwitchDataStream*)dataStream useWebSocketsForMedia:(bool)useWebSocketsForMedia;
/**

    Creates an audio/video/data SFU downstream connection.

    @param remoteConnectionInfo The remote connection information.
    @param audioStream The audio stream.
    @param videoStream The video stream.
    @param dataStream The data stream.
    @param useWebSocketsForMedia Use WebSockets to stream the media instead of WebRTC.
    @param connectionId The remote internal connection Id.
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteConnectionInfo:(FMLiveSwitchConnectionInfo*)remoteConnectionInfo audioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream dataStream:(FMLiveSwitchDataStream*)dataStream useWebSocketsForMedia:(bool)useWebSocketsForMedia connectionId:(FMLiveSwitchGuid*)connectionId;
/**

    Creates an audio/video SFU downstream connection to the SFU or MCU
    upstream connection identified by the remote connection info.

    @param remoteConnectionInfo The remote connection information.
    @param audioStream The audio stream.
    @param videoStream The video stream.
    @param useWebSocketsForMedia Use WebSockets to stream this media instead of WebRTC.
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteConnectionInfo:(FMLiveSwitchConnectionInfo*)remoteConnectionInfo audioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream useWebSocketsForMedia:(bool)useWebSocketsForMedia;
/**

    Creates a data-only SFU downstream connection.

    @param remoteConnectionInfo The remote connection information.
    @param dataStream The data stream.
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteConnectionInfo:(FMLiveSwitchConnectionInfo*)remoteConnectionInfo dataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Creates a video-only SFU downstream connection to the SFU or MCU
    upstream connection identified by the remote connection info.

    @param remoteConnectionInfo The remote connection information.
    @param videoStream The video stream.
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteConnectionInfo:(FMLiveSwitchConnectionInfo*)remoteConnectionInfo videoStream:(FMLiveSwitchVideoStream*)videoStream;
/**

    Creates a video/data SFU downstream connection.

    @param remoteConnectionInfo The remote connection information.
    @param videoStream The video stream.
    @param dataStream The data stream.
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteConnectionInfo:(FMLiveSwitchConnectionInfo*)remoteConnectionInfo videoStream:(FMLiveSwitchVideoStream*)videoStream dataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Creates a video-only SFU downstream connection to the SFU or MCU
    upstream connection identified by the remote connection info.

    @param remoteConnectionInfo The remote connection information.
    @param videoStream The video stream.
    @param useWebSocketsForMedia Use WebSockets to stream this media instead of WebRTC.
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteConnectionInfo:(FMLiveSwitchConnectionInfo*)remoteConnectionInfo videoStream:(FMLiveSwitchVideoStream*)videoStream useWebSocketsForMedia:(bool)useWebSocketsForMedia;
/**

    Creates an audio/video SFU downstream connection to the SFU or MCU
    upstream connection identified by the remote connection info.

    @param remoteConnectionInfo The remote connection information.
    @param audioStream The audio stream.
    @param videoStream The video stream.
    @param connectionId The remote internal connection Id.
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteInternalIdWithRemoteConnectionInfo:(FMLiveSwitchConnectionInfo*)remoteConnectionInfo audioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream connectionId:(FMLiveSwitchGuid*)connectionId;
/**

    Creates an audio/video SFU downstream connection.

    @param remoteMediaId The remote media identifier.
    @param audioStream The audio stream.
    @param videoStream The video stream.
    @param connectionId The remote internal connection Id
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteInternalIdWithRemoteMediaId:(NSString*)remoteMediaId audioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream connectionId:(FMLiveSwitchGuid*)connectionId;
/**

    Creates an audio-only SFU downstream connection to the SFU or MCU
    upstream connection with the remote media identifier.

    @param remoteMediaId The remote media identifier.
    @param audioStream The audio stream.
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteMediaId:(NSString*)remoteMediaId audioStream:(FMLiveSwitchAudioStream*)audioStream;
/**

    Creates an audio/data SFU downstream connection.

    @param remoteMediaId The remote media identifier.
    @param audioStream The audio stream.
    @param dataStream The data stream.
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteMediaId:(NSString*)remoteMediaId audioStream:(FMLiveSwitchAudioStream*)audioStream dataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Creates an audio-only SFU downstream connection to the SFU or MCU
    upstream connection with the remote media identifier.

    @param remoteMediaId The remote media identifier.
    @param audioStream The audio stream.
    @param useWebSocketsForMedia Use WebSockets to stream this media instead of WebRTC.
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteMediaId:(NSString*)remoteMediaId audioStream:(FMLiveSwitchAudioStream*)audioStream useWebSocketsForMedia:(bool)useWebSocketsForMedia;
/**

    Creates an audio/video SFU downstream connection.

    @param remoteMediaId The remote media identifier.
    @param audioStream The audio stream.
    @param videoStream The video stream.
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteMediaId:(NSString*)remoteMediaId audioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream;
/**

    Creates an audio/video/data SFU downstream connection.

    @param remoteMediaId The remote media identifier.
    @param audioStream The audio stream.
    @param videoStream The video stream.
    @param dataStream The data stream.
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteMediaId:(NSString*)remoteMediaId audioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream dataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Creates an audio/video/data SFU downstream connection.

    @param remoteMediaId The remote media identifier.
    @param audioStream The audio stream.
    @param videoStream The video stream.
    @param dataStream The data stream.
    @param useWebSocketsForMedia Use WebSockets to stream the media instead of WebRTC.
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteMediaId:(NSString*)remoteMediaId audioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream dataStream:(FMLiveSwitchDataStream*)dataStream useWebSocketsForMedia:(bool)useWebSocketsForMedia;
/**

    Creates an audio/video/data SFU downstream connection.

    @param remoteMediaId The remote media identifier.
    @param audioStream The audio stream.
    @param videoStream The video stream.
    @param dataStream The data stream.
    @param useWebSocketsForMedia Use WebSockets to stream the media instead of WebRTC.
    @param connectionId The remote internal connection Id.
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteMediaId:(NSString*)remoteMediaId audioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream dataStream:(FMLiveSwitchDataStream*)dataStream useWebSocketsForMedia:(bool)useWebSocketsForMedia connectionId:(FMLiveSwitchGuid*)connectionId;
/**

    Creates an audio/video SFU downstream connection.

    @param remoteMediaId The remote media identifier.
    @param audioStream The audio stream.
    @param videoStream The video stream.
    @param useWebSocketsForMedia Use WebSockets to stream this media instead of WebRTC.
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteMediaId:(NSString*)remoteMediaId audioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream useWebSocketsForMedia:(bool)useWebSocketsForMedia;
/**

    Creates a data-only SFU downstream connection.

    @param remoteMediaId The remote media identifier.
    @param dataStream The data stream.
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteMediaId:(NSString*)remoteMediaId dataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Creates a video-only SFU downstream connection.

    @param remoteMediaId The remote media identifier.
    @param videoStream The video stream.
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteMediaId:(NSString*)remoteMediaId videoStream:(FMLiveSwitchVideoStream*)videoStream;
/**

    Creates a video/data SFU downstream connection.

    @param remoteMediaId The remote media identifier.
    @param videoStream The audio stream.
    @param dataStream The data stream.
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteMediaId:(NSString*)remoteMediaId videoStream:(FMLiveSwitchVideoStream*)videoStream dataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Creates a video-only SFU downstream connection.

    @param remoteMediaId The remote media identifier.
    @param videoStream The video stream.
    @param useWebSocketsForMedia Use WebSockets to stream this media instead of WebRTC.
*/
- (FMLiveSwitchSfuDownstreamConnection*) createSfuDownstreamConnectionWithRemoteMediaId:(NSString*)remoteMediaId videoStream:(FMLiveSwitchVideoStream*)videoStream useWebSocketsForMedia:(bool)useWebSocketsForMedia;
/**

    Creates an audio-only SFU upstream connection.

    @param audioStream The audio stream.
*/
- (FMLiveSwitchSfuUpstreamConnection*) createSfuUpstreamConnectionWithAudioStream:(FMLiveSwitchAudioStream*)audioStream;
/**

    Creates an audio/data SFU upstream connection.

    @param audioStream The audio stream.
    @param dataStream The data stream.
*/
- (FMLiveSwitchSfuUpstreamConnection*) createSfuUpstreamConnectionWithAudioStream:(FMLiveSwitchAudioStream*)audioStream dataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Creates an audio/data SFU upstream connection with a specific media
    identifier that can be targeted by SFU downstream connections.

    @param audioStream The audio stream.
    @param dataStream The data stream.
    @param mediaId The media identifier, unique to this channel, for persistent SFU downstream connections.
*/
- (FMLiveSwitchSfuUpstreamConnection*) createSfuUpstreamConnectionWithAudioStream:(FMLiveSwitchAudioStream*)audioStream dataStream:(FMLiveSwitchDataStream*)dataStream mediaId:(NSString*)mediaId;
/**

    Creates an audio-only SFU upstream connection with a specific media
    identifier that can be targeted by SFU downstream connections.

    @param audioStream The audio stream.
    @param mediaId The media identifier, unique to this channel, for persistent SFU downstream connections.
*/
- (FMLiveSwitchSfuUpstreamConnection*) createSfuUpstreamConnectionWithAudioStream:(FMLiveSwitchAudioStream*)audioStream mediaId:(NSString*)mediaId;
/**

    Creates an audio-only SFU upstream connection with a specific media
    identifier that can be targeted by SFU downstream connections.

    @param audioStream The audio stream.
    @param mediaId The media identifier, unique to this channel, for persistent SFU downstream connections.
    @param useWebSocketsForMedia Use WebSockets to stream this media instead of WebRTC.
*/
- (FMLiveSwitchSfuUpstreamConnection*) createSfuUpstreamConnectionWithAudioStream:(FMLiveSwitchAudioStream*)audioStream mediaId:(NSString*)mediaId useWebSocketsForMedia:(bool)useWebSocketsForMedia;
/**

    Creates an audio-only SFU upstream connection.

    @param audioStream The audio stream.
    @param useWebSocketsForMedia Use WebSockets to stream this media instead of WebRTC.
*/
- (FMLiveSwitchSfuUpstreamConnection*) createSfuUpstreamConnectionWithAudioStream:(FMLiveSwitchAudioStream*)audioStream useWebSocketsForMedia:(bool)useWebSocketsForMedia;
/**

    Creates an audio/video SFU upstream connection.

    @param audioStream The audio stream.
    @param videoStream The video stream.
*/
- (FMLiveSwitchSfuUpstreamConnection*) createSfuUpstreamConnectionWithAudioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream;
/**

    Creates an audio/video/data SFU upstream connection.

    @param audioStream The audio stream.
    @param videoStream The video stream.
    @param dataStream The data stream.
*/
- (FMLiveSwitchSfuUpstreamConnection*) createSfuUpstreamConnectionWithAudioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream dataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Creates an audio/video SFU upstream connection with a specific media
    identifier that can be targeted by SFU downstream connections.

    @param audioStream The audio stream.
    @param videoStream The video stream.
    @param dataStream The video stream.
    @param mediaId The media identifier, unique to this channel, for persistent SFU downstream connections.
*/
- (FMLiveSwitchSfuUpstreamConnection*) createSfuUpstreamConnectionWithAudioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream dataStream:(FMLiveSwitchDataStream*)dataStream mediaId:(NSString*)mediaId;
/**

    Creates an audio/video SFU upstream connection with a specific media
    identifier that can be targeted by SFU downstream connections.

    @param audioStream The audio stream.
    @param videoStream The video stream.
    @param dataStream The video stream.
    @param mediaId The media identifier, unique to this channel, for persistent SFU downstream connections.
    @param useWebSocketsForMedia A flag to indicate if we should send media over a WebSocket connection.
*/
- (FMLiveSwitchSfuUpstreamConnection*) createSfuUpstreamConnectionWithAudioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream dataStream:(FMLiveSwitchDataStream*)dataStream mediaId:(NSString*)mediaId useWebSocketsForMedia:(bool)useWebSocketsForMedia;
/**

    Creates an audio/video SFU upstream connection with a specific media
    identifier that can be targeted by SFU downstream connections.

    @param connectionId The connection ID.
    @param audioStream The audio stream.
    @param videoStream The video stream.
    @param dataStream The video stream.
    @param mediaId The media identifier, unique to this channel, for persistent SFU downstream connections.
    @param useWebSocketsForMedia A flag to indicate if we should send media over a WebSocket connection.
*/
- (FMLiveSwitchSfuUpstreamConnection*) createSfuUpstreamConnectionWithAudioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream dataStream:(FMLiveSwitchDataStream*)dataStream mediaId:(NSString*)mediaId useWebSocketsForMedia:(bool)useWebSocketsForMedia connectionId:(FMLiveSwitchGuid*)connectionId;
/**

    Creates an audio/video/data SFU upstream connection.

    @param audioStream The audio stream.
    @param videoStream The video stream.
    @param dataStream The data stream.
    @param useWebSocketsForMedia Use WebSockets to stream this media instead of WebRTC.
*/
- (FMLiveSwitchSfuUpstreamConnection*) createSfuUpstreamConnectionWithAudioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream dataStream:(FMLiveSwitchDataStream*)dataStream useWebSocketsForMedia:(bool)useWebSocketsForMedia;
/**

    Creates an audio/video SFU upstream connection with a specific media
    identifier that can be targeted by SFU downstream connections.

    @param audioStream The audio stream.
    @param videoStream The video stream.
    @param mediaId The media identifier, unique to this channel, for persistent SFU downstream connections.
*/
- (FMLiveSwitchSfuUpstreamConnection*) createSfuUpstreamConnectionWithAudioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream mediaId:(NSString*)mediaId;
/**

    Creates an audio/video SFU upstream connection with a specific media
    identifier that can be targeted by SFU downstream connections.

    @param audioStream The audio stream.
    @param videoStream The video stream.
    @param mediaId The media identifier, unique to this channel, for persistent SFU downstream connections.
    @param useWebSocketsForMedia Use WebSockets to stream this media instead of WebRTC.
*/
- (FMLiveSwitchSfuUpstreamConnection*) createSfuUpstreamConnectionWithAudioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream mediaId:(NSString*)mediaId useWebSocketsForMedia:(bool)useWebSocketsForMedia;
/**

    Creates an audio/video SFU upstream connection.

    @param audioStream The audio stream.
    @param videoStream The video stream.
    @param useWebSocketsForMedia Use WebSockets to stream this media instead of WebRTC.
*/
- (FMLiveSwitchSfuUpstreamConnection*) createSfuUpstreamConnectionWithAudioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream useWebSocketsForMedia:(bool)useWebSocketsForMedia;
/**

    Creates a data-only SFU upstream connection.

    @param dataStream The data stream.
*/
- (FMLiveSwitchSfuUpstreamConnection*) createSfuUpstreamConnectionWithDataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Creates a data-only SFU upstream connection with a specific media
    identifier that can be targeted by SFU downstream connections.

    @param dataStream The data stream.
    @param mediaId The media identifier, unique to this channel, for persistent SFU downstream connections.
*/
- (FMLiveSwitchSfuUpstreamConnection*) createSfuUpstreamConnectionWithDataStream:(FMLiveSwitchDataStream*)dataStream mediaId:(NSString*)mediaId;
/**

    Creates an audio/video SFU upstream connection with a specific media
    identifier that can be targeted by SFU downstream connections.

    @param connectionId The connection Id.
    @param audioStream The audio stream.
    @param videoStream The video stream.
    @param mediaId The media identifier, unique to this channel, for persistent SFU downstream connections.
*/
- (FMLiveSwitchSfuUpstreamConnection*) createSfuUpstreamConnectionWithRemoteInternalIdWithAudioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream mediaId:(NSString*)mediaId connectionId:(FMLiveSwitchGuid*)connectionId;
/**

    Creates a video-only SFU upstream connection.

    @param videoStream The video stream.
*/
- (FMLiveSwitchSfuUpstreamConnection*) createSfuUpstreamConnectionWithVideoStream:(FMLiveSwitchVideoStream*)videoStream;
/**

    Creates a video/data SFU upstream connection.

    @param videoStream The video stream.
    @param dataStream The data stream.
*/
- (FMLiveSwitchSfuUpstreamConnection*) createSfuUpstreamConnectionWithVideoStream:(FMLiveSwitchVideoStream*)videoStream dataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Creates a video/data SFU upstream connection with a specific media
    identifier that can be targeted by SFU downstream connections.

    @param videoStream The video stream.
    @param dataStream The data stream.
    @param mediaId The media identifier, unique to this channel, for persistent SFU downstream connections.
*/
- (FMLiveSwitchSfuUpstreamConnection*) createSfuUpstreamConnectionWithVideoStream:(FMLiveSwitchVideoStream*)videoStream dataStream:(FMLiveSwitchDataStream*)dataStream mediaId:(NSString*)mediaId;
/**

    Creates a video-only SFU upstream connection with a specific media
    identifier that can be targeted by SFU downstream connections.

    @param videoStream The video stream.
    @param mediaId The media identifier, unique to this channel, for persistent SFU downstream connections.
*/
- (FMLiveSwitchSfuUpstreamConnection*) createSfuUpstreamConnectionWithVideoStream:(FMLiveSwitchVideoStream*)videoStream mediaId:(NSString*)mediaId;
/**

    Creates a video-only SFU upstream connection with a specific media
    identifier that can be targeted by SFU downstream connections.

    @param videoStream The video stream.
    @param mediaId The media identifier, unique to this channel, for persistent SFU downstream connections.
    @param useWebSocketsForMedia Use WebSockets to stream this media instead of WebRTC.
*/
- (FMLiveSwitchSfuUpstreamConnection*) createSfuUpstreamConnectionWithVideoStream:(FMLiveSwitchVideoStream*)videoStream mediaId:(NSString*)mediaId useWebSocketsForMedia:(bool)useWebSocketsForMedia;
/**

    Creates a video-only SFU upstream connection.

    @param videoStream The video stream.
    @param useWebSocketsForMedia Use WebSockets to stream this media instead of WebRTC.
*/
- (FMLiveSwitchSfuUpstreamConnection*) createSfuUpstreamConnectionWithVideoStream:(FMLiveSwitchVideoStream*)videoStream useWebSocketsForMedia:(bool)useWebSocketsForMedia;
/**

    Gets the device alias.

*/
- (NSString*) deviceAlias;
/**

    Gets the device identifier.

*/
- (NSString*) deviceId;
/**

    Gets information about a remote client.

    @param clientId The client identifier.
*/
- (FMLiveSwitchClientInfo*) getRemoteClientInfoWithClientId:(NSString*)clientId;
/**

    Gets information about a remote connection.

    @param connectionId The connection identifier.
*/
- (FMLiveSwitchConnectionInfo*) getRemoteConnectionInfoWithConnectionId:(NSString*)connectionId;
/**

    Gets the channel identifier.

*/
- (NSString*) id;
/**

    Invites a user into this channel.

    @param userId The user id to invite.
    @param protocol The protocol to use for the invite.
*/
- (FMLiveSwitchFuture<FMLiveSwitchInvitation*>*) inviteWithUserId:(NSString*)userId protocol:(NSString*)protocol;
/**

    Kicks this channel.

    @return A future that resolves when the channel has been kicked.
*/
- (FMLiveSwitchFuture<id>*) kick;
/**

    Kicks a client in this channel.

    @param remoteClientInfo The remote client information.
    @return A future that resolves when the client has been kicked.
*/
- (FMLiveSwitchFuture<id>*) kickClientWithRemoteClientInfo:(FMLiveSwitchClientInfo*)remoteClientInfo;
/**

    Kicks a client in this channel.

    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @return A future that resolves when the client has been kicked.
*/
- (FMLiveSwitchFuture<id>*) kickClientWithUserId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId;
/**

    Kicks a connection in this channel.

    @param remoteConnectionInfo The remote connection information.
    @return A future that resolves when the connection has been kicked.
*/
- (FMLiveSwitchFuture<id>*) kickConnectionWithRemoteConnectionInfo:(FMLiveSwitchConnectionInfo*)remoteConnectionInfo;
/**

    Kicks a connection in this channel.

    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @param connectionId The connection identifier.
    @return A future that resolves when the connection has been kicked.
*/
- (FMLiveSwitchFuture<id>*) kickConnectionWithUserId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId connectionId:(NSString*)connectionId;
/**

    Kicks a device in this channel.

    @param userId The user identifier.
    @param deviceId The device identifier.
    @return A future that resolves when the device has been kicked.
*/
- (FMLiveSwitchFuture<id>*) kickDeviceWithUserId:(NSString*)userId deviceId:(NSString*)deviceId;
/**

    Kicks a user in this channel.

    @param userId The user identifier.
    @return A future that resolves when the user has been kicked.
*/
- (FMLiveSwitchFuture<id>*) kickUserWithUserId:(NSString*)userId;
/**

    Gets the number of message bytes received.

*/
- (long long) messageBytesReceived;
/**

    Gets the number of message bytes sent.

*/
- (long long) messageBytesSent;
/**

    Gets the number of messages received.

*/
- (long long) messagesReceived;
/**

    Gets the number of messages sent.

*/
- (long long) messagesSent;
/**

    Rejects a peer connection offer.

    @param peerConnectionOffer The peer connection offer.
*/
- (FMLiveSwitchFuture<id>*) rejectPeerConnectionWithPeerConnectionOffer:(FMLiveSwitchPeerConnectionOffer*)peerConnectionOffer;
/**

    Gets information about the remote client in this channel.

*/
- (NSMutableArray*) remoteClientInfos;
/**

    Gets information about the remote upstream (SFU or MCU)
    connections opened by remote clients in this channel.

*/
- (NSMutableArray*) remoteUpstreamConnectionInfos;
/**

    Removes a handler that is raised when the client's channel claim has been updated.
    Parameters:
    - oldConnectionInfo - the old channel claim
    - newConnectionInfo - the new channel claim

*/
- (void) removeOnClaimUpdate:(FMLiveSwitchAction2<FMLiveSwitchChannelClaim*,FMLiveSwitchChannelClaim*>*)value;
/**

    Removes a handler that is raised when a channel/client-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void) removeOnClientMessage:(FMLiveSwitchAction2<FMLiveSwitchClientInfo*,NSString*>*)value;
/**

    Removes a handler that is raised when a channel/device-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void) removeOnDeviceMessage:(FMLiveSwitchAction2<FMLiveSwitchClientInfo*,NSString*>*)value;
/**

    Removes a handler that is raised when the client is kicked from the channel.

*/
- (void) removeOnKick:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when a new MCU video layout is received from the server.
    Parameters:
    - videoLayout - the new MCU video layout

*/
- (void) removeOnMcuVideoLayout:(FMLiveSwitchAction1<FMLiveSwitchVideoLayout*>*)value;
/**

    Removes a handler that is raised when a channel-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void) removeOnMessage:(FMLiveSwitchAction2<FMLiveSwitchClientInfo*,NSString*>*)value;
/**

    Removes a handler that is raised when a remote client wants to open a peer connection.
    Parameters:
    - peerConnectionOffer - the peer connection offer

*/
- (void) removeOnPeerConnectionOffer:(FMLiveSwitchAction1<FMLiveSwitchPeerConnectionOffer*>*)value;
/**

    Removes a handler that is raised when a remote client joins this channel.
    Parameters:
    - clientInfo - the remote client information

*/
- (void) removeOnRemoteClientJoin:(FMLiveSwitchAction1<FMLiveSwitchClientInfo*>*)value;
/**

    Removes a handler that is raised when a remote client leaves this channel.
    Parameters:
    - clientInfo - the remote client information

*/
- (void) removeOnRemoteClientLeave:(FMLiveSwitchAction1<FMLiveSwitchClientInfo*>*)value;
/**

    Removes a handler that is raised when a remote client updates their config.
    Parameters:
    - oldClientInfo - the old remote client information
    - newClientInfo - the new remote client information

*/
- (void) removeOnRemoteClientUpdate:(FMLiveSwitchAction2<FMLiveSwitchClientInfo*,FMLiveSwitchClientInfo*>*)value;
/**

    Removes a handler that is raised when a remote upstream (SFU or MCU)
    connection is closed by a remote client.
    Parameters:
    - connectionInfo - the remote connection information

*/
- (void) removeOnRemoteUpstreamConnectionClose:(FMLiveSwitchAction1<FMLiveSwitchConnectionInfo*>*)value;
/**

    Removes a handler that is raised when a remote upstream (SFU or MCU)
    connection is opened by a remote client.
    Parameters:
    - connectionInfo - the remote connection information

*/
- (void) removeOnRemoteUpstreamConnectionOpen:(FMLiveSwitchAction1<FMLiveSwitchConnectionInfo*>*)value;
/**

    Removes a handler that is raised when a remote upstream (SFU or MCU)
    connection is updated by a remote client.
    Parameters:
    - oldConnectionInfo - the old remote connection information
    - newConnectionInfo - the new remote connection information

*/
- (void) removeOnRemoteUpstreamConnectionUpdate:(FMLiveSwitchAction2<FMLiveSwitchConnectionInfo*,FMLiveSwitchConnectionInfo*>*)value;
/**

    Removes a handler that is raised when a channel/user-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void) removeOnUserMessage:(FMLiveSwitchAction2<FMLiveSwitchClientInfo*,NSString*>*)value;
/**

    Sends a message to a client in the channel.

    @param message The message to be sent.
    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
*/
- (FMLiveSwitchFuture<id>*) sendClientMessageWithUserId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId message:(NSString*)message;
/**

    Sends a message to a device in the channel.

    @param message The message to be sent.
    @param userId The user identifier.
    @param deviceId The device identifier.
*/
- (FMLiveSwitchFuture<id>*) sendDeviceMessageWithUserId:(NSString*)userId deviceId:(NSString*)deviceId message:(NSString*)message;
/**

    Sends a message to the channel.

    @param message The message to be sent.
*/
- (FMLiveSwitchFuture<id>*) sendMessage:(NSString*)message;
/**

    Sends a message to a user in the channel.

    @param userId The user identifier.
    @param message The message.
*/
- (FMLiveSwitchFuture<id>*) sendUserMessageWithUserId:(NSString*)userId message:(NSString*)message;
/**

    Applies a layout update to all upstream connections for the specified client in this channel.

    @param remoteClientInfo The remote client information.
    @param newConfig The client configuration.
    @return A future that resolves when the client layout has been updated.
*/
- (FMLiveSwitchFuture<id>*) updateClientLayoutWithRemoteClientInfo:(FMLiveSwitchClientInfo*)remoteClientInfo newConfig:(FMLiveSwitchChannelClientLayoutConfig*)newConfig;
/**

    Applies a layout update to all upstream connections for the specified client in this channel.

    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @param newConfig The client configuration.
    @return A future that resolves when the client layout has been updated.
*/
- (FMLiveSwitchFuture<id>*) updateClientLayoutWithUserId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId newConfig:(FMLiveSwitchChannelClientLayoutConfig*)newConfig;
/**

    Updates a client in this channel.

    @param remoteClientInfo The remote client information.
    @param newConfig The client configuration.
    @return A future that resolves when the client has been updated.
*/
- (FMLiveSwitchFuture<id>*) updateClientWithRemoteClientInfo:(FMLiveSwitchClientInfo*)remoteClientInfo newConfig:(FMLiveSwitchChannelClientConfig*)newConfig;
/**

    Updates a client in this channel.

    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @param newConfig The client configuration.
    @return A future that resolves when the client has been updated.
*/
- (FMLiveSwitchFuture<id>*) updateClientWithUserId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId newConfig:(FMLiveSwitchChannelClientConfig*)newConfig;
/**

    Updates a connection in this channel.

    @param remoteConnectionInfo The remote connection information.
    @param newConfig The connection configuration.
    @return A future that resolves when the connection has been updated.
*/
- (FMLiveSwitchFuture<id>*) updateConnectionLayoutWithRemoteConnectionInfo:(FMLiveSwitchConnectionInfo*)remoteConnectionInfo newConfig:(FMLiveSwitchChannelConnectionLayoutConfig*)newConfig;
/**

    Applies a layout update to the specified upstream connection in this channel.

    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @param connectionId The connection identifier.
    @param newConfig The connection configuration.
    @return A future that resolves when the connection layout has been updated.
*/
- (FMLiveSwitchFuture<id>*) updateConnectionLayoutWithUserId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId connectionId:(NSString*)connectionId newConfig:(FMLiveSwitchChannelConnectionLayoutConfig*)newConfig;
/**

    Updates a connection in this channel.

    @param remoteConnectionInfo The remote connection information.
    @param newConfig The connection configuration.
    @return A future that resolves when the connection has been updated.
*/
- (FMLiveSwitchFuture<id>*) updateConnectionWithRemoteConnectionInfo:(FMLiveSwitchConnectionInfo*)remoteConnectionInfo newConfig:(FMLiveSwitchChannelConnectionConfig*)newConfig;
/**

    Updates a connection in this channel.

    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @param connectionId The connection identifier.
    @param newConfig The connection configuration.
    @return A future that resolves when the connection has been updated.
*/
- (FMLiveSwitchFuture<id>*) updateConnectionWithUserId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId connectionId:(NSString*)connectionId newConfig:(FMLiveSwitchChannelConnectionConfig*)newConfig;
/**

    Applies a layout update to all upstream connections for the specified device in this channel.

    @param userId The user identifier.
    @param deviceId The device identifier.
    @param newConfig The device layout configuration.
    @return A future that resolves when the device layout has been updated.
*/
- (FMLiveSwitchFuture<id>*) updateDeviceLayoutWithUserId:(NSString*)userId deviceId:(NSString*)deviceId newConfig:(FMLiveSwitchChannelDeviceLayoutConfig*)newConfig;
/**

    Updates a device in this channel.

    @param userId The user identifier.
    @param deviceId The device identifier.
    @param newConfig The device configuration.
    @return A future that resolves when the device has been updated.
*/
- (FMLiveSwitchFuture<id>*) updateDeviceWithUserId:(NSString*)userId deviceId:(NSString*)deviceId newConfig:(FMLiveSwitchChannelDeviceConfig*)newConfig;
/**

    Applies a layout update to all upstream connections on this channel

    @param newLayoutConfig The channel layout configuration.
    @return A future that resolves when the channel layout has been updated.
*/
- (FMLiveSwitchFuture<id>*) updateLayoutWithNewLayoutConfig:(FMLiveSwitchChannelLayoutConfig*)newLayoutConfig;
/**

    Applies a layout update to all upstream connections for the specified user in this channel.

    @param userId The user identifier.
    @param newLayoutConfig The user layout configuration.
    @return A future that resolves when the user layout has been updated.
*/
- (FMLiveSwitchFuture<id>*) updateUserLayoutWithUserId:(NSString*)userId newLayoutConfig:(FMLiveSwitchChannelUserLayoutConfig*)newLayoutConfig;
/**

    Updates a user in this channel.

    @param userId The user identifier.
    @param newConfig The user configuration.
    @return A future that resolves when the user has been updated.
*/
- (FMLiveSwitchFuture<id>*) updateUserWithUserId:(NSString*)userId newConfig:(FMLiveSwitchChannelUserConfig*)newConfig;
/**

    Updates this channel.

    @param newConfig The channel configuration.
    @return A future that resolves when the channel has been updated.
*/
- (FMLiveSwitchFuture<id>*) updateWithNewConfig:(FMLiveSwitchChannelConfig*)newConfig;
/**

    Gets the user alias.

*/
- (NSString*) userAlias;
/**

    Gets the user identifier.

*/
- (NSString*) userId;
/**

    Gets the WebSocket Media Server Authorization Token for this channel.

*/
- (NSString*) webSocketAccessToken;
/**

    Gets the WebSocket Media Server Endpoint for this channel.

*/
- (NSString*) webSocketServerEndpointUrl;

@end

/**

    A LiveSwitch client.

*/
@interface FMLiveSwitchClient : FMLiveSwitchDynamic

/**

    Adds a handler that is raised when an application-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void) addOnApplicationMessage:(FMLiveSwitchAction2<FMLiveSwitchClientInfo*,NSString*>*)value;
/**

    Adds a handler that is raised when an application-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void (^)(void(^)(FMLiveSwitchClientInfo*, NSString*))) addOnApplicationMessageWithBlock;
/**

    Adds a handler that is raised when an application-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void) addOnApplicationMessageWithBlock:(void(^)(FMLiveSwitchClientInfo*, NSString*))valueBlock;
/**

    Adds a handler that is raised when a device-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void) addOnDeviceMessage:(FMLiveSwitchAction2<FMLiveSwitchClientInfo*,NSString*>*)value;
/**

    Adds a handler that is raised when a device-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void (^)(void(^)(FMLiveSwitchClientInfo*, NSString*))) addOnDeviceMessageWithBlock;
/**

    Adds a handler that is raised when a device-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void) addOnDeviceMessageWithBlock:(void(^)(FMLiveSwitchClientInfo*, NSString*))valueBlock;
/**

    Adds a handler that is raised whenever an underlying HTTP request
    has been created and is about to be transferred to the server. This is a
    good place to add headers/cookies. For WebSocket streams, this will fire
    only once for the initial HTTP-based handshake.

*/
- (void) addOnHttpRequestCreated:(FMLiveSwitchAction1<FMLiveSwitchHttpRequestCreatedArgs*>*)value;
/**

    Adds a handler that is raised whenever an underlying HTTP request
    has been created and is about to be transferred to the server. This is a
    good place to add headers/cookies. For WebSocket streams, this will fire
    only once for the initial HTTP-based handshake.

*/
- (void (^)(void(^)(FMLiveSwitchHttpRequestCreatedArgs*))) addOnHttpRequestCreatedWithBlock;
/**

    Adds a handler that is raised whenever an underlying HTTP request
    has been created and is about to be transferred to the server. This is a
    good place to add headers/cookies. For WebSocket streams, this will fire
    only once for the initial HTTP-based handshake.

*/
- (void) addOnHttpRequestCreatedWithBlock:(void(^)(FMLiveSwitchHttpRequestCreatedArgs*))valueBlock;
/**

    Adds a handler that is raised whenever an underlying HTTP response
    has been received and is about to be processed by the client. This is a
    good place to read headers/cookies. For WebSocket streams, this will fire
    only once for the initial HTTP-based handshake.

*/
- (void) addOnHttpResponseReceived:(FMLiveSwitchAction1<FMLiveSwitchHttpResponseReceivedArgs*>*)value;
/**

    Adds a handler that is raised whenever an underlying HTTP response
    has been received and is about to be processed by the client. This is a
    good place to read headers/cookies. For WebSocket streams, this will fire
    only once for the initial HTTP-based handshake.

*/
- (void (^)(void(^)(FMLiveSwitchHttpResponseReceivedArgs*))) addOnHttpResponseReceivedWithBlock;
/**

    Adds a handler that is raised whenever an underlying HTTP response
    has been received and is about to be processed by the client. This is a
    good place to read headers/cookies. For WebSocket streams, this will fire
    only once for the initial HTTP-based handshake.

*/
- (void) addOnHttpResponseReceivedWithBlock:(void(^)(FMLiveSwitchHttpResponseReceivedArgs*))valueBlock;
/**

    Adds a handler that is raised when a client-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void) addOnMessage:(FMLiveSwitchAction2<FMLiveSwitchClientInfo*,NSString*>*)value;
/**

    Adds a handler that is raised when a client-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void (^)(void(^)(FMLiveSwitchClientInfo*, NSString*))) addOnMessageWithBlock;
/**

    Adds a handler that is raised when a client-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void) addOnMessageWithBlock:(void(^)(FMLiveSwitchClientInfo*, NSString*))valueBlock;
/**

    Adds a handler that is raised when the the client's config on the server has changed.

*/
- (void) addOnRemoteUpdate:(FMLiveSwitchAction2<FMLiveSwitchClientInfo*,FMLiveSwitchClientInfo*>*)value;
/**

    Adds a handler that is raised when the the client's config on the server has changed.

*/
- (void (^)(void(^)(FMLiveSwitchClientInfo*, FMLiveSwitchClientInfo*))) addOnRemoteUpdateWithBlock;
/**

    Adds a handler that is raised when the the client's config on the server has changed.

*/
- (void) addOnRemoteUpdateWithBlock:(void(^)(FMLiveSwitchClientInfo*, FMLiveSwitchClientInfo*))valueBlock;
/**

    Adds a handler that is raised when the state changes.

*/
- (void) addOnStateChange:(FMLiveSwitchAction1<FMLiveSwitchClient*>*)value;
/**

    Adds a handler that is raised when the state changes.

*/
- (void (^)(void(^)(FMLiveSwitchClient*))) addOnStateChangeWithBlock;
/**

    Adds a handler that is raised when the state changes.

*/
- (void) addOnStateChangeWithBlock:(void(^)(FMLiveSwitchClient*))valueBlock;
/**

    Adds a handler that is raised whenever a client disconnects or reconnects to the internet.

*/
- (void) addOnStreamChange:(FMLiveSwitchAction1<id>*)value;
/**

    Adds a handler that is raised after a client disconnects or reconnects to the internet.

*/
- (void) addOnStreamChanged:(FMLiveSwitchAction1<id>*)value;
/**

    Adds a handler that is raised after a client disconnects or reconnects to the internet.

*/
- (void (^)(void(^)(FMLiveSwitchNetworkConnectionState))) addOnStreamChangedWithBlock;
/**

    Adds a handler that is raised after a client disconnects or reconnects to the internet.

*/
- (void) addOnStreamChangedWithBlock:(void(^)(FMLiveSwitchNetworkConnectionState))valueBlock;
/**

    Adds a handler that is raised whenever a client disconnects or reconnects to the internet.

*/
- (void (^)(void(^)(FMLiveSwitchNetworkConnectionState))) addOnStreamChangeWithBlock;
/**

    Adds a handler that is raised whenever a client disconnects or reconnects to the internet.

*/
- (void) addOnStreamChangeWithBlock:(void(^)(FMLiveSwitchNetworkConnectionState))valueBlock;
/**

    Adds a handler that is raised when a user-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void) addOnUserMessage:(FMLiveSwitchAction2<FMLiveSwitchClientInfo*,NSString*>*)value;
/**

    Adds a handler that is raised when a user-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void (^)(void(^)(FMLiveSwitchClientInfo*, NSString*))) addOnUserMessageWithBlock;
/**

    Adds a handler that is raised when a user-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void) addOnUserMessageWithBlock:(void(^)(FMLiveSwitchClientInfo*, NSString*))valueBlock;
/**

    Gets the application identifier.

*/
- (NSString*) applicationId;
/**

    Gets an array of joined channels.

*/
- (NSMutableArray*) channels;
/**

    Initializes a new instance of the FMLiveSwitchClient class.

    @param gatewayUrl The gateway URL.
    @param applicationId The application identifier.
*/
+ (FMLiveSwitchClient*) clientWithGatewayUrl:(NSString*)gatewayUrl applicationId:(NSString*)applicationId;
/**

    Initializes a new instance of the FMLiveSwitchClient class.

    @param gatewayUrl The gateway URL.
    @param applicationId The application identifier.
    @param userId The user identifier, or `null` to auto-generate.
*/
+ (FMLiveSwitchClient*) clientWithGatewayUrl:(NSString*)gatewayUrl applicationId:(NSString*)applicationId userId:(NSString*)userId;
/**

    Initializes a new instance of the FMLiveSwitchClient class.

    @param gatewayUrl The gateway URL.
    @param applicationId The application identifier.
    @param userId The user identifier, or `null` to auto-generate.
    @param deviceId The device identifier, or `null` to auto-generate.
*/
+ (FMLiveSwitchClient*) clientWithGatewayUrl:(NSString*)gatewayUrl applicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId;
/**

    Initializes a new instance of the FMLiveSwitchClient class.

    @param gatewayUrl The gateway URL.
    @param applicationId The application identifier.
    @param userId The user identifier, or `null` to auto-generate.
    @param deviceId The device identifier, or `null` to auto-generate.
    @param clientId The client identifier, or `null` to auto-generate.
*/
+ (FMLiveSwitchClient*) clientWithGatewayUrl:(NSString*)gatewayUrl applicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId;
/**

    Initializes a new instance of the FMLiveSwitchClient class.

    @param gatewayUrl The gateway URL.
    @param applicationId The application identifier.
    @param userId The user identifier, or `null` to auto-generate.
    @param deviceId The device identifier, or `null` to auto-generate.
    @param clientId The client identifier, or `null` to auto-generate.
    @param roles The roles, if any.
*/
+ (FMLiveSwitchClient*) clientWithGatewayUrl:(NSString*)gatewayUrl applicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId roles:(NSMutableArray*)roles;
/**

    Initializes a new instance of the FMLiveSwitchClient class.

    @param gatewayUrl The gateway URL.
    @param applicationId The application identifier.
    @param userId The user identifier, or `null` to auto-generate.
    @param deviceId The device identifier, or `null` to auto-generate.
    @param clientId The client identifier, or `null` to auto-generate.
    @param roles The roles, if any.
    @param region The region, if any.
*/
+ (FMLiveSwitchClient*) clientWithGatewayUrl:(NSString*)gatewayUrl applicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId roles:(NSMutableArray*)roles region:(NSString*)region;
/**

    Closes all active connections in all channels.

*/
- (FMLiveSwitchFuture<id>*) closeAll;
/**

    Gets the current configuration.

*/
- (FMLiveSwitchClientConfig*) config;
/**

    Gets the device alias. Cannot be set after registration, use the 'Update' method instead.

*/
- (NSString*) deviceAlias;
/**

    Gets the device identifier.

*/
- (NSString*) deviceId;
/**

    Gets whether to disable WebSocket protocol support and use long-polling,
    even if the server is capable of accepting WebSocket requests.

*/
- (bool) disableWebSockets;
/**

    Gets the external client identifier.

*/
- (NSString*) externalId;
/**

    Gets the gateway URL.

*/
- (NSString*) gatewayUrl;
/**

    Gets the version of the Gateway Server.
    This value will not be available until after registration with the Gateway.

*/
- (NSString*) gatewayVersion;
/**

    Gets the client identifier.

*/
- (NSString*) id;
/**

    Gets the client info.

*/
- (FMLiveSwitchClientInfo*) info;
/**

    Initializes a new instance of the FMLiveSwitchClient class.

    @param gatewayUrl The gateway URL.
    @param applicationId The application identifier.
*/
- (instancetype) initWithGatewayUrl:(NSString*)gatewayUrl applicationId:(NSString*)applicationId;
/**

    Initializes a new instance of the FMLiveSwitchClient class.

    @param gatewayUrl The gateway URL.
    @param applicationId The application identifier.
    @param userId The user identifier, or `null` to auto-generate.
*/
- (instancetype) initWithGatewayUrl:(NSString*)gatewayUrl applicationId:(NSString*)applicationId userId:(NSString*)userId;
/**

    Initializes a new instance of the FMLiveSwitchClient class.

    @param gatewayUrl The gateway URL.
    @param applicationId The application identifier.
    @param userId The user identifier, or `null` to auto-generate.
    @param deviceId The device identifier, or `null` to auto-generate.
*/
- (instancetype) initWithGatewayUrl:(NSString*)gatewayUrl applicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId;
/**

    Initializes a new instance of the FMLiveSwitchClient class.

    @param gatewayUrl The gateway URL.
    @param applicationId The application identifier.
    @param userId The user identifier, or `null` to auto-generate.
    @param deviceId The device identifier, or `null` to auto-generate.
    @param clientId The client identifier, or `null` to auto-generate.
*/
- (instancetype) initWithGatewayUrl:(NSString*)gatewayUrl applicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId;
/**

    Initializes a new instance of the FMLiveSwitchClient class.

    @param gatewayUrl The gateway URL.
    @param applicationId The application identifier.
    @param userId The user identifier, or `null` to auto-generate.
    @param deviceId The device identifier, or `null` to auto-generate.
    @param clientId The client identifier, or `null` to auto-generate.
    @param roles The roles, if any.
*/
- (instancetype) initWithGatewayUrl:(NSString*)gatewayUrl applicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId roles:(NSMutableArray*)roles;
/**

    Initializes a new instance of the FMLiveSwitchClient class.

    @param gatewayUrl The gateway URL.
    @param applicationId The application identifier.
    @param userId The user identifier, or `null` to auto-generate.
    @param deviceId The device identifier, or `null` to auto-generate.
    @param clientId The client identifier, or `null` to auto-generate.
    @param roles The roles, if any.
    @param region The region, if any.
*/
- (instancetype) initWithGatewayUrl:(NSString*)gatewayUrl applicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId roles:(NSMutableArray*)roles region:(NSString*)region;
/**

    Joins a channel.

    @param channelId The channel identifier.
    @param token The auth token.
    @return 
            A future with the joined channel.
            
*/
- (FMLiveSwitchFuture<FMLiveSwitchChannel*>*) joinWithChannelId:(NSString*)channelId token:(NSString*)token;
/**

    Joins a channel.

    @param token The auth token.
    @return 
            A future with the joined channel.
            
*/
- (FMLiveSwitchFuture<FMLiveSwitchChannel*>*) joinWithToken:(NSString*)token;
/**

    Leaves a channel.

    @param channelId The channel identifier.
*/
- (FMLiveSwitchFuture<FMLiveSwitchChannel*>*) leaveWithChannelId:(NSString*)channelId;
/**

    Gets the number of message bytes received.

*/
- (long long) messageBytesReceived;
/**

    Gets the number of message bytes sent.

*/
- (long long) messageBytesSent;
/**

    Gets the number of messages received.

*/
- (long long) messagesReceived;
/**

    Gets the number of messages sent.

*/
- (long long) messagesSent;
/**

    Gets the region.

*/
- (NSString*) region;
/**

    Registers with the signalling server.

    @param token The auth token.
    @return 
            A future with an array of initial channels as instructed by the auth token.
            
*/
- (FMLiveSwitchFuture<NSMutableArray*>*) registerWithToken:(NSString*)token;
/**

    Removes a handler that is raised when an application-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void) removeOnApplicationMessage:(FMLiveSwitchAction2<FMLiveSwitchClientInfo*,NSString*>*)value;
/**

    Removes a handler that is raised when a device-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void) removeOnDeviceMessage:(FMLiveSwitchAction2<FMLiveSwitchClientInfo*,NSString*>*)value;
/**

    Removes a handler that is raised whenever an underlying HTTP request
    has been created and is about to be transferred to the server. This is a
    good place to add headers/cookies. For WebSocket streams, this will fire
    only once for the initial HTTP-based handshake.

*/
- (void) removeOnHttpRequestCreated:(FMLiveSwitchAction1<FMLiveSwitchHttpRequestCreatedArgs*>*)value;
/**

    Removes a handler that is raised whenever an underlying HTTP response
    has been received and is about to be processed by the client. This is a
    good place to read headers/cookies. For WebSocket streams, this will fire
    only once for the initial HTTP-based handshake.

*/
- (void) removeOnHttpResponseReceived:(FMLiveSwitchAction1<FMLiveSwitchHttpResponseReceivedArgs*>*)value;
/**

    Removes a handler that is raised when a client-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void) removeOnMessage:(FMLiveSwitchAction2<FMLiveSwitchClientInfo*,NSString*>*)value;
/**

    Removes a handler that is raised when the the client's config on the server has changed.

*/
- (void) removeOnRemoteUpdate:(FMLiveSwitchAction2<FMLiveSwitchClientInfo*,FMLiveSwitchClientInfo*>*)value;
/**

    Removes a handler that is raised when the state changes.

*/
- (void) removeOnStateChange:(FMLiveSwitchAction1<FMLiveSwitchClient*>*)value;
/**

    Removes a handler that is raised whenever a client disconnects or reconnects to the internet.

*/
- (void) removeOnStreamChange:(FMLiveSwitchAction1<id>*)value;
/**

    Removes a handler that is raised after a client disconnects or reconnects to the internet.

*/
- (void) removeOnStreamChanged:(FMLiveSwitchAction1<id>*)value;
/**

    Removes a handler that is raised when a user-scope message is received from the server.
    Parameters:
    - clientInfo - the sending client information
    - message - the message

*/
- (void) removeOnUserMessage:(FMLiveSwitchAction2<FMLiveSwitchClientInfo*,NSString*>*)value;
/**

    Gets the maximum number of retries allowed for a standard request.

*/
- (int) requestMaxRetries;
/**

    Gets the number of milliseconds to wait for a standard request to
    return a response before it is aborted and another request is attempted.
    Defaults to 15000 (15 seconds).

*/
- (int) requestTimeout;
/**

    Gets the roles.

*/
- (NSMutableArray*) roles;
/**

    Sends a message to the server with no delivery.

    @param message The message to be sent.
*/
- (FMLiveSwitchFuture<id>*) sendMessage:(NSString*)message;
/**

    Sets the device alias. Cannot be set after registration, use the 'Update' method instead.

*/
- (void) setDeviceAlias:(NSString*)value;
/**

    Sets whether to disable WebSocket protocol support and use long-polling,
    even if the server is capable of accepting WebSocket requests.

*/
- (void) setDisableWebSockets:(bool)value;
/**

    Sets the external client identifier.

*/
- (void) setExternalId:(NSString*)value;
/**

    Sets the maximum number of retries allowed for a standard request.

*/
- (void) setRequestMaxRetries:(int)value;
/**

    Sets the number of milliseconds to wait for a standard request to
    return a response before it is aborted and another request is attempted.
    Defaults to 15000 (15 seconds).

*/
- (void) setRequestTimeout:(int)value;
/**

    Sets the tag. Cannot be set after registration, use the 'Update' method instead.

*/
- (void) setTag:(NSString*)value;
/**

    Sets the user alias. Cannot be set after registration, use the 'Update' method instead.

*/
- (void) setUserAlias:(NSString*)value;
/**

    Gets the state.

*/
- (FMLiveSwitchClientState) state;
/**

    Gets the tag. Cannot be set after registration, use the 'Update' method instead.

*/
- (NSString*) tag;
/**

    Unregisters with the signalling server.

    @return 
            A future that resolves when successfully unregistered.
            
*/
- (FMLiveSwitchFuture<id>*) unregister;
/**

    Gets the unregister exception, which is set if
    registration is reset abnormally.

*/
- (NSException*) unregisterException;
/**

    Updates this client.

    @param clientConfig The client configuration.
    @return A future that resolves when the client has been updated.
*/
- (FMLiveSwitchFuture<id>*) updateWithClientConfig:(FMLiveSwitchClientConfig*)clientConfig;
/**

    Gets the user alias. Cannot be set after registration, use the 'Update' method instead.

*/
- (NSString*) userAlias;
/**

    Gets the user identifier.

*/
- (NSString*) userId;

@end

/**

    Maintains a ledger of client state transitions with timestamps.
    Tracks and records the history of state changes for a specific client over time.

*/
@interface FMLiveSwitchClientStateLedger : NSObject

/**

    Initializes a new instance of the ClientStateLedger class.
    Automatically records an initial "New" state.

    @param clientId The unique identifier for the client to track.
    @param externalId The external identifier for the client. Can be null.
*/
+ (FMLiveSwitchClientStateLedger*) clientStateLedgerWithClientId:(NSString*)clientId externalId:(NSString*)externalId;
/**

    Provides a JSON string representation of all recorded state transitions.
    Includes client identification, state transition history with timestamps and elapsed times,
    and diagnostic information if the client never reached the registered state.

    @return 
            A JSON formatted string containing the complete state transition history and diagnostics.
            Returns "{}" if no states have been recorded.
            
*/
- (NSString*) description;
/**

    Initializes a new instance of the ClientStateLedger class.
    Automatically records an initial "New" state.

    @param clientId The unique identifier for the client to track.
    @param externalId The external identifier for the client. Can be null.
*/
- (instancetype) initWithClientId:(NSString*)clientId externalId:(NSString*)externalId;
/**

    Records a new client state transition with the current timestamp.
    Adds a new record to the state history with both UTC time and millisecond precision timestamp.

    @param state The new client state to record.
*/
- (void) recordClientState:(FMLiveSwitchClientState)state;

@end

/**

    A state machine for Client states.

*/
@interface FMLiveSwitchClientStateMachine : FMLiveSwitchStateMachine<id>

/**

    Initializes a new instance of the FMLiveSwitchConnectionStateMachine class.

*/
+ (FMLiveSwitchClientStateMachine*) clientStateMachine;
/**

    Initializes a new instance of the FMLiveSwitchConnectionStateMachine class.

*/
- (instancetype) init;
/**

    Converts a state to an integer value.

    @param state The state.
*/
- (int) stateToValueWithState:(FMLiveSwitchClientState)state;
/**

    Converts an integer value to a state.

    @param value The integer value.
*/
- (FMLiveSwitchClientState) valueToState:(int)value;

@end

/**

    Represents a single Client state transition record with timing information.

*/
@interface FMLiveSwitchClientStateRecord : NSObject

+ (FMLiveSwitchClientStateRecord*) clientStateRecord;
/**

    Gets the string representation of the client state.

*/
- (NSString*) clientStateString;
/**

    Gets the UTC datetime when the state transition occurred.

*/
- (NSDate*) dateTime;
- (instancetype) init;
/**

    Sets the UTC datetime when the state transition occurred.

*/
- (void) setDateTime:(NSDate*)value;
/**

    Sets the Client state.

*/
- (void) setState:(FMLiveSwitchClientState)value;
/**

    Sets the millisecond timestamp when the state transition occurred.

*/
- (void) setTimeStamp:(long long)value;
/**

    Gets the Client state.

*/
- (FMLiveSwitchClientState) state;
/**

    Gets the millisecond timestamp when the state transition occurred.

*/
- (long long) timeStamp;

@end

/**

    An invitation to join a channel.

*/
@interface FMLiveSwitchInvitation : NSObject

/**

    Adds a handler that is raised when the state changes.

*/
- (void) addOnStateChanging:(FMLiveSwitchAction1<FMLiveSwitchInvitation*>*)value;
/**

    Adds a handler that is raised when the state changes.

*/
- (void (^)(void(^)(FMLiveSwitchInvitation*))) addOnStateChangingWithBlock;
/**

    Adds a handler that is raised when the state changes.

*/
- (void) addOnStateChangingWithBlock:(void(^)(FMLiveSwitchInvitation*))valueBlock;
/**

    Attempts to cancel the invitation. May fail if the invitation is acted upon before being canceled.

    @return A promise that resolves if the cancel succeeds.
*/
- (FMLiveSwitchFuture<id>*) cancel;
/**

    Gets the channel id that this invitation is for.

*/
- (NSString*) channelId;
/**

    Gets the key for this invitation.

*/
- (NSString*) inviteKey;
/**

    Gets the protocol that this user was invited on.

*/
- (NSString*) protocol;
/**

    Gets the reason for a state if available.

*/
- (NSString*) reason;
/**

    Removes a handler that is raised when the state changes.

*/
- (void) removeOnStateChanging:(FMLiveSwitchAction1<FMLiveSwitchInvitation*>*)value;
/**

    Gets the current state of the invitation. See InviteFeedbackState for possible values.

*/
- (FMLiveSwitchInvitationState) state;
/**

    Gets the user id of the user being invited.

*/
- (NSString*) userId;

@end

/**

    A collection of connections.

*/
@interface FMLiveSwitchManagedConnectionCollection : FMLiveSwitchCollection<FMLiveSwitchManagedConnection*,FMLiveSwitchManagedConnectionCollection*>

/**

    Invoked when an element is added to the collection.

    @param value The value.
*/
- (void) addSuccess:(FMLiveSwitchManagedConnection*)value;
/**

    Creates an array from a list.

    @param list The list.
*/
- (NSMutableArray*) arrayFromList:(NSMutableArray<FMLiveSwitchManagedConnection*>*)list;
/**

    Creates a collection.

*/
- (FMLiveSwitchManagedConnectionCollection*) createCollection;
/**

    Gets a connection by ID.

    @param idValue The identifier.
    @return The connection, or `null` if the connection does not exist.
*/
- (FMLiveSwitchManagedConnection*) getById:(NSString*)idValue;
/**

    Gets a connection by remote ID.

    @param idValue The identifier.
    @return The connection, or `null` if the connection does not exist.
*/
- (FMLiveSwitchManagedConnection*) getByRemoteId:(NSString*)idValue;
- (instancetype) init;
+ (FMLiveSwitchManagedConnectionCollection*) managedConnectionCollection;
/**

    Invoked when an element is removed from the collection.

    @param value The value.
*/
- (void) removeSuccess:(FMLiveSwitchManagedConnection*)value;
/**

    Tries to get a connection by ID.

    @param idValue The identifier.
    @param connection The connection.
    @return The connection, or `null` if the connection does not exist.
*/
- (bool) tryGetById:(NSString*)idValue connection:(FMLiveSwitchManagedConnection**)connection;
/**

    Tries to get a connection by remote ID.

    @param idValue The identifier.
    @param connection The connection.
    @return The connection, or `null` if the connection does not exist.
*/
- (bool) tryGetByRemoteId:(NSString*)idValue connection:(FMLiveSwitchManagedConnection**)connection;

@end

/**

    A managed connection.

*/
@interface FMLiveSwitchManagedConnection : FMLiveSwitchDynamic

/**

    Adds a handler that is raised when the ability to unmute audio is disabled.

*/
- (void) addOnAudioUnmuteDisabled:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the ability to unmute audio is enabled.

*/
- (void) addOnAudioUnmuteEnabled:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when automatic ICE servers have been received.
    Parameters:
    - connection - the connection
    - automaticIceServers - the automatic ICE severs collection

*/
- (void) addOnAutomaticIceServers:(FMLiveSwitchAction2<FMLiveSwitchManagedConnection*,FMLiveSwitchIceServerCollection*>*)value;
/**

    Adds a handler that is raised when automatic ICE servers have been received.
    Parameters:
    - connection - the connection
    - automaticIceServers - the automatic ICE severs collection

*/
- (void (^)(void(^)(FMLiveSwitchManagedConnection*, FMLiveSwitchIceServerCollection*))) addOnAutomaticIceServersWithBlock;
/**

    Adds a handler that is raised when automatic ICE servers have been received.
    Parameters:
    - connection - the connection
    - automaticIceServers - the automatic ICE severs collection

*/
- (void) addOnAutomaticIceServersWithBlock:(void(^)(FMLiveSwitchManagedConnection*, FMLiveSwitchIceServerCollection*))valueBlock;
/**

    Adds a handler that is raised when the ICE gathering state changes.
    Parameters:
    - connection - the connection

*/
- (void) addOnGatheringStateChange:(FMLiveSwitchAction1<FMLiveSwitchManagedConnection*>*)value;
/**

    Adds a handler that is raised when the ICE gathering state changes.
    Parameters:
    - connection - the connection

*/
- (void (^)(void(^)(FMLiveSwitchManagedConnection*))) addOnGatheringStateChangeWithBlock;
/**

    Adds a handler that is raised when the ICE gathering state changes.
    Parameters:
    - connection - the connection

*/
- (void) addOnGatheringStateChangeWithBlock:(void(^)(FMLiveSwitchManagedConnection*))valueBlock;
/**

    Adds a handler that is raised when the ICE connection state changes.
    Parameters:
    - connection - the connection

*/
- (void) addOnIceConnectionStateChange:(FMLiveSwitchAction1<FMLiveSwitchManagedConnection*>*)value;
/**

    Adds a handler that is raised when the ICE connection state changes.
    Parameters:
    - connection - the connection

*/
- (void (^)(void(^)(FMLiveSwitchManagedConnection*))) addOnIceConnectionStateChangeWithBlock;
/**

    Adds a handler that is raised when the ICE connection state changes.
    Parameters:
    - connection - the connection

*/
- (void) addOnIceConnectionStateChangeWithBlock:(void(^)(FMLiveSwitchManagedConnection*))valueBlock;
/**

    Adds a handler that is raised when a local candidate is ready.
    Parameters:
    - connection - the connection
    - candidate - the local candidate

*/
- (void) addOnLocalCandidate:(FMLiveSwitchAction2<FMLiveSwitchManagedConnection*,FMLiveSwitchCandidate*>*)value;
/**

    Adds a handler that is raised when a local candidate is ready.
    Parameters:
    - connection - the connection
    - candidate - the local candidate

*/
- (void (^)(void(^)(FMLiveSwitchManagedConnection*, FMLiveSwitchCandidate*))) addOnLocalCandidateWithBlock;
/**

    Adds a handler that is raised when a local candidate is ready.
    Parameters:
    - connection - the connection
    - candidate - the local candidate

*/
- (void) addOnLocalCandidateWithBlock:(void(^)(FMLiveSwitchManagedConnection*, FMLiveSwitchCandidate*))valueBlock;
/**

    Adds a handler that is raised when the local description is ready.
    Parameters:
    - connection - the connection
    - description - the local description

*/
- (void) addOnLocalDescription:(FMLiveSwitchAction2<FMLiveSwitchManagedConnection*,FMLiveSwitchSessionDescription*>*)value;
/**

    Adds a handler that is raised when the local description is ready.
    Parameters:
    - connection - the connection
    - description - the local description

*/
- (void (^)(void(^)(FMLiveSwitchManagedConnection*, FMLiveSwitchSessionDescription*))) addOnLocalDescriptionWithBlock;
/**

    Adds a handler that is raised when the local description is ready.
    Parameters:
    - connection - the connection
    - description - the local description

*/
- (void) addOnLocalDescriptionWithBlock:(void(^)(FMLiveSwitchManagedConnection*, FMLiveSwitchSessionDescription*))valueBlock;
/**

    Adds a handler that is raised every FMLiveSwitchManagedConnection#statsEventInterval milliseconds with the current estimated media quality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

*/
- (void) addOnMediaQuality:(FMLiveSwitchAction1<id>*)value;
/**

    Adds a handler that is raised every FMLiveSwitchManagedConnection#statsEventInterval milliseconds with the current estimated media quality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

*/
- (void (^)(void(^)(double))) addOnMediaQualityWithBlock;
/**

    Adds a handler that is raised every FMLiveSwitchManagedConnection#statsEventInterval milliseconds with the current estimated media quality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

*/
- (void) addOnMediaQualityWithBlock:(void(^)(double))valueBlock;
/**

    Adds a handler that is raised every FMLiveSwitchManagedConnection#statsEventInterval milliseconds with the current estimated network quality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

*/
- (void) addOnNetworkQuality:(FMLiveSwitchAction1<id>*)value;
/**

    Adds a handler that is raised every FMLiveSwitchManagedConnection#statsEventInterval milliseconds with the current estimated network quality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

*/
- (void (^)(void(^)(double))) addOnNetworkQualityWithBlock;
/**

    Adds a handler that is raised every FMLiveSwitchManagedConnection#statsEventInterval milliseconds with the current estimated network quality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

*/
- (void) addOnNetworkQualityWithBlock:(void(^)(double))valueBlock;
/**

    Adds a handler that is raised when there are no Media Servers available.

*/
- (void) addOnNoMediaServersAvailable:(FMLiveSwitchAction2<FMLiveSwitchManagedConnection*,FMLiveSwitchNoMediaServersAvailableEventArgs*>*)value;
/**

    Adds a handler that is raised when there are no Media Servers available.

*/
- (void (^)(void(^)(FMLiveSwitchManagedConnection*, FMLiveSwitchNoMediaServersAvailableEventArgs*))) addOnNoMediaServersAvailableWithBlock;
/**

    Adds a handler that is raised when there are no Media Servers available.

*/
- (void) addOnNoMediaServersAvailableWithBlock:(void(^)(FMLiveSwitchManagedConnection*, FMLiveSwitchNoMediaServersAvailableEventArgs*))valueBlock;
/**

    Adds a handler that is raised when there are no WebSocket Media Servers available.

*/
- (void) addOnNoWebSocketMediaServersAvailable:(FMLiveSwitchAction2<FMLiveSwitchManagedConnection*,FMLiveSwitchNoWebSocketMediaServersAvailableEventArgs*>*)value;
/**

    Adds a handler that is raised when there are no WebSocket Media Servers available.

*/
- (void (^)(void(^)(FMLiveSwitchManagedConnection*, FMLiveSwitchNoWebSocketMediaServersAvailableEventArgs*))) addOnNoWebSocketMediaServersAvailableWithBlock;
/**

    Adds a handler that is raised when there are no WebSocket Media Servers available.

*/
- (void) addOnNoWebSocketMediaServersAvailableWithBlock:(void(^)(FMLiveSwitchManagedConnection*, FMLiveSwitchNoWebSocketMediaServersAvailableEventArgs*))valueBlock;
/**

    Adds a handler that is raised when this connection is no longer being recorded.

*/
- (void) addOnRecordingDisabled:(FMLiveSwitchAction1<NSString*>*)value;
/**

    Adds a handler that is raised when this connection is no longer being recorded.

*/
- (void (^)(void(^)(NSString*))) addOnRecordingDisabledWithBlock;
/**

    Adds a handler that is raised when this connection is no longer being recorded.

*/
- (void) addOnRecordingDisabledWithBlock:(void(^)(NSString*))valueBlock;
/**

    Adds a handler that is raised when this connection is being recorded.

*/
- (void) addOnRecordingEnabled:(FMLiveSwitchAction1<NSString*>*)value;
/**

    Adds a handler that is raised when this connection is being recorded.

*/
- (void (^)(void(^)(NSString*))) addOnRecordingEnabledWithBlock;
/**

    Adds a handler that is raised when this connection is being recorded.

*/
- (void) addOnRecordingEnabledWithBlock:(void(^)(NSString*))valueBlock;
/**

    Adds a handler that is raised when the remote audio encoding is switched by the server.

*/
- (void) addOnRemoteAudioEncodingSwitch:(FMLiveSwitchAction2<FMLiveSwitchEncodingInfo*,FMLiveSwitchEncodingInfo*>*)value;
/**

    Adds a handler that is raised when the remote audio encoding is switched by the server.

*/
- (void (^)(void(^)(FMLiveSwitchEncodingInfo*, FMLiveSwitchEncodingInfo*))) addOnRemoteAudioEncodingSwitchWithBlock;
/**

    Adds a handler that is raised when the remote audio encoding is switched by the server.

*/
- (void) addOnRemoteAudioEncodingSwitchWithBlock:(void(^)(FMLiveSwitchEncodingInfo*, FMLiveSwitchEncodingInfo*))valueBlock;
/**

    Adds a handler that is raised when a remote candidate is ready.
    Parameters:
    - connection - the connection
    - candidate - the remote candidate

*/
- (void) addOnRemoteCandidate:(FMLiveSwitchAction2<FMLiveSwitchManagedConnection*,FMLiveSwitchCandidate*>*)value;
/**

    Adds a handler that is raised when a remote candidate is ready.
    Parameters:
    - connection - the connection
    - candidate - the remote candidate

*/
- (void (^)(void(^)(FMLiveSwitchManagedConnection*, FMLiveSwitchCandidate*))) addOnRemoteCandidateWithBlock;
/**

    Adds a handler that is raised when a remote candidate is ready.
    Parameters:
    - connection - the connection
    - candidate - the remote candidate

*/
- (void) addOnRemoteCandidateWithBlock:(void(^)(FMLiveSwitchManagedConnection*, FMLiveSwitchCandidate*))valueBlock;
/**

    Adds a handler that is raised when the remote description is ready.
    Parameters:
    - connection - the connection
    - description - the remote description

*/
- (void) addOnRemoteDescription:(FMLiveSwitchAction2<FMLiveSwitchManagedConnection*,FMLiveSwitchSessionDescription*>*)value;
/**

    Adds a handler that is raised when the remote description is ready.
    Parameters:
    - connection - the connection
    - description - the remote description

*/
- (void (^)(void(^)(FMLiveSwitchManagedConnection*, FMLiveSwitchSessionDescription*))) addOnRemoteDescriptionWithBlock;
/**

    Adds a handler that is raised when the remote description is ready.
    Parameters:
    - connection - the connection
    - description - the remote description

*/
- (void) addOnRemoteDescriptionWithBlock:(void(^)(FMLiveSwitchManagedConnection*, FMLiveSwitchSessionDescription*))valueBlock;
/**

    Adds a handler that is raised when a remote connection has been updated.

*/
- (void) addOnRemoteUpdate:(FMLiveSwitchAction2<FMLiveSwitchConnectionInfo*,FMLiveSwitchConnectionInfo*>*)value;
/**

    Adds a handler that is raised when a remote connection has been updated.

*/
- (void (^)(void(^)(FMLiveSwitchConnectionInfo*, FMLiveSwitchConnectionInfo*))) addOnRemoteUpdateWithBlock;
/**

    Adds a handler that is raised when a remote connection has been updated.

*/
- (void) addOnRemoteUpdateWithBlock:(void(^)(FMLiveSwitchConnectionInfo*, FMLiveSwitchConnectionInfo*))valueBlock;
/**

    Adds a handler that is raised when the remote video encoding is switched by the server.

*/
- (void) addOnRemoteVideoEncodingSwitch:(FMLiveSwitchAction2<FMLiveSwitchEncodingInfo*,FMLiveSwitchEncodingInfo*>*)value;
/**

    Adds a handler that is raised when the remote video encoding is switched by the server.

*/
- (void (^)(void(^)(FMLiveSwitchEncodingInfo*, FMLiveSwitchEncodingInfo*))) addOnRemoteVideoEncodingSwitchWithBlock;
/**

    Adds a handler that is raised when the remote video encoding is switched by the server.

*/
- (void) addOnRemoteVideoEncodingSwitchWithBlock:(void(^)(FMLiveSwitchEncodingInfo*, FMLiveSwitchEncodingInfo*))valueBlock;
/**

    Adds a handler that is raised when the signalling state changes.
    Parameters:
    - connection - the connection

*/
- (void) addOnSignallingStateChange:(FMLiveSwitchAction1<FMLiveSwitchManagedConnection*>*)value;
/**

    Adds a handler that is raised when the signalling state changes.
    Parameters:
    - connection - the connection

*/
- (void (^)(void(^)(FMLiveSwitchManagedConnection*))) addOnSignallingStateChangeWithBlock;
/**

    Adds a handler that is raised when the signalling state changes.
    Parameters:
    - connection - the connection

*/
- (void) addOnSignallingStateChangeWithBlock:(void(^)(FMLiveSwitchManagedConnection*))valueBlock;
/**

    Adds a handler that is raised when the connection state changes.
    Parameters:
    - connection - the connection

*/
- (void) addOnStateChange:(FMLiveSwitchAction1<FMLiveSwitchManagedConnection*>*)value;
/**

    Adds a handler that is raised when the connection state changes.
    Parameters:
    - connection - the connection

*/
- (void (^)(void(^)(FMLiveSwitchManagedConnection*))) addOnStateChangeWithBlock;
/**

    Adds a handler that is raised when the connection state changes.
    Parameters:
    - connection - the connection

*/
- (void) addOnStateChangeWithBlock:(void(^)(FMLiveSwitchManagedConnection*))valueBlock;
/**

    Adds a handler that is raised every FMLiveSwitchManagedConnection#statsEventInterval milliseconds with the current connection stats.

*/
- (void) addOnStats:(FMLiveSwitchAction1<FMLiveSwitchConnectionStats*>*)value;
/**

    Adds a handler that is raised every FMLiveSwitchManagedConnection#statsEventInterval milliseconds with the current connection stats.

*/
- (void (^)(void(^)(FMLiveSwitchConnectionStats*))) addOnStatsWithBlock;
/**

    Adds a handler that is raised every FMLiveSwitchManagedConnection#statsEventInterval milliseconds with the current connection stats.

*/
- (void) addOnStatsWithBlock:(void(^)(FMLiveSwitchConnectionStats*))valueBlock;
/**

    Adds a handler that is raised when a connection has it's video state changed from disabled or enabled. Due to connection constrainsts.
    Parameters:
    - connection - the connection
    - videoEnabled - the value indicating true if the video has been enabled or false for disabled.

*/
- (void) addOnVideoEnabledChange:(FMLiveSwitchAction2<FMLiveSwitchManagedConnection*,id>*)value;
/**

    Adds a handler that is raised when a connection has it's video state changed from disabled or enabled. Due to connection constrainsts.
    Parameters:
    - connection - the connection
    - videoEnabled - the value indicating true if the video has been enabled or false for disabled.

*/
- (void (^)(void(^)(FMLiveSwitchManagedConnection*, bool))) addOnVideoEnabledChangeWithBlock;
/**

    Adds a handler that is raised when a connection has it's video state changed from disabled or enabled. Due to connection constrainsts.
    Parameters:
    - connection - the connection
    - videoEnabled - the value indicating true if the video has been enabled or false for disabled.

*/
- (void) addOnVideoEnabledChangeWithBlock:(void(^)(FMLiveSwitchManagedConnection*, bool))valueBlock;
/**

    Adds a handler that is raised when the ability to unmute video is disabled.

*/
- (void) addOnVideoUnmuteDisabled:(FMLiveSwitchAction0*)value;
/**

    Adds a handler that is raised when the ability to unmute video is enabled.

*/
- (void) addOnVideoUnmuteEnabled:(FMLiveSwitchAction0*)value;
/**

    Gets the application identifier.

*/
- (NSString*) applicationId;
/**

    Gets the audio direction. Null if disabled.

*/
- (NSString*) audioDirection;
/**

    Gets the audio stream.

*/
- (FMLiveSwitchAudioStream*) audioStream;
/**

    Gets whether the ability to unmute audio is disabled.

*/
- (bool) audioUnmuteDisabled;
/**

    Gets the Bundle Policy.

*/
- (FMLiveSwitchBundlePolicy) bundlePolicy;
/**

    Gets the connection's canonical name.

    @deprecated Use MediaStream.LocalCanonicalName instead.
*/
- (NSString*) canonicalName __deprecated_msg("Use MediaStream.LocalCanonicalName instead.");
/**

    Gets the channel identifier.

*/
- (NSString*) channelId;
/**

    Gets the client identifier.

*/
- (NSString*) clientId;
/**

    Closes the connection.

*/
- (FMLiveSwitchFuture<id>*) close;
/**

    Gets the current configuration.

*/
- (FMLiveSwitchConnectionConfig*) config;
/**

    Gets a method that creates Datagram sockets. Optional. If not set, default OS UDP socket is used.

*/
- (FMLiveSwitchFunction1<FMLiveSwitchDatagramSocketCreateArgs*,FMLiveSwitchDatagramSocket*>*) createDatagramSocket;
/**

    Gets a method that creates Stream sockets. Optional. If not set, default OS TCP socket is used.

*/
- (FMLiveSwitchFunction1<FMLiveSwitchStreamSocketCreateArgs*,FMLiveSwitchStreamSocket*>*) createStreamSocket;
/**

    Gets the data direction. Null if disabled.

*/
- (NSString*) dataDirection;
/**

    Gets the data stream.

*/
- (FMLiveSwitchDataStream*) dataStream;
/**

    Gets the amount of time (in milliseconds) to wait before declaring the connection dead.
    When there are no candidate pairs connected, the timer will start. When a candidate pair becomes
    connected the timer will be reset and stopped. If no candidate pairs become connected before the
    timeout is reached, the state of the connection will change to failed.
    Defaults to 15,000.

*/
- (int) deadStreamTimeout;
/**

    Gets the default local DTLS certificate.

*/
+ (FMLiveSwitchDtlsCertificate*) defaultLocalDtlsCertificate;
/**

    Gets the default local DTLS certificates.

*/
+ (NSMutableArray*) defaultLocalDtlsCertificates;
/**

    Gets the default timeout, in milliseconds, before we fail the connection attempt
    where no Media Servers are available for either ICE servers or SFU/MCU offer processing.
    <br />
    The default value is 120,000 (2 minutes).

*/
+ (int) defaultNoMediaServerTimeout;
/**

    The default RTT strategy.

    @param rtt A round trip time measurement
*/
- (void) defaultRTTMonitoringStrategyWithRtt:(int)rtt;
/**

    Gets the default interval, in milliseconds, between stats events raised locally by FMLiveSwitchManagedConnection#addOnStats:.
    <br />
    The default value is 1,000 (1 second).

*/
+ (int) defaultStatsEventInterval;
/**

    Gets the default interval, in milliseconds, between stats reports sent to the Gateway.
    <br />
    The default value is 10,000 (10 seconds).

    @deprecated Use DefaultStatsReportInterval instead.
*/
+ (int) defaultStatsInterval __deprecated_msg("Use DefaultStatsReportInterval instead.");
/**

    Gets the default interval, in milliseconds, between stats reports sent to the Gateway.
    <br />
    The default value is 10,000 (10 seconds).

*/
+ (int) defaultStatsReportInterval;
/**

    Detaches internal event handlers.

*/
- (void) detachInternalEventHandlers;
/**

    Gets the device identifier.

*/
- (NSString*) deviceId;
/**

    Gets the Diagnostics Config.

*/
- (FMLiveSwitchDiagnosticsConfigDiagnosticsConfig*) diagnosticsConfig;
/**

    Gets whether to disable automatic ICE servers (embedded TURN).

*/
- (bool) disableAutomaticIceServers;
/**

    Creates a candidate message.

    @param candidate The candidate.
*/
- (FMLiveSwitchMessage*) doCreateCandidateMessageWithCandidate:(FMLiveSwitchCandidate*)candidate;
/**

    Creates a close message.

*/
- (FMLiveSwitchMessage*) doCreateCloseMessage;
/**

    Creates an update message.

    @param config The connection config.
*/
- (FMLiveSwitchMessage*) doCreateUpdateMessageWithConfig:(FMLiveSwitchConnectionConfig*)config;
/**

    Create the message to use WebSockets for media

*/
- (FMLiveSwitchMessage*) doCreateUseWebSocketServiceMessage;
/**

    Opens the connection.

*/
- (void) doOpen;
/**

    Processes a message.

    @param message The message.
*/
- (void) doProcessMessage:(FMLiveSwitchMessage*)message;
/**

    Gets the DTLS cipher suites to use.
    Defaults to:
    DtlsCipherSuite.EcdheEcdsaAes128Sha,
    DtlsCipherSuite.EcdheEcdsaAes128GcmSha256,
    DtlsCipherSuite.EcdheEcdsaAes128CbcSha256,
    DtlsCipherSuite.EcdheRsaAes128Sha,
    DtlsCipherSuite.EcdheRsaAes128GcmSha256,
    DtlsCipherSuite.EcdheRsaAes128CbcSha256,
    DtlsCipherSuite.RsaAes128Sha,
    DtlsCipherSuite.RsaAes128GcmSha256,
    DtlsCipherSuite.RsaAes128CbcSha256,

*/
- (NSMutableArray*) dtlsCipherSuites;
/**

    Gets the protocol version to use
    when in the DTLS client role. Defaults
    to FMLiveSwitchDtlsProtocolVersionDtls10.

*/
- (FMLiveSwitchDtlsProtocolVersion) dtlsClientVersion;
/**

    Gets the maximum protocol version to
    allow when in the DTLS server role. Defaults
    to FMLiveSwitchDtlsProtocolVersionDtls12.

*/
- (FMLiveSwitchDtlsProtocolVersion) dtlsServerMaxVersion;
/**

    Gets the minimum protocol version to
    allow when in the DTLS server role. Defaults
    to FMLiveSwitchDtlsProtocolVersionDtls10.

*/
- (FMLiveSwitchDtlsProtocolVersion) dtlsServerMinVersion;
/**

    Gets the error, if an error exists.

*/
- (FMLiveSwitchError*) error;
/**

    Gets the external connection identifier.

*/
- (NSString*) externalId;
/**

    Gets the state of the ice gathering.

*/
- (FMLiveSwitchIceGatheringState) gatheringState;
/**

    Gets the current connection stats.

*/
- (FMLiveSwitchFuture<FMLiveSwitchConnectionStats*>*) getStats;
/**

    Gets whether this connection has an audio stream.

*/
- (bool) hasAudio;
/**

    Gets whether this connection has a data stream.

*/
- (bool) hasData;
/**

    Gets whether this connection has a video stream.

*/
- (bool) hasVideo;
/**

    Gets the ICE address types.

*/
- (NSMutableArray*) iceAddressTypes;
/**

    Gets the state of the ice connection.

*/
- (FMLiveSwitchIceConnectionState) iceConnectionState;
/**

    Gets the ICE gather policy.

*/
- (FMLiveSwitchIceGatherPolicy) iceGatherPolicy;
/**

    Gets policy indicating whether ICE is required (and enabled) or disabled (and not required for this connection).

*/
- (FMLiveSwitchIcePolicy) icePolicy;
/**

    Gets the ICE port range.

*/
- (FMLiveSwitchIcePortRange*) icePortRange;
/**

    Gets the ICE role.

*/
- (FMLiveSwitchIceRole) iceRole;
/**

    Gets the ICE server.

*/
- (FMLiveSwitchIceServer*) iceServer;
/**

    Gets the ICE servers.

*/
- (NSMutableArray*) iceServers;
/**

    Gets the connection identifier.

*/
- (NSString*) id;
/**

    Gets the connection info.

*/
- (FMLiveSwitchConnectionInfo*) info;
/**

    Gets Data Channel for inband signalling.

*/
- (FMLiveSwitchDataChannel*) internalRtcpDataChannel;
/**

    Gets a value indicating whether the given direction is allowed for this connection.

    @param direction The direction.
*/
- (bool) isMediaDirectionAllowedWithDirection:(NSString*)direction;
/**

    Gets a value indicating how many
    milliseconds must elapse between STUN
    keep-alive binding requests.
    Defaults to 1000.

*/
- (int) keepAliveInterval;
/**

    Gets the LayoutPriority.

*/
- (FMLiveSwitchNullableInt*) layoutPriority;
/**

    Gets the LayoutZone.

*/
- (NSString*) layoutZone;
/**

    Gets the local audio direction. Null if disabled.

*/
- (NSString*) localAudioDirection;
/**

    Gets if local audio is disabled.

*/
- (bool) localAudioDisabled;
/**

    Gets the local audio formats.

*/
- (NSMutableArray*) localAudioFormats;
/**

    Gets whether the local audio is muted.

*/
- (bool) localAudioMuted;
/**

    Gets the local data direction. Null if disabled.

*/
- (NSString*) localDataDirection;
/**

    Gets if local data is disabled.

*/
- (bool) localDataDisabled;
/**

    Gets the local description.

*/
- (FMLiveSwitchSessionDescription*) localDescription;
/**

    Gets the local DTLS certificate.

*/
- (FMLiveSwitchDtlsCertificate*) localDtlsCertificate;
/**

    Gets the local DTLS certificates.

*/
- (NSMutableArray*) localDtlsCertificates;
/**

    Gets the local video direction. Null if disabled.

*/
- (NSString*) localVideoDirection;
/**

    Gets if local video is disabled.

*/
- (bool) localVideoDisabled;
/**

    Gets the local video formats.

*/
- (NSMutableArray*) localVideoFormats;
/**

    Gets whether the local video is muted.

*/
- (bool) localVideoMuted;
/**

    Gets the maximum retry backoff timeout, in milliseconds, before we retry a request
    after receiving no Media Servers are available for either ICE servers or SFU/MCU offer processing.
    <br />
    The default value is 1500ms.

*/
- (int) maxNoMediaServerRetryBackoff;
/**

    Gets the media identifier.

*/
- (NSString*) mediaId;
/**

    Gets the media protocol in use on this connection.

*/
- (FMLiveSwitchMediaProtocol) mediaProtocol;
/**

    Gets the current estimated media quality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

*/
- (double) mediaQuality;
/**

    Handles metric monitor state changes.

    @param eventArgs The event args for the metric monitor state change
*/
- (void) metricMonitorOnStateChangeWithEventArgs:(FMLiveSwitchMetricMonitorStateChangeEventArgs*)eventArgs;
/**

    Gets the mininum retry backoff timeout, in milliseconds, before we retry a request
    after receiving no Media Servers are available for either ICE servers or SFU/MCU offer processing.
    <br />
    The default value is 1000ms.

*/
- (int) minNoMediaServerRetryBackoff;
/**

    Gets the multiplex policy.

*/
- (FMLiveSwitchMultiplexPolicy) multiplexPolicy;
/**

    Gets the current estimated network quality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

*/
- (double) networkQuality;
/**

    Gets the timeout, in milliseconds, before failing a request
    where no Media Servers are available for either ICE servers or SFU/MCU offer processing.

*/
- (int) noMediaServerTimeout;
/**

    The no rtt strategy.

    @param rtt 
*/
- (void) noRttMonitoringStrategyWithRtt:(int)rtt;
/**

    Opens the connection.

*/
- (FMLiveSwitchFuture<id>*) open;
/**

    Gets the private IP address of this
    device. If set, this will bypass the local
    network discovery and use this as the sole
    host candidate.

*/
- (NSString*) privateIPAddress;
/**

    Gets the private IP address of this
    device. If set, this will bypass the local
    network discovery and use this as the sole
    host candidate.

*/
- (NSMutableArray*) privateIPAddresses;
/**

    Processes an answer.

    @param message The message.
*/
- (void) processAnswerWithMessage:(FMLiveSwitchMessage*)message;
/**

    Processes an error message.

    @param message The message.
*/
- (void) processErrorWithMessage:(FMLiveSwitchMessage*)message;
/**

    Processes an iceServers message.

    @param message The message.
*/
- (void) processIceServersWithMessage:(FMLiveSwitchMessage*)message;
/**

    Processes a local failure.

    @param error The error.
*/
- (void) processLocalError:(FMLiveSwitchError*)error;
/**

    Processes an iceServers message.

    @param message The message.
*/
- (void) processMediaIntentResponseWithMessage:(FMLiveSwitchMessage*)message;
/**

    Processes inband signalling activation.

    @param message 
*/
- (void) processRtcpDataChannelSignallingActivationWithMessage:(FMLiveSwitchMessage*)message;
/**

    Processes a simulcast notification

    @param message The simulcast notificaiton message.
*/
- (void) processSimulcastNotificationWithMessage:(FMLiveSwitchMessage*)message;
/**

    Raises an audio bitrate notification.

    @param audioStream The audio stream.
    @param bitrateNotification The bitrate notification.
*/
- (void) raiseAudioBitrateNotificationWithAudioStream:(FMLiveSwitchAudioStream*)audioStream bitrateNotification:(FMLiveSwitchBitrateNotification*)bitrateNotification;
/**

    Raises an audio bitrate request.

    @param audioStream The audio stream.
    @param bitrateRequest The bitrate request.
*/
- (void) raiseAudioBitrateRequestWithAudioStream:(FMLiveSwitchAudioStream*)audioStream bitrateRequest:(FMLiveSwitchBitrateRequest*)bitrateRequest;
/**

    Raises a local candidate.

    @param localCandidate The local candidate.
*/
- (void) raiseLocalCandidate:(FMLiveSwitchCandidate*)localCandidate;
/**

    Raises the OnNoMediaServersAvailable event.

*/
- (void) raiseNoMediaServersAvailableWithArgs:(FMLiveSwitchNoMediaServersAvailableEventArgs*)args;
/**

    Raises the OnNoWebSocketMediaServersAvailable event.

*/
- (void) raiseNoWebSocketMediaServersAvailableWithArgs:(FMLiveSwitchNoWebSocketMediaServersAvailableEventArgs*)args;
/**

    Raises a remote candidate.

    @param remoteCandidate The remote candidate.
*/
- (void) raiseRemoteCandidate:(FMLiveSwitchCandidate*)remoteCandidate;
/**

    Raises a video bitrate notification.

    @param videoStream The video stream.
    @param bitrateNotification The bitrate notification.
*/
- (void) raiseVideoBitrateNotificationWithVideoStream:(FMLiveSwitchVideoStream*)videoStream bitrateNotification:(FMLiveSwitchBitrateNotification*)bitrateNotification;
/**

    Raises a video bitrate request.

    @param videoStream The video stream.
    @param bitrateRequest The bitrate request.
*/
- (void) raiseVideoBitrateRequestWithVideoStream:(FMLiveSwitchVideoStream*)videoStream bitrateRequest:(FMLiveSwitchBitrateRequest*)bitrateRequest;
/**

    Gets a randomizer for backoff timers

*/
- (FMLiveSwitchRandomizer*) randomizer;
/**

    Gets whether this connection is being recorded.

*/
- (bool) recordingEnabled;
/**

    Gets if remote audio is disabled.

*/
- (bool) remoteAudioDisabled;
/**

    Gets the remote audio encoding.

*/
- (FMLiveSwitchEncodingInfo*) remoteAudioEncoding;
/**

    Gets the remote audio formats.

*/
- (NSMutableArray*) remoteAudioFormats;
/**

    Gets whether the remote audio is muted.

*/
- (bool) remoteAudioMuted;
/**

    Gets a value indicating whether the connection was
    closed by the remote host.

*/
- (bool) remoteClosed;
/**

    Gets the remote connection identifier, if available.

*/
- (NSString*) remoteConnectionId;
/**

    Gets if remote data is disabled.

*/
- (bool) remoteDataDisabled;
/**

    Gets the remote description.

*/
- (FMLiveSwitchSessionDescription*) remoteDescription;
/**

    Gets the remote media identifier, if available.

*/
- (NSString*) remoteMediaId;
/**

    Gets a value indicating whether the connection
    was rejected by the remote host.

*/
- (bool) remoteRejected;
/**

    Gets the remote tag, if applicable.

*/
- (NSString*) remoteTag;
/**

    Gets if remote video is disabled.

*/
- (bool) remoteVideoDisabled;
/**

    Gets the remote video encoding.

*/
- (FMLiveSwitchEncodingInfo*) remoteVideoEncoding;
/**

    Gets the remote video formats.

*/
- (NSMutableArray*) remoteVideoFormats;
/**

    Gets whether the remote video is muted.

*/
- (bool) remoteVideoMuted;
/**

    Removes a handler that is raised when the ability to unmute audio is disabled.

*/
- (void) removeOnAudioUnmuteDisabled:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the ability to unmute audio is enabled.

*/
- (void) removeOnAudioUnmuteEnabled:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when automatic ICE servers have been received.
    Parameters:
    - connection - the connection
    - automaticIceServers - the automatic ICE severs collection

*/
- (void) removeOnAutomaticIceServers:(FMLiveSwitchAction2<FMLiveSwitchManagedConnection*,FMLiveSwitchIceServerCollection*>*)value;
/**

    Removes a handler that is raised when the ICE gathering state changes.
    Parameters:
    - connection - the connection

*/
- (void) removeOnGatheringStateChange:(FMLiveSwitchAction1<FMLiveSwitchManagedConnection*>*)value;
/**

    Removes a handler that is raised when the ICE connection state changes.
    Parameters:
    - connection - the connection

*/
- (void) removeOnIceConnectionStateChange:(FMLiveSwitchAction1<FMLiveSwitchManagedConnection*>*)value;
/**

    Removes a handler that is raised when a local candidate is ready.
    Parameters:
    - connection - the connection
    - candidate - the local candidate

*/
- (void) removeOnLocalCandidate:(FMLiveSwitchAction2<FMLiveSwitchManagedConnection*,FMLiveSwitchCandidate*>*)value;
/**

    Removes a handler that is raised when the local description is ready.
    Parameters:
    - connection - the connection
    - description - the local description

*/
- (void) removeOnLocalDescription:(FMLiveSwitchAction2<FMLiveSwitchManagedConnection*,FMLiveSwitchSessionDescription*>*)value;
/**

    Removes a handler that is raised every FMLiveSwitchManagedConnection#statsEventInterval milliseconds with the current estimated media quality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

*/
- (void) removeOnMediaQuality:(FMLiveSwitchAction1<id>*)value;
/**

    Removes a handler that is raised every FMLiveSwitchManagedConnection#statsEventInterval milliseconds with the current estimated network quality.
    <br />
    The value ranges from 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality.

*/
- (void) removeOnNetworkQuality:(FMLiveSwitchAction1<id>*)value;
/**

    Removes a handler that is raised when there are no Media Servers available.

*/
- (void) removeOnNoMediaServersAvailable:(FMLiveSwitchAction2<FMLiveSwitchManagedConnection*,FMLiveSwitchNoMediaServersAvailableEventArgs*>*)value;
/**

    Removes a handler that is raised when there are no WebSocket Media Servers available.

*/
- (void) removeOnNoWebSocketMediaServersAvailable:(FMLiveSwitchAction2<FMLiveSwitchManagedConnection*,FMLiveSwitchNoWebSocketMediaServersAvailableEventArgs*>*)value;
/**

    Removes a handler that is raised when this connection is no longer being recorded.

*/
- (void) removeOnRecordingDisabled:(FMLiveSwitchAction1<NSString*>*)value;
/**

    Removes a handler that is raised when this connection is being recorded.

*/
- (void) removeOnRecordingEnabled:(FMLiveSwitchAction1<NSString*>*)value;
/**

    Removes a handler that is raised when the remote audio encoding is switched by the server.

*/
- (void) removeOnRemoteAudioEncodingSwitch:(FMLiveSwitchAction2<FMLiveSwitchEncodingInfo*,FMLiveSwitchEncodingInfo*>*)value;
/**

    Removes a handler that is raised when a remote candidate is ready.
    Parameters:
    - connection - the connection
    - candidate - the remote candidate

*/
- (void) removeOnRemoteCandidate:(FMLiveSwitchAction2<FMLiveSwitchManagedConnection*,FMLiveSwitchCandidate*>*)value;
/**

    Removes a handler that is raised when the remote description is ready.
    Parameters:
    - connection - the connection
    - description - the remote description

*/
- (void) removeOnRemoteDescription:(FMLiveSwitchAction2<FMLiveSwitchManagedConnection*,FMLiveSwitchSessionDescription*>*)value;
/**

    Removes a handler that is raised when a remote connection has been updated.

*/
- (void) removeOnRemoteUpdate:(FMLiveSwitchAction2<FMLiveSwitchConnectionInfo*,FMLiveSwitchConnectionInfo*>*)value;
/**

    Removes a handler that is raised when the remote video encoding is switched by the server.

*/
- (void) removeOnRemoteVideoEncodingSwitch:(FMLiveSwitchAction2<FMLiveSwitchEncodingInfo*,FMLiveSwitchEncodingInfo*>*)value;
/**

    Removes a handler that is raised when the signalling state changes.
    Parameters:
    - connection - the connection

*/
- (void) removeOnSignallingStateChange:(FMLiveSwitchAction1<FMLiveSwitchManagedConnection*>*)value;
/**

    Removes a handler that is raised when the connection state changes.
    Parameters:
    - connection - the connection

*/
- (void) removeOnStateChange:(FMLiveSwitchAction1<FMLiveSwitchManagedConnection*>*)value;
/**

    Removes a handler that is raised every FMLiveSwitchManagedConnection#statsEventInterval milliseconds with the current connection stats.

*/
- (void) removeOnStats:(FMLiveSwitchAction1<FMLiveSwitchConnectionStats*>*)value;
/**

    Removes a handler that is raised when a connection has it's video state changed from disabled or enabled. Due to connection constrainsts.
    Parameters:
    - connection - the connection
    - videoEnabled - the value indicating true if the video has been enabled or false for disabled.

*/
- (void) removeOnVideoEnabledChange:(FMLiveSwitchAction2<FMLiveSwitchManagedConnection*,id>*)value;
/**

    Removes a handler that is raised when the ability to unmute video is disabled.

*/
- (void) removeOnVideoUnmuteDisabled:(FMLiveSwitchAction0*)value;
/**

    Removes a handler that is raised when the ability to unmute video is enabled.

*/
- (void) removeOnVideoUnmuteEnabled:(FMLiveSwitchAction0*)value;
/**

    Gets the RTT strategy.

*/
- (FMLiveSwitchAction1<id>*) rttMonitoringStrategy;
/**

    Sends a message.

    @param message The message.
*/
- (FMLiveSwitchFuture<FMLiveSwitchMessage*>*) sendWithMessage:(FMLiveSwitchMessage*)message;
/**

    Sets the Bundle Policy.

*/
- (void) setBundlePolicy:(FMLiveSwitchBundlePolicy)value;
/**

    Sets a method that creates Datagram sockets. Optional. If not set, default OS UDP socket is used.

*/
- (void) setCreateDatagramSocket:(FMLiveSwitchFunction1<FMLiveSwitchDatagramSocketCreateArgs*,FMLiveSwitchDatagramSocket*>*)value;
/**

    Sets a method that creates Datagram sockets. Optional. If not set, default OS UDP socket is used.

*/
- (void (^)(FMLiveSwitchDatagramSocket*(^)(FMLiveSwitchDatagramSocketCreateArgs*))) setCreateDatagramSocketBlock;
/**

    Sets a method that creates Datagram sockets. Optional. If not set, default OS UDP socket is used.

*/
- (void) setCreateDatagramSocketBlock:(FMLiveSwitchDatagramSocket*(^)(FMLiveSwitchDatagramSocketCreateArgs*))valueBlock;
/**

    Sets a method that creates Stream sockets. Optional. If not set, default OS TCP socket is used.

*/
- (void) setCreateStreamSocket:(FMLiveSwitchFunction1<FMLiveSwitchStreamSocketCreateArgs*,FMLiveSwitchStreamSocket*>*)value;
/**

    Sets a method that creates Stream sockets. Optional. If not set, default OS TCP socket is used.

*/
- (void (^)(FMLiveSwitchStreamSocket*(^)(FMLiveSwitchStreamSocketCreateArgs*))) setCreateStreamSocketBlock;
/**

    Sets a method that creates Stream sockets. Optional. If not set, default OS TCP socket is used.

*/
- (void) setCreateStreamSocketBlock:(FMLiveSwitchStreamSocket*(^)(FMLiveSwitchStreamSocketCreateArgs*))valueBlock;
/**

    Sets the amount of time (in milliseconds) to wait before declaring the connection dead.
    When there are no candidate pairs connected, the timer will start. When a candidate pair becomes
    connected the timer will be reset and stopped. If no candidate pairs become connected before the
    timeout is reached, the state of the connection will change to failed.
    Defaults to 15,000.

*/
- (void) setDeadStreamTimeout:(int)value;
/**

    Sets the default local DTLS certificate.

*/
+ (void) setDefaultLocalDtlsCertificate:(FMLiveSwitchDtlsCertificate*)value;
/**

    Sets the default local DTLS certificates.

*/
+ (void) setDefaultLocalDtlsCertificates:(NSMutableArray*)value;
/**

    Sets the default timeout, in milliseconds, before we fail the connection attempt
    where no Media Servers are available for either ICE servers or SFU/MCU offer processing.
    <br />
    The default value is 120,000 (2 minutes).

*/
+ (void) setDefaultNoMediaServerTimeout:(int)value;
/**

    Sets the default interval, in milliseconds, between stats events raised locally by FMLiveSwitchManagedConnection#addOnStats:.
    <br />
    The default value is 1,000 (1 second).

*/
+ (void) setDefaultStatsEventInterval:(int)value;
/**

    Sets the default interval, in milliseconds, between stats reports sent to the Gateway.
    <br />
    The default value is 10,000 (10 seconds).

    @deprecated Use DefaultStatsReportInterval instead.
*/
+ (void) setDefaultStatsInterval:(int)value __deprecated_msg("Use DefaultStatsReportInterval instead.");
/**

    Sets the default interval, in milliseconds, between stats reports sent to the Gateway.
    <br />
    The default value is 10,000 (10 seconds).

*/
+ (void) setDefaultStatsReportInterval:(int)value;
/**

    Sets whether to disable automatic ICE servers (embedded TURN).

*/
- (void) setDisableAutomaticIceServers:(bool)value;
/**

    Sets the DTLS cipher suites to use.
    Defaults to:
    DtlsCipherSuite.EcdheEcdsaAes128Sha,
    DtlsCipherSuite.EcdheEcdsaAes128GcmSha256,
    DtlsCipherSuite.EcdheEcdsaAes128CbcSha256,
    DtlsCipherSuite.EcdheRsaAes128Sha,
    DtlsCipherSuite.EcdheRsaAes128GcmSha256,
    DtlsCipherSuite.EcdheRsaAes128CbcSha256,
    DtlsCipherSuite.RsaAes128Sha,
    DtlsCipherSuite.RsaAes128GcmSha256,
    DtlsCipherSuite.RsaAes128CbcSha256,

*/
- (void) setDtlsCipherSuites:(NSMutableArray*)value;
/**

    Sets the protocol version to use
    when in the DTLS client role. Defaults
    to FMLiveSwitchDtlsProtocolVersionDtls10.

*/
- (void) setDtlsClientVersion:(FMLiveSwitchDtlsProtocolVersion)value;
/**

    Sets the maximum protocol version to
    allow when in the DTLS server role. Defaults
    to FMLiveSwitchDtlsProtocolVersionDtls12.

*/
- (void) setDtlsServerMaxVersion:(FMLiveSwitchDtlsProtocolVersion)value;
/**

    Sets the minimum protocol version to
    allow when in the DTLS server role. Defaults
    to FMLiveSwitchDtlsProtocolVersionDtls10.

*/
- (void) setDtlsServerMinVersion:(FMLiveSwitchDtlsProtocolVersion)value;
/**

    Sets the ICE address types.

*/
- (void) setIceAddressTypes:(NSMutableArray*)value;
/**

    Sets the ICE gather policy.

*/
- (void) setIceGatherPolicy:(FMLiveSwitchIceGatherPolicy)value;
/**

    Sets policy indicating whether ICE is required (and enabled) or disabled (and not required for this connection).

*/
- (void) setIcePolicy:(FMLiveSwitchIcePolicy)value;
/**

    Sets the ICE port range.

*/
- (void) setIcePortRange:(FMLiveSwitchIcePortRange*)value;
/**

    Sets the ICE server.

*/
- (void) setIceServer:(FMLiveSwitchIceServer*)value;
/**

    Sets the ICE servers.

*/
- (void) setIceServers:(NSMutableArray*)value;
/**

    Sets a value indicating how many
    milliseconds must elapse between STUN
    keep-alive binding requests.
    Defaults to 1000.

*/
- (void) setKeepAliveInterval:(int)value;
/**

    Sets the LayoutPriority.

*/
- (void) setLayoutPriority:(FMLiveSwitchNullableInt*)value;
/**

    Sets the LayoutZone.

*/
- (void) setLayoutZone:(NSString*)value;
/**

    Sets the local audio formats.

*/
- (void) setLocalAudioFormats:(NSMutableArray*)value;
/**

    Sets the local DTLS certificate.

*/
- (void) setLocalDtlsCertificate:(FMLiveSwitchDtlsCertificate*)value;
/**

    Sets the local DTLS certificates.

*/
- (void) setLocalDtlsCertificates:(NSMutableArray*)value;
/**

    Sets the local video formats.

*/
- (void) setLocalVideoFormats:(NSMutableArray*)value;
/**

    Sets the maximum retry backoff timeout, in milliseconds, before we retry a request
    after receiving no Media Servers are available for either ICE servers or SFU/MCU offer processing.
    <br />
    The default value is 1500ms.

*/
- (void) setMaxNoMediaServerRetryBackoff:(int)value;
/**

    Sets the media identifier.

*/
- (void) setMediaId:(NSString*)value;
/**

    Sets the mininum retry backoff timeout, in milliseconds, before we retry a request
    after receiving no Media Servers are available for either ICE servers or SFU/MCU offer processing.
    <br />
    The default value is 1000ms.

*/
- (void) setMinNoMediaServerRetryBackoff:(int)value;
/**

    Sets the multiplex policy.

*/
- (void) setMultiplexPolicy:(FMLiveSwitchMultiplexPolicy)value;
/**

    Sets the timeout, in milliseconds, before failing a request
    where no Media Servers are available for either ICE servers or SFU/MCU offer processing.

*/
- (void) setNoMediaServerTimeout:(int)value;
/**

    Sets the private IP address of this
    device. If set, this will bypass the local
    network discovery and use this as the sole
    host candidate.

*/
- (void) setPrivateIPAddress:(NSString*)value;
/**

    Sets the private IP address of this
    device. If set, this will bypass the local
    network discovery and use this as the sole
    host candidate.

*/
- (void) setPrivateIPAddresses:(NSMutableArray*)value;
/**

    Sets the remote audio encoding.

*/
- (void) setRemoteAudioEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Sets the remote audio formats.

*/
- (void) setRemoteAudioFormats:(NSMutableArray*)value;
/**

    Sets whether the remote audio is muted.

*/
- (void) setRemoteAudioMuted:(bool)value;
/**

    Sets the remote connection identifier, if available.

*/
- (void) setRemoteConnectionId:(NSString*)value;
/**

    Sets the remote media identifier, if available.

*/
- (void) setRemoteMediaId:(NSString*)value;
/**

    Sets the remote tag, if applicable.

*/
- (void) setRemoteTag:(NSString*)value;
/**

    Sets the remote video encoding.

*/
- (void) setRemoteVideoEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Sets the remote video formats.

*/
- (void) setRemoteVideoFormats:(NSMutableArray*)value;
/**

    Sets whether the remote video is muted.

*/
- (void) setRemoteVideoMuted:(bool)value;
/**

    Sets the RTT strategy.

*/
- (void) setRttMonitoringStrategy:(FMLiveSwitchAction1<id>*)value;
/**

    Sets the RTT strategy.

*/
- (void (^)(void(^)(int))) setRttMonitoringStrategyBlock;
/**

    Sets the RTT strategy.

*/
- (void) setRttMonitoringStrategyBlock:(void(^)(int))valueBlock;
/**

    Sets the interval, in milliseconds, between stats events raised locally by FMLiveSwitchManagedConnection#addOnStats:.
    <br />
    The default value is 1000 (1 second).

*/
- (void) setStatsEventInterval:(int)value;
/**

    Sets the default interval, in milliseconds, between stats reports sent to the Gateway.
    <br />
    The default value is 10,000 (10 seconds).

    @deprecated Use StatsReportInterval instead.
*/
- (void) setStatsInterval:(int)value __deprecated_msg("Use StatsReportInterval instead.");
/**

    Sets the interval, in milliseconds, between stats reports sent to the Gateway.
    <br />
    The default value is 10,000 (10 seconds).

*/
- (void) setStatsReportInterval:(int)value;
/**

    Sets the limit on the the number of Turn Allocate request messages when trying to establish allocation on a Turn server.

*/
- (void) setStunBindingRequestLimit:(int)value;
/**

    Sets the timeout for individual Stun (and Turn) request messages in ms.

*/
- (void) setStunRequestTimeout:(int)value;
/**

    Sets the tag.

*/
- (void) setTag:(NSString*)value;
/**

    Sets connection timeout for stream sockets in ms.

*/
- (void) setTcpConnectTimeout:(int)value;
/**

    Sets a method that can be used to test and optionally modify inbound RTP buffers.
    FOR TESTING PURPOSES ONLY. Returning `null` will cause the buffer to be discarded.

*/
- (void) setTestReceivedRtpBuffer:(FMLiveSwitchFunction1<FMLiveSwitchDataBuffer*,FMLiveSwitchDataBuffer*>*)value;
/**

    Sets a method that can be used to test and optionally modify inbound RTP buffers.
    FOR TESTING PURPOSES ONLY. Returning `null` will cause the buffer to be discarded.

*/
- (void (^)(FMLiveSwitchDataBuffer*(^)(FMLiveSwitchDataBuffer*))) setTestReceivedRtpBufferBlock;
/**

    Sets a method that can be used to test and optionally modify inbound RTP buffers.
    FOR TESTING PURPOSES ONLY. Returning `null` will cause the buffer to be discarded.

*/
- (void) setTestReceivedRtpBufferBlock:(FMLiveSwitchDataBuffer*(^)(FMLiveSwitchDataBuffer*))valueBlock;
/**

    Sets a fixed round-trip time (in milliseconds) to use in the network transport.
    FOR TESTING PURPOSES ONLY. Defaults to -1, which indicates that normal round-trip time
    calculations should be used.

*/
- (void) setTestRoundTripTime:(int)value;
/**

    Sets a method that can be used to test and optionally modify outbound RTP buffers.
    FOR TESTING PURPOSES ONLY. Returning `null` will cause the buffer to be discarded.

*/
- (void) setTestSendingRtpBuffer:(FMLiveSwitchFunction1<FMLiveSwitchDataBuffer*,FMLiveSwitchDataBuffer*>*)value;
/**

    Sets a method that can be used to test and optionally modify outbound RTP buffers.
    FOR TESTING PURPOSES ONLY. Returning `null` will cause the buffer to be discarded.

*/
- (void (^)(FMLiveSwitchDataBuffer*(^)(FMLiveSwitchDataBuffer*))) setTestSendingRtpBufferBlock;
/**

    Sets a method that can be used to test and optionally modify outbound RTP buffers.
    FOR TESTING PURPOSES ONLY. Returning `null` will cause the buffer to be discarded.

*/
- (void) setTestSendingRtpBufferBlock:(FMLiveSwitchDataBuffer*(^)(FMLiveSwitchDataBuffer*))valueBlock;
/**

    Sets the trickle-ICE policy.

*/
- (void) setTrickleIcePolicy:(FMLiveSwitchTrickleIcePolicy)value;
/**

    Sets the limit on the the number of Turn Allocate request messages when trying to establish allocation on a Turn server.

*/
- (void) setTurnAllocateRequestLimit:(int)value;
/**

    Sets if we should use WebSockets for sending media.

*/
- (void) setUseWebSocketsForMedia:(bool)value;
/**

    Sets a method that determines when to enable video again on a connection that dynamically disables video. Optional. If not set, default policy will be used.
    Takes in an interger parameter that represents the amount of attempts already tried. Will return an interger value as a time period in seconds for how long to wait for the next attempt or -1 for no more attempts.

*/
- (void) setVideoEnabledUpdateConnectionPolicy:(FMLiveSwitchFunction1<id,id>*)value;
/**

    Sets a method that determines when to enable video again on a connection that dynamically disables video. Optional. If not set, default policy will be used.
    Takes in an interger parameter that represents the amount of attempts already tried. Will return an interger value as a time period in seconds for how long to wait for the next attempt or -1 for no more attempts.

*/
- (void (^)(int(^)(int))) setVideoEnabledUpdateConnectionPolicyBlock;
/**

    Sets a method that determines when to enable video again on a connection that dynamically disables video. Optional. If not set, default policy will be used.
    Takes in an interger parameter that represents the amount of attempts already tried. Will return an interger value as a time period in seconds for how long to wait for the next attempt or -1 for no more attempts.

*/
- (void) setVideoEnabledUpdateConnectionPolicyBlock:(int(^)(int))valueBlock;
/**

    Sets the Video Retention Policy.
    This will determine how we will handle video on the connection when the connection is of poor quality.

*/
- (void) setVideoRetentionPolicy:(FMLiveSwitchVideoRetentionPolicy)value;
/**

    Sets the WMS endpoint address.

*/
- (void) setWmsAddress:(NSString*)value;
/**

    Sets WMS connection token.

*/
- (void) setWmsConnectionToken:(NSString*)value;
/**

    Gets the state of the signalling.

*/
- (FMLiveSwitchSignallingState) signallingState;
/**

    Gets the state of the connection.

*/
- (FMLiveSwitchConnectionState) state;
/**

    Gets the interval, in milliseconds, between stats events raised locally by FMLiveSwitchManagedConnection#addOnStats:.
    <br />
    The default value is 1000 (1 second).

*/
- (int) statsEventInterval;
/**

    Gets the default interval, in milliseconds, between stats reports sent to the Gateway.
    <br />
    The default value is 10,000 (10 seconds).

    @deprecated Use StatsReportInterval instead.
*/
- (int) statsInterval __deprecated_msg("Use StatsReportInterval instead.");
/**

    Gets the interval, in milliseconds, between stats reports sent to the Gateway.
    <br />
    The default value is 10,000 (10 seconds).

*/
- (int) statsReportInterval;
/**

    Gets the limit on the the number of Turn Allocate request messages when trying to establish allocation on a Turn server.

*/
- (int) stunBindingRequestLimit;
/**

    Gets the timeout for individual Stun (and Turn) request messages in ms.

*/
- (int) stunRequestTimeout;
/**

    Gets the tag.

*/
- (NSString*) tag;
/**

    Gets connection timeout for stream sockets in ms.

*/
- (int) tcpConnectTimeout;
/**

    Gets a method that can be used to test and optionally modify inbound RTP buffers.
    FOR TESTING PURPOSES ONLY. Returning `null` will cause the buffer to be discarded.

*/
- (FMLiveSwitchFunction1<FMLiveSwitchDataBuffer*,FMLiveSwitchDataBuffer*>*) testReceivedRtpBuffer;
/**

    Gets a fixed round-trip time (in milliseconds) to use in the network transport.
    FOR TESTING PURPOSES ONLY. Defaults to -1, which indicates that normal round-trip time
    calculations should be used.

*/
- (int) testRoundTripTime;
/**

    Gets a method that can be used to test and optionally modify outbound RTP buffers.
    FOR TESTING PURPOSES ONLY. Returning `null` will cause the buffer to be discarded.

*/
- (FMLiveSwitchFunction1<FMLiveSwitchDataBuffer*,FMLiveSwitchDataBuffer*>*) testSendingRtpBuffer;
/**

    Gets the trickle-ICE policy.

*/
- (FMLiveSwitchTrickleIcePolicy) trickleIcePolicy;
/**

    Sends bitrate messages.

    @param message The message to send.
*/
- (bool) trySendRtcpDataChannelWithMessage:(FMLiveSwitchMessage*)message;
/**

    Gets the limit on the the number of Turn Allocate request messages when trying to establish allocation on a Turn server.

*/
- (int) turnAllocateRequestLimit;
/**

    Gets the connection type.

*/
- (NSString*) type;
/**

    Updates this connection.

    @param config The connection configuration.
    @return A future that resolves when the connection has been updated.
*/
- (FMLiveSwitchFuture<id>*) updateWithConfig:(FMLiveSwitchConnectionConfig*)config;
/**

    Gets the user identifier.

*/
- (NSString*) userId;
/**

    Gets if we should use WebSockets for sending media.

*/
- (bool) useWebSocketsForMedia;
/**

    Gets the video direction. Null if disabled.

*/
- (NSString*) videoDirection;
/**

    Gets the amount of attempts this connection has made to enabled video on a connection. These attempts happen after
    the connection has been updated to disabled video due to network constraints.

*/
- (int) videoEnabledConnectionUpdateAttempts;
/**

    Gets a method that determines when to enable video again on a connection that dynamically disables video. Optional. If not set, default policy will be used.
    Takes in an interger parameter that represents the amount of attempts already tried. Will return an interger value as a time period in seconds for how long to wait for the next attempt or -1 for no more attempts.

*/
- (FMLiveSwitchFunction1<id,id>*) videoEnabledUpdateConnectionPolicy;
/**

    Gets the Video Retention Policy.
    This will determine how we will handle video on the connection when the connection is of poor quality.

*/
- (FMLiveSwitchVideoRetentionPolicy) videoRetentionPolicy;
/**

    Gets the video stream.

*/
- (FMLiveSwitchVideoStream*) videoStream;
/**

    Gets whether the ability to unmute video is disabled.

*/
- (bool) videoUnmuteDisabled;
/**

    Gets the WMS endpoint address.

*/
- (NSString*) wmsAddress;
/**

    Gets WMS connection token.

*/
- (NSString*) wmsConnectionToken;

@end

/**

    Utility to assist with managing the layout of a combined video feed.

*/
@interface FMLiveSwitchLayoutUtility : NSObject

/**

    Floats the local preview over the combined video feed.

    @param layout The layout.
    @param videoLayout The video layout.
    @param localConnectionId The local connection identifier.
*/
+ (bool) floatLocalPreviewWithLayout:(FMLiveSwitchLayout*)layout videoLayout:(FMLiveSwitchVideoLayout*)videoLayout localConnectionId:(NSString*)localConnectionId;
/**

    Floats the local preview over the combined video feed.

    @param layout The layout.
    @param videoLayout The video layout.
    @param localConnectionId The local connection identifier.
    @param viewId The view id to compare with.
*/
+ (bool) floatLocalPreviewWithLayout:(FMLiveSwitchLayout*)layout videoLayout:(FMLiveSwitchVideoLayout*)videoLayout localConnectionId:(NSString*)localConnectionId viewId:(NSString*)viewId;
/**

    Floats the local preview over the combined video feed.

    @param layout The layout.
    @param videoLayout The video layout.
    @param localConnectionId The local connection identifier.
    @param viewId The view id to compare with.
    @param localViewSink The local view sink.
*/
+ (bool) floatLocalPreviewWithLayout:(FMLiveSwitchLayout*)layout videoLayout:(FMLiveSwitchVideoLayout*)videoLayout localConnectionId:(NSString*)localConnectionId viewId:(NSString*)viewId localViewSink:(NSObject<FMLiveSwitchIViewSink>*)localViewSink;
/**

    Floats the local preview over the combined video feed.

    @param localFrame The local frame.
    @param remoteFrame The remote frame.
    @param videoLayout The video layout.
    @param localConnectionId The local connection identifier.
*/
+ (bool) floatLocalPreviewWithLocalFrame:(FMLiveSwitchLayoutFrame*)localFrame remoteFrame:(FMLiveSwitchLayoutFrame*)remoteFrame videoLayout:(FMLiveSwitchVideoLayout*)videoLayout localConnectionId:(NSString*)localConnectionId;
- (instancetype) init;
+ (FMLiveSwitchLayoutUtility*) layoutUtility;

@end

/**

    A server connection.

*/
@interface FMLiveSwitchServerConnection : FMLiveSwitchManagedConnection

/**

    Adds a handler that is raised when the inbound audio bitrate changes.

*/
- (void) addOnInboundAudioBitrateChange:(FMLiveSwitchAction2<id,id>*)value;
/**

    Adds a handler that is raised when the inbound audio bitrate changes.

*/
- (void (^)(void(^)(int, int))) addOnInboundAudioBitrateChangeWithBlock;
/**

    Adds a handler that is raised when the inbound audio bitrate changes.

*/
- (void) addOnInboundAudioBitrateChangeWithBlock:(void(^)(int, int))valueBlock;
/**

    Adds a handler that is raised when the inbound video bitrate changes.

*/
- (void) addOnInboundVideoBitrateChange:(FMLiveSwitchAction2<id,id>*)value;
/**

    Adds a handler that is raised when the inbound video bitrate changes.

*/
- (void (^)(void(^)(int, int))) addOnInboundVideoBitrateChangeWithBlock;
/**

    Adds a handler that is raised when the inbound video bitrate changes.

*/
- (void) addOnInboundVideoBitrateChangeWithBlock:(void(^)(int, int))valueBlock;
/**

    Detaches internal event handlers.

*/
- (void) detachInternalEventHandlers;
/**

    Creates a candidate message.

    @param candidate The candidate.
*/
- (FMLiveSwitchMessage*) doCreateCandidateMessageWithCandidate:(FMLiveSwitchCandidate*)candidate;
/**

    Creates a close message.

*/
- (FMLiveSwitchMessage*) doCreateCloseMessage;
/**

    Creates an offer message.

    @param offer The offer.
*/
- (FMLiveSwitchMessage*) doCreateOfferMessageWithOffer:(FMLiveSwitchSessionDescription*)offer;
/**

    Opens the connection.

*/
- (void) doOpen;
/**

    Processes a message.

    @param message The message.
*/
- (void) doProcessMessage:(FMLiveSwitchMessage*)message;
/**

    Gets the current inbound audio bitrate.

*/
- (int) inboundAudioBitrate;
/**

    Gets the current inbound video bitrate.

*/
- (int) inboundVideoBitrate;
/**

    Gets the identifier of the Media Server handling this connection.

*/
- (NSString*) mediaServerId;
/**

    Gets the preferred identifier of the Media Server to handle this connection.

*/
- (NSString*) preferredMediaServerId;
/**

    Processes an answer.

    @param message The message.
*/
- (void) processAnswerWithMessage:(FMLiveSwitchMessage*)message;
/**

    Processes an error message.

    @param message The message.
*/
- (void) processErrorWithMessage:(FMLiveSwitchMessage*)message;
/**

    Processes an MediaIntentResponse message.

    @param message The message.
*/
- (void) processMediaIntentResponseWithMessage:(FMLiveSwitchMessage*)message;
/**

    Processes inband signalling activation.

    @param message 
*/
- (void) processRtcpDataChannelSignallingActivationWithMessage:(FMLiveSwitchMessage*)message;
/**

    Raises an audio bitrate notification.

    @param audioStream The audio stream.
    @param bitrateNotification The bitrate notification.
*/
- (void) raiseAudioBitrateNotificationWithAudioStream:(FMLiveSwitchAudioStream*)audioStream bitrateNotification:(FMLiveSwitchBitrateNotification*)bitrateNotification;
/**

    Raises a video bitrate notification.

    @param videoStream The video stream.
    @param bitrateNotification The bitrate notification.
*/
- (void) raiseVideoBitrateNotificationWithVideoStream:(FMLiveSwitchVideoStream*)videoStream bitrateNotification:(FMLiveSwitchBitrateNotification*)bitrateNotification;
/**

    Removes a handler that is raised when the inbound audio bitrate changes.

*/
- (void) removeOnInboundAudioBitrateChange:(FMLiveSwitchAction2<id,id>*)value;
/**

    Removes a handler that is raised when the inbound video bitrate changes.

*/
- (void) removeOnInboundVideoBitrateChange:(FMLiveSwitchAction2<id,id>*)value;
/**

    Sends a message.

    @param message The message.
*/
- (FMLiveSwitchFuture<FMLiveSwitchMessage*>*) sendWithMessage:(FMLiveSwitchMessage*)message;
/**

    Sets the preferred identifier of the Media Server to handle this connection.

*/
- (void) setPreferredMediaServerId:(NSString*)value;
/**

    Sends bitrate messages.

    @param message The message to send.
*/
- (bool) trySendRtcpDataChannelWithMessage:(FMLiveSwitchMessage*)message;

@end

/**

    An MCU connection.

*/
@interface FMLiveSwitchMcuConnection : FMLiveSwitchServerConnection

/**

    Creates an offer message.

    @param offer The offer.
*/
- (FMLiveSwitchMessage*) doCreateOfferMessageWithOffer:(FMLiveSwitchSessionDescription*)offer;
/**

    Gets a value indicating whether the given media direction is allowed for this connection.

    @param direction The direction.
*/
- (bool) isMediaDirectionAllowedWithDirection:(NSString*)direction;

@end

/**

    Event arguments for OnNoMediaServersAvailable.

*/
@interface FMLiveSwitchNoMediaServersAvailableEventArgs : NSObject

/**

    Gets the backoff in milliseconds.

*/
- (int) backoff;
/**

    Initializes a new instance of the FMLiveSwitchNoMediaServersAvailableEventArgs class.

    @param backoff 
*/
- (instancetype) initWithBackoff:(int)backoff;
/**

    Initializes a new instance of the FMLiveSwitchNoMediaServersAvailableEventArgs class.

    @param backoff 
*/
+ (FMLiveSwitchNoMediaServersAvailableEventArgs*) noMediaServersAvailableEventArgsWithBackoff:(int)backoff;

@end

/**

    Event arguments for OnNoWebSocketMediaServersAvailable.

*/
@interface FMLiveSwitchNoWebSocketMediaServersAvailableEventArgs : NSObject

/**

    Gets the backoff in milliseconds.

*/
- (int) backoff;
/**

    Initializes a new instance of the FMLiveSwitchNoWebSocketMediaServersAvailableEventArgs class.

    @param backoff 
*/
- (instancetype) initWithBackoff:(int)backoff;
/**

    Initializes a new instance of the FMLiveSwitchNoWebSocketMediaServersAvailableEventArgs class.

    @param backoff 
*/
+ (FMLiveSwitchNoWebSocketMediaServersAvailableEventArgs*) noWebSocketMediaServersAvailableEventArgsWithBackoff:(int)backoff;

@end

/**

    A peer connection.

*/
@interface FMLiveSwitchPeerConnection : FMLiveSwitchManagedConnection

/**

    Detaches internal event handlers.

*/
- (void) detachInternalEventHandlers;
/**

    Creates a candidate message.

    @param candidate The candidate.
*/
- (FMLiveSwitchMessage*) doCreateCandidateMessageWithCandidate:(FMLiveSwitchCandidate*)candidate;
/**

    Creates a close message.

*/
- (FMLiveSwitchMessage*) doCreateCloseMessage;
/**

    Creates an update message.

    @param config The connection config.
*/
- (FMLiveSwitchMessage*) doCreateUpdateMessageWithConfig:(FMLiveSwitchConnectionConfig*)config;
/**

    Opens the connection.

*/
- (void) doOpen;
/**

    Processes a message.

    @param message The message.
*/
- (void) doProcessMessage:(FMLiveSwitchMessage*)message;
/**

    Gets a value indicating whether the given media direction is allowed for this connection.

    @param direction The direction.
*/
- (bool) isMediaDirectionAllowedWithDirection:(NSString*)direction;
/**

    Processes an answer.

    @param message The message.
*/
- (void) processAnswerWithMessage:(FMLiveSwitchMessage*)message;
/**

    Processes an error message.

    @param message The message.
*/
- (void) processErrorWithMessage:(FMLiveSwitchMessage*)message;
/**

    Gets the remote client information.

*/
- (FMLiveSwitchClientInfo*) remoteClientInfo;
/**

    Gets the role.

*/
- (FMLiveSwitchPeerRole) role;
/**

    Sends a message.

    @param message The message.
*/
- (FMLiveSwitchFuture<FMLiveSwitchMessage*>*) sendWithMessage:(FMLiveSwitchMessage*)message;

@end

/**

    A peer connection offer.

*/
@interface FMLiveSwitchPeerConnectionOffer : NSObject

/**

    Accepts the offer.

    @param audioStream The audio stream.
*/
- (FMLiveSwitchPeerConnection*) acceptWithAudioStream:(FMLiveSwitchAudioStream*)audioStream;
/**

    Accepts the offer.

    @param audioStream The audio stream.
    @param dataStream The data stream.
*/
- (FMLiveSwitchPeerConnection*) acceptWithAudioStream:(FMLiveSwitchAudioStream*)audioStream dataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Accepts the offer.

    @param audioStream The audio stream.
    @param videoStream The video stream.
*/
- (FMLiveSwitchPeerConnection*) acceptWithAudioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream;
/**

    Accepts the offer.

    @param audioStream The audio stream.
    @param videoStream The video stream.
    @param dataStream The data stream.
*/
- (FMLiveSwitchPeerConnection*) acceptWithAudioStream:(FMLiveSwitchAudioStream*)audioStream videoStream:(FMLiveSwitchVideoStream*)videoStream dataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Accepts the offer.

    @param dataStream The data stream.
*/
- (FMLiveSwitchPeerConnection*) acceptWithDataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Accepts the offer.

    @param videoStream The video stream.
*/
- (FMLiveSwitchPeerConnection*) acceptWithVideoStream:(FMLiveSwitchVideoStream*)videoStream;
/**

    Accepts the offer.

    @param videoStream The video stream.
    @param dataStream The data stream.
*/
- (FMLiveSwitchPeerConnection*) acceptWithVideoStream:(FMLiveSwitchVideoStream*)videoStream dataStream:(FMLiveSwitchDataStream*)dataStream;
/**

    Adds a handler that is raised when the offer is withdrawn.

*/
- (void) addOnCancel:(FMLiveSwitchAction0*)value;
/**

    Gets the channel.

*/
- (FMLiveSwitchChannel*) channel;
/**

    Gets the connection tag.

*/
- (NSString*) connectionTag;
/**

    Gets a value indicating whether the offer
    includes an audio description.

*/
- (bool) hasAudio;
/**

    Gets a value indicating whether the offer
    includes a data description.

*/
- (bool) hasData;
/**

    Gets a value indicating whether the offer
    includes a video description.

*/
- (bool) hasVideo;
/**

    Gets the offer.

*/
- (FMLiveSwitchSessionDescription*) offer;
/**

    Rejects this instance.

*/
- (FMLiveSwitchFuture<id>*) reject;
/**

    Gets the remote client information.

*/
- (FMLiveSwitchClientInfo*) remoteClientInfo;
/**

    Gets a value indicating whether the connection
    was closed by the remote host.

*/
- (bool) remoteClosed;
/**

    Gets the remote connection identifier.

*/
- (NSString*) remoteConnectionId;
/**

    Gets a value indicating whether the connection
    was failed by the remote host.

*/
- (bool) remoteFailed;
/**

    Removes a handler that is raised when the offer is withdrawn.

*/
- (void) removeOnCancel:(FMLiveSwitchAction0*)value;

@end

@interface FMLiveSwitchPeerRoleWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchPeerRole)value;

@end

/**

    An SFU connection.

*/
@interface FMLiveSwitchSfuConnection : FMLiveSwitchServerConnection

/**

    Disable this connections video in the connection config.

    @param config 
*/
- (void) disableVideoWithConfig:(FMLiveSwitchConnectionConfig*)config;
/**

    Enable this connection's video in the connection config.

    @param config 
*/
- (void) enableVideoWithConfig:(FMLiveSwitchConnectionConfig*)config;
/**

    Handles metric monitor state changes.

*/
- (void) metricMonitorOnStateChangeWithEventArgs:(FMLiveSwitchMetricMonitorStateChangeEventArgs*)eventArgs;

@end

/**

    An SFU receiving connection.

*/
@interface FMLiveSwitchSfuDownstreamConnection : FMLiveSwitchSfuConnection

/**

    Disable this connections video in the connection config.

    @param config 
*/
- (void) disableVideoWithConfig:(FMLiveSwitchConnectionConfig*)config;
/**

    Creates an offer message.

    @param offer The offer.
*/
- (FMLiveSwitchMessage*) doCreateOfferMessageWithOffer:(FMLiveSwitchSessionDescription*)offer;
/**

    Create the message to use WebSockets for media

*/
- (FMLiveSwitchMessage*) doCreateUseWebSocketServiceMessage;
/**

    Enable this connections video in the connection config.

    @param config 
*/
- (void) enableVideoWithConfig:(FMLiveSwitchConnectionConfig*)config;
/**

    Gets a value indicating whether the given media direction is allowed for this connection.

    @param direction The direction.
*/
- (bool) isMediaDirectionAllowedWithDirection:(NSString*)direction;
/**

    Gets the remote connection information, if available.

*/
- (FMLiveSwitchConnectionInfo*) remoteConnectionInfo;

@end

/**

    An SFU sending connection.

*/
@interface FMLiveSwitchSfuUpstreamConnection : FMLiveSwitchSfuConnection

/**

    Disable this connections video in the connection config.

    @param config 
*/
- (void) disableVideoWithConfig:(FMLiveSwitchConnectionConfig*)config;
/**

    Creates an offer message.

    @param offer The offer.
*/
- (FMLiveSwitchMessage*) doCreateOfferMessageWithOffer:(FMLiveSwitchSessionDescription*)offer;
/**

    Create the message to use WebSockets for media

*/
- (FMLiveSwitchMessage*) doCreateUseWebSocketServiceMessage;
/**

    Enable this connections video in the connection config.

    @param config 
*/
- (void) enableVideoWithConfig:(FMLiveSwitchConnectionConfig*)config;
/**

    Gets a value indicating whether the given media direction is allowed for this connection.

    @param direction The direction.
*/
- (bool) isMediaDirectionAllowedWithDirection:(NSString*)direction;

@end

@interface FMLiveSwitchMetricMonitorStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchMetricMonitorState)value;

@end

/**

    Metric monitor state change event args.

*/
@interface FMLiveSwitchMetricMonitorStateChangeEventArgs : NSObject

/**

    Construct MetricMonitorStateChangeEventArgs

    @param state 
    @param value 
    @param threshold 
    @param trend 
*/
- (instancetype) initWithState:(FMLiveSwitchMetricMonitorState)state value:(int)value threshold:(int)threshold trend:(float)trend;
/**

    Construct MetricMonitorStateChangeEventArgs

    @param state 
    @param value 
    @param threshold 
    @param trend 
*/
+ (FMLiveSwitchMetricMonitorStateChangeEventArgs*) metricMonitorStateChangeEventArgsWithState:(FMLiveSwitchMetricMonitorState)state value:(int)value threshold:(int)threshold trend:(float)trend;
/**

    Gets the monitor's State.

*/
- (FMLiveSwitchMetricMonitorState) state;
/**

    Gets the metric's threshold value.

*/
- (int) threshold;
/**

    Gets the metric's trend.

*/
- (float) trend;
/**

    Gets the metric value.

*/
- (int) value;

@end

/**

    Application information.

*/
@interface FMLiveSwitchApplicationInfo : FMLiveSwitchInfo

+ (FMLiveSwitchApplicationInfo*) applicationInfo;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes Json to a ApplicationInfo.

    @param applicationInfoJson The serialized Json.
    @return The deserialized ApplicationInfo.
*/
+ (FMLiveSwitchApplicationInfo*) fromJsonWithApplicationInfoJson:(NSString*)applicationInfoJson;
- (instancetype) init;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Serializes this instance to Json.

*/
- (NSString*) toJson;
/**

    Serializes an instance to Json.

    @param application The instance to serialize.
    @return Serialized Json.
*/
+ (NSString*) toJsonWithApplication:(FMLiveSwitchApplicationInfo*)application;

@end

/**

    Report.

*/
@interface FMLiveSwitchReport : NSObject

/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
- (instancetype) init;
/**

    Processes an array for a report.

    @param newValues The new values.
    @param oldValues The old values.
    @return The new values, if the new values are not equivalent to the old values; otherwise null.
*/
+ (NSMutableArray*) processArrayWithNewValues:(NSMutableArray*)newValues oldValues:(NSMutableArray*)oldValues;
/**

    Processes a boolean array for a report.

    @param newValues The new values.
    @param oldValues The old values.
    @return The new values, if the new values do not equal the old values; otherwise null.
*/
+ (NSMutableArray*) processBooleanArrayWithNewValues:(NSMutableArray*)newValues oldValues:(NSMutableArray*)oldValues;
/**

    Processes a boolean for a report.

    @param newValue The new value.
    @param oldValue The old value.
    @return The new value, if the new value does not equal the old value; otherwise null.
*/
+ (FMLiveSwitchNullableBool*) processBooleanWithNewValue:(bool)newValue oldValue:(bool)oldValue;
/**

    Processes a double for a report.

    @param newValue The new value.
    @param oldValue The old value.
    @return The new value, if the new value does not equal the old value; otherwise null.
*/
+ (FMLiveSwitchNullableDouble*) processDoubleWithNewValue:(double)newValue oldValue:(double)oldValue;
/**

    Processes a float array for a report.

    @param newValues The new values.
    @param oldValues The old values.
    @return The new values, if the new values do not equal the old values; otherwise null.
*/
+ (NSMutableArray*) processFloatArrayWithNewValues:(NSMutableArray*)newValues oldValues:(NSMutableArray*)oldValues;
/**

    Processes a float for a report.

    @param newValue The new value.
    @param oldValue The old value.
    @return The new value, if the new value does not equal the old value; otherwise null.
*/
+ (FMLiveSwitchNullableFloat*) processFloatWithNewValue:(float)newValue oldValue:(float)oldValue;
/**

    Processes a integer array for a report.

    @param newValues The new values.
    @param oldValues The old values.
    @return The new values, if the new values do not equal the old values; otherwise null.
*/
+ (NSMutableArray*) processIntegerArrayWithNewValues:(NSMutableArray*)newValues oldValues:(NSMutableArray*)oldValues;
/**

    Processes an integer for a report.

    @param newValue The new value.
    @param oldValue The old value.
    @return The new value, if the new value does not equal the old value; otherwise null.
*/
+ (FMLiveSwitchNullableInt*) processIntegerWithNewValue:(int)newValue oldValue:(int)oldValue;
/**

    Processes a long array for a report.

    @param newValues The new values.
    @param oldValues The old values.
    @return The new values, if the new values do not equal the old values; otherwise null.
*/
+ (NSMutableArray*) processLongArrayWithNewValues:(NSMutableArray*)newValues oldValues:(NSMutableArray*)oldValues;
/**

    Processes a long for a report.

    @param newValue The new value.
    @param oldValue The old value.
    @return The new value, if the new value does not equal the old value; otherwise null.
*/
+ (FMLiveSwitchNullableLong*) processLongWithNewValue:(long long)newValue oldValue:(long long)oldValue;
/**

    Processes an array for a report.

    @param newValue The new value.
    @param oldValue The old value.
    @return The new value, if the new value does not equal the old value; otherwise null.
*/
+ (NSObject<FMLiveSwitchIEquivalent>*) processObjectWithNewValue:(NSObject<FMLiveSwitchIEquivalent>*)newValue oldValue:(NSObject<FMLiveSwitchIEquivalent>*)oldValue;
/**

    Processes a short array for a report.

    @param newValues The new values.
    @param oldValues The old values.
    @return The new values, if the new values do not equal the old values; otherwise null.
*/
+ (NSMutableArray*) processShortArrayWithNewValues:(NSMutableArray*)newValues oldValues:(NSMutableArray*)oldValues;
/**

    Processes a short for a report.

    @param newValue The new value.
    @param oldValue The old value.
    @return The new value, if the new value does not equal the old value; otherwise null.
*/
+ (FMLiveSwitchNullableShort*) processShortWithNewValue:(short)newValue oldValue:(short)oldValue;
/**

    Processes a string for a report.

    @param newValue The new value.
    @param oldValue The old value.
    @return The new value, if the new value does not equal the old value; otherwise null.
*/
+ (NSString*) processStringWithNewValue:(NSString*)newValue oldValue:(NSString*)oldValue;
+ (FMLiveSwitchReport*) report;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;

@end

/**

    Candidate pair report.

*/
@interface FMLiveSwitchCandidatePairReport : FMLiveSwitchReport

/**

    Gets the number of candidate pair bytes received.

*/
- (FMLiveSwitchNullableLong*) bytesReceived;
/**

    Gets the number of candidate pair bytes sent.

*/
- (FMLiveSwitchNullableLong*) bytesSent;
/**

    Initializes a new instance of the FMLiveSwitchCandidatePairReport class.

*/
+ (FMLiveSwitchCandidatePairReport*) candidatePairReport;
/**

    Gets the number of candidate pair consent requests received.

*/
- (FMLiveSwitchNullableLong*) consentRequestsReceived;
/**

    Gets the number of candidate pair consent requests sent.

*/
- (FMLiveSwitchNullableLong*) consentRequestsSent;
/**

    Gets the number of candidate pair consent responses received.

*/
- (FMLiveSwitchNullableLong*) consentResponsesReceived;
/**

    Gets the number of candidate pair consent responses sent.

*/
- (FMLiveSwitchNullableLong*) consentResponsesSent;
/**

    Gets the candidate pair current round trip time in milliseconds.

*/
- (FMLiveSwitchNullableInt*) currentRoundTripTime;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Derializes an array from JSON.

    @param arrayJson The array JSON.
    @return The deserialized array.
*/
+ (NSMutableArray*) fromJsonArrayWithArrayJson:(NSString*)arrayJson;
/**

    Deserializes an instance from JSON.

    @param instanceJson The instance JSON.
    @return The deserialized instance.
*/
+ (FMLiveSwitchCandidatePairReport*) fromJsonWithInstanceJson:(NSString*)instanceJson;
/**

    Initializes a new instance of the FMLiveSwitchCandidatePairReport class.

*/
- (instancetype) init;
/**

    Gets the number of candidate pair requests received.

*/
- (FMLiveSwitchNullableLong*) requestsReceived;
/**

    Gets the number of candidate pair requests sent.

*/
- (FMLiveSwitchNullableLong*) requestsSent;
/**

    Gets the number of candidate pair responses received.

*/
- (FMLiveSwitchNullableLong*) responsesReceived;
/**

    Gets the number of candidate pair responses sent.

*/
- (FMLiveSwitchNullableLong*) responsesSent;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the number of candidate pair bytes received.

*/
- (void) setBytesReceived:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of candidate pair bytes sent.

*/
- (void) setBytesSent:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of candidate pair consent requests received.

*/
- (void) setConsentRequestsReceived:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of candidate pair consent requests sent.

*/
- (void) setConsentRequestsSent:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of candidate pair consent responses received.

*/
- (void) setConsentResponsesReceived:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of candidate pair consent responses sent.

*/
- (void) setConsentResponsesSent:(FMLiveSwitchNullableLong*)value;
/**

    Sets the candidate pair current round trip time in milliseconds.

*/
- (void) setCurrentRoundTripTime:(FMLiveSwitchNullableInt*)value;
/**

    Sets the number of candidate pair requests received.

*/
- (void) setRequestsReceived:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of candidate pair requests sent.

*/
- (void) setRequestsSent:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of candidate pair responses received.

*/
- (void) setResponsesReceived:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of candidate pair responses sent.

*/
- (void) setResponsesSent:(FMLiveSwitchNullableLong*)value;
/**

    Sets the candidate pair total round trip time in milliseconds.

*/
- (void) setTotalRoundTripTime:(FMLiveSwitchNullableInt*)value;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param array The array.
    @return The serialized array JSON.
*/
+ (NSString*) toJsonArray:(NSMutableArray*)array;
/**

    Serializes an instance to JSON.

    @param instance The instance.
    @return The serialized instance JSON.
*/
+ (NSString*) toJsonWithInstance:(FMLiveSwitchCandidatePairReport*)instance;
/**

    Gets the candidate pair total round trip time in milliseconds.

*/
- (FMLiveSwitchNullableInt*) totalRoundTripTime;

@end

/**

    Layout configuration.

*/
@interface FMLiveSwitchLayoutConfig : NSObject

/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
- (instancetype) init;
+ (FMLiveSwitchLayoutConfig*) layoutConfig;
/**

    Gets the layout proirity

*/
- (FMLiveSwitchNullableInt*) priority;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the layout proirity

*/
- (void) setPriority:(FMLiveSwitchNullableInt*)value;
/**

    Sets the layout zone

*/
- (void) setZone:(NSString*)value;
/**

    Gets the layout zone

*/
- (NSString*) zone;

@end

/**

    Channel client configuration.

*/
@interface FMLiveSwitchChannelClientLayoutConfig : FMLiveSwitchLayoutConfig

+ (FMLiveSwitchChannelClientLayoutConfig*) channelClientLayoutConfig;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Gets the connection identifiers to exclude.

*/
- (NSMutableArray*) excludedConnectionIds;
/**

    Deserializes a channel client layout config from JSON.

    @param channelClientLayoutConfigJson The channel client layout configuration as JSON.
    @return The channel device layout configuration.
*/
+ (FMLiveSwitchChannelClientLayoutConfig*) fromJsonWithChannelClientLayoutConfigJson:(NSString*)channelClientLayoutConfigJson;
- (instancetype) init;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the connection identifiers to exclude.

*/
- (void) setExcludedConnectionIds:(NSMutableArray*)value;
/**

    Serializes this channel device layout configuration to JSON.

    @return The channel device layout configuration as JSON.
*/
- (NSString*) toJson;
/**

    Serializes a channel client layout config to JSON.

    @param channelClientLayoutConfig The channel client layout configuration.
    @return The channel client layout configuration as JSON.
*/
+ (NSString*) toJsonWithChannelClientLayoutConfig:(FMLiveSwitchChannelClientLayoutConfig*)channelClientLayoutConfig;

@end

/**

    Channel layout configuration.

*/
@interface FMLiveSwitchChannelLayoutConfig : FMLiveSwitchLayoutConfig

+ (FMLiveSwitchChannelLayoutConfig*) channelLayoutConfig;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Gets the client identifiers to exclude.

*/
- (NSMutableArray*) excludedClientIds;
/**

    Gets the connection identifiers to exclude.

*/
- (NSMutableArray*) excludedConnectionIds;
/**

    Gets the device identifiers to exclude.

*/
- (NSMutableArray*) excludedDeviceIds;
/**

    Gets the user identifiers to exclude.

*/
- (NSMutableArray*) excludedUserIds;
/**

    Deserializes a channel layout config from JSON.

    @param channelLayoutConfigJson The channel layout configuration as JSON.
    @return The channel layout configuration.
*/
+ (FMLiveSwitchChannelLayoutConfig*) fromJsonWithChannelLayoutConfigJson:(NSString*)channelLayoutConfigJson;
- (instancetype) init;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the client identifiers to exclude.

*/
- (void) setExcludedClientIds:(NSMutableArray*)value;
/**

    Sets the connection identifiers to exclude.

*/
- (void) setExcludedConnectionIds:(NSMutableArray*)value;
/**

    Sets the device identifiers to exclude.

*/
- (void) setExcludedDeviceIds:(NSMutableArray*)value;
/**

    Sets the user identifiers to exclude.

*/
- (void) setExcludedUserIds:(NSMutableArray*)value;
/**

    Serializes this channel layout configuration to JSON.

    @return The channel layout configuration as JSON.
*/
- (NSString*) toJson;
/**

    Serializes a channel layout config to JSON.

    @param channelLayoutConfig The layout configuration.
    @return The channel layout configuration as JSON.
*/
+ (NSString*) toJsonWithChannelLayoutConfig:(FMLiveSwitchChannelLayoutConfig*)channelLayoutConfig;

@end

/**

    Channel connection configuration.

*/
@interface FMLiveSwitchChannelConnectionLayoutConfig : FMLiveSwitchLayoutConfig

+ (FMLiveSwitchChannelConnectionLayoutConfig*) channelConnectionLayoutConfig;
/**

    Deserializes a channel connection layout config from JSON.

    @param channelConnectionLayoutConfigJson The channel connection layout configuration as JSON.
    @return The channel connection layout configuration.
*/
+ (FMLiveSwitchChannelConnectionLayoutConfig*) fromJsonWithChannelConnectionLayoutConfigJson:(NSString*)channelConnectionLayoutConfigJson;
- (instancetype) init;
/**

    Serializes this channel connection layout configuration to JSON.

    @return The channel connection layout configuration as JSON.
*/
- (NSString*) toJson;
/**

    Serializes a channel connection layout config to JSON.

    @param channelConnectionLayoutConfig The channel connection layout configuration.
    @return The channel connection layout configuration as JSON.
*/
+ (NSString*) toJsonWithChannelConnectionLayoutConfig:(FMLiveSwitchChannelConnectionLayoutConfig*)channelConnectionLayoutConfig;

@end

/**

    Channel connection configuration.

*/
@interface FMLiveSwitchChannelConnectionConfig : NSObject

/**

    Gets whether to mute or unmute audio.

*/
- (FMLiveSwitchNullableBool*) audioMuted;
/**

    Gets whether to disable audio unmuting.

*/
- (FMLiveSwitchNullableBool*) audioUnmuteDisabled;
+ (FMLiveSwitchChannelConnectionConfig*) channelConnectionConfig;
/**

    Deserializes a channel connection configuration from JSON.

    @param channelConnectionConfigJson The channel connection configuration as JSON.
    @return The channel connection configuration.
*/
+ (FMLiveSwitchChannelConnectionConfig*) fromJsonWithChannelConnectionConfigJson:(NSString*)channelConnectionConfigJson;
- (instancetype) init;
/**

    Gets whether to enable recording.

*/
- (FMLiveSwitchNullableBool*) recording;
/**

    Gets the mode for the recording, if recording is being enabled.

*/
- (NSString*) recordingMode;
/**

    Gets the tag for the recording, if recording is being enabled.

*/
- (NSString*) recordingTag;
/**

    Sets whether to mute or unmute audio.

*/
- (void) setAudioMuted:(FMLiveSwitchNullableBool*)value;
/**

    Sets whether to disable audio unmuting.

*/
- (void) setAudioUnmuteDisabled:(FMLiveSwitchNullableBool*)value;
/**

    Sets whether to enable recording.

*/
- (void) setRecording:(FMLiveSwitchNullableBool*)value;
/**

    Sets the mode for the recording, if recording is being enabled.

*/
- (void) setRecordingMode:(NSString*)value;
/**

    Sets the tag for the recording, if recording is being enabled.

*/
- (void) setRecordingTag:(NSString*)value;
/**

    Sets whether to mute or unmute video.

*/
- (void) setVideoMuted:(FMLiveSwitchNullableBool*)value;
/**

    Sets whether to disable video unmuting.

*/
- (void) setVideoUnmuteDisabled:(FMLiveSwitchNullableBool*)value;
/**

    Serializes this channel client configuration to JSON.

    @return The channel client configuration as JSON.
*/
- (NSString*) toJson;
/**

    Serializes a channel connection configuration to JSON.

    @param channelConnectionConfig The channel connection configuration.
    @return The channel connection configuration as JSON.
*/
+ (NSString*) toJsonWithChannelConnectionConfig:(FMLiveSwitchChannelConnectionConfig*)channelConnectionConfig;
/**

    Gets whether to mute or unmute video.

*/
- (FMLiveSwitchNullableBool*) videoMuted;
/**

    Gets whether to disable video unmuting.

*/
- (FMLiveSwitchNullableBool*) videoUnmuteDisabled;

@end

/**

    Channel client configuration.

*/
@interface FMLiveSwitchChannelClientConfig : NSObject

/**

    Gets whether to mute or unmute audio.

*/
- (FMLiveSwitchNullableBool*) audioMuted;
/**

    Gets whether to disable audio unmuting.

*/
- (FMLiveSwitchNullableBool*) audioUnmuteDisabled;
+ (FMLiveSwitchChannelClientConfig*) channelClientConfig;
/**

    Gets the connection identifiers to exclude.

*/
- (NSMutableArray*) excludedConnectionIds;
/**

    Deserializes a channel client configuration from JSON.

    @param channelClientConfigJson The channel client configuration as JSON.
    @return The channel client configuration.
*/
+ (FMLiveSwitchChannelClientConfig*) fromJsonWithChannelClientConfigJson:(NSString*)channelClientConfigJson;
- (instancetype) init;
/**

    Gets whether to enable recording.

*/
- (FMLiveSwitchNullableBool*) recording;
/**

    Gets the mode for the recording, if recording is being enabled.

*/
- (NSString*) recordingMode;
/**

    Gets the tag for the recording, if recording is being enabled.

*/
- (NSString*) recordingTag;
/**

    Sets whether to mute or unmute audio.

*/
- (void) setAudioMuted:(FMLiveSwitchNullableBool*)value;
/**

    Sets whether to disable audio unmuting.

*/
- (void) setAudioUnmuteDisabled:(FMLiveSwitchNullableBool*)value;
/**

    Sets the connection identifiers to exclude.

*/
- (void) setExcludedConnectionIds:(NSMutableArray*)value;
/**

    Sets whether to enable recording.

*/
- (void) setRecording:(FMLiveSwitchNullableBool*)value;
/**

    Sets the mode for the recording, if recording is being enabled.

*/
- (void) setRecordingMode:(NSString*)value;
/**

    Sets the tag for the recording, if recording is being enabled.

*/
- (void) setRecordingTag:(NSString*)value;
/**

    Sets whether to mute or unmute video.

*/
- (void) setVideoMuted:(FMLiveSwitchNullableBool*)value;
/**

    Sets whether to disable video unmuting.

*/
- (void) setVideoUnmuteDisabled:(FMLiveSwitchNullableBool*)value;
/**

    Serializes this channel client configuration to JSON.

    @return The channel client configuration as JSON.
*/
- (NSString*) toJson;
/**

    Serializes a channel client configuration to JSON.

    @param channelClientConfig The channel client configuration.
    @return The channel client configuration as JSON.
*/
+ (NSString*) toJsonWithChannelClientConfig:(FMLiveSwitchChannelClientConfig*)channelClientConfig;
/**

    Gets whether to mute or unmute video.

*/
- (FMLiveSwitchNullableBool*) videoMuted;
/**

    Gets whether to disable video unmuting.

*/
- (FMLiveSwitchNullableBool*) videoUnmuteDisabled;

@end

/**

    Channel configuration.

*/
@interface FMLiveSwitchChannelConfig : NSObject

/**

    Gets whether to mute or unmute audio.

*/
- (FMLiveSwitchNullableBool*) audioMuted;
/**

    Gets whether to disable audio unmuting.

*/
- (FMLiveSwitchNullableBool*) audioUnmuteDisabled;
+ (FMLiveSwitchChannelConfig*) channelConfig;
/**

    Gets whether to enable rtmp.

*/
- (FMLiveSwitchNullableBool*) enableRtmp;
/**

    Gets the client identifiers to exclude.

*/
- (NSMutableArray*) excludedClientIds;
/**

    Gets the connection identifiers to exclude.

*/
- (NSMutableArray*) excludedConnectionIds;
/**

    Gets the device identifiers to exclude.

*/
- (NSMutableArray*) excludedDeviceIds;
/**

    Gets the user identifiers to exclude.

*/
- (NSMutableArray*) excludedUserIds;
/**

    Deserializes a channel configuration from JSON.

    @param channelConfigJson The channel configuration as JSON.
    @return The channel configuration.
*/
+ (FMLiveSwitchChannelConfig*) fromJsonWithChannelConfigJson:(NSString*)channelConfigJson;
- (instancetype) init;
/**

    Gets whether to enable recording.

*/
- (FMLiveSwitchNullableBool*) recording;
/**

    Gets the mode for the recording, if recording is being enabled.

*/
- (NSString*) recordingMode;
/**

    Gets the tag for the recording, if recording is being enabled.

*/
- (NSString*) recordingTag;
/**

    Sets whether to mute or unmute audio.

*/
- (void) setAudioMuted:(FMLiveSwitchNullableBool*)value;
/**

    Sets whether to disable audio unmuting.

*/
- (void) setAudioUnmuteDisabled:(FMLiveSwitchNullableBool*)value;
/**

    Sets whether to enable rtmp.

*/
- (void) setEnableRtmp:(FMLiveSwitchNullableBool*)value;
/**

    Sets the client identifiers to exclude.

*/
- (void) setExcludedClientIds:(NSMutableArray*)value;
/**

    Sets the connection identifiers to exclude.

*/
- (void) setExcludedConnectionIds:(NSMutableArray*)value;
/**

    Sets the device identifiers to exclude.

*/
- (void) setExcludedDeviceIds:(NSMutableArray*)value;
/**

    Sets the user identifiers to exclude.

*/
- (void) setExcludedUserIds:(NSMutableArray*)value;
/**

    Sets whether to enable recording.

*/
- (void) setRecording:(FMLiveSwitchNullableBool*)value;
/**

    Sets the mode for the recording, if recording is being enabled.

*/
- (void) setRecordingMode:(NSString*)value;
/**

    Sets the tag for the recording, if recording is being enabled.

*/
- (void) setRecordingTag:(NSString*)value;
/**

    Sets whether to mute or unmute video.

*/
- (void) setVideoMuted:(FMLiveSwitchNullableBool*)value;
/**

    Sets whether to disable video unmuting.

*/
- (void) setVideoUnmuteDisabled:(FMLiveSwitchNullableBool*)value;
/**

    Serializes this channel configuration to JSON.

    @return The channel configuration as JSON.
*/
- (NSString*) toJson;
/**

    Serializes a channel configuration to JSON.

    @param channelConfig The channel configuration.
    @return The channel configuration as JSON.
*/
+ (NSString*) toJsonWithChannelConfig:(FMLiveSwitchChannelConfig*)channelConfig;
/**

    Gets whether to mute or unmute video.

*/
- (FMLiveSwitchNullableBool*) videoMuted;
/**

    Gets whether to disable video unmuting.

*/
- (FMLiveSwitchNullableBool*) videoUnmuteDisabled;

@end

/**

    Channel device layout configuration.

*/
@interface FMLiveSwitchChannelDeviceLayoutConfig : FMLiveSwitchLayoutConfig

+ (FMLiveSwitchChannelDeviceLayoutConfig*) channelDeviceLayoutConfig;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Gets the client identifiers to exclude.

*/
- (NSMutableArray*) excludedClientIds;
/**

    Gets the connection identifiers to exclude.

*/
- (NSMutableArray*) excludedConnectionIds;
/**

    Deserializes a channel device layout config from JSON.

    @param channelDeviceLayoutConfigJson The channel device layout configuration as JSON.
    @return The channel device layout configuration.
*/
+ (FMLiveSwitchChannelDeviceLayoutConfig*) fromJsonWithChannelDeviceLayoutConfigJson:(NSString*)channelDeviceLayoutConfigJson;
- (instancetype) init;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the client identifiers to exclude.

*/
- (void) setExcludedClientIds:(NSMutableArray*)value;
/**

    Sets the connection identifiers to exclude.

*/
- (void) setExcludedConnectionIds:(NSMutableArray*)value;
/**

    Serializes this channel device layout configuration to JSON.

    @return The channel device layout configuration as JSON.
*/
- (NSString*) toJson;
/**

    Serializes a channel device layout config to JSON.

    @param channelDeviceLayoutConfig The channel device layout configuration.
    @return The channel device layout configuration as JSON.
*/
+ (NSString*) toJsonWithChannelDeviceLayoutConfig:(FMLiveSwitchChannelDeviceLayoutConfig*)channelDeviceLayoutConfig;

@end

/**

    Channel device configuration.

*/
@interface FMLiveSwitchChannelDeviceConfig : NSObject

/**

    Gets whether to mute or unmute audio.

*/
- (FMLiveSwitchNullableBool*) audioMuted;
/**

    Gets whether to disable audio unmuting.

*/
- (FMLiveSwitchNullableBool*) audioUnmuteDisabled;
+ (FMLiveSwitchChannelDeviceConfig*) channelDeviceConfig;
/**

    Gets the client identifiers to exclude.

*/
- (NSMutableArray*) excludedClientIds;
/**

    Gets the connection identifiers to exclude.

*/
- (NSMutableArray*) excludedConnectionIds;
/**

    Deserializes a channel device configuration from JSON.

    @param channelDeviceConfigJson The channel device configuration as JSON.
    @return The channel device configuration.
*/
+ (FMLiveSwitchChannelDeviceConfig*) fromJsonWithChannelDeviceConfigJson:(NSString*)channelDeviceConfigJson;
- (instancetype) init;
/**

    Gets whether to enable recording.

*/
- (FMLiveSwitchNullableBool*) recording;
/**

    Gets the mode for the recording, if recording is being enabled.

*/
- (NSString*) recordingMode;
/**

    Gets the tag for the recording, if recording is being enabled.

*/
- (NSString*) recordingTag;
/**

    Sets whether to mute or unmute audio.

*/
- (void) setAudioMuted:(FMLiveSwitchNullableBool*)value;
/**

    Sets whether to disable audio unmuting.

*/
- (void) setAudioUnmuteDisabled:(FMLiveSwitchNullableBool*)value;
/**

    Sets the client identifiers to exclude.

*/
- (void) setExcludedClientIds:(NSMutableArray*)value;
/**

    Sets the connection identifiers to exclude.

*/
- (void) setExcludedConnectionIds:(NSMutableArray*)value;
/**

    Sets whether to enable recording.

*/
- (void) setRecording:(FMLiveSwitchNullableBool*)value;
/**

    Sets the mode for the recording, if recording is being enabled.

*/
- (void) setRecordingMode:(NSString*)value;
/**

    Sets the tag for the recording, if recording is being enabled.

*/
- (void) setRecordingTag:(NSString*)value;
/**

    Sets whether to mute or unmute video.

*/
- (void) setVideoMuted:(FMLiveSwitchNullableBool*)value;
/**

    Sets whether to disable video unmuting.

*/
- (void) setVideoUnmuteDisabled:(FMLiveSwitchNullableBool*)value;
/**

    Serializes this channel device configuration to JSON.

    @return The channel device configuration as JSON.
*/
- (NSString*) toJson;
/**

    Serializes a channel device configuration to JSON.

    @param channelDeviceConfig The channel device configuration.
    @return The channel device configuration as JSON.
*/
+ (NSString*) toJsonWithChannelDeviceConfig:(FMLiveSwitchChannelDeviceConfig*)channelDeviceConfig;
/**

    Gets whether to mute or unmute video.

*/
- (FMLiveSwitchNullableBool*) videoMuted;
/**

    Gets whether to disable video unmuting.

*/
- (FMLiveSwitchNullableBool*) videoUnmuteDisabled;

@end

/**

    Channel report.

*/
@interface FMLiveSwitchChannelReport : FMLiveSwitchReport

+ (FMLiveSwitchChannelReport*) channelReport;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Derializes an array from JSON.

    @param arrayJson The array JSON.
    @return The deserialized array.
*/
+ (NSMutableArray*) fromJsonArrayWithArrayJson:(NSString*)arrayJson;
/**

    Deserializes an instance from JSON.

    @param instanceJson The instance JSON.
    @return The deserialized instance.
*/
+ (FMLiveSwitchChannelReport*) fromJsonWithInstanceJson:(NSString*)instanceJson;
/**

    Gets the identifier.

*/
- (NSString*) id;
- (instancetype) init;
/**

    Gets the number of message bytes received on this channel.

*/
- (FMLiveSwitchNullableLong*) messageBytesReceived;
/**

    Gets the number of message bytes sent on this channel.

*/
- (FMLiveSwitchNullableLong*) messageBytesSent;
/**

    Gets the number of messages received on this channel.

*/
- (FMLiveSwitchNullableLong*) messagesReceived;
/**

    Gets the number of messages sent on this channel.

*/
- (FMLiveSwitchNullableLong*) messagesSent;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the identifier.

*/
- (void) setId:(NSString*)value;
/**

    Sets the number of message bytes received on this channel.

*/
- (void) setMessageBytesReceived:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of message bytes sent on this channel.

*/
- (void) setMessageBytesSent:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of messages received on this channel.

*/
- (void) setMessagesReceived:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of messages sent on this channel.

*/
- (void) setMessagesSent:(FMLiveSwitchNullableLong*)value;
/**

    Serializes this instance to Json.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param array The array.
    @return The serialized array JSON.
*/
+ (NSString*) toJsonArray:(NSMutableArray*)array;
/**

    Serializes an instance to JSON.

    @param instance The instance to serialize.
    @return The instance JSON.
*/
+ (NSString*) toJsonWithInstance:(FMLiveSwitchChannelReport*)instance;

@end

/**

    Channel user layout configuration.

*/
@interface FMLiveSwitchChannelUserLayoutConfig : FMLiveSwitchLayoutConfig

+ (FMLiveSwitchChannelUserLayoutConfig*) channelUserLayoutConfig;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Gets the client identifiers to exclude.

*/
- (NSMutableArray*) excludedClientIds;
/**

    Gets the connection identifiers to exclude.

*/
- (NSMutableArray*) excludedConnectionIds;
/**

    Gets the device identifiers to exclude.

*/
- (NSMutableArray*) excludedDeviceIds;
/**

    Deserializes a channel user layout config from JSON.

    @param channelUserLayoutConfigJson The channel user layout configuration as JSON.
    @return The channel user layout configuration.
*/
+ (FMLiveSwitchChannelUserLayoutConfig*) fromJsonWithChannelUserLayoutConfigJson:(NSString*)channelUserLayoutConfigJson;
- (instancetype) init;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the client identifiers to exclude.

*/
- (void) setExcludedClientIds:(NSMutableArray*)value;
/**

    Sets the connection identifiers to exclude.

*/
- (void) setExcludedConnectionIds:(NSMutableArray*)value;
/**

    Sets the device identifiers to exclude.

*/
- (void) setExcludedDeviceIds:(NSMutableArray*)value;
/**

    Serializes this channel user layout configuration to JSON.

    @return The channel user layout configuration as JSON.
*/
- (NSString*) toJson;
/**

    Serializes a channel user layout config to JSON.

    @param channelUserLayoutConfig The channel user layout configuration.
    @return The channel user layout configuration as JSON.
*/
+ (NSString*) toJsonWithChannelUserLayoutConfig:(FMLiveSwitchChannelUserLayoutConfig*)channelUserLayoutConfig;

@end

/**

    Channel user configuration.

*/
@interface FMLiveSwitchChannelUserConfig : NSObject

/**

    Gets whether to mute or unmute audio.

*/
- (FMLiveSwitchNullableBool*) audioMuted;
/**

    Gets whether to disable audio unmuting.

*/
- (FMLiveSwitchNullableBool*) audioUnmuteDisabled;
+ (FMLiveSwitchChannelUserConfig*) channelUserConfig;
/**

    Gets the client identifiers to exclude.

*/
- (NSMutableArray*) excludedClientIds;
/**

    Gets the connection identifiers to exclude.

*/
- (NSMutableArray*) excludedConnectionIds;
/**

    Gets the device identifiers to exclude.

*/
- (NSMutableArray*) excludedDeviceIds;
/**

    Deserializes a channel user configuration from JSON.

    @param channelUserConfigJson The channel user configuration as JSON.
    @return The channel user configuration.
*/
+ (FMLiveSwitchChannelUserConfig*) fromJsonWithChannelUserConfigJson:(NSString*)channelUserConfigJson;
- (instancetype) init;
/**

    Gets whether to enable recording.

*/
- (FMLiveSwitchNullableBool*) recording;
/**

    Gets the mode for the recording, if recording is being enabled.

*/
- (NSString*) recordingMode;
/**

    Gets the tag for the recording, if recording is being enabled.

*/
- (NSString*) recordingTag;
/**

    Sets whether to mute or unmute audio.

*/
- (void) setAudioMuted:(FMLiveSwitchNullableBool*)value;
/**

    Sets whether to disable audio unmuting.

*/
- (void) setAudioUnmuteDisabled:(FMLiveSwitchNullableBool*)value;
/**

    Sets the client identifiers to exclude.

*/
- (void) setExcludedClientIds:(NSMutableArray*)value;
/**

    Sets the connection identifiers to exclude.

*/
- (void) setExcludedConnectionIds:(NSMutableArray*)value;
/**

    Sets the device identifiers to exclude.

*/
- (void) setExcludedDeviceIds:(NSMutableArray*)value;
/**

    Sets whether to enable recording.

*/
- (void) setRecording:(FMLiveSwitchNullableBool*)value;
/**

    Sets the mode for the recording, if recording is being enabled.

*/
- (void) setRecordingMode:(NSString*)value;
/**

    Sets the tag for the recording, if recording is being enabled.

*/
- (void) setRecordingTag:(NSString*)value;
/**

    Sets whether to mute or unmute video.

*/
- (void) setVideoMuted:(FMLiveSwitchNullableBool*)value;
/**

    Sets whether to disable video unmuting.

*/
- (void) setVideoUnmuteDisabled:(FMLiveSwitchNullableBool*)value;
/**

    Serializes this channel user configuration to JSON.

    @return The channel user configuration as JSON.
*/
- (NSString*) toJson;
/**

    Serializes a channel user configuration to JSON.

    @param channelUserConfig The channel user configuration.
    @return The channel user configuration as JSON.
*/
+ (NSString*) toJsonWithChannelUserConfig:(FMLiveSwitchChannelUserConfig*)channelUserConfig;
/**

    Gets whether to mute or unmute video.

*/
- (FMLiveSwitchNullableBool*) videoMuted;
/**

    Gets whether to disable video unmuting.

*/
- (FMLiveSwitchNullableBool*) videoUnmuteDisabled;

@end

/**

    Client configuration.

*/
@interface FMLiveSwitchClientConfig : NSObject

/**

    Gets the Device Alias.

*/
- (NSString*) deviceAlias;
/**

    Deserializes an instance from JSON.

    @param clientConfigJson The JSON to deserialize.
    @return 
            The deserialized client config.
            
*/
+ (FMLiveSwitchClientConfig*) fromJsonWithClientConfigJson:(NSString*)clientConfigJson;
/**

    Gets the Roles.

*/
- (NSMutableArray*) roles;
/**

    Sets the Device Alias.

*/
- (void) setDeviceAlias:(NSString*)value;
/**

    Sets the Roles.

*/
- (void) setRoles:(NSMutableArray*)value;
/**

    Sets the Tag.

*/
- (void) setTag:(NSString*)value;
/**

    Sets the User Alias.

*/
- (void) setUserAlias:(NSString*)value;
/**

    Gets the Tag.

*/
- (NSString*) tag;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an instance to JSON.

    @param clientConfig The client config to serialize.
    @return 
            The serialized JSON.
            
*/
+ (NSString*) toJsonWithClientConfig:(FMLiveSwitchClientConfig*)clientConfig;
/**

    Gets the User Alias.

*/
- (NSString*) userAlias;

@end

/**

    Client report.

*/
@interface FMLiveSwitchClientReport : FMLiveSwitchReport

+ (FMLiveSwitchClientReport*) clientReport;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Derializes an array from JSON.

    @param arrayJson The array JSON.
    @return The deserialized array.
*/
+ (NSMutableArray*) fromJsonArrayWithArrayJson:(NSString*)arrayJson;
/**

    Deserializes an instance from JSON.

    @param instanceJson The instance JSON.
    @return The deserialized instance.
*/
+ (FMLiveSwitchClientReport*) fromJsonWithInstanceJson:(NSString*)instanceJson;
/**

    Gets the identifier.

*/
- (NSString*) id;
- (instancetype) init;
/**

    Gets the number of message bytes received by this client.

*/
- (FMLiveSwitchNullableLong*) messageBytesReceived;
/**

    Gets the number of message bytes sent by this client.

*/
- (FMLiveSwitchNullableLong*) messageBytesSent;
/**

    Gets the number of messages received by this client.

*/
- (FMLiveSwitchNullableLong*) messagesReceived;
/**

    Gets the number of messages sent by this client.

*/
- (FMLiveSwitchNullableLong*) messagesSent;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the identifier.

*/
- (void) setId:(NSString*)value;
/**

    Sets the number of message bytes received by this client.

*/
- (void) setMessageBytesReceived:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of message bytes sent by this client.

*/
- (void) setMessageBytesSent:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of messages received by this client.

*/
- (void) setMessagesReceived:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of messages sent by this client.

*/
- (void) setMessagesSent:(FMLiveSwitchNullableLong*)value;
/**

    Serializes this instance to Json.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param array The array.
    @return The serialized array JSON.
*/
+ (NSString*) toJsonArray:(NSMutableArray*)array;
/**

    Serializes an instance to JSON.

    @param instance The instance to serialize.
    @return The instance JSON.
*/
+ (NSString*) toJsonWithInstance:(FMLiveSwitchClientReport*)instance;

@end

/**

    Connection configuration.

*/
@interface FMLiveSwitchConnectionConfig : NSObject

/**

    Gets the audio direction ("sendrecv", "sendonly", "recvonly", or "inactive").

*/
- (NSString*) audioDirection;
/**

    Gets the data direction ("sendrecv", "sendonly", "recvonly", or "inactive").

*/
- (NSString*) dataDirection;
/**

    Deserializes an instance from JSON.

    @param connectionConfigJson The JSON to deserialize.
    @return 
            The deserialized connection config.
            
*/
+ (FMLiveSwitchConnectionConfig*) fromJsonWithConnectionConfigJson:(NSString*)connectionConfigJson;
/**

    Gets if local audio is disabled.

*/
- (bool) localAudioDisabled;
/**

    Gets if the local audio is muted.

*/
- (bool) localAudioMuted;
/**

    Gets if local data is disabled.

*/
- (bool) localDataDisabled;
/**

    Gets if local video is disabled.

*/
- (bool) localVideoDisabled;
/**

    Gets if the local video is muted.

*/
- (bool) localVideoMuted;
/**

    Gets if remote audio is disabled.

*/
- (bool) remoteAudioDisabled;
/**

    Gets the remote audio encoding.

*/
- (FMLiveSwitchEncodingInfo*) remoteAudioEncoding;
/**

    Gets if remote data is disabled.

*/
- (bool) remoteDataDisabled;
/**

    Gets if remote video is disabled.

*/
- (bool) remoteVideoDisabled;
/**

    Gets the remote video encoding.

*/
- (FMLiveSwitchEncodingInfo*) remoteVideoEncoding;
/**

    Sets the audio direction ("sendrecv", "sendonly", "recvonly", or "inactive").

*/
- (void) setAudioDirection:(NSString*)value;
/**

    Sets the data direction ("sendrecv", "sendonly", "recvonly", or "inactive").

*/
- (void) setDataDirection:(NSString*)value;
/**

    Sets if local audio is disabled.

*/
- (void) setLocalAudioDisabled:(bool)value;
/**

    Sets if the local audio is muted.

*/
- (void) setLocalAudioMuted:(bool)value;
/**

    Sets if local data is disabled.

*/
- (void) setLocalDataDisabled:(bool)value;
/**

    Sets if local video is disabled.

*/
- (void) setLocalVideoDisabled:(bool)value;
/**

    Sets if the local video is muted.

*/
- (void) setLocalVideoMuted:(bool)value;
/**

    Sets if remote audio is disabled.

*/
- (void) setRemoteAudioDisabled:(bool)value;
/**

    Sets the remote audio encoding.

*/
- (void) setRemoteAudioEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Sets if remote data is disabled.

*/
- (void) setRemoteDataDisabled:(bool)value;
/**

    Sets if remote video is disabled.

*/
- (void) setRemoteVideoDisabled:(bool)value;
/**

    Sets the remote video encoding.

*/
- (void) setRemoteVideoEncoding:(FMLiveSwitchEncodingInfo*)value;
/**

    Sets the tag for this connection.

*/
- (void) setTag:(NSString*)value;
/**

    Sets the video direction ("sendrecv", "sendonly", "recvonly", or "inactive").

*/
- (void) setVideoDirection:(NSString*)value;
/**

    Gets the tag for this connection.

*/
- (NSString*) tag;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an instance to JSON.

    @param connectionConfig The connection config to serialize.
    @return 
            The serialized JSON.
            
*/
+ (NSString*) toJsonWithConnectionConfig:(FMLiveSwitchConnectionConfig*)connectionConfig;
/**

    Gets the video direction ("sendrecv", "sendonly", "recvonly", or "inactive").

*/
- (NSString*) videoDirection;

@end

/**

    Data stream report.

*/
@interface FMLiveSwitchDataStreamReport : FMLiveSwitchReport

/**

    Gets the number of bytes received on this data stream.

*/
- (FMLiveSwitchNullableLong*) bytesReceived;
/**

    Gets the number of bytes sent on this data stream.

*/
- (FMLiveSwitchNullableLong*) bytesSent;
/**

    Initializes a new instance of the FMLiveSwitchDataStreamReport class.

*/
+ (FMLiveSwitchDataStreamReport*) dataStreamReport;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes Json to a DataStreamReport.

    @param dataStreamReportJson The serialized Json.
    @return The deserialized DataChannelReport.
*/
+ (FMLiveSwitchDataStreamReport*) fromJsonWithDataStreamReportJson:(NSString*)dataStreamReportJson;
/**

    Initializes a new instance of the FMLiveSwitchDataStreamReport class.

*/
- (instancetype) init;
/**

    Gets the number of messages received on this data stream.

*/
- (FMLiveSwitchNullableLong*) messagesReceived;
/**

    Gets the number of messages sent on this data stream.

*/
- (FMLiveSwitchNullableLong*) messagesSent;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the number of bytes received on this data stream.

*/
- (void) setBytesReceived:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of bytes sent on this data stream.

*/
- (void) setBytesSent:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of messages received on this data stream.

*/
- (void) setMessagesReceived:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of messages sent on this data stream.

*/
- (void) setMessagesSent:(FMLiveSwitchNullableLong*)value;
/**

    Serializes this instance to Json.

*/
- (NSString*) toJson;
/**

    Serializes an instance to Json.

    @param dataStreamReport The instance to serialize.
    @return Serialized Json.
*/
+ (NSString*) toJsonWithDataStreamReport:(FMLiveSwitchDataStreamReport*)dataStreamReport;

@end

/**

    The recording mode helper.

*/
@interface FMLiveSwitchRecordingMode : NSObject

/**

    Gets Audio-only recording mode.

*/
+ (NSString*) audioOnly;
/**

    Gets Audio/Video recording mode.

*/
+ (NSString*) audioVideo;
/**

    Gets Video-only recording mode.

*/
+ (NSString*) videoOnly;

@end

/**

    The LayoutZones defined in the RTMP custom MCU layout

*/
@interface FMLiveSwitchRtmpLayoutZones : NSObject

/**

    Gets the name of the Full zone.
    Full displays inputs at the full size of the MCU ouput. If multiple connections have
    been assigned to the Full LayoutZone, they will be arranged in a grid of up to
    two rows. Maximum of five inputs will be displayed.

*/
+ (NSString*) full;
/**

    Gets the name of the FullSingle Zone.
    FullSingle displays a single input at the full size of the MCU output. If multiple connections
    have been assigned to the FullSingle LayoutZone, then only the connection with the lowest
    LayoutPriority will be visible.

*/
+ (NSString*) fullSingle;
/**

    Gets the name of the PromotedBottom zone.
    PromotedButtom displays inputs at 75% of the MCU ouptut height aligned to the bottom of the video frame. If
    multiple inputs are assigned to the PromotedBottom zone, they will be a arranged as a grid
    with a maximum of two rows and five inputs. Inputs that are not assigned to the
    PromotedBottom zone will be displayed at the top edge of the video frame in a single row
    with a maximum of four inputs displayed.

*/
+ (NSString*) promotedBottom;
/**

    Gets the name of the PromotedFloat Zone.
    PromotedFloat floats the input at the bottom right corner of the mix above other active zones.

*/
+ (NSString*) promotedFloat;
/**

    Gets the name of the PromotedLeft zone.
    PromotedLeft displays inputs at 75% of the MCU ouptut width aligned to the left of the video frame. If
    multiple inputs are assigned to the Promoted zone, they will be a arranged as a grid
    with a maximum of two rows and five inputs. Inputs that are not assigned to the
    Promoted zone will be displayed at the right edge of the video frame in a single column
    with a maximum of four inputs displayed.

*/
+ (NSString*) promotedLeft;
/**

    Gets the name of the PromotedLeftSingle zone.
    PromotedLeftSingle displays a single input at 75% of the MCU ouptut width aligend to the left of the video frame.
    If multiple inputs are assigned to the PromotedSingle zone, then the input
    with the lowest LayoutPriority value will be displayed. Inputs that are not assigned to the
    PromotedSingle zone will be displayed at the right edge of the video frame in a single column
    with a maximum of four inputs displayed.

*/
+ (NSString*) promotedLeftSingle;
/**

    Gets the name of the PromotedRight zone.
    PromotedRight displays inputs at 75% of the MCU ouptut width aligned to the right of the video frame. If
    multiple inputs are assigned to the PromotedRight zone, they will be a arranged as a grid
    with a maximum of two rows and five inputs. Inputs that are not assigned to the
    PromotedRight zone will be displayed at the left edge of the video frame in a single column
    with a maximum of four inputs displayed.

*/
+ (NSString*) promotedRight;
/**

    Gets the name of the PromotedTop zone.
    PromotedTop displays inputs at 75% of the MCU ouptut height aligned to the top of the video frame. If
    multiple inputs are assigned to the PromotedTop zone, they will be a arranged as a grid
    with a maximum of two rows and five inputs. Inputs that are not assigned to the
    PromotedTop zone will be displayed at the bottom edge of the video frame in a single row
    with a maximum of four inputs displayed.

*/
+ (NSString*) promotedTop;

@end

/**

    An event batch.

*/
@interface FMLiveSwitchEventBatch : NSObject

/**

    Deserializes the property.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertyWithKey:(NSString*)key valueJson:(NSString*)valueJson;
+ (FMLiveSwitchEventBatch*) eventBatch;
/**

    Gets the events.

*/
- (NSMutableArray*) events;
/**

    Deserializes an instance from JSON.

*/
+ (FMLiveSwitchEventBatch*) fromJsonWithInstanceJson:(NSString*)instanceJson;
- (instancetype) init;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the events.

*/
- (void) setEvents:(NSMutableArray*)value;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an instance to JSON.

*/
+ (NSString*) toJsonWithInstance:(FMLiveSwitchEventBatch*)instance;

@end

/**

    Event types.

*/
@interface FMLiveSwitchEventType : NSObject

/**

    Gets the 'channel.activated' event type string.

*/
+ (NSString*) channelActivated;
/**

    Gets the 'channel.client.joined' event type string.

*/
+ (NSString*) channelClientJoined;
/**

    Gets the 'channel.client.left' event type string.

*/
+ (NSString*) channelClientLeft;
/**

    Gets the 'channel.client.message' event type string.

*/
+ (NSString*) channelClientMessage;
/**

    Gets the 'channel.deactivated' event type string.

*/
+ (NSString*) channelDeactivated;
/**

    Gets the 'channel.recording.audio.move.failed' event type string.

*/
+ (NSString*) channelRecordingAudioMoveFailed;
/**

    Gets the 'channel.recording.audio.ready' event type string.

*/
+ (NSString*) channelRecordingAudioReady;
/**

    Gets the 'channel.recording.expired' event type string.

*/
+ (NSString*) channelRecordingExpired;
/**

    Gets the 'channel.recording.move.failed' event type string.

*/
+ (NSString*) channelRecordingMoveFailed;
/**

    Gets the 'channel.recording.mux.failed' event type string.

*/
+ (NSString*) channelRecordingMuxFailed;
/**

    Gets the 'channel.recording.ready' event type string.

*/
+ (NSString*) channelRecordingReady;
/**

    Gets the 'channel.recording.video.move.failed' event type string.

*/
+ (NSString*) channelRecordingVideoMoveFailed;
/**

    Gets the 'channel.recording.video.ready' event type string.

*/
+ (NSString*) channelRecordingVideoReady;
/**

    Gets the 'channel.rtmp.started' event type string.

*/
+ (NSString*) channelRtmpStarted;
/**

    Gets the 'channel.rtmp.stopped' event type string.

*/
+ (NSString*) channelRtmpStopped;
/**

    Gets the 'channel.server.message' event type string.

*/
+ (NSString*) channelServerMessage;
/**

    Gets the 'client.message' event type string.

*/
+ (NSString*) clientMessage;
/**

    Gets the 'client.registered' event type string.

*/
+ (NSString*) clientRegistered;
/**

    Gets the 'client.stats' event type string.

*/
+ (NSString*) clientStats;
/**

    Gets the 'client.unregistered' event type string.

*/
+ (NSString*) clientUnregistered;
/**

    Gets the 'client.updated' event type string.

*/
+ (NSString*) clientUpdated;
/**

    Gets the 'connection.closed' event type string.

*/
+ (NSString*) connectionClosed;
/**

    Gets the 'connection.closing' event type string.

*/
+ (NSString*) connectionClosing;
/**

    Gets the 'connection.connected' event type string.

*/
+ (NSString*) connectionConnected;
/**

    Gets the 'connection.connecting' event type string.

*/
+ (NSString*) connectionConnecting;
/**

    Gets the 'connection.failed' event type string.

*/
+ (NSString*) connectionFailed;
/**

    Gets the 'connection.failing' event type string.

*/
+ (NSString*) connectionFailing;
/**

    Gets the 'connection.initializing' event type string.

*/
+ (NSString*) connectionInitializing;
/**

    Gets the 'connection.recording.audio.move.failed' event type string.

*/
+ (NSString*) connectionRecordingAudioMoveFailed;
/**

    Gets the 'connection.recording.audio.ready' event type string.

*/
+ (NSString*) connectionRecordingAudioReady;
/**

    Gets the 'connection.recordings.ready' event type string.

*/
+ (NSString*) connectionRecordingsReady;
/**

    Gets the 'connection.recording.video.move.failed' event type string.

*/
+ (NSString*) connectionRecordingVideoMoveFailed;
/**

    Gets the 'connection.recording.video.ready' event type string.

*/
+ (NSString*) connectionRecordingVideoReady;
/**

    Gets the 'connection.stats' event type string.

*/
+ (NSString*) connectionStats;
/**

    Gets the 'connection.updated' event type string.

*/
+ (NSString*) connectionUpdated;
/**

    Converts a connection state enum value into an event type.

    @param connectionState The connection state.
    @return An event type.
*/
+ (NSString*) fromConnectionState:(FMLiveSwitchConnectionState)connectionState;
/**

    Gets the 'server.message' event type string.

*/
+ (NSString*) serverMessage;

@end

/**

    Media component report.

*/
@interface FMLiveSwitchMediaComponentReport : FMLiveSwitchReport

/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Gets the number of full intra refresh (FIR) messages sent.

*/
- (FMLiveSwitchNullableLong*) firCount;
/**

    Initializes a new instance of the FMLiveSwitchMediaComponentReport class.

*/
- (instancetype) init;
/**

    Gets the number of layer refresh request (LRR) messages sent.

*/
- (FMLiveSwitchNullableLong*) lrrCount;
/**

    Initializes a new instance of the FMLiveSwitchMediaComponentReport class.

*/
+ (FMLiveSwitchMediaComponentReport*) mediaComponentReport;
/**

    Gets the number of negative-acknowledgement (NACK) messages sent.

*/
- (FMLiveSwitchNullableLong*) nackCount;
/**

    Gets the number of picture loss indication (PLI) messages sent.

*/
- (FMLiveSwitchNullableLong*) pliCount;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the number of full intra refresh (FIR) messages sent.

*/
- (void) setFirCount:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of layer refresh request (LRR) messages sent.

*/
- (void) setLrrCount:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of negative-acknowledgement (NACK) messages sent.

*/
- (void) setNackCount:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of picture loss indication (PLI) messages sent.

*/
- (void) setPliCount:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of slice loss indication (SLI) messages sent.

*/
- (void) setSliCount:(FMLiveSwitchNullableLong*)value;
/**

    Gets the number of slice loss indication (SLI) messages sent.

*/
- (FMLiveSwitchNullableLong*) sliCount;

@end

/**

    Media track report.

*/
@interface FMLiveSwitchMediaTrackReport : FMLiveSwitchReport

/**

    Gets the bitrate.

*/
- (FMLiveSwitchNullableInt*) bitrate;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Gets the frame height.

*/
- (FMLiveSwitchNullableInt*) frameHeight;
/**

    Gets the frame rate.

*/
- (FMLiveSwitchNullableDouble*) frameRate;
/**

    Gets the number of frames corrupted.

*/
- (FMLiveSwitchNullableLong*) framesCorrupted;
/**

    Gets the number of frames decoded.

*/
- (FMLiveSwitchNullableLong*) framesDecoded;
/**

    Gets the number of frames dropped.

*/
- (FMLiveSwitchNullableLong*) framesDropped;
/**

    Gets the number of frames encoded.

*/
- (FMLiveSwitchNullableLong*) framesEncoded;
/**

    Gets the number of frames received.

*/
- (FMLiveSwitchNullableLong*) framesReceived;
/**

    Gets the number of frames sent.

*/
- (FMLiveSwitchNullableLong*) framesSent;
/**

    Gets the frame width.

*/
- (FMLiveSwitchNullableInt*) frameWidth;
/**

    Derializes an array from JSON.

    @param arrayJson The array JSON.
    @return The deserialized array.
*/
+ (NSMutableArray*) fromJsonArrayWithArrayJson:(NSString*)arrayJson;
/**

    Deserializes an instance from JSON.

    @param instanceJson The instance JSON.
    @return The deserialized instance.
*/
+ (FMLiveSwitchMediaTrackReport*) fromJsonWithInstanceJson:(NSString*)instanceJson;
/**

    Initializes a new instance of the FMLiveSwitchMediaTrackReport class.

*/
- (instancetype) init;
/**

    Gets the maximum bitrate.

*/
- (FMLiveSwitchNullableInt*) maxBitrate;
/**

    Initializes a new instance of the FMLiveSwitchMediaTrackReport class.

*/
+ (FMLiveSwitchMediaTrackReport*) mediaTrackReport;
/**

    Gets the minimum bitrate.

*/
- (FMLiveSwitchNullableInt*) minBitrate;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the bitrate.

*/
- (void) setBitrate:(FMLiveSwitchNullableInt*)value;
/**

    Sets the frame height.

*/
- (void) setFrameHeight:(FMLiveSwitchNullableInt*)value;
/**

    Sets the frame rate.

*/
- (void) setFrameRate:(FMLiveSwitchNullableDouble*)value;
/**

    Sets the number of frames corrupted.

*/
- (void) setFramesCorrupted:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of frames decoded.

*/
- (void) setFramesDecoded:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of frames dropped.

*/
- (void) setFramesDropped:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of frames encoded.

*/
- (void) setFramesEncoded:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of frames received.

*/
- (void) setFramesReceived:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of frames sent.

*/
- (void) setFramesSent:(FMLiveSwitchNullableLong*)value;
/**

    Sets the frame width.

*/
- (void) setFrameWidth:(FMLiveSwitchNullableInt*)value;
/**

    Sets the maximum bitrate.

*/
- (void) setMaxBitrate:(FMLiveSwitchNullableInt*)value;
/**

    Sets the minimum bitrate.

*/
- (void) setMinBitrate:(FMLiveSwitchNullableInt*)value;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param array The array.
    @return The serialized array JSON.
*/
+ (NSString*) toJsonArray:(NSMutableArray*)array;
/**

    Serializes an instance to JSON.

    @param instance The instance.
    @return The serialized instance JSON.
*/
+ (NSString*) toJsonWithInstance:(FMLiveSwitchMediaTrackReport*)instance;

@end

/**

    A channel claim.

*/
@interface FMLiveSwitchChannelClaim : NSObject

/**

    Gets the action of this channel claim. Possible values are in the FMLiveSwitchClaimAction class.

*/
- (NSString*) action;
/**

    Gets the lowest allowed LayoutPriority. Lower numbers take priority over higher numbers.

*/
- (FMLiveSwitchNullableInt*) allowedLayoutPriority;
/**

    Gets the LayoutZones that can be used by upstream connections.

*/
- (NSMutableArray*) allowedLayoutZones;
/**

    Gets a whitelist of roles whose member's audio can be received from. Null disables the whitelist whereas an empty list
    disables all receiving.

*/
- (NSMutableArray*) audioReceiveWhitelist;
/**

    Gets if this is a broadcast channel or not.

    @deprecated Will be removed in a future release.
*/
- (bool) broadcast __deprecated_msg("Will be removed in a future release.");
/**

    Gets whether the user is authorized kick other users from this channel.

*/
- (bool) canKick;
/**

    Gets whether the user is authorized to update a media server channel.

*/
- (bool) canUpdate;
/**

    Gets whether the user is authorized to update the LayoutZone and LayoutPriority properties on connections.

*/
- (bool) canUpdateLayout;
/**

    Initializes a new instance of the FMLiveSwitchChannelClaim class.

    @param idValue The channel identifier.
*/
+ (FMLiveSwitchChannelClaim*) channelClaimWithId:(NSString*)idValue;
/**

    Gets a whitelist of roles whose member's data can be received from. Null disables the whitelist whereas an empty list
    disables all receiving.

*/
- (NSMutableArray*) dataReceiveWhitelist;
/**

    Gets whether the user is NOT authorized to create MCU connections.

*/
- (bool) disableMcu;
/**

    Gets whether the user is NOT authorized to create peer connections.

*/
- (bool) disablePeer;
/**

    Gets whether to disable remote client join/update/leave messages and events.

*/
- (bool) disableRemoteClientEvents;
/**

    Gets whether to disable remote connection open/update/close messages and events.

*/
- (bool) disableRemoteUpstreamConnectionEvents;
/**

    Gets whether the user is NOT authorized to send audio.

*/
- (bool) disableSendAudio;
/**

    Gets whether the user is NOT authorized to send data.

*/
- (bool) disableSendData;
/**

    Gets whether the user is NOT authorized to send messages.

*/
- (bool) disableSendMessage;
/**

    Gets whether the user is NOT authorized to send video.

*/
- (bool) disableSendVideo;
/**

    Gets whether the user is NOT authorized to create SFU connections.

*/
- (bool) disableSfu;
/**

    Gets whether to stop remote users from being notified when a local user joins a channel. When set to true, the local
    user won’t be able to initiate upstreams, send messages, update the channel, or kick users.

*/
- (bool) enableHiddenObserverMode;
/**

    Deserializes an array of channel claims from JSON.

    @param channelClaimsJson The channel claims JSON.
*/
+ (NSMutableArray*) fromJsonArrayWithChannelClaimsJson:(NSString*)channelClaimsJson;
/**

    Deserializes a channel claim from JSON.

    @param channelClaimJson The channel claim JSON.
*/
+ (FMLiveSwitchChannelClaim*) fromJsonWithChannelClaimJson:(NSString*)channelClaimJson;
/**

    Gets the channel identifier.

*/
- (NSString*) id;
/**

    Initializes a new instance of the FMLiveSwitchChannelClaim class.

    @param idValue The channel identifier.
*/
- (instancetype) initWithId:(NSString*)idValue;
/**

    Sets the action of this channel claim. Possible values are in the FMLiveSwitchClaimAction class.

*/
- (void) setAction:(NSString*)value;
/**

    Sets the lowest allowed LayoutPriority. Lower numbers take priority over higher numbers.

*/
- (void) setAllowedLayoutPriority:(FMLiveSwitchNullableInt*)value;
/**

    Sets the LayoutZones that can be used by upstream connections.

*/
- (void) setAllowedLayoutZones:(NSMutableArray*)value;
/**

    Sets a whitelist of roles whose member's audio can be received from. Null disables the whitelist whereas an empty list
    disables all receiving.

*/
- (void) setAudioReceiveWhitelist:(NSMutableArray*)value;
/**

    Sets if this is a broadcast channel or not.

    @deprecated Will be removed in a future release.
*/
- (void) setBroadcast:(bool)value __deprecated_msg("Will be removed in a future release.");
/**

    Sets whether the user is authorized kick other users from this channel.

*/
- (void) setCanKick:(bool)value;
/**

    Sets whether the user is authorized to update a media server channel.

*/
- (void) setCanUpdate:(bool)value;
/**

    Sets whether the user is authorized to update the LayoutZone and LayoutPriority properties on connections.

*/
- (void) setCanUpdateLayout:(bool)value;
/**

    Sets a whitelist of roles whose member's data can be received from. Null disables the whitelist whereas an empty list
    disables all receiving.

*/
- (void) setDataReceiveWhitelist:(NSMutableArray*)value;
/**

    Sets whether the user is NOT authorized to create MCU connections.

*/
- (void) setDisableMcu:(bool)value;
/**

    Sets whether the user is NOT authorized to create peer connections.

*/
- (void) setDisablePeer:(bool)value;
/**

    Sets whether to disable remote client join/update/leave messages and events.

*/
- (void) setDisableRemoteClientEvents:(bool)value;
/**

    Sets whether to disable remote connection open/update/close messages and events.

*/
- (void) setDisableRemoteUpstreamConnectionEvents:(bool)value;
/**

    Sets whether the user is NOT authorized to send audio.

*/
- (void) setDisableSendAudio:(bool)value;
/**

    Sets whether the user is NOT authorized to send data.

*/
- (void) setDisableSendData:(bool)value;
/**

    Sets whether the user is NOT authorized to send messages.

*/
- (void) setDisableSendMessage:(bool)value;
/**

    Sets whether the user is NOT authorized to send video.

*/
- (void) setDisableSendVideo:(bool)value;
/**

    Sets whether the user is NOT authorized to create SFU connections.

*/
- (void) setDisableSfu:(bool)value;
/**

    Sets whether to stop remote users from being notified when a local user joins a channel. When set to true, the local
    user won’t be able to initiate upstreams, send messages, update the channel, or kick users.

*/
- (void) setEnableHiddenObserverMode:(bool)value;
/**

    Sets the channel identifier.

*/
- (void) setId:(NSString*)value;
/**

    Sets a whitelist of roles whose member's video can be received from. Null disables the whitelist whereas an empty list
    disables all receiving.

*/
- (void) setVideoReceiveWhitelist:(NSMutableArray*)value;
/**

    Serializes this channel claim to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array of channel claims to JSON.

    @param channelClaims The channel claims.
*/
+ (NSString*) toJsonArrayWithChannelClaims:(NSMutableArray*)channelClaims;
/**

    Serializes a channel claim to JSON.

    @param channelClaim The channel claim to serialize.
*/
+ (NSString*) toJsonWithChannelClaim:(FMLiveSwitchChannelClaim*)channelClaim;
/**

    Gets a whitelist of roles whose member's video can be received from. Null disables the whitelist whereas an empty list
    disables all receiving.

*/
- (NSMutableArray*) videoReceiveWhitelist;

@end

/**

    Channel information.

*/
@interface FMLiveSwitchChannelInfo : FMLiveSwitchInfo

/**

    Gets the application identifier.

*/
- (NSString*) applicationId;
+ (FMLiveSwitchChannelInfo*) channelInfo;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes Json to a ChannelInfo.

    @param channelInfoJson The serialized Json.
    @return The deserialized ChannelInfo.
*/
+ (FMLiveSwitchChannelInfo*) fromJsonWithChannelInfoJson:(NSString*)channelInfoJson;
- (instancetype) init;
/**

    Gets whether the channel is recording.

*/
- (bool) recording;
/**

    Gets the channel report.

*/
- (FMLiveSwitchChannelReport*) report;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the application identifier.

*/
- (void) setApplicationId:(NSString*)value;
/**

    Sets whether the channel is recording.

*/
- (void) setRecording:(bool)value;
/**

    Sets the channel report.

*/
- (void) setReport:(FMLiveSwitchChannelReport*)value;
/**

    Serializes this instance to Json.

*/
- (NSString*) toJson;
/**

    Serializes an instance to Json.

    @param channel The instance to serialize.
    @return Serialized Json.
*/
+ (NSString*) toJsonWithChannel:(FMLiveSwitchChannelInfo*)channel;

@end

/**

    Client information.

*/
@interface FMLiveSwitchClientInfo : FMLiveSwitchInfo

/**

    Gets the application identifier.

*/
- (NSString*) applicationId;
/**

    Gets the client architecture.

*/
- (NSString*) architecture;
/**

    Initializes a new instance of the FMLiveSwitchClientInfo class.

*/
+ (FMLiveSwitchClientInfo*) clientInfo;
/**

    Initializes a new instance of the FMLiveSwitchClientInfo class.

    @param userId The user identifier.
    @param deviceId The device identifier.
    @param idValue The client identifier.
*/
+ (FMLiveSwitchClientInfo*) clientInfoWithUserId:(NSString*)userId deviceId:(NSString*)deviceId id:(NSString*)idValue;
/**

    Initializes a new instance of the FMLiveSwitchClientInfo class.

    @param userId The user identifier.
    @param userAlias The user alias.
    @param deviceId The device identifier.
    @param deviceAlias The device alias.
    @param idValue The client identifier.
    @param tag The client tag.
    @param roles The client roles.
    @param protocol The client protocol.
*/
+ (FMLiveSwitchClientInfo*) clientInfoWithUserId:(NSString*)userId userAlias:(NSString*)userAlias deviceId:(NSString*)deviceId deviceAlias:(NSString*)deviceAlias id:(NSString*)idValue tag:(NSString*)tag roles:(NSMutableArray*)roles protocol:(NSString*)protocol;
/**

    Initializes a new instance of the FMLiveSwitchClientInfo class.

    @param userId The user identifier.
    @param userAlias The user alias.
    @param deviceId The device identifier.
    @param deviceAlias The device alias.
    @param idValue The client identifier.
    @param tag The client tag.
    @param roles The client roles.
    @param protocol The client protocol.
    @param region The client region.
*/
+ (FMLiveSwitchClientInfo*) clientInfoWithUserId:(NSString*)userId userAlias:(NSString*)userAlias deviceId:(NSString*)deviceId deviceAlias:(NSString*)deviceAlias id:(NSString*)idValue tag:(NSString*)tag roles:(NSMutableArray*)roles protocol:(NSString*)protocol region:(NSString*)region;
/**

    Gets the client core count.

*/
- (int) coreCount;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Gets the device alias.

*/
- (NSString*) deviceAlias;
/**

    Gets the device identifier.

*/
- (NSString*) deviceId;
/**

    Gets the client external identifier.

*/
- (NSString*) externalId;
/**

    Deserializes an array of instances from JSON.

    @param clientInfosJson The JSON to deserialize.
    @return 
            The deserialized client infos.
            
*/
+ (NSMutableArray*) fromJsonArrayWithClientInfosJson:(NSString*)clientInfosJson;
/**

    Deserializes an instance from JSON.

    @param clientInfoJson The JSON to deserialize.
    @return 
            The deserialized client info.
            
*/
+ (FMLiveSwitchClientInfo*) fromJsonWithClientInfoJson:(NSString*)clientInfoJson;
/**

    Initializes a new instance of the FMLiveSwitchClientInfo class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchClientInfo class.

    @param userId The user identifier.
    @param deviceId The device identifier.
    @param idValue The client identifier.
*/
- (instancetype) initWithUserId:(NSString*)userId deviceId:(NSString*)deviceId id:(NSString*)idValue;
/**

    Initializes a new instance of the FMLiveSwitchClientInfo class.

    @param userId The user identifier.
    @param userAlias The user alias.
    @param deviceId The device identifier.
    @param deviceAlias The device alias.
    @param idValue The client identifier.
    @param tag The client tag.
    @param roles The client roles.
    @param protocol The client protocol.
*/
- (instancetype) initWithUserId:(NSString*)userId userAlias:(NSString*)userAlias deviceId:(NSString*)deviceId deviceAlias:(NSString*)deviceAlias id:(NSString*)idValue tag:(NSString*)tag roles:(NSMutableArray*)roles protocol:(NSString*)protocol;
/**

    Initializes a new instance of the FMLiveSwitchClientInfo class.

    @param userId The user identifier.
    @param userAlias The user alias.
    @param deviceId The device identifier.
    @param deviceAlias The device alias.
    @param idValue The client identifier.
    @param tag The client tag.
    @param roles The client roles.
    @param protocol The client protocol.
    @param region The client region.
*/
- (instancetype) initWithUserId:(NSString*)userId userAlias:(NSString*)userAlias deviceId:(NSString*)deviceId deviceAlias:(NSString*)deviceAlias id:(NSString*)idValue tag:(NSString*)tag roles:(NSMutableArray*)roles protocol:(NSString*)protocol region:(NSString*)region;
/**

    Tests for equivalency.

    @param clientInfo The client information.
    @return `true` if equivalent; otherwise, `false`.
            
*/
- (bool) isEquivalentWithClientInfo:(FMLiveSwitchClientInfo*)clientInfo;
/**

    Tests for equivalency.

    @param connectionInfo The connection information.
    @return `true` if equivalent; otherwise, `false`.
            
*/
- (bool) isEquivalentWithConnectionInfo:(FMLiveSwitchConnectionInfo*)connectionInfo;
/**

    Tests equivalency.

    @param userId The user identifier.
    @param deviceId The device identifier.
    @param idValue The client identifier.
    @return `true` if equivalent; otherwise, `false`.
            
*/
- (bool) isEquivalentWithUserId:(NSString*)userId deviceId:(NSString*)deviceId id:(NSString*)idValue;
/**

    Gets whether the client is connected via SIP.

*/
- (bool) isSip;
/**

    Gets the client machine name.

*/
- (NSString*) machineName;
/**

    Gets the client operating system.

*/
- (NSString*) operatingSystem;
/**

    Gets the client operating system version.

*/
- (NSString*) operatingSystemVersion;
/**

    Gets the connector physical memory.

*/
- (long long) physicalMemory;
/**

    Gets the client platform description.

*/
- (NSString*) platformDescription;
/**

    Gets the client platform type.

*/
- (NSString*) platformType;
/**

    Gets the client platform type version.

*/
- (NSString*) platformTypeVersion;
/**

    Gets the client protocol.

*/
- (NSString*) protocol;
/**

    Gets the protocol string representing SIP.

*/
+ (NSString*) protocolSip;
/**

    Gets the client region.

*/
- (NSString*) region;
/**

    Gets the client report.

*/
- (FMLiveSwitchClientReport*) report;
/**

    Gets the client roles.

*/
- (NSMutableArray*) roles;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the application identifier.

*/
- (void) setApplicationId:(NSString*)value;
/**

    Sets the client architecture.

*/
- (void) setArchitecture:(NSString*)value;
/**

    Sets the client core count.

*/
- (void) setCoreCount:(int)value;
/**

    Sets the device alias.

*/
- (void) setDeviceAlias:(NSString*)value;
/**

    Sets the device identifier.

*/
- (void) setDeviceId:(NSString*)value;
/**

    Sets the client external identifier.

*/
- (void) setExternalId:(NSString*)value;
/**

    Sets the client machine name.

*/
- (void) setMachineName:(NSString*)value;
/**

    Sets the client operating system.

*/
- (void) setOperatingSystem:(NSString*)value;
/**

    Sets the client operating system version.

*/
- (void) setOperatingSystemVersion:(NSString*)value;
/**

    Sets the connector physical memory.

*/
- (void) setPhysicalMemory:(long long)value;
/**

    Sets the client platform description.

*/
- (void) setPlatformDescription:(NSString*)value;
/**

    Sets the client platform type.

*/
- (void) setPlatformType:(NSString*)value;
/**

    Sets the client platform type version.

*/
- (void) setPlatformTypeVersion:(NSString*)value;
/**

    Sets the client protocol.

*/
- (void) setProtocol:(NSString*)value;
/**

    Sets the client region.

*/
- (void) setRegion:(NSString*)value;
/**

    Sets the client report.

*/
- (void) setReport:(FMLiveSwitchClientReport*)value;
/**

    Sets the client roles.

*/
- (void) setRoles:(NSMutableArray*)value;
/**

    Sets the client source language.

*/
- (void) setSourceLanguage:(NSString*)value;
/**

    Sets the client tag.

*/
- (void) setTag:(NSString*)value;
/**

    Sets the user alias.

*/
- (void) setUserAlias:(NSString*)value;
/**

    Sets the user identifier.

*/
- (void) setUserId:(NSString*)value;
/**

    Sets the client version.

*/
- (void) setVersion:(NSString*)value;
/**

    Gets the client source language.

*/
- (NSString*) sourceLanguage;
/**

    Gets the client tag.

*/
- (NSString*) tag;
/**

    Serializes this instance to Json.

*/
- (NSString*) toJson;
/**

    Serializes an array of instances to JSON.

    @param clientInfos The client infos to serialize.
    @return 
            The serialized JSON.
            
*/
+ (NSString*) toJsonArrayWithClientInfos:(NSMutableArray*)clientInfos;
/**

    Serializes an instance to JSON.

    @param clientInfo The client info to serialize.
    @return 
            The serialized JSON.
            
*/
+ (NSString*) toJsonWithClientInfo:(FMLiveSwitchClientInfo*)clientInfo;
/**

    Gets the user alias.

*/
- (NSString*) userAlias;
/**

    Gets the user identifier.

*/
- (NSString*) userId;
/**

    Gets the client version.

*/
- (NSString*) version;

@end

@interface FMLiveSwitchClientStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchClientState)value;

@end

/**

    Connection information.

*/
@interface FMLiveSwitchConnectionInfo : FMLiveSwitchInfo

/**

    Gets the application identifier.

*/
- (NSString*) applicationId;
/**

    Gets the audio stream direction.

*/
- (NSString*) audioDirection;
/**

    Gets the audio formats, if applicable.

*/
- (NSMutableArray*) audioFormats;
/**

    Gets the first connection audio stream.

*/
- (FMLiveSwitchMediaStreamInfo*) audioStream;
/**

    Gets the connection audio streams.

*/
- (NSMutableArray*) audioStreams;
/**

    Gets the channel identifier.

*/
- (NSString*) channelId;
/**

    Gets the client identifier.

*/
- (NSString*) clientId;
/**

    Gets the client protocol.

*/
- (NSString*) clientProtocol;
/**

    Gets the client roles.

*/
- (NSMutableArray*) clientRoles;
/**

    Gets the client tag.

*/
- (NSString*) clientTag;
/**

    Initializes a new instance of the FMLiveSwitchConnectionInfo class.

*/
+ (FMLiveSwitchConnectionInfo*) connectionInfo;
/**

    Initializes a new instance of the FMLiveSwitchConnectionInfo class.

    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @param idValue The connection identifier.
    @param tag The connection tag.
    @param type The connection type.
    @param mediaId The media identifier.
    @param localAudioMuted The audio muted boolean.
    @param localVideoMuted The video muted boolean.
    @param audioDirection The audio direction.
    @param videoDirection The video direction.
    @param dataDirection The data direction.
    @param audioFormats The audio formats.
    @param videoFormats The video formats.
*/
+ (FMLiveSwitchConnectionInfo*) connectionInfoWithUserId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId id:(NSString*)idValue tag:(NSString*)tag type:(NSString*)type mediaId:(NSString*)mediaId localAudioMuted:(bool)localAudioMuted localVideoMuted:(bool)localVideoMuted audioDirection:(NSString*)audioDirection videoDirection:(NSString*)videoDirection dataDirection:(NSString*)dataDirection audioFormats:(NSMutableArray*)audioFormats videoFormats:(NSMutableArray*)videoFormats;
/**

    Initializes a new instance of the FMLiveSwitchConnectionInfo class.

    @param userId The user identifier.
    @param userAlias The user alias.
    @param deviceId The device identifier.
    @param deviceAlias The device alias.
    @param clientId The client identifier.
    @param clientTag The client tag.
    @param clientRoles The client roles.
    @param clientProtocol The client protocol.
    @param idValue The connection identifier.
    @param tag The connection tag.
    @param type The connection type.
    @param mediaId The media identifier.
    @param localAudioMuted The audio muted boolean.
    @param localVideoMuted The video muted boolean.
    @param audioDirection The audio direction.
    @param videoDirection The video direction.
    @param dataDirection The data direction.
    @param audioFormats The audio formats.
    @param videoFormats The video formats.
    @param layoutZone The layout zone.
    @param layoutPriority The layout priority.
*/
+ (FMLiveSwitchConnectionInfo*) connectionInfoWithUserId:(NSString*)userId userAlias:(NSString*)userAlias deviceId:(NSString*)deviceId deviceAlias:(NSString*)deviceAlias clientId:(NSString*)clientId clientTag:(NSString*)clientTag clientRoles:(NSMutableArray*)clientRoles clientProtocol:(NSString*)clientProtocol id:(NSString*)idValue tag:(NSString*)tag type:(NSString*)type mediaId:(NSString*)mediaId localAudioMuted:(bool)localAudioMuted localVideoMuted:(bool)localVideoMuted audioDirection:(NSString*)audioDirection videoDirection:(NSString*)videoDirection dataDirection:(NSString*)dataDirection audioFormats:(NSMutableArray*)audioFormats videoFormats:(NSMutableArray*)videoFormats layoutZone:(NSString*)layoutZone layoutPriority:(FMLiveSwitchNullableInt*)layoutPriority;
/**

    Creates a client info object with details
    from this connection info object.

*/
- (FMLiveSwitchClientInfo*) createClientInfo;
/**

    Gets the data stream direction.
    Obsolete.

*/
- (NSString*) dataDirection;
/**

    Gets the connection data stream.

*/
- (FMLiveSwitchDataStreamInfo*) dataStream;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Gets the device alias.

*/
- (NSString*) deviceAlias;
/**

    Gets the device identifier.

*/
- (NSString*) deviceId;
/**

    Gets the connection error, if an error exists.

*/
- (FMLiveSwitchError*) error;
/**

    Gets the connection external identifier.

*/
- (NSString*) externalId;
/**

    Deserializes an array of instances from JSON.

    @param connectionInfosJson The JSON to deserialize.
    @return 
            The deserialized connection infos.
            
*/
+ (NSMutableArray*) fromJsonArrayWithConnectionInfosJson:(NSString*)connectionInfosJson;
/**

    Deserializes Json to a ConnectionInfo.

    @param connectionInfoJson The serialized Json.
    @return The deserialized ConnectionInfo.
*/
+ (FMLiveSwitchConnectionInfo*) fromJsonWithConnectionInfoJson:(NSString*)connectionInfoJson;
/**

    Gets a value indicating whether the connection
    has an audio stream.

*/
- (bool) hasAudio;
/**

    Gets a value indicating whether the connection
    has a data stream.

*/
- (bool) hasData;
/**

    Gets a value indicating whether the connection
    has a video stream.

*/
- (bool) hasVideo;
/**

    Initializes a new instance of the FMLiveSwitchConnectionInfo class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchConnectionInfo class.

    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @param idValue The connection identifier.
    @param tag The connection tag.
    @param type The connection type.
    @param mediaId The media identifier.
    @param localAudioMuted The audio muted boolean.
    @param localVideoMuted The video muted boolean.
    @param audioDirection The audio direction.
    @param videoDirection The video direction.
    @param dataDirection The data direction.
    @param audioFormats The audio formats.
    @param videoFormats The video formats.
*/
- (instancetype) initWithUserId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId id:(NSString*)idValue tag:(NSString*)tag type:(NSString*)type mediaId:(NSString*)mediaId localAudioMuted:(bool)localAudioMuted localVideoMuted:(bool)localVideoMuted audioDirection:(NSString*)audioDirection videoDirection:(NSString*)videoDirection dataDirection:(NSString*)dataDirection audioFormats:(NSMutableArray*)audioFormats videoFormats:(NSMutableArray*)videoFormats;
/**

    Initializes a new instance of the FMLiveSwitchConnectionInfo class.

    @param userId The user identifier.
    @param userAlias The user alias.
    @param deviceId The device identifier.
    @param deviceAlias The device alias.
    @param clientId The client identifier.
    @param clientTag The client tag.
    @param clientRoles The client roles.
    @param clientProtocol The client protocol.
    @param idValue The connection identifier.
    @param tag The connection tag.
    @param type The connection type.
    @param mediaId The media identifier.
    @param localAudioMuted The audio muted boolean.
    @param localVideoMuted The video muted boolean.
    @param audioDirection The audio direction.
    @param videoDirection The video direction.
    @param dataDirection The data direction.
    @param audioFormats The audio formats.
    @param videoFormats The video formats.
    @param layoutZone The layout zone.
    @param layoutPriority The layout priority.
*/
- (instancetype) initWithUserId:(NSString*)userId userAlias:(NSString*)userAlias deviceId:(NSString*)deviceId deviceAlias:(NSString*)deviceAlias clientId:(NSString*)clientId clientTag:(NSString*)clientTag clientRoles:(NSMutableArray*)clientRoles clientProtocol:(NSString*)clientProtocol id:(NSString*)idValue tag:(NSString*)tag type:(NSString*)type mediaId:(NSString*)mediaId localAudioMuted:(bool)localAudioMuted localVideoMuted:(bool)localVideoMuted audioDirection:(NSString*)audioDirection videoDirection:(NSString*)videoDirection dataDirection:(NSString*)dataDirection audioFormats:(NSMutableArray*)audioFormats videoFormats:(NSMutableArray*)videoFormats layoutZone:(NSString*)layoutZone layoutPriority:(FMLiveSwitchNullableInt*)layoutPriority;
/**

    Tests for equivalency.

    @param connectionInfo The connection information.
    @return `true` if equivalent; otherwise, `false`.
            
*/
- (bool) isEquivalentWithConnectionInfo:(FMLiveSwitchConnectionInfo*)connectionInfo;
/**

    Tests for equivalency.

    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @param idValue The connection identifier.
    @return `true` if equivalent; otherwise, `false`.
            
*/
- (bool) isEquivalentWithUserId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId id:(NSString*)idValue;
/**

    Gets whether the client is connected via SIP.

*/
- (bool) isSip;
/**

    Gets the layout priority.

*/
- (FMLiveSwitchNullableInt*) layoutPriority;
/**

    Gets the layout zone.

*/
- (NSString*) layoutZone;
/**

    Gets if local audio is disabled.

*/
- (bool) localAudioDisabled;
/**

    Gets whether the local audio is muted. Returns true if the local audio is muted and false otherwise.

*/
- (bool) localAudioMuted;
/**

    Gets whether the local audio cannot be unmuted. Returns true if the local audio cannot be unmuted and false otherwise.

*/
- (bool) localAudioUnmuteDisabled;
/**

    Gets if local video is disabled.

*/
- (bool) localVideoDisabled;
/**

    Gets whether the local video is muted. Returns true if the local video is muted and false otherwise.

*/
- (bool) localVideoMuted;
/**

    Gets whether the local video cannot be unmuted. Returns true if the local video cannot be unmuted and false otherwise.

*/
- (bool) localVideoUnmuteDisabled;
/**

    Gets the media identifier, for MCU or SFU upstream connections.

*/
- (NSString*) mediaId;
/**

    Gets whether the connection is recording.

*/
- (bool) recording;
/**

    Gets the connection recording mode.

*/
- (NSString*) recordingMode;
/**

    Gets the connection recording tag.

*/
- (NSString*) recordingTag;
/**

    Gets if remote audio is disabled.

*/
- (bool) remoteAudioDisabled;
/**

    Gets if remote audio is muted.

*/
- (bool) remoteAudioMuted;
/**

    Gets the remote connection identifier, for peer or SFU downstream connections.

*/
- (NSString*) remoteConnectionId;
/**

    Gets the remote media identifier, for SFU downstream connections.

*/
- (NSString*) remoteMediaId;
/**

    Gets if remote video is disabled.

*/
- (bool) remoteVideoDisabled;
/**

    Gets if remote video is muted.

*/
- (bool) remoteVideoMuted;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the application identifier.

*/
- (void) setApplicationId:(NSString*)value;
/**

    Sets the first connection audio stream.

*/
- (void) setAudioStream:(FMLiveSwitchMediaStreamInfo*)value;
/**

    Sets the connection audio streams.

*/
- (void) setAudioStreams:(NSMutableArray*)value;
/**

    Sets the channel identifier.

*/
- (void) setChannelId:(NSString*)value;
/**

    Sets the client identifier.

*/
- (void) setClientId:(NSString*)value;
/**

    Sets the client protocol.

*/
- (void) setClientProtocol:(NSString*)value;
/**

    Sets the client roles.

*/
- (void) setClientRoles:(NSMutableArray*)value;
/**

    Sets the client tag.

*/
- (void) setClientTag:(NSString*)value;
/**

    Sets the connection data stream.

*/
- (void) setDataStream:(FMLiveSwitchDataStreamInfo*)value;
/**

    Sets the device alias.

*/
- (void) setDeviceAlias:(NSString*)value;
/**

    Sets the device identifier.

*/
- (void) setDeviceId:(NSString*)value;
/**

    Sets the connection error, if an error exists.

*/
- (void) setError:(FMLiveSwitchError*)value;
/**

    Sets the connection external identifier.

*/
- (void) setExternalId:(NSString*)value;
/**

    Sets the layout priority.

*/
- (void) setLayoutPriority:(FMLiveSwitchNullableInt*)value;
/**

    Sets the layout zone.

*/
- (void) setLayoutZone:(NSString*)value;
/**

    Sets the media identifier, for MCU or SFU upstream connections.

*/
- (void) setMediaId:(NSString*)value;
/**

    Sets whether the connection is recording.

*/
- (void) setRecording:(bool)value;
/**

    Sets the connection recording mode.

*/
- (void) setRecordingMode:(NSString*)value;
/**

    Sets the connection recording tag.

*/
- (void) setRecordingTag:(NSString*)value;
/**

    Sets if remote audio is muted.

*/
- (void) setRemoteAudioMuted:(bool)value;
/**

    Sets the remote connection identifier, for peer or SFU downstream connections.

*/
- (void) setRemoteConnectionId:(NSString*)value;
/**

    Sets the remote media identifier, for SFU downstream connections.

*/
- (void) setRemoteMediaId:(NSString*)value;
/**

    Sets if remote video is muted.

*/
- (void) setRemoteVideoMuted:(bool)value;
/**

    Sets the connection state.

*/
- (void) setState:(NSString*)value;
/**

    Sets the connection tag.

*/
- (void) setTag:(NSString*)value;
/**

    Sets the connection transport information.
    This will be `null` if BUNDLE is inactive.

*/
- (void) setTransports:(NSMutableArray*)value;
/**

    Sets the connection type.

*/
- (void) setType:(NSString*)value;
/**

    Sets the user alias.

*/
- (void) setUserAlias:(NSString*)value;
/**

    Sets the user identifier.

*/
- (void) setUserId:(NSString*)value;
/**

    Sets if we should use WebSockets for sending media.

*/
- (void) setUseWebSocketsForMedia:(bool)value;
/**

    Sets the first connection video stream.

*/
- (void) setVideoStream:(FMLiveSwitchMediaStreamInfo*)value;
/**

    Sets the connection video streams.

*/
- (void) setVideoStreams:(NSMutableArray*)value;
/**

    Gets whether to serialize the legacy audio direction property.

*/
- (bool) shouldSerializeAudioDirection;
/**

    Gets whether to serialize the legacy audio formats property.

*/
- (bool) shouldSerializeAudioFormats;
/**

    Gets whether to serialize the legacy data direction property.

*/
- (bool) shouldSerializeDataDirection;
/**

    Gets whether to serialize the legacy local audio muted property.

*/
- (bool) shouldSerializeLocalAudioMuted;
/**

    Gets whether to serialize the legacy local video muted property.

*/
- (bool) shouldSerializeLocalVideoMuted;
/**

    Gets whether to serialize the legacy video direction property.

*/
- (bool) shouldSerializeVideoDirection;
/**

    Gets whether to serialize the legacy video formats property.

*/
- (bool) shouldSerializeVideoFormats;
/**

    Gets the connection state.

*/
- (NSString*) state;
/**

    Gets the connection tag.

*/
- (NSString*) tag;
/**

    Serializes this instance to Json.

*/
- (NSString*) toJson;
/**

    Serializes an array of instances to JSON.

    @param connectionInfos The connection infos to serialize.
    @return 
            The serialized JSON.
            
*/
+ (NSString*) toJsonArrayWithConnectionInfos:(NSMutableArray*)connectionInfos;
/**

    Serializes an instance to Json.

    @param connectionInfo The instance to serialize.
    @return Serialized Json.
*/
+ (NSString*) toJsonWithConnectionInfo:(FMLiveSwitchConnectionInfo*)connectionInfo;
/**

    Gets the connection transport information.
    This will be `null` if BUNDLE is inactive.

*/
- (NSMutableArray*) transports;
/**

    Gets the connection type.

*/
- (NSString*) type;
/**

    Gets the user alias.

*/
- (NSString*) userAlias;
/**

    Gets the user identifier.

*/
- (NSString*) userId;
/**

    Gets if we should use WebSockets for sending media.

*/
- (bool) useWebSocketsForMedia;
/**

    Gets the video stream direction.

*/
- (NSString*) videoDirection;
/**

    Gets the video formats, if applicable.

*/
- (NSMutableArray*) videoFormats;
/**

    Gets the first connection video stream.

*/
- (FMLiveSwitchMediaStreamInfo*) videoStream;
/**

    Gets the connection video streams.

*/
- (NSMutableArray*) videoStreams;

@end

/**

    A connection type.

*/
@interface FMLiveSwitchConnectionType : NSObject

+ (FMLiveSwitchConnectionType*) connectionType;
- (instancetype) init;
/**

    Gets the "mcu" connection type string.

*/
+ (NSString*) mcu;
/**

    Gets the "peer" connection type string.

*/
+ (NSString*) peer;
/**

    Gets the "sfu" connection type string.

*/
+ (NSString*) sfu;

@end

/**

    Data channel report.

*/
@interface FMLiveSwitchDataChannelReport : FMLiveSwitchReport

/**

    Gets the number of bytes received on this data channel.

*/
- (FMLiveSwitchNullableLong*) bytesReceived;
/**

    Gets the number of bytes sent on this data channel.

*/
- (FMLiveSwitchNullableLong*) bytesSent;
/**

    Initializes a new instance of the FMLiveSwitchDataChannelReport class.

*/
+ (FMLiveSwitchDataChannelReport*) dataChannelReport;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes Json to a DataChannelReport.

    @param dataChannelReportJson The serialized Json.
    @return The deserialized DataChannelReport.
*/
+ (FMLiveSwitchDataChannelReport*) fromJsonWithDataChannelReportJson:(NSString*)dataChannelReportJson;
/**

    Initializes a new instance of the FMLiveSwitchDataChannelReport class.

*/
- (instancetype) init;
/**

    Gets the number of messages received on this data channel.

*/
- (FMLiveSwitchNullableLong*) messagesReceived;
/**

    Gets the number of messages sent on this data channel.

*/
- (FMLiveSwitchNullableLong*) messagesSent;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the number of bytes received on this data channel.

*/
- (void) setBytesReceived:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of bytes sent on this data channel.

*/
- (void) setBytesSent:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of messages received on this data channel.

*/
- (void) setMessagesReceived:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of messages sent on this data channel.

*/
- (void) setMessagesSent:(FMLiveSwitchNullableLong*)value;
/**

    Serializes this instance to Json.

*/
- (NSString*) toJson;
/**

    Serializes an instance to Json.

    @param dataChannelReport The instance to serialize.
    @return Serialized Json.
*/
+ (NSString*) toJsonWithDataChannelReport:(FMLiveSwitchDataChannelReport*)dataChannelReport;

@end

/**

    Event information.

*/
@interface FMLiveSwitchEventInfo : FMLiveSwitchInfo

/**

    Gets the channel information.

*/
- (FMLiveSwitchChannelInfo*) channel;
/**

    Gets the client information.

*/
- (FMLiveSwitchClientInfo*) client;
/**

    Gets the connection information.

*/
- (FMLiveSwitchConnectionInfo*) connection;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Initializes a new event.

*/
+ (FMLiveSwitchEventInfo*) eventInfo;
/**

    Initializes a new event.

    @param type The type.
*/
+ (FMLiveSwitchEventInfo*) eventInfoWithType:(NSString*)type;
/**

    Gets whether this event was forced.

*/
- (bool) forced;
/**

    Deserializes an array from JSON.

*/
+ (NSMutableArray*) fromJsonArrayWithEventJsons:(NSString*)eventJsons;
/**

    Deserializes an instance from JSON.

*/
+ (FMLiveSwitchEventInfo*) fromJsonWithEventJson:(NSString*)eventJson;
/**

    Initializes a new event.

*/
- (instancetype) init;
/**

    Initializes a new event.

    @param type The type.
*/
- (instancetype) initWithType:(NSString*)type;
/**

    Gets the message information.

*/
- (FMLiveSwitchMessageInfo*) message;
/**

    Gets the event origin.

*/
- (NSString*) origin;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the channel information.

*/
- (void) setChannel:(FMLiveSwitchChannelInfo*)value;
/**

    Sets the client information.

*/
- (void) setClient:(FMLiveSwitchClientInfo*)value;
/**

    Sets the connection information.

*/
- (void) setConnection:(FMLiveSwitchConnectionInfo*)value;
/**

    Sets whether this event was forced.

*/
- (void) setForced:(bool)value;
/**

    Sets the message information.

*/
- (void) setMessage:(FMLiveSwitchMessageInfo*)value;
/**

    Sets the event origin.

*/
- (void) setOrigin:(NSString*)value;
/**

    Sets the event timestamp in milliseconds since epoch.

*/
- (void) setTimestamp:(long long)value;
/**

    Sets the event type.

*/
- (void) setType:(NSString*)value;
/**

    Gets the event timestamp in milliseconds since epoch.

*/
- (long long) timestamp;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

*/
+ (NSString*) toJsonArrayWithEvents:(NSMutableArray*)events;
/**

    Serializes an instance to JSON.

*/
+ (NSString*) toJsonWithEvt:(FMLiveSwitchEventInfo*)evt;
/**

    Gets the event type.

*/
- (NSString*) type;

@end

/**

    Event origins.

*/
@interface FMLiveSwitchEventOrigin : NSObject

/**

    Gets the 'client' event origin string.

*/
+ (NSString*) client;
/**

    Gets the 'gateway' event origin string.

*/
+ (NSString*) gateway;
/**

    Gets the 'mediaserver' event origin string.

*/
+ (NSString*) mediaServer;
/**

    Gets the 'recordingmonitor' event origin string.

*/
+ (NSString*) recordingMonitor;
/**

    Gets the 'recordingmover' event origin string.

*/
+ (NSString*) recordingMover;
/**

    Gets the 'recordingmuxer' event origin string.

*/
+ (NSString*) recordingMuxer;
/**

    Gets the 'sipconnector' event origin string.

*/
+ (NSString*) sipConnector;
/**

    Gets the 'websocketmediaserver' event origin string.

*/
+ (NSString*) webSocketMediaServer;

@end

/**

    Network information.

*/
@interface FMLiveSwitchNetworkInfo : NSObject

/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes Json to a GatewayInfo.

    @param networkInfoJson The serialized Json.
    @return The deserialized GatewayInfo.
*/
+ (FMLiveSwitchNetworkInfo*) fromJsonWithNetworkInfoJson:(NSString*)networkInfoJson;
- (instancetype) init;
/**

    Gets the IP addresses.

*/
- (NSMutableArray*) ipAddresses;
+ (FMLiveSwitchNetworkInfo*) networkInfo;
/**

    Gets the ports.

*/
- (NSMutableArray*) ports;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the IP addresses.

*/
- (void) setIPAddresses:(NSMutableArray*)value;
/**

    Sets the ports.

*/
- (void) setPorts:(NSMutableArray*)value;
/**

    Serializes this instance to Json.

*/
- (NSString*) toJson;
/**

    Serializes an instance to Json.

    @param networkInfo The instance to serialize.
    @return Serialized Json.
*/
+ (NSString*) toJsonWithNetworkInfo:(FMLiveSwitchNetworkInfo*)networkInfo;

@end

/**

    External network information.

*/
@interface FMLiveSwitchExternalNetworkInfo : FMLiveSwitchNetworkInfo

/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
+ (FMLiveSwitchExternalNetworkInfo*) externalNetworkInfo;
/**

    Deserializes Json to a ExternalNetworkInfo.

    @param networkInfoJson The serialized Json.
    @return The deserialized ExternalNetworkInfo.
*/
+ (FMLiveSwitchExternalNetworkInfo*) fromJsonWithNetworkInfoJson:(NSString*)networkInfoJson;
- (instancetype) init;
/**

    Gets the public hostname.

*/
- (NSString*) publicHostname;
/**

    Gets the public IP address.

*/
- (NSString*) publicIPAddress;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the public hostname.

*/
- (void) setPublicHostname:(NSString*)value;
/**

    Sets the public IP address.

*/
- (void) setPublicIPAddress:(NSString*)value;
/**

    Serializes an instance to Json.

    @param networkInfo The instance to serialize.
    @return Serialized Json.
*/
+ (NSString*) toJsonWithNetworkInfo:(FMLiveSwitchExternalNetworkInfo*)networkInfo;

@end

/**

    Internal network information.

*/
@interface FMLiveSwitchInternalNetworkInfo : FMLiveSwitchNetworkInfo

/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes Json to a InternalNetworkInfo.

    @param networkInfoJson The serialized Json.
    @return The deserialized InternalNetworkInfo.
*/
+ (FMLiveSwitchInternalNetworkInfo*) fromJsonWithNetworkInfoJson:(NSString*)networkInfoJson;
- (instancetype) init;
+ (FMLiveSwitchInternalNetworkInfo*) internalNetworkInfo;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Serializes an instance to Json.

    @param networkInfo The instance to serialize.
    @return Serialized Json.
*/
+ (NSString*) toJsonWithNetworkInfo:(FMLiveSwitchInternalNetworkInfo*)networkInfo;

@end

@interface FMLiveSwitchInvitationStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchInvitationState)value;

@end

/**

    A class containing the feedback from invite requests.

*/
@interface FMLiveSwitchInviteFeedback : NSObject

/**

    Deserializes an instance from JSON.

    @param feedbackJson The JSON to deserialize.
    @return 
            The deserialized invite feedback.
            
*/
+ (FMLiveSwitchInviteFeedback*) fromJsonWithFeedbackJson:(NSString*)feedbackJson;
/**

    Creates an instance of a InviteFeedback class.

    @param userId The user id of the user being invited.
    @param protocol The protocol the original invite was using.
    @param state The current state of the invite.
    @param reason The detailed reason if available.
*/
- (instancetype) initWithUserId:(NSString*)userId protocol:(NSString*)protocol state:(FMLiveSwitchInvitationState)state reason:(NSString*)reason;
/**

    Creates an instance of a InviteFeedback class.

    @param userId The user id of the user being invited.
    @param protocol The protocol the original invite was using.
    @param state The current state of the invite.
    @param reason The detailed reason if available.
*/
+ (FMLiveSwitchInviteFeedback*) inviteFeedbackWithUserId:(NSString*)userId protocol:(NSString*)protocol state:(FMLiveSwitchInvitationState)state reason:(NSString*)reason;
/**

    Gets the protocol the user was invited on.

*/
- (NSString*) protocol;
/**

    Gets the detailed reason for the state if available.

*/
- (NSString*) reason;
/**

    Gets the current state of the invite.

*/
- (FMLiveSwitchInvitationState) state;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an instance to JSON.

    @param feedback The invite feedback to serialize.
    @return 
            The serialized JSON.
            
*/
+ (NSString*) toJsonWithFeedback:(FMLiveSwitchInviteFeedback*)feedback;
/**

    Gets the user id for the user being invited.

*/
- (NSString*) userId;

@end

/**

    Log event information.

*/
@interface FMLiveSwitchLogEventInfo : FMLiveSwitchInfo

/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Gets the log event exception message.

*/
- (NSString*) exception;
/**

    Deserializes Json to a LogEventInfo.

    @param logEventInfoJson The serialized Json.
    @return The deserialized LogEventInfo.
*/
+ (FMLiveSwitchLogEventInfo*) fromJsonWithLogEventInfoJson:(NSString*)logEventInfoJson;
- (instancetype) init;
/**

    Gets the log event level.

*/
- (NSString*) level;
+ (FMLiveSwitchLogEventInfo*) logEventInfo;
/**

    Gets the log event message.

*/
- (NSString*) message;
/**

    Gets the log event scope.

*/
- (NSString*) scope;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the log event exception message.

*/
- (void) setException:(NSString*)value;
/**

    Sets the log event message.

*/
- (void) setMessage:(NSString*)value;
/**

    Sets the log event scope.

*/
- (void) setScope:(NSString*)value;
/**

    Sets the log event tag.

*/
- (void) setTag:(NSString*)value;
/**

    Sets the log event thread ID.

*/
- (void) setThreadId:(long long)value;
/**

    Gets the log event tag.

*/
- (NSString*) tag;
/**

    Gets the log event thread ID.

*/
- (long long) threadId;
/**

    Serializes this instance to Json.

*/
- (NSString*) toJson;
/**

    Serializes an instance to Json.

    @param logEventInfo The instance to serialize.
    @return Serialized Json.
*/
+ (NSString*) toJsonWithLogEventInfo:(FMLiveSwitchLogEventInfo*)logEventInfo;

@end

/**

    Media information.

*/
@interface FMLiveSwitchMediaInfo : FMLiveSwitchInfo

/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
- (instancetype) init;
+ (FMLiveSwitchMediaInfo*) mediaInfo;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;

@end

/**

    Media receiver report.

*/
@interface FMLiveSwitchMediaReceiverReport : FMLiveSwitchMediaComponentReport

/**

    Gets the number of bytes received.

*/
- (FMLiveSwitchNullableLong*) bytesReceived;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes an array from JSON.

    @param mediaReceiverReportsJson The serialized JSON.
    @return The deserialized array.
*/
+ (NSMutableArray*) fromJsonArrayWithMediaReceiverReportsJson:(NSString*)mediaReceiverReportsJson;
/**

    Deserializes an instance from JSON.

    @param mediaReceiverReportJson The serialized JSON.
    @return The deserialized instance.
*/
+ (FMLiveSwitchMediaReceiverReport*) fromJsonWithMediaReceiverReportJson:(NSString*)mediaReceiverReportJson;
/**

    Initializes a new instance of the FMLiveSwitchMediaReceiverReport class.

*/
- (instancetype) init;
/**

    Gets the jitter in milliseconds.

*/
- (FMLiveSwitchNullableLong*) jitter;
/**

    Initializes a new instance of the FMLiveSwitchMediaReceiverReport class.

*/
+ (FMLiveSwitchMediaReceiverReport*) mediaReceiverReport;
/**

    Gets the number of packets discarded.

*/
- (FMLiveSwitchNullableLong*) packetsDiscarded;
/**

    Gets the number of packets duplicated.

*/
- (FMLiveSwitchNullableLong*) packetsDuplicated;
/**

    Gets the number of packets lost.

*/
- (FMLiveSwitchNullableLong*) packetsLost;
/**

    Gets the number of packets received.

*/
- (FMLiveSwitchNullableLong*) packetsReceived;
/**

    Gets the number of packets repaired.

*/
- (FMLiveSwitchNullableLong*) packetsRepaired;
/**

    Gets the round-trip-time in milliseconds.

*/
- (FMLiveSwitchNullableInt*) roundTripTime;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the number of bytes received.

*/
- (void) setBytesReceived:(FMLiveSwitchNullableLong*)value;
/**

    Sets the jitter in milliseconds.

*/
- (void) setJitter:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of packets discarded.

*/
- (void) setPacketsDiscarded:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of packets duplicated.

*/
- (void) setPacketsDuplicated:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of packets lost.

*/
- (void) setPacketsLost:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of packets received.

*/
- (void) setPacketsReceived:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of packets repaired.

*/
- (void) setPacketsRepaired:(FMLiveSwitchNullableLong*)value;
/**

    Sets the round-trip-time in milliseconds.

*/
- (void) setRoundTripTime:(FMLiveSwitchNullableInt*)value;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param mediaReceiverReports The array to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonArrayWithMediaReceiverReports:(NSMutableArray*)mediaReceiverReports;
/**

    Serializes an instance to JSON.

    @param mediaReceiverReport The instance to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonWithMediaReceiverReport:(FMLiveSwitchMediaReceiverReport*)mediaReceiverReport;

@end

/**

    Media sender report.

*/
@interface FMLiveSwitchMediaSenderReport : FMLiveSwitchMediaComponentReport

/**

    Gets the number of bytes sent.

*/
- (FMLiveSwitchNullableLong*) bytesSent;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes an array from JSON.

    @param mediaSenderReportsJson The serialized JSON.
    @return The deserialized array.
*/
+ (NSMutableArray*) fromJsonArrayWithMediaSenderReportsJson:(NSString*)mediaSenderReportsJson;
/**

    Deserializes an instance from JSON.

    @param mediaSenderReportJson The serialized JSON.
    @return The deserialized instance.
*/
+ (FMLiveSwitchMediaSenderReport*) fromJsonWithMediaSenderReportJson:(NSString*)mediaSenderReportJson;
/**

    Initializes a new instance of the FMLiveSwitchMediaSenderReport class.

*/
- (instancetype) init;
/**

    Initializes a new instance of the FMLiveSwitchMediaSenderReport class.

*/
+ (FMLiveSwitchMediaSenderReport*) mediaSenderReport;
/**

    Gets the number of packets sent.

*/
- (FMLiveSwitchNullableLong*) packetsSent;
/**

    Gets the round-trip-time in milliseconds.

*/
- (FMLiveSwitchNullableInt*) roundTripTime;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the number of bytes sent.

*/
- (void) setBytesSent:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of packets sent.

*/
- (void) setPacketsSent:(FMLiveSwitchNullableLong*)value;
/**

    Sets the round-trip-time in milliseconds.

*/
- (void) setRoundTripTime:(FMLiveSwitchNullableInt*)value;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param mediaSenderReports The array to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonArrayWithMediaSenderReports:(NSMutableArray*)mediaSenderReports;
/**

    Serializes an instance to JSON.

    @param mediaSenderReport The instance to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonWithMediaSenderReport:(FMLiveSwitchMediaSenderReport*)mediaSenderReport;

@end

/**

    A message.

*/
@interface FMLiveSwitchMessage : FMLiveSwitchDynamic

/**

    Gets the API Service identifier.

*/
- (NSString*) apiServiceId;
/**

    Gets the API Version.

*/
- (NSString*) apiVersion;
/**

    Gets the application identifier.

*/
- (NSString*) applicationId;
/**

    Gets the channel identifier.

*/
- (NSString*) channelId;
/**

    Gets the channel reports.

*/
- (NSMutableArray*) channelReports;
/**

    Gets the client identifier.

*/
- (NSString*) clientId;
/**

    Gets the client protocol.

*/
- (NSString*) clientProtocol;
/**

    Gets the client reports.

*/
- (NSMutableArray*) clientReports;
/**

    Gets the client roles.

*/
- (NSMutableArray*) clientRoles;
/**

    Gets the client tag.

*/
- (NSString*) clientTag;
/**

    Creates a copy of the Message.

*/
- (FMLiveSwitchMessage*) clone;
/**

    Gets the connection identifier.

*/
- (NSString*) connectionId;
/**

    Gets the connection LayoutPriority.

*/
- (FMLiveSwitchNullableInt*) connectionLayoutPriority;
/**

    Gets the connection LayoutZone.

*/
- (NSString*) connectionLayoutZone;
/**

    Gets the connection tag.

*/
- (NSString*) connectionTag;
/**

    Gets the connection type.

*/
- (NSString*) connectionType;
/**

    Gets the Connector identifer.

*/
- (NSString*) connectorId;
/**

    Creates a "bitrateNotification" message.

*/
+ (FMLiveSwitchMessage*) createBitrateNotificationMessageWithBitrateNotification:(FMLiveSwitchBitrateNotification*)bitrateNotification;
/**

    Creates a "bitrateNotification" message.

*/
+ (FMLiveSwitchMessage*) createBitrateNotificationMessageWithBitrateNotifications:(NSMutableArray*)bitrateNotifications;
/**

    Creates a "bitrateRequest" message.

*/
+ (FMLiveSwitchMessage*) createBitrateRequestMessageWithBitrateRequest:(FMLiveSwitchBitrateRequest*)bitrateRequest;
/**

    Creates a "bitrateRequest" message.

*/
+ (FMLiveSwitchMessage*) createBitrateRequestMessageWithBitrateRequests:(NSMutableArray*)bitrateRequests;
/**

    Creates a "cancelInvite" message.

*/
+ (FMLiveSwitchMessage*) createCancelInviteMessageWithUserId:(NSString*)userId protocol:(NSString*)protocol;
/**

    Creates a "candidate" message.

    @param candidateJson The candidate.
*/
+ (FMLiveSwitchMessage*) createCandidateMessageWithCandidateJson:(NSString*)candidateJson;
/**

    Creates a "close" message.

*/
+ (FMLiveSwitchMessage*) createCloseMessage;
/**

    Creates a "dtmfTones" message.

*/
+ (FMLiveSwitchMessage*) createDtmfTonesMessageWithDtmfTones:(NSMutableArray*)dtmfTones;
/**

    Creates a "error" message.

    @param error The error type.
*/
+ (FMLiveSwitchMessage*) createErrorMessageWithError:(NSString*)error;
/**

    Creates a "error" message.

    @param error The error type.
    @param remoteUserId The remote user identifier.
    @param remoteDeviceId The remote device identifier.
    @param remoteClientId The remote client identifier.
*/
+ (FMLiveSwitchMessage*) createErrorMessageWithError:(NSString*)error remoteUserId:(NSString*)remoteUserId remoteDeviceId:(NSString*)remoteDeviceId remoteClientId:(NSString*)remoteClientId;
/**

    Creates an "event" message.

*/
+ (FMLiveSwitchMessage*) createEventMessageWithEventInfoJson:(NSString*)eventInfoJson;
/**

    Creates an "iceServers" message.

*/
+ (FMLiveSwitchMessage*) createIceServersMessage;
/**

    Creates a "invite" message.

*/
+ (FMLiveSwitchMessage*) createInviteMessageWithUserId:(NSString*)userId protocol:(NSString*)protocol;
/**

    Creates a "join" message.

    @param channelId The channel to join.
    @param token The auth token.
*/
+ (FMLiveSwitchMessage*) createJoinMessageWithChannelId:(NSString*)channelId token:(NSString*)token;
/**

    Creates a "keyFrameRequest" message.

*/
+ (FMLiveSwitchMessage*) createKeyFrameRequestMessageWithSynchronizationSources:(NSMutableArray*)synchronizationSources;
/**

    Creates a "kick" message.

    @param channelId The channel identifier.
    @param clientId The ID of the client to kick.
*/
+ (FMLiveSwitchMessage*) createKickMessageWithChannelId:(NSString*)channelId clientId:(NSString*)clientId;
/**

    Creates a "kick" message.

    @param remoteUserId The remote user identifier.
    @param remoteDeviceId The remote device identifier.
    @param remoteClientId The remote client identifier.
    @param remoteConnectionId The remote connection identifier.
*/
+ (FMLiveSwitchMessage*) createKickMessageWithRemoteUserId:(NSString*)remoteUserId remoteDeviceId:(NSString*)remoteDeviceId remoteClientId:(NSString*)remoteClientId remoteConnectionId:(NSString*)remoteConnectionId;
/**

    Creates a "layout" message.

    @param configJson The layout config to send to the server.
    @param remoteUserId The remote user identifier.
    @param remoteDeviceId The remote device identifier.
    @param remoteClientId The remote client identifier.
    @param remoteConnectionId The remote connection identifier.
*/
+ (FMLiveSwitchMessage*) createLayoutMessageWithConfigJson:(NSString*)configJson remoteUserId:(NSString*)remoteUserId remoteDeviceId:(NSString*)remoteDeviceId remoteClientId:(NSString*)remoteClientId remoteConnectionId:(NSString*)remoteConnectionId;
/**

    Creates a "leave" message.

    @param channelId The channel to leave.
    @param channelReport The channel report.
*/
+ (FMLiveSwitchMessage*) createLeaveMessageWithChannelId:(NSString*)channelId channelReport:(FMLiveSwitchChannelReport*)channelReport;
/**

    Creates an MCU "offer" message

    @param tag The tag
    @param layoutZone The connection LayoutZone
    @param layoutPriority The connection LayoutPriority
    @param offerJson The offer.
*/
+ (FMLiveSwitchMessage*) createMcuOfferMessageWithLayoutZone:(NSString*)layoutZone layoutPriority:(FMLiveSwitchNullableInt*)layoutPriority tag:(NSString*)tag offerJson:(NSString*)offerJson;
/**

    Creates an MCU "offer" message.

    @param tag The tag.
    @param offerJson The offer.
*/
+ (FMLiveSwitchMessage*) createMcuOfferMessageWithTag:(NSString*)tag offerJson:(NSString*)offerJson;
/**

    Creates a "message" message.

    @param message The message.
*/
+ (FMLiveSwitchMessage*) createMessageMessage:(NSString*)message;
/**

    Creates a "message" message.

    @param message The message.
    @param remoteUserId The remote user identifier.
*/
+ (FMLiveSwitchMessage*) createMessageMessage:(NSString*)message remoteUserId:(NSString*)remoteUserId;
/**

    Creates a "message" message.

    @param message The message.
    @param remoteUserId The remote user identifier.
    @param remoteDeviceId The remote device identifier.
*/
+ (FMLiveSwitchMessage*) createMessageMessage:(NSString*)message remoteUserId:(NSString*)remoteUserId remoteDeviceId:(NSString*)remoteDeviceId;
/**

    Creates a "message" message.

    @param message The message.
    @param remoteUserId The remote user identifier.
    @param remoteDeviceId The remote device identifier.
    @param remoteClientId The remote client identifier.
*/
+ (FMLiveSwitchMessage*) createMessageMessage:(NSString*)message remoteUserId:(NSString*)remoteUserId remoteDeviceId:(NSString*)remoteDeviceId remoteClientId:(NSString*)remoteClientId;
/**

    Creates a peer "answer" message.

    @param tag The tag.
    @param answerJson The answer.
    @param remoteUserId The remote user identifier.
    @param remoteDeviceId The remote device identifier.
    @param remoteClientId The remote client identifier.
*/
+ (FMLiveSwitchMessage*) createPeerAnswerMessageWithTag:(NSString*)tag answerJson:(NSString*)answerJson remoteUserId:(NSString*)remoteUserId remoteDeviceId:(NSString*)remoteDeviceId remoteClientId:(NSString*)remoteClientId;
/**

    Creates a "candidate" message.

    @param candidateJson The candidate.
    @param remoteUserId The remote user identifier.
    @param remoteDeviceId The remote device identifier.
    @param remoteClientId The remote client identifier.
*/
+ (FMLiveSwitchMessage*) createPeerCandidateMessageWithCandidateJson:(NSString*)candidateJson remoteUserId:(NSString*)remoteUserId remoteDeviceId:(NSString*)remoteDeviceId remoteClientId:(NSString*)remoteClientId;
/**

    Creates a "close" message.

    @param remoteUserId The remote user identifier.
    @param remoteDeviceId The remote device identifier.
    @param remoteClientId The remote client identifier.
*/
+ (FMLiveSwitchMessage*) createPeerCloseMessageWithRemoteUserId:(NSString*)remoteUserId remoteDeviceId:(NSString*)remoteDeviceId remoteClientId:(NSString*)remoteClientId;
/**

    Creates a peer "offer" message.

    @param tag The tag.
    @param offerJson The offer.
    @param remoteUserId The remote user identifier.
    @param remoteDeviceId The remote device identifier.
    @param remoteClientId The remote client identifier.
*/
+ (FMLiveSwitchMessage*) createPeerOfferMessageWithTag:(NSString*)tag offerJson:(NSString*)offerJson remoteUserId:(NSString*)remoteUserId remoteDeviceId:(NSString*)remoteDeviceId remoteClientId:(NSString*)remoteClientId;
/**

    Creates a "reject" message.

    @param remoteUserId The remote user identifier.
    @param remoteDeviceId The remote device identifier.
    @param remoteClientId The remote client identifier.
    @param remoteConnectionId The remote connection identifier.
*/
+ (FMLiveSwitchMessage*) createPeerRejectMessageWithRemoteUserId:(NSString*)remoteUserId remoteDeviceId:(NSString*)remoteDeviceId remoteClientId:(NSString*)remoteClientId remoteConnectionId:(NSString*)remoteConnectionId;
/**

    Creates a "register" message.

    @param applicationId The application identifier.
    @param userId The user identifier.
    @param userAlias The user alias.
    @param deviceId The device identifier.
    @param deviceAlias The device alias.
    @param clientId The client identifier.
    @param clientTag The client tag.
    @param clientRoles The client roles.
    @param region The region.
    @param token The auth token.
*/
+ (FMLiveSwitchMessage*) createRegisterMessageWithApplicationId:(NSString*)applicationId userId:(NSString*)userId userAlias:(NSString*)userAlias deviceId:(NSString*)deviceId deviceAlias:(NSString*)deviceAlias clientId:(NSString*)clientId clientTag:(NSString*)clientTag clientRoles:(NSMutableArray*)clientRoles region:(NSString*)region token:(NSString*)token;
/**

    Creates a "activateInbandSignalling" message.

*/
+ (FMLiveSwitchMessage*) createRtcpDataChannelSignallingActivationMessageWithSupportedMessageTypes:(FMLiveSwitchRtcpDataChannelSignallingActivation*)supportedMessageTypes;
/**

    Creates an SFU upstream "offer" message.

    @param tag The tag
    @param layoutZone The connection LayoutZone
    @param layoutPriority The connection LayoutPriority
    @param offerJson The offer.
*/
+ (FMLiveSwitchMessage*) createSfuOfferMessageWithLayoutZone:(NSString*)layoutZone layoutPriority:(FMLiveSwitchNullableInt*)layoutPriority tag:(NSString*)tag offerJson:(NSString*)offerJson;
/**

    Creates an SFU upstream "offer" message.

    @param tag The tag.
    @param offerJson The offer.
*/
+ (FMLiveSwitchMessage*) createSfuOfferMessageWithTag:(NSString*)tag offerJson:(NSString*)offerJson;
/**

    Creates an SFU downstream "offer" message.

    @param tag The tag.
    @param offerJson The offer.
    @param remoteMediaId The remote media identifier.
*/
+ (FMLiveSwitchMessage*) createSfuOfferMessageWithTag:(NSString*)tag offerJson:(NSString*)offerJson remoteMediaId:(NSString*)remoteMediaId;
/**

    Creates an SFU downstream "offer" message.

    @param tag The tag.
    @param offerJson The offer.
    @param remoteUserId The remote user identifier.
    @param remoteDeviceId The remote device identifier.
    @param remoteClientId The remote client identifier.
    @param remoteConnectionId The remote connection identifier.
*/
+ (FMLiveSwitchMessage*) createSfuOfferMessageWithTag:(NSString*)tag offerJson:(NSString*)offerJson remoteUserId:(NSString*)remoteUserId remoteDeviceId:(NSString*)remoteDeviceId remoteClientId:(NSString*)remoteClientId remoteConnectionId:(NSString*)remoteConnectionId;
/**

    Creates a "simulcastNotification" message.

*/
+ (FMLiveSwitchMessage*) createSimulcastNotificationMessageWithSimulcastNotification:(FMLiveSwitchSimulcastNotification*)simulcastNotification;
/**

    Creates a "simulcastNotification" message.

*/
+ (FMLiveSwitchMessage*) createSimulcastNotificationMessageWithSimulcastNotifications:(NSMutableArray*)simulcastNotifications;
/**

    Creates an "unregister" message.

*/
+ (FMLiveSwitchMessage*) createUnregisterMessage;
/**

    Creates an "unregister" message.

    @param clientReport The client report.
    @param channelReports The channel reports.
*/
+ (FMLiveSwitchMessage*) createUnregisterMessageWithClientReport:(FMLiveSwitchClientReport*)clientReport channelReports:(NSMutableArray*)channelReports;
/**

    Creates an "update" message.

    @param configJson The config to send to the server.
*/
+ (FMLiveSwitchMessage*) createUpdateMessageWithConfigJson:(NSString*)configJson;
/**

    Creates an "update" message.

    @param configJson The config to send to the server.
    @param remoteUserId The remote user identifier.
    @param remoteDeviceId The remote device identifier.
    @param remoteClientId The remote client identifier.
*/
+ (FMLiveSwitchMessage*) createUpdateMessageWithConfigJson:(NSString*)configJson remoteUserId:(NSString*)remoteUserId remoteDeviceId:(NSString*)remoteDeviceId remoteClientId:(NSString*)remoteClientId;
/**

    Creates an "update" message.

    @param configJson The config to send to the server.
    @param remoteUserId The remote user identifier.
    @param remoteDeviceId The remote device identifier.
    @param remoteClientId The remote client identifier.
    @param remoteConnectionId The remote connection identifier.
*/
+ (FMLiveSwitchMessage*) createUpdateMessageWithConfigJson:(NSString*)configJson remoteUserId:(NSString*)remoteUserId remoteDeviceId:(NSString*)remoteDeviceId remoteClientId:(NSString*)remoteClientId remoteConnectionId:(NSString*)remoteConnectionId;
/**

    Gets the device alias.

*/
- (NSString*) deviceAlias;
/**

    Gets the device identifier.

*/
- (NSString*) deviceId;
/**

    Deserializes an array of instances from JSON.

    @param messagesJson The JSON to deserialize.
    @return 
            The deserialized messages.
            
*/
+ (NSMutableArray*) fromJsonArrayWithMessagesJson:(NSString*)messagesJson;
/**

    Deserializes an instance from JSON.

    @param messageJson The JSON to deserialize.
    @return 
            The deserialized message.
            
*/
+ (FMLiveSwitchMessage*) fromJsonWithMessageJson:(NSString*)messageJson;
/**

    Gets the payload.

*/
- (NSString*) iceServers;
/**

    Gets whether this message is an error of a particular type.

    @param errorType The error type.
    @return `true` if this message is an error of the particular type; otherwise, `false`.
*/
- (bool) isErrorWithErrorType:(NSString*)errorType;
/**

    Gets if the offerer is a hidden observer.

*/
- (bool) isHiddenObserver;
/**

    Gets the broadcast identifier.

*/
- (NSString*) mediaId;
/**

    Gets the Media Server identifier.

*/
- (NSString*) mediaServerId;
/**

    Gets the value indicating whether the client should avoid using local host ICE candidates. Client can override this request.

*/
- (bool) noHostCandidates;
/**

    Gets the payload.

*/
- (NSString*) payload;
/**

    Gets the preferred Media Server identifier.

*/
- (NSString*) preferredMediaServerId;
/**

    Gets the preferred WebSocket Media Server identifier.

*/
- (NSString*) preferredWebSocketMediaServerId;
/**

    Gets the Recording Monitor identifer.

*/
- (NSString*) recordingMonitorId;
/**

    Gets the Recording Mover identifer.

*/
- (NSString*) recordingMoverId;
/**

    Gets the Recording Muxer identifer.

*/
- (NSString*) recordingMuxerId;
/**

    Gets the region.

*/
- (NSString*) region;
/**

    Gets the remote client identifier.

*/
- (NSString*) remoteClientId;
/**

    Gets the remote connection identifier.

*/
- (NSString*) remoteConnectionId;
/**

    Gets the remote device identifier.

*/
- (NSString*) remoteDeviceId;
/**

    Gets the remote broadcast identifier.

*/
- (NSString*) remoteMediaId;
/**

    Gets the remote user identifier.

*/
- (NSString*) remoteUserId;
/**

    Gets the value indicating whether ICE Servers have been requested.

*/
- (bool) requestIceServers;
/**

    Sets the API Service identifier.

*/
- (void) setApiServiceId:(NSString*)value;
/**

    Sets the API Version.

*/
- (void) setApiVersion:(NSString*)value;
/**

    Sets the application identifier.

*/
- (void) setApplicationId:(NSString*)value;
/**

    Sets the channel identifier.

*/
- (void) setChannelId:(NSString*)value;
/**

    Sets the channel reports.

*/
- (void) setChannelReports:(NSMutableArray*)value;
/**

    Sets the client identifier.

*/
- (void) setClientId:(NSString*)value;
/**

    Sets the client protocol.

*/
- (void) setClientProtocol:(NSString*)value;
/**

    Sets the client reports.

*/
- (void) setClientReports:(NSMutableArray*)value;
/**

    Sets the client roles.

*/
- (void) setClientRoles:(NSMutableArray*)value;
/**

    Sets the client tag.

*/
- (void) setClientTag:(NSString*)value;
/**

    Sets the connection identifier.

*/
- (void) setConnectionId:(NSString*)value;
/**

    Sets the connection LayoutPriority.

*/
- (void) setConnectionLayoutPriority:(FMLiveSwitchNullableInt*)value;
/**

    Sets the connection LayoutZone.

*/
- (void) setConnectionLayoutZone:(NSString*)value;
/**

    Sets the connection tag.

*/
- (void) setConnectionTag:(NSString*)value;
/**

    Sets the connection type.

*/
- (void) setConnectionType:(NSString*)value;
/**

    Sets the Connector identifer.

*/
- (void) setConnectorId:(NSString*)value;
/**

    Sets the device alias.

*/
- (void) setDeviceAlias:(NSString*)value;
/**

    Sets the device identifier.

*/
- (void) setDeviceId:(NSString*)value;
/**

    Sets the payload.

*/
- (void) setIceServers:(NSString*)value;
/**

    Sets if the offerer is a hidden observer.

*/
- (void) setIsHiddenObserver:(bool)value;
/**

    Sets the broadcast identifier.

*/
- (void) setMediaId:(NSString*)value;
/**

    Sets the Media Server identifier.

*/
- (void) setMediaServerId:(NSString*)value;
/**

    Sets the value indicating whether the client should avoid using local host ICE candidates. Client can override this request.

*/
- (void) setNoHostCandidates:(bool)value;
/**

    Sets the payload.

*/
- (void) setPayload:(NSString*)value;
/**

    Sets the preferred Media Server identifier.

*/
- (void) setPreferredMediaServerId:(NSString*)value;
/**

    Sets the preferred WebSocket Media Server identifier.

*/
- (void) setPreferredWebSocketMediaServerId:(NSString*)value;
/**

    Sets the Recording Monitor identifer.

*/
- (void) setRecordingMonitorId:(NSString*)value;
/**

    Sets the Recording Mover identifer.

*/
- (void) setRecordingMoverId:(NSString*)value;
/**

    Sets the Recording Muxer identifer.

*/
- (void) setRecordingMuxerId:(NSString*)value;
/**

    Sets the region.

*/
- (void) setRegion:(NSString*)value;
/**

    Sets the remote client identifier.

*/
- (void) setRemoteClientId:(NSString*)value;
/**

    Sets the remote connection identifier.

*/
- (void) setRemoteConnectionId:(NSString*)value;
/**

    Sets the remote device identifier.

*/
- (void) setRemoteDeviceId:(NSString*)value;
/**

    Sets the remote broadcast identifier.

*/
- (void) setRemoteMediaId:(NSString*)value;
/**

    Sets the remote user identifier.

*/
- (void) setRemoteUserId:(NSString*)value;
/**

    Sets the value indicating whether ICE Servers have been requested.

*/
- (void) setRequestIceServers:(bool)value;
/**

    Sets the message timestamp.

*/
- (void) setTimestamp:(long long)value;
/**

    Sets the token.

*/
- (void) setToken:(NSString*)value;
/**

    Sets the transaction identifier.

*/
- (void) setTransactionId:(NSString*)value;
/**

    Sets the type.

*/
- (void) setType:(NSString*)value;
/**

    Sets the user alias.

*/
- (void) setUserAlias:(NSString*)value;
/**

    Sets the user identifier.

*/
- (void) setUserId:(NSString*)value;
/**

    Sets the Media Server identifier.

*/
- (void) setWebSocketMediaServerId:(NSString*)value;
/**

    Gets the message timestamp.

*/
- (long long) timestamp;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an array of instances to JSON.

    @param messages The messages to serialize.
    @return 
            The serialized JSON.
            
*/
+ (NSString*) toJsonArrayWithMessages:(NSMutableArray*)messages;
/**

    Serializes an instance to JSON.

    @param message The message to serialize.
    @return 
            The serialized JSON.
            
*/
+ (NSString*) toJsonWithMessage:(FMLiveSwitchMessage*)message;
/**

    Serializes an instance to JSON and forces timestamp regardless of what generates Json.

    @param message The message to serialize.
    @param forceTimestamp Indicates whether timestamp must be included regardless of where serialization occurs.
    @return 
            The serialized JSON.
            
*/
+ (NSString*) toJsonWithMessage:(FMLiveSwitchMessage*)message forceTimestamp:(bool)forceTimestamp;
/**

    Gets the token.

*/
- (NSString*) token;
/**

    Gets the transaction identifier.

*/
- (NSString*) transactionId;
/**

    Gets the type.

*/
- (NSString*) type;
/**

    Gets the user alias.

*/
- (NSString*) userAlias;
/**

    Gets the user identifier.

*/
- (NSString*) userId;
/**

    Gets the Media Server identifier.

*/
- (NSString*) webSocketMediaServerId;

@end

/**

    Message information.

*/
@interface FMLiveSwitchMessageInfo : FMLiveSwitchInfo

/**

    Gets the channel identifier.

*/
- (NSString*) channelId;
/**

    Gets the client identifier.

*/
- (NSString*) clientId;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Gets the device identifier.

*/
- (NSString*) deviceId;
/**

    Deserializes an instance from JSON.

*/
+ (FMLiveSwitchMessageInfo*) fromJsonWithMessageInfoJson:(NSString*)messageInfoJson;
- (instancetype) init;
+ (FMLiveSwitchMessageInfo*) messageInfo;
/**

    Gets the message.

*/
- (NSString*) payload;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the channel identifier.

*/
- (void) setChannelId:(NSString*)value;
/**

    Sets the client identifier.

*/
- (void) setClientId:(NSString*)value;
/**

    Sets the device identifier.

*/
- (void) setDeviceId:(NSString*)value;
/**

    Sets the message.

*/
- (void) setPayload:(NSString*)value;
/**

    Sets the user identifier.

*/
- (void) setUserId:(NSString*)value;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes an instance to JSON.

*/
+ (NSString*) toJsonWithMessageInfo:(FMLiveSwitchMessageInfo*)messageInfo;
/**

    Gets the user identifier.

*/
- (NSString*) userId;

@end

/**

    A message type.

*/
@interface FMLiveSwitchMessageType : NSObject

/**

    Gets the "answer" message type string.

*/
+ (NSString*) answer;
/**

    Gets the "bitrateNotification" message type string.

*/
+ (NSString*) bitrateNotification;
/**

    Gets the "bitrateRequest" message type string.

*/
+ (NSString*) bitrateRequest;
/**

    Gets the "cancelInvite" message type string.

*/
+ (NSString*) cancelInvite;
/**

    Gets the "candidate" message type string.

*/
+ (NSString*) candidate;
/**

    Gets the "close" message type string.

*/
+ (NSString*) close;
/**

    Gets the "dtmfTones" message type string.

*/
+ (NSString*) dtmfTones;
/**

    Gets the "error" message type string.

*/
+ (NSString*) error;
/**

    Gets the "event" message type string.

*/
+ (NSString*) event;
/**

    Gets the "fail" message type string.

*/
+ (NSString*) fail;
/**

    Gets the "iceServers" message type string.

*/
+ (NSString*) iceServers;
- (instancetype) init;
/**

    Gets the "invite" message type string.

*/
+ (NSString*) invite;
/**

    Gets the "inviteFeedback" message type string.

*/
+ (NSString*) inviteFeedback;
/**

    Gets the "join" message type string.

*/
+ (NSString*) join;
/**

    Gets the "keyFrameRequest" message type string.

*/
+ (NSString*) keyFrameRequest;
/**

    Gets the "kick" message type string.

*/
+ (NSString*) kick;
/**

    Gets the "layout" message type string.

*/
+ (NSString*) layout;
/**

    Gets the "leave" message type string.

*/
+ (NSString*) leave;
/**

    Gets the "mcuVideoLayout" message type string.

*/
+ (NSString*) mcuVideoLayout;
/**

    Gets the "mediaIntent" message type string.

*/
+ (NSString*) mediaIntent;
/**

    Gets the "mediaIntentResponse" message type string.

*/
+ (NSString*) mediaIntentResponse;
/**

    Gets the "message" message type string.

*/
+ (NSString*) message;
+ (FMLiveSwitchMessageType*) messageType;
/**

    Gets the "mute" message type string.

*/
+ (NSString*) mute;
/**

    Gets the "notifyJoin" message type string.

*/
+ (NSString*) notifyJoin;
/**

    Gets the "notifyLeave" message type string.

*/
+ (NSString*) notifyLeave;
/**

    Gets the "notifyUpstreamClose" message type string.

*/
+ (NSString*) notifyUpstreamClose;
/**

    Gets the "notifyUpstreamOpen" message type string.

*/
+ (NSString*) notifyUpstreamOpen;
/**

    Gets the "notifyUpstreamUpdate" message type string.

*/
+ (NSString*) notifyUpstreamUpdate;
/**

    Gets the "offer" message type string.

*/
+ (NSString*) offer;
/**

    Gets the "register" message type string.

*/
+ (NSString*) register;
/**

    Gets the "reject" message type string.

*/
+ (NSString*) reject;
/**

    Gets the "activateRtcpDataChannelSignalling" message type string.

*/
+ (NSString*) rtcpDataChannelSignallingActivation;
/**

    Gets the "simulcastNotification" message type string.

*/
+ (NSString*) simulcastNotification;
/**

    Gets the "unregister" message type string.

*/
+ (NSString*) unregister;
/**

    Gets the "update" message type string.

*/
+ (NSString*) update;
/**

    Gets the "useWebSocketService" message type string.

*/
+ (NSString*) useWebSocketService;
/**

    Gets the "useWebSocketsForSfuDownstream" message type string.

*/
+ (NSString*) useWebSocketsForSfuDownstream;
/**

    Gets the "useWebSocketsForSfuUpstream" message type string.

*/
+ (NSString*) useWebSocketsForSfuUpstream;
/**

    Gets the "webSocketInfo" message type string.

*/
+ (NSString*) webSocketInfo;
/**

    Gets the "webSocketStreamInfo" message type string.

*/
+ (NSString*) webSocketMediaStreamInfo;

@end

/**

    Mixer report.

*/
@interface FMLiveSwitchMixerReport : FMLiveSwitchInfo

/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Gets whether the mixer is disabled.

*/
- (FMLiveSwitchNullableBool*) disabled;
- (instancetype) init;
/**

    Gets the mixer input format.

*/
- (FMLiveSwitchFormatInfo*) inputFormat;
+ (FMLiveSwitchMixerReport*) mixerReport;
/**

    Gets the mixer output format.

*/
- (FMLiveSwitchFormatInfo*) outputFormat;
/**

    Gets the mixer output frame-rate.

*/
- (FMLiveSwitchNullableInt*) outputFrameRate;
/**

    Gets the mixer output height.

*/
- (FMLiveSwitchNullableInt*) outputHeight;
/**

    Gets the mixer output width.

*/
- (FMLiveSwitchNullableInt*) outputWidth;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets whether the mixer is disabled.

*/
- (void) setDisabled:(FMLiveSwitchNullableBool*)value;
/**

    Sets the mixer input format.

*/
- (void) setInputFormat:(FMLiveSwitchFormatInfo*)value;
/**

    Sets the mixer output format.

*/
- (void) setOutputFormat:(FMLiveSwitchFormatInfo*)value;
/**

    Sets the mixer output frame-rate.

*/
- (void) setOutputFrameRate:(FMLiveSwitchNullableInt*)value;
/**

    Sets the mixer output height.

*/
- (void) setOutputHeight:(FMLiveSwitchNullableInt*)value;
/**

    Sets the mixer output width.

*/
- (void) setOutputWidth:(FMLiveSwitchNullableInt*)value;

@end

/**

    Muted configuration.

*/
@interface FMLiveSwitchMutedConfig : NSObject

/**

    Gets whether audio is muted.

*/
- (FMLiveSwitchNullableBool*) audioMuted;
/**

    Gets whether audio unmute is disabled.

*/
- (FMLiveSwitchNullableBool*) audioUnmuteDisabled;
/**

    Gets the excluded client identifiers.

*/
- (NSMutableArray*) excludedClientIds;
/**

    Gets the excluded connection identifiers.

*/
- (NSMutableArray*) excludedConnectionIds;
/**

    Gets the excluded device identifiers.

*/
- (NSMutableArray*) excludedDeviceIds;
/**

    Gets the excluded user identifiers.

*/
- (NSMutableArray*) excludedUserIds;
/**

    Deserializes a muted configuration from JSON.

    @param mutedConfigJson The muted configuration as JSON.
    @return The muted configuration.
*/
+ (FMLiveSwitchMutedConfig*) fromJsonWithMutedConfigJson:(NSString*)mutedConfigJson;
- (instancetype) init;
+ (FMLiveSwitchMutedConfig*) mutedConfig;
/**

    Sets whether audio is muted.

*/
- (void) setAudioMuted:(FMLiveSwitchNullableBool*)value;
/**

    Sets whether audio unmute is disabled.

*/
- (void) setAudioUnmuteDisabled:(FMLiveSwitchNullableBool*)value;
/**

    Sets the excluded client identifiers.

*/
- (void) setExcludedClientIds:(NSMutableArray*)value;
/**

    Sets the excluded connection identifiers.

*/
- (void) setExcludedConnectionIds:(NSMutableArray*)value;
/**

    Sets the excluded device identifiers.

*/
- (void) setExcludedDeviceIds:(NSMutableArray*)value;
/**

    Sets the excluded user identifiers.

*/
- (void) setExcludedUserIds:(NSMutableArray*)value;
/**

    Sets whether video is muted.

*/
- (void) setVideoMuted:(FMLiveSwitchNullableBool*)value;
/**

    Sets whether video unmute is disabled.

*/
- (void) setVideoUnmuteDisabled:(FMLiveSwitchNullableBool*)value;
/**

    Serializes this muted configuration to JSON.

    @return The muted configuration as JSON.
*/
- (NSString*) toJson;
/**

    Serializes a muted configuration to JSON.

    @param mutedConfig The muted configuration.
    @return The muted configuration as JSON.
*/
+ (NSString*) toJsonWithMutedConfig:(FMLiveSwitchMutedConfig*)mutedConfig;
/**

    Gets whether video is muted.

*/
- (FMLiveSwitchNullableBool*) videoMuted;
/**

    Gets whether video unmute is disabled.

*/
- (FMLiveSwitchNullableBool*) videoUnmuteDisabled;

@end

/**

    Network interface information.

*/
@interface FMLiveSwitchNetworkInterfaceInfo : FMLiveSwitchInfo

/**

    Gets the network interface adapter speed.

*/
- (long long) adapterSpeed;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes JSON to an array.

    @param networkInterfaceInfosJson The serialized JSON.
    @return The deserialized array.
*/
+ (NSMutableArray*) fromJsonArrayWithNetworkInterfaceInfosJson:(NSString*)networkInterfaceInfosJson;
/**

    Deserializes Json to a NetworkInterfaceInfo.

    @param networkInterfaceInfoJson The serialized Json.
    @return The deserialized NetworkInterfaceInfo.
*/
+ (FMLiveSwitchNetworkInterfaceInfo*) fromJsonWithNetworkInterfaceInfoJson:(NSString*)networkInterfaceInfoJson;
- (instancetype) init;
/**

    Gets the network interface address.

*/
- (NSString*) ipAddress;
/**

    Gets the network interface subnet mask.

*/
- (NSString*) mask;
+ (FMLiveSwitchNetworkInterfaceInfo*) networkInterfaceInfo;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the network interface adapter speed.

*/
- (void) setAdapterSpeed:(long long)value;
/**

    Sets the network interface address.

*/
- (void) setIPAddress:(NSString*)value;
/**

    Sets the network interface subnet mask.

*/
- (void) setMask:(NSString*)value;
/**

    Sets the type.

*/
- (void) setType:(NSString*)value;
/**

    Serializes this instance to Json.

*/
- (NSString*) toJson;
/**

    Serializes an array to JSON.

    @param networkInterfaceInfos The array to serialize.
    @return The serialized JSON.
*/
+ (NSString*) toJsonArrayWithNetworkInterfaceInfos:(NSMutableArray*)networkInterfaceInfos;
/**

    Serializes an instance to Json.

    @param client The instance to serialize.
    @return Serialized Json.
*/
+ (NSString*) toJsonWithClient:(FMLiveSwitchNetworkInterfaceInfo*)client;
/**

    Gets the type.

*/
- (NSString*) type;

@end

/**

    A token.

*/
@interface FMLiveSwitchToken : NSObject

/**

    Gets the algorithm.

*/
- (NSString*) algorithm;
/**

    Gets the API Service identifier.

*/
- (NSString*) apiServiceId;
/**

    Gets the application identifier.

*/
- (NSString*) applicationId;
/**

    Gets the first channel claim.

*/
- (FMLiveSwitchChannelClaim*) channelClaim;
/**

    Gets an array of channel claims.

*/
- (NSMutableArray*) channelClaims;
/**

    Gets the client identifier.

*/
- (NSString*) clientId;
/**

    Gets the client roles.

*/
- (NSMutableArray*) clientRoles;
/**

    Gets the Connector identifier.

*/
- (NSString*) connectorId;
/**

    Gets the default token expiry (120 seconds).

*/
+ (int) defaultExpiry;
/**

    Gets the device identifier.

*/
- (NSString*) deviceId;
/**

    Gets the "expires at" date/time.

*/
- (FMLiveSwitchNullableDate*) expirationTime;
/**

    Generates a signed client join token.

    @param applicationId The application identifier.
    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @param channelClaim The channel claim.
    @param sharedSecret The shared secret.
*/
+ (NSString*) generateClientJoinTokenWithApplicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId channelClaim:(FMLiveSwitchChannelClaim*)channelClaim sharedSecret:(NSString*)sharedSecret;
/**

    Generates a signed client join token.

    @param applicationId The application identifier.
    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @param channelClaim The channel claim.
    @param sharedSecret The shared secret.
    @param expirationTime The time the token will expire in UTC.
*/
+ (NSString*) generateClientJoinTokenWithApplicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId channelClaim:(FMLiveSwitchChannelClaim*)channelClaim sharedSecret:(NSString*)sharedSecret expirationTime:(NSDate*)expirationTime;
/**

    Generates a signed client join token.

    @param applicationId The application identifier.
    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @param channelId The channel identifier.
    @param sharedSecret The shared secret.
*/
+ (NSString*) generateClientJoinTokenWithApplicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId channelId:(NSString*)channelId sharedSecret:(NSString*)sharedSecret;
/**

    Generates a signed client join token.

    @param applicationId The application identifier.
    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @param channelId The channel identifier.
    @param sharedSecret The shared secret.
    @param expirationTime The time the token will expire in UTC.
*/
+ (NSString*) generateClientJoinTokenWithApplicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId channelId:(NSString*)channelId sharedSecret:(NSString*)sharedSecret expirationTime:(NSDate*)expirationTime;
/**

    Generates a signed client join token.

    @param client The client.
    @param channelClaim The channel claim.
    @param sharedSecret The shared secret.
*/
+ (NSString*) generateClientJoinTokenWithClient:(FMLiveSwitchClient*)client channelClaim:(FMLiveSwitchChannelClaim*)channelClaim sharedSecret:(NSString*)sharedSecret;
/**

    Generates a signed client join token.

    @param client The client.
    @param channelClaim The channel claim.
    @param sharedSecret The shared secret.
    @param expirationTime The time the token will expire in UTC.
*/
+ (NSString*) generateClientJoinTokenWithClient:(FMLiveSwitchClient*)client channelClaim:(FMLiveSwitchChannelClaim*)channelClaim sharedSecret:(NSString*)sharedSecret expirationTime:(NSDate*)expirationTime;
/**

    Generates a signed client join token.

    @param client The client.
    @param channelId The channel identifier.
    @param sharedSecret The shared secret.
*/
+ (NSString*) generateClientJoinTokenWithClient:(FMLiveSwitchClient*)client channelId:(NSString*)channelId sharedSecret:(NSString*)sharedSecret;
/**

    Generates a signed client join token.

    @param client The client.
    @param channelId The channel identifier.
    @param sharedSecret The shared secret.
    @param expirationTime The time the token will expire in UTC.
*/
+ (NSString*) generateClientJoinTokenWithClient:(FMLiveSwitchClient*)client channelId:(NSString*)channelId sharedSecret:(NSString*)sharedSecret expirationTime:(NSDate*)expirationTime;
/**

    Generates a signed client register token.

    @param applicationId The application identifier.
    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @param channelClaims The channel claims.
    @param sharedSecret The shared secret.
*/
+ (NSString*) generateClientRegisterTokenWithApplicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId channelClaims:(NSMutableArray*)channelClaims sharedSecret:(NSString*)sharedSecret;
/**

    Generates a signed client register token.

    @param applicationId The application identifier.
    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @param clientRoles The client roles.
    @param channelClaims The channel claims.
    @param sharedSecret The shared secret.
*/
+ (NSString*) generateClientRegisterTokenWithApplicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId clientRoles:(NSMutableArray*)clientRoles channelClaims:(NSMutableArray*)channelClaims sharedSecret:(NSString*)sharedSecret;
/**

    Generates a signed client register token.

    @param applicationId The application identifier.
    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @param clientRoles The client roles.
    @param channelClaims The channel claims.
    @param sharedSecret The shared secret.
    @param expirationTime The time the token will expire in UTC.
*/
+ (NSString*) generateClientRegisterTokenWithApplicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId clientRoles:(NSMutableArray*)clientRoles channelClaims:(NSMutableArray*)channelClaims sharedSecret:(NSString*)sharedSecret expirationTime:(NSDate*)expirationTime;
/**

    Generates a signed client register token.

    @param applicationId The application identifier.
    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @param clientRoles The client roles.
    @param channelClaims The channel claims.
    @param sharedSecret The shared secret.
    @param expirationTime The time the token will expire in UTC.
    @param region The region of the client.
*/
+ (NSString*) generateClientRegisterTokenWithApplicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId clientRoles:(NSMutableArray*)clientRoles channelClaims:(NSMutableArray*)channelClaims sharedSecret:(NSString*)sharedSecret expirationTime:(NSDate*)expirationTime region:(NSString*)region;
/**

    Generates a signed client register token.

    @param applicationId The application identifier.
    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @param clientRoles The client roles.
    @param channelClaims The channel claims.
    @param sharedSecret The shared secret.
    @param region The region of the client.
*/
+ (NSString*) generateClientRegisterTokenWithApplicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId clientRoles:(NSMutableArray*)clientRoles channelClaims:(NSMutableArray*)channelClaims sharedSecret:(NSString*)sharedSecret region:(NSString*)region;
/**

    Generates a signed client register token.

    @param applicationId The application identifier.
    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @param clientRoles The client roles.
    @param channelId The channel identifier.
    @param sharedSecret The shared secret.
*/
+ (NSString*) generateClientRegisterTokenWithApplicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId clientRoles:(NSMutableArray*)clientRoles channelId:(NSString*)channelId sharedSecret:(NSString*)sharedSecret;
/**

    Generates a signed client register token.

    @param applicationId The application identifier.
    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @param clientRoles The client roles.
    @param channelId The channel identifier.
    @param sharedSecret The shared secret.
    @param expirationTime The time the token will expire in UTC.
*/
+ (NSString*) generateClientRegisterTokenWithApplicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId clientRoles:(NSMutableArray*)clientRoles channelId:(NSString*)channelId sharedSecret:(NSString*)sharedSecret expirationTime:(NSDate*)expirationTime;
/**

    Generates a signed client register token.

    @param applicationId The application identifier.
    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @param clientRoles The client roles.
    @param channelId The channel identifier.
    @param sharedSecret The shared secret.
    @param expirationTime The time the token will expire in UTC.
    @param region The region of the client.
*/
+ (NSString*) generateClientRegisterTokenWithApplicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId clientRoles:(NSMutableArray*)clientRoles channelId:(NSString*)channelId sharedSecret:(NSString*)sharedSecret expirationTime:(NSDate*)expirationTime region:(NSString*)region;
/**

    Generates a signed client register token.

    @param applicationId The application identifier.
    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @param clientRoles The client roles.
    @param channelId The channel identifier.
    @param sharedSecret The shared secret.
    @param region The region of the client.
*/
+ (NSString*) generateClientRegisterTokenWithApplicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId clientRoles:(NSMutableArray*)clientRoles channelId:(NSString*)channelId sharedSecret:(NSString*)sharedSecret region:(NSString*)region;
/**

    Generates a signed client register token.

    @param applicationId The application identifier.
    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @param clientRoles The client roles.
    @param channelIds The channel identifiers.
    @param sharedSecret The shared secret.
*/
+ (NSString*) generateClientRegisterTokenWithApplicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId clientRoles:(NSMutableArray*)clientRoles channelIds:(NSMutableArray*)channelIds sharedSecret:(NSString*)sharedSecret;
/**

    Generates a signed client register token.

    @param applicationId The application identifier.
    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @param clientRoles The client roles.
    @param channelIds The channel identifiers.
    @param sharedSecret The shared secret.
    @param expirationTime The time the token will expire in UTC.
*/
+ (NSString*) generateClientRegisterTokenWithApplicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId clientRoles:(NSMutableArray*)clientRoles channelIds:(NSMutableArray*)channelIds sharedSecret:(NSString*)sharedSecret expirationTime:(NSDate*)expirationTime;
/**

    Generates a signed client register token.

    @param applicationId The application identifier.
    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @param clientRoles The client roles.
    @param channelIds The channel identifiers.
    @param sharedSecret The shared secret.
    @param expirationTime The time the token will expire in UTC.
    @param region The region of the client.
*/
+ (NSString*) generateClientRegisterTokenWithApplicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId clientRoles:(NSMutableArray*)clientRoles channelIds:(NSMutableArray*)channelIds sharedSecret:(NSString*)sharedSecret expirationTime:(NSDate*)expirationTime region:(NSString*)region;
/**

    Generates a signed client register token.

    @param applicationId The application identifier.
    @param userId The user identifier.
    @param deviceId The device identifier.
    @param clientId The client identifier.
    @param clientRoles The client roles.
    @param channelIds The channel identifiers.
    @param sharedSecret The shared secret.
    @param region The region of the client.
*/
+ (NSString*) generateClientRegisterTokenWithApplicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId clientRoles:(NSMutableArray*)clientRoles channelIds:(NSMutableArray*)channelIds sharedSecret:(NSString*)sharedSecret region:(NSString*)region;
/**

    Generates a signed client register token.

    @param client The client.
    @param channelClaims The channel claims.
    @param sharedSecret The shared secret.
*/
+ (NSString*) generateClientRegisterTokenWithClient:(FMLiveSwitchClient*)client channelClaims:(NSMutableArray*)channelClaims sharedSecret:(NSString*)sharedSecret;
/**

    Generates a signed client register token.

    @param client The client.
    @param channelClaims The channel claims.
    @param sharedSecret The shared secret.
    @param expirationTime The time the token will expire in UTC.
*/
+ (NSString*) generateClientRegisterTokenWithClient:(FMLiveSwitchClient*)client channelClaims:(NSMutableArray*)channelClaims sharedSecret:(NSString*)sharedSecret expirationTime:(NSDate*)expirationTime;
/**

    Generates a signed client register token.

    @param client The client.
    @param channelClaims The channel claims.
    @param sharedSecret The shared secret.
    @param expirationTime The time the token will expire in UTC.
    @param region The region of the client.
*/
+ (NSString*) generateClientRegisterTokenWithClient:(FMLiveSwitchClient*)client channelClaims:(NSMutableArray*)channelClaims sharedSecret:(NSString*)sharedSecret expirationTime:(NSDate*)expirationTime region:(NSString*)region;
/**

    Generates a signed client register token.

    @param client The client.
    @param channelClaims The channel claims.
    @param sharedSecret The shared secret.
    @param region The region of the client.
*/
+ (NSString*) generateClientRegisterTokenWithClient:(FMLiveSwitchClient*)client channelClaims:(NSMutableArray*)channelClaims sharedSecret:(NSString*)sharedSecret region:(NSString*)region;
/**

    Generates a signed client register token.

    @param client The client.
    @param channelId The channel identifier.
    @param sharedSecret The shared secret.
*/
+ (NSString*) generateClientRegisterTokenWithClient:(FMLiveSwitchClient*)client channelId:(NSString*)channelId sharedSecret:(NSString*)sharedSecret;
/**

    Generates a signed client register token.

    @param client The client.
    @param channelId The channel identifier.
    @param sharedSecret The shared secret.
    @param expirationTime The time the token will expire in UTC.
*/
+ (NSString*) generateClientRegisterTokenWithClient:(FMLiveSwitchClient*)client channelId:(NSString*)channelId sharedSecret:(NSString*)sharedSecret expirationTime:(NSDate*)expirationTime;
/**

    Generates a signed client register token.

    @param client The client.
    @param channelId The channel identifier.
    @param sharedSecret The shared secret.
    @param expirationTime The time the token will expire in UTC.
    @param region The region of the client.
*/
+ (NSString*) generateClientRegisterTokenWithClient:(FMLiveSwitchClient*)client channelId:(NSString*)channelId sharedSecret:(NSString*)sharedSecret expirationTime:(NSDate*)expirationTime region:(NSString*)region;
/**

    Generates a signed client register token.

    @param client The client.
    @param channelId The channel identifier.
    @param sharedSecret The shared secret.
    @param region The region of the client.
*/
+ (NSString*) generateClientRegisterTokenWithClient:(FMLiveSwitchClient*)client channelId:(NSString*)channelId sharedSecret:(NSString*)sharedSecret region:(NSString*)region;
/**

    Generates a signed client register token.

    @param client The client.
    @param channelIds The channel identifiers.
    @param sharedSecret The shared secret.
*/
+ (NSString*) generateClientRegisterTokenWithClient:(FMLiveSwitchClient*)client channelIds:(NSMutableArray*)channelIds sharedSecret:(NSString*)sharedSecret;
/**

    Generates a signed client register token.

    @param client The client.
    @param channelIds The channel identifiers.
    @param sharedSecret The shared secret.
    @param expirationTime The time the token will expire in UTC.
*/
+ (NSString*) generateClientRegisterTokenWithClient:(FMLiveSwitchClient*)client channelIds:(NSMutableArray*)channelIds sharedSecret:(NSString*)sharedSecret expirationTime:(NSDate*)expirationTime;
/**

    Generates a signed client register token.

    @param client The client.
    @param channelIds The channel identifiers.
    @param sharedSecret The shared secret.
    @param expirationTime The time the token will expire in UTC.
    @param region The region of the client.
*/
+ (NSString*) generateClientRegisterTokenWithClient:(FMLiveSwitchClient*)client channelIds:(NSMutableArray*)channelIds sharedSecret:(NSString*)sharedSecret expirationTime:(NSDate*)expirationTime region:(NSString*)region;
/**

    Generates a signed client register token.

    @param client The client.
    @param channelIds The channel identifiers.
    @param sharedSecret The shared secret.
    @param region The region of the client.
*/
+ (NSString*) generateClientRegisterTokenWithClient:(FMLiveSwitchClient*)client channelIds:(NSMutableArray*)channelIds sharedSecret:(NSString*)sharedSecret region:(NSString*)region;
/**

    Generates a signed client WebSocket access token.

    @param applicationId 
    @param userId 
    @param deviceId 
    @param clientId 
    @param sharedSecret 
*/
+ (NSString*) generateClientWebSocketAccessTokenWithApplicationId:(NSString*)applicationId userId:(NSString*)userId deviceId:(NSString*)deviceId clientId:(NSString*)clientId sharedSecret:(NSString*)sharedSecret;
/**

    Generates a signed event token.

    @param applicationId The application identifier.
    @param sharedSecret The shared secret.
*/
+ (NSString*) generateEventTokenWithApplicationId:(NSString*)applicationId sharedSecret:(NSString*)sharedSecret;
/**

    Generates a signed event token.

    @param applicationId The application identifier.
    @param sharedSecret The shared secret.
    @param expirationTime The expiration time.
*/
+ (NSString*) generateEventTokenWithApplicationId:(NSString*)applicationId sharedSecret:(NSString*)sharedSecret expirationTime:(NSDate*)expirationTime;
/**

    Gets the HMAC SHA-256 algorithm string.

*/
+ (NSString*) hmacSha256Algorithm;
/**

    Gets the "issued at" date/time.

*/
- (NSDate*) issuedAt;
/**

    Gets the Media Server identifier.

*/
- (NSString*) mediaServerId;
/**

    Parses a token string.

    @param tokenString The token string.
    @return The token.
*/
+ (FMLiveSwitchToken*) parseWithTokenString:(NSString*)tokenString;
/**

    Gets the Recording Monitor identifier.

*/
- (NSString*) recordingMonitorId;
/**

    Gets the Recording Mover identifier.

*/
- (NSString*) recordingMoverId;
/**

    Gets the Recording Muxer identifier.

*/
- (NSString*) recordingMuxerId;
/**

    Gets the region.

*/
- (NSString*) region;
/**

    Gets the RSA SHA-256 algorithm string.

*/
+ (NSString*) rsaSha256Algorithm;
/**

    Gets the type.

*/
- (NSString*) type;
/**

    Gets the user identifier.

*/
- (NSString*) userId;
/**

    Verifies the token signature.

    @param sharedSecret The shared secret.
    @return `true` if the signature is valid; otherwise, `false`.
            
*/
- (bool) verifyWithSharedSecret:(NSString*)sharedSecret;
/**

    Parses a token and verifies its signature.

    @param tokenString The token string.
    @param sharedSecret The shared secret.
    @return `true` if the token string could be parsed and the signature is valid; otherwise, `false`
*/
+ (bool) verifyWithTokenString:(NSString*)tokenString sharedSecret:(NSString*)sharedSecret;
/**

    Gets the Web Socket Media Server identifier.

*/
- (NSString*) webSocketMediaServerId;

@end

/**

    A claim action.

*/
FOUNDATION_EXPORT NSString* const FMLiveSwitchClaimActionClaim;
FOUNDATION_EXPORT NSString* const FMLiveSwitchClaimActionDrop;
FOUNDATION_EXPORT NSString* const FMLiveSwitchClaimActionJoin;

@interface FMLiveSwitchClaimAction : NSObject

+ (FMLiveSwitchClaimAction*) claimAction;
- (instancetype) init;

@end

/**

    A token type.

*/
@interface FMLiveSwitchTokenType : NSObject

/**

    Gets the "event" token type string.

*/
+ (NSString*) event;
- (instancetype) init;
/**

    Gets the "join" token type string.

*/
+ (NSString*) join;
/**

    Gets the "register" token type string.

*/
+ (NSString*) register;
+ (FMLiveSwitchTokenType*) tokenType;
/**

    Gets the "websocketaccess" token type string.

*/
+ (NSString*) webSocketAccess;

@end

/**

    Transport report.

*/
@interface FMLiveSwitchTransportReport : FMLiveSwitchReport

/**

    Gets the number of bytes received on this transport.

*/
- (FMLiveSwitchNullableLong*) bytesReceived;
/**

    Gets the number of bytes sent on this transport.

*/
- (FMLiveSwitchNullableLong*) bytesSent;
/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes Json to a TransportReport.

    @param transportReportJson The serialized Json.
    @return The deserialized TransportReport.
*/
+ (FMLiveSwitchTransportReport*) fromJsonWithTransportReportJson:(NSString*)transportReportJson;
/**

    Initializes a new instance of the FMLiveSwitchTransportReport class.

*/
- (instancetype) init;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the number of bytes received on this transport.

*/
- (void) setBytesReceived:(FMLiveSwitchNullableLong*)value;
/**

    Sets the number of bytes sent on this transport.

*/
- (void) setBytesSent:(FMLiveSwitchNullableLong*)value;
/**

    Serializes this instance to Json.

*/
- (NSString*) toJson;
/**

    Serializes an instance to Json.

    @param transportReport The instance to serialize.
    @return Serialized Json.
*/
+ (NSString*) toJsonWithTransportReport:(FMLiveSwitchTransportReport*)transportReport;
/**

    Initializes a new instance of the FMLiveSwitchTransportReport class.

*/
+ (FMLiveSwitchTransportReport*) transportReport;

@end

/**

    A description of the layout within a mixed video view.

*/
@interface FMLiveSwitchVideoLayout : NSObject

/**

    Gets the bounds, keyed by connection ID.

*/
- (NSMutableDictionary<NSString*,FMLiveSwitchLayoutFrame*>*) bounds;
/**

    Gets whether to crop.

*/
- (bool) crop;
/**

    Gets the frames, keyed by connection ID.

*/
- (NSMutableDictionary<NSString*,FMLiveSwitchLayoutFrame*>*) frames;
/**

    Deserializes a view from JSON.

    @param videoLayoutJson The layout JSON.
*/
+ (FMLiveSwitchVideoLayout*) fromJsonWithVideoLayoutJson:(NSString*)videoLayoutJson;
/**

    Gets the video height.

*/
- (int) height;
/**

    Initializes a new instance of the FMLiveSwitchVideoLayout class.

*/
- (instancetype) initWithWidth:(int)width height:(int)height;
/**

    Initializes a new instance of the FMLiveSwitchVideoLayout class.

*/
- (instancetype) initWithWidth:(int)width height:(int)height crop:(bool)crop;
/**

    Initializes a new instance of the FMLiveSwitchVideoLayout class.

*/
- (instancetype) initWithWidth:(int)width height:(int)height frames:(NSMutableDictionary<NSString*,FMLiveSwitchLayoutFrame*>*)frames bounds:(NSMutableDictionary<NSString*,FMLiveSwitchLayoutFrame*>*)bounds;
/**

    Initializes a new instance of the FMLiveSwitchVideoLayout class.

*/
- (instancetype) initWithWidth:(int)width height:(int)height frames:(NSMutableDictionary<NSString*,FMLiveSwitchLayoutFrame*>*)frames bounds:(NSMutableDictionary<NSString*,FMLiveSwitchLayoutFrame*>*)bounds crop:(bool)crop;
/**

    Determines whether the specified video layout is equivalent.

    @param videoLayout The video layout.
*/
- (bool) isEquivalentWithVideoLayout:(FMLiveSwitchVideoLayout*)videoLayout;
/**

    Gets the regions within the layout where each region
    has a frame, bounds, and client/connection information.

*/
- (NSMutableArray*) regions;
/**

    Serializes this instance to JSON.

*/
- (NSString*) toJson;
/**

    Serializes a view to JSON.

    @param videoLayout The layout.
*/
+ (NSString*) toJsonWithVideoLayout:(FMLiveSwitchVideoLayout*)videoLayout;
/**

    Initializes a new instance of the FMLiveSwitchVideoLayout class.

*/
+ (FMLiveSwitchVideoLayout*) videoLayoutWithWidth:(int)width height:(int)height;
/**

    Initializes a new instance of the FMLiveSwitchVideoLayout class.

*/
+ (FMLiveSwitchVideoLayout*) videoLayoutWithWidth:(int)width height:(int)height crop:(bool)crop;
/**

    Initializes a new instance of the FMLiveSwitchVideoLayout class.

*/
+ (FMLiveSwitchVideoLayout*) videoLayoutWithWidth:(int)width height:(int)height frames:(NSMutableDictionary<NSString*,FMLiveSwitchLayoutFrame*>*)frames bounds:(NSMutableDictionary<NSString*,FMLiveSwitchLayoutFrame*>*)bounds;
/**

    Initializes a new instance of the FMLiveSwitchVideoLayout class.

*/
+ (FMLiveSwitchVideoLayout*) videoLayoutWithWidth:(int)width height:(int)height frames:(NSMutableDictionary<NSString*,FMLiveSwitchLayoutFrame*>*)frames bounds:(NSMutableDictionary<NSString*,FMLiveSwitchLayoutFrame*>*)bounds crop:(bool)crop;
/**

    Gets the video width.

*/
- (int) width;

@end

/**

    A video layout region.

*/
@interface FMLiveSwitchVideoLayoutRegion : NSObject

/**

    Gets the bounds.

*/
- (FMLiveSwitchLayoutFrame*) bounds;
/**

    Gets the client identifier.

*/
- (NSString*) clientId;
/**

    Gets the client protocol.

*/
- (NSString*) clientProtocol;
/**

    Gets the client roles.

*/
- (NSMutableArray*) clientRoles;
/**

    Gets the client tag.

*/
- (NSString*) clientTag;
/**

    Gets the connection identifier.

*/
- (NSString*) connectionId;
/**

    Gets the connection tag.

*/
- (NSString*) connectionTag;
/**

    Gets the connection type.

*/
- (NSString*) connectionType;
/**

    Gets the device alias.

*/
- (NSString*) deviceAlias;
/**

    Gets the device identifier.

*/
- (NSString*) deviceId;
/**

    Gets the frame.

*/
- (FMLiveSwitchLayoutFrame*) frame;
/**

    Initializes a new instance of the FMLiveSwitchVideoLayoutRegion class.

    @param frame The frame.
    @param bounds The bounds.
    @param userId The user identifier.
    @param userAlias The user alias.
    @param deviceId The device identifier.
    @param deviceAlias The device alias.
    @param clientId The client identifier.
    @param clientTag The client tag.
    @param clientRoles The client roles.
    @param clientProtocol The client protocol.
    @param connectionId The connection identifier.
    @param connectionTag The connection tag.
    @param connectionType The connection type.
*/
- (instancetype) initWithFrame:(FMLiveSwitchLayoutFrame*)frame bounds:(FMLiveSwitchLayoutFrame*)bounds userId:(NSString*)userId userAlias:(NSString*)userAlias deviceId:(NSString*)deviceId deviceAlias:(NSString*)deviceAlias clientId:(NSString*)clientId clientTag:(NSString*)clientTag clientRoles:(NSMutableArray*)clientRoles clientProtocol:(NSString*)clientProtocol connectionId:(NSString*)connectionId connectionTag:(NSString*)connectionTag connectionType:(NSString*)connectionType;
/**

    Gets the user alias.

*/
- (NSString*) userAlias;
/**

    Gets the user identifier.

*/
- (NSString*) userId;
/**

    Initializes a new instance of the FMLiveSwitchVideoLayoutRegion class.

    @param frame The frame.
    @param bounds The bounds.
    @param userId The user identifier.
    @param userAlias The user alias.
    @param deviceId The device identifier.
    @param deviceAlias The device alias.
    @param clientId The client identifier.
    @param clientTag The client tag.
    @param clientRoles The client roles.
    @param clientProtocol The client protocol.
    @param connectionId The connection identifier.
    @param connectionTag The connection tag.
    @param connectionType The connection type.
*/
+ (FMLiveSwitchVideoLayoutRegion*) videoLayoutRegionWithFrame:(FMLiveSwitchLayoutFrame*)frame bounds:(FMLiveSwitchLayoutFrame*)bounds userId:(NSString*)userId userAlias:(NSString*)userAlias deviceId:(NSString*)deviceId deviceAlias:(NSString*)deviceAlias clientId:(NSString*)clientId clientTag:(NSString*)clientTag clientRoles:(NSMutableArray*)clientRoles clientProtocol:(NSString*)clientProtocol connectionId:(NSString*)connectionId connectionTag:(NSString*)connectionTag connectionType:(NSString*)connectionType;

@end

@interface FMLiveSwitchNetworkConnectionStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMLiveSwitchNetworkConnectionState)value;

@end

/**

    Webhook information.

*/
@interface FMLiveSwitchWebhookInfo : FMLiveSwitchInfo

/**

    Deserializes the properties.

    @param key The key.
    @param valueJson The value in JSON format.
*/
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/**

    Deserializes Json to a WebhookInfo.

    @param webhookInfoJson The serialized Json.
    @return The deserialized WebhookInfo.
*/
+ (FMLiveSwitchWebhookInfo*) fromJsonWithWebhookInfoJson:(NSString*)webhookInfoJson;
- (instancetype) init;
/**

    Gets the webhook result.

*/
- (int) result;
/**

    Serializes the properties.

    @param jsonObject The JSON object.
*/
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary<NSString*,NSString*>*)jsonObject;
/**

    Sets the webhook result.

*/
- (void) setResult:(int)value;
/**

    Sets the webhook URL.

*/
- (void) setUrl:(NSString*)value;
/**

    Serializes this instance to Json.

*/
- (NSString*) toJson;
/**

    Serializes an instance to Json.

    @param webhookInfo The instance to serialize.
    @return Serialized Json.
*/
+ (NSString*) toJsonWithWebhookInfo:(FMLiveSwitchWebhookInfo*)webhookInfo;
/**

    Gets the webhook URL.

*/
- (NSString*) url;
+ (FMLiveSwitchWebhookInfo*) webhookInfo;

@end




@interface FMLiveSwitchHashContext : FMLiveSwitchHashContextBase 

/* static init */ + (instancetype)hashContextWithType:(FMLiveSwitchHashType)type;
- (instancetype)initWithType:(FMLiveSwitchHashType)type;

@end




@interface FMLiveSwitchMacContext : FMLiveSwitchMacContextBase 

/* static init */ + (instancetype)macContextWithType:(FMLiveSwitchMacType)type key:(FMLiveSwitchDataBuffer *)key;
- (instancetype)initWithType:(FMLiveSwitchMacType)type key:(FMLiveSwitchDataBuffer *)key;

@end




@interface FMLiveSwitchFileStream : NSObject<FMLiveSwitchIFileStream> 

/* static init */ + (instancetype)fileStreamWithPath:(NSString *)path;
- (instancetype)initWithPath:(NSString *)path;

@end


@interface FMLiveSwitchHttpRequest : NSObject 

- (NSURL*) url;

@end



@interface FMLiveSwitchHttpWebRequest : NSObject 

/* static init */ + (instancetype)httpWebRequestWithSession:(NSURLSession *)session;
- (instancetype)initWithSession:(NSURLSession *)session;
- (FMLiveSwitchHttpResponseArgs*)sendBinaryWithRequestArgs:(FMLiveSwitchHttpRequestArgs*)requestArgs;
- (void)sendBinaryAsyncWithRequestArgs:(FMLiveSwitchHttpRequestArgs*)requestArgs callback:(FMLiveSwitchAction1<FMLiveSwitchHttpResponseArgs*>*)callback;

@end




@interface FMLiveSwitchHttpWebRequestTransfer : FMLiveSwitchHttpTransfer 

+ (NSString*)getPlatformCode;

@end

//  
//  FMLiveSwitchAsyncSocket.h
//  
//  This class is in the public domain.
//  Originally created by Robbie Hanson in Q3 2010.
//  Updated and maintained by Deusty LLC and the Apple development community.
//  
//  https://github.com/robbiehanson/CocoaAsyncSocket
//
//  Obtained from CocoaAsyncSocket project git on 2016-11-16


#include <sys/socket.h> // AF_INET, AF_INET6

@class FMLiveSwitchAsyncReadPacket;
@class FMLiveSwitchAsyncWritePacket;
@class FMLiveSwitchAsyncSocketPreBuffer;
@protocol FMLiveSwitchAsyncSocketDelegate;

NS_ASSUME_NONNULL_BEGIN

extern NSString *const FMLiveSwitchAsyncSocketException;
extern NSString *const FMLiveSwitchAsyncSocketErrorDomain;

extern NSString *const FMLiveSwitchAsyncSocketQueueName;
extern NSString *const FMLiveSwitchAsyncSocketThreadName;

extern NSString *const FMLiveSwitchAsyncSocketManuallyEvaluateTrust;
#if TARGET_OS_IPHONE
extern NSString *const FMLiveSwitchAsyncSocketUseCFStreamForTLS;
#endif
#define FMLiveSwitchAsyncSocketSSLPeerName     (NSString *)kCFStreamSSLPeerName
#define FMLiveSwitchAsyncSocketSSLCertificates (NSString *)kCFStreamSSLCertificates
#define FMLiveSwitchAsyncSocketSSLIsServer     (NSString *)kCFStreamSSLIsServer
extern NSString *const FMLiveSwitchAsyncSocketSSLPeerID;
extern NSString *const FMLiveSwitchAsyncSocketSSLProtocolVersionMin;
extern NSString *const FMLiveSwitchAsyncSocketSSLProtocolVersionMax;
extern NSString *const FMLiveSwitchAsyncSocketSSLSessionOptionFalseStart;
extern NSString *const FMLiveSwitchAsyncSocketSSLSessionOptionSendOneByteRecord;
extern NSString *const FMLiveSwitchAsyncSocketSSLCipherSuites;
#if !TARGET_OS_IPHONE
extern NSString *const FMLiveSwitchAsyncSocketSSLDiffieHellmanParameters;
#endif

#define FMLiveSwitchAsyncSocketLoggingContext 65535


typedef NS_ENUM(NSInteger, FMLiveSwitchAsyncSocketError) {
	FMLiveSwitchAsyncSocketNoError = 0,           // Never used
	FMLiveSwitchAsyncSocketBadConfigError,        // Invalid configuration
	FMLiveSwitchAsyncSocketBadParamError,         // Invalid parameter was passed
	FMLiveSwitchAsyncSocketConnectTimeoutError,   // A connect operation timed out
	FMLiveSwitchAsyncSocketReadTimeoutError,      // A read operation timed out
	FMLiveSwitchAsyncSocketWriteTimeoutError,     // A write operation timed out
	FMLiveSwitchAsyncSocketReadMaxedOutError,     // Reached set maxLength without completing
	FMLiveSwitchAsyncSocketClosedError,           // The remote peer closed the connection
	FMLiveSwitchAsyncSocketOtherError,            // Description provided in userInfo
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma mark -
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


@interface FMLiveSwitchAsyncSocket : NSObject

/**
 * FMLiveSwitchAsyncSocket uses the standard delegate paradigm,
 * but executes all delegate callbacks on a given delegate dispatch queue.
 * This allows for maximum concurrency, while at the same time providing easy thread safety.
 * 
 * You MUST set a delegate AND delegate dispatch queue before attempting to
 * use the socket, or you will get an error.
 * 
 * The socket queue is optional.
 * If you pass NULL, FMLiveSwitchAsyncSocket will automatically create it's own socket queue.
 * If you choose to provide a socket queue, the socket queue must not be a concurrent queue.
 * If you choose to provide a socket queue, and the socket queue has a configured target queue,
 * then please see the discussion for the method markSocketQueueTargetQueue.
 * 
 * The delegate queue and socket queue can optionally be the same.
**/
- (instancetype)init;
- (instancetype)initWithSocketQueue:(nullable dispatch_queue_t)sq;
- (instancetype)initWithDelegate:(nullable id<FMLiveSwitchAsyncSocketDelegate>)aDelegate delegateQueue:(nullable dispatch_queue_t)dq;
- (instancetype)initWithDelegate:(nullable id<FMLiveSwitchAsyncSocketDelegate>)aDelegate delegateQueue:(nullable dispatch_queue_t)dq socketQueue:(nullable dispatch_queue_t)sq;

#pragma mark Configuration

@property (atomic, weak, readwrite, nullable) id<FMLiveSwitchAsyncSocketDelegate> delegate;
#if OS_OBJECT_USE_OBJC
@property (atomic, strong, readwrite, nullable) dispatch_queue_t delegateQueue;
#else
@property (atomic, assign, readwrite, nullable) dispatch_queue_t delegateQueue;
#endif

- (void)getDelegate:(id<FMLiveSwitchAsyncSocketDelegate> __nullable * __nullable)delegatePtr delegateQueue:(dispatch_queue_t __nullable * __nullable)delegateQueuePtr;
- (void)setDelegate:(nullable id<FMLiveSwitchAsyncSocketDelegate>)delegate delegateQueue:(nullable dispatch_queue_t)delegateQueue;

/**
 * If you are setting the delegate to nil within the delegate's dealloc method,
 * you may need to use the synchronous versions below.
**/
- (void)synchronouslySetDelegate:(nullable id<FMLiveSwitchAsyncSocketDelegate>)delegate;
- (void)synchronouslySetDelegateQueue:(nullable dispatch_queue_t)delegateQueue;
- (void)synchronouslySetDelegate:(nullable id<FMLiveSwitchAsyncSocketDelegate>)delegate delegateQueue:(nullable dispatch_queue_t)delegateQueue;

/**
 * By default, both IPv4 and IPv6 are enabled.
 * 
 * For accepting incoming connections, this means FMLiveSwitchAsyncSocket automatically supports both protocols,
 * and can simulataneously accept incoming connections on either protocol.
 * 
 * For outgoing connections, this means FMLiveSwitchAsyncSocket can connect to remote hosts running either protocol.
 * If a DNS lookup returns only IPv4 results, FMLiveSwitchAsyncSocket will automatically use IPv4.
 * If a DNS lookup returns only IPv6 results, FMLiveSwitchAsyncSocket will automatically use IPv6.
 * If a DNS lookup returns both IPv4 and IPv6 results, the preferred protocol will be chosen.
 * By default, the preferred protocol is IPv4, but may be configured as desired.
**/

@property (atomic, assign, readwrite, getter=isIPv4Enabled) BOOL IPv4Enabled;
@property (atomic, assign, readwrite, getter=isIPv6Enabled) BOOL IPv6Enabled;

@property (atomic, assign, readwrite, getter=isIPv4PreferredOverIPv6) BOOL IPv4PreferredOverIPv6;

/** 
 * When connecting to both IPv4 and IPv6 using Happy Eyeballs (RFC 6555) https://tools.ietf.org/html/rfc6555
 * this is the delay between connecting to the preferred protocol and the fallback protocol.
 *
 * Defaults to 300ms.
**/
@property (atomic, assign, readwrite) NSTimeInterval alternateAddressDelay;

/**
 * User data allows you to associate arbitrary information with the socket.
 * This data is not used internally by socket in any way.
**/
@property (atomic, strong, readwrite, nullable) id userData;

/**
 * Class level getter/setter for static _attemptDscp member.
 */
+ (bool)attemptDscp;
+ (void)setAttemptDscp:(bool)attemptDscp;

#pragma mark Accepting

/**
 * Tells the socket to begin listening and accepting connections on the given port.
 * When a connection is accepted, a new instance of FMLiveSwitchAsyncSocket will be spawned to handle it,
 * and the socket:didAcceptNewSocket: delegate method will be invoked.
 * 
 * The socket will listen on all available interfaces (e.g. wifi, ethernet, etc)
**/
- (BOOL)acceptOnPort:(uint16_t)port error:(NSError **)errPtr;

/**
 * This method is the same as acceptOnPort:error: with the
 * additional option of specifying which interface to listen on.
 * 
 * For example, you could specify that the socket should only accept connections over ethernet,
 * and not other interfaces such as wifi.
 * 
 * The interface may be specified by name (e.g. "en1" or "lo0") or by IP address (e.g. "192.168.4.34").
 * You may also use the special strings "localhost" or "loopback" to specify that
 * the socket only accept connections from the local machine.
 * 
 * You can see the list of interfaces via the command line utility "ifconfig",
 * or programmatically via the getifaddrs() function.
 * 
 * To accept connections on any interface pass nil, or simply use the acceptOnPort:error: method.
**/
- (BOOL)acceptOnInterface:(nullable NSString *)interface port:(uint16_t)port error:(NSError **)errPtr;

/**
 * Tells the socket to begin listening and accepting connections on the unix domain at the given url.
 * When a connection is accepted, a new instance of FMLiveSwitchAsyncSocket will be spawned to handle it,
 * and the socket:didAcceptNewSocket: delegate method will be invoked.
 *
 * The socket will listen on all available interfaces (e.g. wifi, ethernet, etc)
 **/
- (BOOL)acceptOnUrl:(NSURL *)url error:(NSError **)errPtr;

#pragma mark Connecting

/**
 * Connects to the given host and port.
 * 
 * This method invokes connectToHost:onPort:viaInterface:withTimeout:error:
 * and uses the default interface, and no timeout.
**/
- (BOOL)connectToHost:(NSString *)host onPort:(uint16_t)port error:(NSError **)errPtr;

/**
 * Connects to the given host and port with an optional timeout.
 * 
 * This method invokes connectToHost:onPort:viaInterface:withTimeout:error: and uses the default interface.
**/
- (BOOL)connectToHost:(NSString *)host
               onPort:(uint16_t)port
          withTimeout:(NSTimeInterval)timeout
                error:(NSError **)errPtr;

/**
 * Connects to the given host & port, via the optional interface, with an optional timeout.
 * 
 * The host may be a domain name (e.g. "deusty.com") or an IP address string (e.g. "192.168.0.2").
 * The host may also be the special strings "localhost" or "loopback" to specify connecting
 * to a service on the local machine.
 * 
 * The interface may be a name (e.g. "en1" or "lo0") or the corresponding IP address (e.g. "192.168.4.35").
 * The interface may also be used to specify the local port (see below).
 * 
 * To not time out use a negative time interval.
 * 
 * This method will return NO if an error is detected, and set the error pointer (if one was given).
 * Possible errors would be a nil host, invalid interface, or socket is already connected.
 * 
 * If no errors are detected, this method will start a background connect operation and immediately return YES.
 * The delegate callbacks are used to notify you when the socket connects, or if the host was unreachable.
 * 
 * Since this class supports queued reads and writes, you can immediately start reading and/or writing.
 * All read/write operations will be queued, and upon socket connection,
 * the operations will be dequeued and processed in order.
 * 
 * The interface may optionally contain a port number at the end of the string, separated by a colon.
 * This allows you to specify the local port that should be used for the outgoing connection. (read paragraph to end)
 * To specify both interface and local port: "en1:8082" or "192.168.4.35:2424".
 * To specify only local port: ":8082".
 * Please note this is an advanced feature, and is somewhat hidden on purpose.
 * You should understand that 99.999% of the time you should NOT specify the local port for an outgoing connection.
 * If you think you need to, there is a very good chance you have a fundamental misunderstanding somewhere.
 * Local ports do NOT need to match remote ports. In fact, they almost never do.
 * This feature is here for networking professionals using very advanced techniques.
**/
- (BOOL)connectToHost:(NSString *)host
               onPort:(uint16_t)port
         viaInterface:(nullable NSString *)interface
          withTimeout:(NSTimeInterval)timeout
                error:(NSError **)errPtr;

/**
 * Connects to the given address, specified as a sockaddr structure wrapped in a NSData object.
 * For example, a NSData object returned from NSNetService's addresses method.
 * 
 * If you have an existing struct sockaddr you can convert it to a NSData object like so:
 * struct sockaddr sa  -> NSData *dsa = [NSData dataWithBytes:&remoteAddr length:remoteAddr.sa_len];
 * struct sockaddr *sa -> NSData *dsa = [NSData dataWithBytes:remoteAddr length:remoteAddr->sa_len];
 * 
 * This method invokes connectToAdd
**/
- (BOOL)connectToAddress:(NSData *)remoteAddr error:(NSError **)errPtr;

/**
 * This method is the same as connectToAddress:error: with an additional timeout option.
 * To not time out use a negative time interval, or simply use the connectToAddress:error: method.
**/
- (BOOL)connectToAddress:(NSData *)remoteAddr withTimeout:(NSTimeInterval)timeout error:(NSError **)errPtr;

/**
 * Connects to the given address, using the specified interface and timeout.
 * 
 * The address is specified as a sockaddr structure wrapped in a NSData object.
 * For example, a NSData object returned from NSNetService's addresses method.
 * 
 * If you have an existing struct sockaddr you can convert it to a NSData object like so:
 * struct sockaddr sa  -> NSData *dsa = [NSData dataWithBytes:&remoteAddr length:remoteAddr.sa_len];
 * struct sockaddr *sa -> NSData *dsa = [NSData dataWithBytes:remoteAddr length:remoteAddr->sa_len];
 * 
 * The interface may be a name (e.g. "en1" or "lo0") or the corresponding IP address (e.g. "192.168.4.35").
 * The interface may also be used to specify the local port (see below).
 * 
 * The timeout is optional. To not time out use a negative time interval.
 * 
 * This method will return NO if an error is detected, and set the error pointer (if one was given).
 * Possible errors would be a nil host, invalid interface, or socket is already connected.
 * 
 * If no errors are detected, this method will start a background connect operation and immediately return YES.
 * The delegate callbacks are used to notify you when the socket connects, or if the host was unreachable.
 * 
 * Since this class supports queued reads and writes, you can immediately start reading and/or writing.
 * All read/write operations will be queued, and upon socket connection,
 * the operations will be dequeued and processed in order.
 * 
 * The interface may optionally contain a port number at the end of the string, separated by a colon.
 * This allows you to specify the local port that should be used for the outgoing connection. (read paragraph to end)
 * To specify both interface and local port: "en1:8082" or "192.168.4.35:2424".
 * To specify only local port: ":8082".
 * Please note this is an advanced feature, and is somewhat hidden on purpose.
 * You should understand that 99.999% of the time you should NOT specify the local port for an outgoing connection.
 * If you think you need to, there is a very good chance you have a fundamental misunderstanding somewhere.
 * Local ports do NOT need to match remote ports. In fact, they almost never do.
 * This feature is here for networking professionals using very advanced techniques.
**/
- (BOOL)connectToAddress:(NSData *)remoteAddr
            viaInterface:(nullable NSString *)interface
             withTimeout:(NSTimeInterval)timeout
                   error:(NSError **)errPtr;
/**
 * Connects to the unix domain socket at the given url, using the specified timeout.
 */
- (BOOL)connectToUrl:(NSURL *)url withTimeout:(NSTimeInterval)timeout error:(NSError **)errPtr;

#pragma mark Disconnecting

/**
 * Disconnects immediately (synchronously). Any pending reads or writes are dropped.
 * 
 * If the socket is not already disconnected, an invocation to the socketDidDisconnect:withError: delegate method
 * will be queued onto the delegateQueue asynchronously (behind any previously queued delegate methods).
 * In other words, the disconnected delegate method will be invoked sometime shortly after this method returns.
 * 
 * Please note the recommended way of releasing a FMLiveSwitchAsyncSocket instance (e.g. in a dealloc method)
 * [asyncSocket setDelegate:nil];
 * [asyncSocket disconnect];
 * [asyncSocket release];
 * 
 * If you plan on disconnecting the socket, and then immediately asking it to connect again,
 * you'll likely want to do so like this:
 * [asyncSocket setDelegate:nil];
 * [asyncSocket disconnect];
 * [asyncSocket setDelegate:self];
 * [asyncSocket connect...];
**/
- (void)disconnect;

/**
 * Disconnects after all pending reads have completed.
 * After calling this, the read and write methods will do nothing.
 * The socket will disconnect even if there are still pending writes.
**/
- (void)disconnectAfterReading;

/**
 * Disconnects after all pending writes have completed.
 * After calling this, the read and write methods will do nothing.
 * The socket will disconnect even if there are still pending reads.
**/
- (void)disconnectAfterWriting;

/**
 * Disconnects after all pending reads and writes have completed.
 * After calling this, the read and write methods will do nothing.
**/
- (void)disconnectAfterReadingAndWriting;

#pragma mark Diagnostics

/**
 * Returns whether the socket is disconnected or connected.
 * 
 * A disconnected socket may be recycled.
 * That is, it can be used again for connecting or listening.
 * 
 * If a socket is in the process of connecting, it may be neither disconnected nor connected.
**/
@property (atomic, readonly) BOOL isDisconnected;
@property (atomic, readonly) BOOL isConnected;

/**
 * Returns the local or remote host and port to which this socket is connected, or nil and 0 if not connected.
 * The host will be an IP address.
**/
@property (atomic, readonly, nullable) NSString *connectedHost;
@property (atomic, readonly) uint16_t  connectedPort;
@property (atomic, readonly, nullable) NSURL    *connectedUrl;

@property (atomic, readonly, nullable) NSString *localHost;
@property (atomic, readonly) uint16_t  localPort;

/**
 * Returns the local or remote address to which this socket is connected,
 * specified as a sockaddr structure wrapped in a NSData object.
 * 
 * @seealso connectedHost
 * @seealso connectedPort
 * @seealso localHost
 * @seealso localPort
**/
@property (atomic, readonly, nullable) NSData *connectedAddress;
@property (atomic, readonly, nullable) NSData *localAddress;

/**
 * Returns whether the socket is IPv4 or IPv6.
 * An accepting socket may be both.
**/
@property (atomic, readonly) BOOL isIPv4;
@property (atomic, readonly) BOOL isIPv6;

/**
 * Returns whether or not the socket has been secured via SSL/TLS.
 * 
 * See also the startTLS method.
**/
@property (atomic, readonly) BOOL isSecure;

#pragma mark Reading

// The readData and writeData methods won't block (they are asynchronous).
// 
// When a read is complete the socket:didReadData:withTag: delegate method is dispatched on the delegateQueue.
// When a write is complete the socket:didWriteDataWithTag: delegate method is dispatched on the delegateQueue.
// 
// You may optionally set a timeout for any read/write operation. (To not timeout, use a negative time interval.)
// If a read/write opertion times out, the corresponding "socket:shouldTimeout..." delegate method
// is called to optionally allow you to extend the timeout.
// Upon a timeout, the "socket:didDisconnectWithError:" method is called
// 
// The tag is for your convenience.
// You can use it as an array index, step number, state id, pointer, etc.

/**
 * Reads the first available bytes that become available on the socket.
 * 
 * If the timeout value is negative, the read operation will not use a timeout.
**/
- (void)readDataWithTimeout:(NSTimeInterval)timeout tag:(long)tag;

/**
 * Reads the first available bytes that become available on the socket.
 * The bytes will be appended to the given byte buffer starting at the given offset.
 * The given buffer will automatically be increased in size if needed.
 * 
 * If the timeout value is negative, the read operation will not use a timeout.
 * If the buffer if nil, the socket will create a buffer for you.
 * 
 * If the bufferOffset is greater than the length of the given buffer,
 * the method will do nothing, and the delegate will not be called.
 * 
 * If you pass a buffer, you must not alter it in any way while the socket is using it.
 * After completion, the data returned in socket:didReadData:withTag: will be a subset of the given buffer.
 * That is, it will reference the bytes that were appended to the given buffer via
 * the method [NSData dataWithBytesNoCopy:length:freeWhenDone:NO].
**/
- (void)readDataWithTimeout:(NSTimeInterval)timeout
					 buffer:(nullable NSMutableData *)buffer
			   bufferOffset:(NSUInteger)offset
						tag:(long)tag;

/**
 * Reads the first available bytes that become available on the socket.
 * The bytes will be appended to the given byte buffer starting at the given offset.
 * The given buffer will automatically be increased in size if needed.
 * A maximum of length bytes will be read.
 * 
 * If the timeout value is negative, the read operation will not use a timeout.
 * If the buffer if nil, a buffer will automatically be created for you.
 * If maxLength is zero, no length restriction is enforced.
 * 
 * If the bufferOffset is greater than the length of the given buffer,
 * the method will do nothing, and the delegate will not be called.
 * 
 * If you pass a buffer, you must not alter it in any way while the socket is using it.
 * After completion, the data returned in socket:didReadData:withTag: will be a subset of the given buffer.
 * That is, it will reference the bytes that were appended to the given buffer  via
 * the method [NSData dataWithBytesNoCopy:length:freeWhenDone:NO].
**/
- (void)readDataWithTimeout:(NSTimeInterval)timeout
                     buffer:(nullable NSMutableData *)buffer
               bufferOffset:(NSUInteger)offset
                  maxLength:(NSUInteger)length
                        tag:(long)tag;

/**
 * Reads the given number of bytes.
 * 
 * If the timeout value is negative, the read operation will not use a timeout.
 * 
 * If the length is 0, this method does nothing and the delegate is not called.
**/
- (void)readDataToLength:(NSUInteger)length withTimeout:(NSTimeInterval)timeout tag:(long)tag;

/**
 * Reads the given number of bytes.
 * The bytes will be appended to the given byte buffer starting at the given offset.
 * The given buffer will automatically be increased in size if needed.
 * 
 * If the timeout value is negative, the read operation will not use a timeout.
 * If the buffer if nil, a buffer will automatically be created for you.
 * 
 * If the length is 0, this method does nothing and the delegate is not called.
 * If the bufferOffset is greater than the length of the given buffer,
 * the method will do nothing, and the delegate will not be called.
 * 
 * If you pass a buffer, you must not alter it in any way while AsyncSocket is using it.
 * After completion, the data returned in socket:didReadData:withTag: will be a subset of the given buffer.
 * That is, it will reference the bytes that were appended to the given buffer via
 * the method [NSData dataWithBytesNoCopy:length:freeWhenDone:NO].
**/
- (void)readDataToLength:(NSUInteger)length
             withTimeout:(NSTimeInterval)timeout
                  buffer:(nullable NSMutableData *)buffer
            bufferOffset:(NSUInteger)offset
                     tag:(long)tag;

/**
 * Reads bytes until (and including) the passed "data" parameter, which acts as a separator.
 * 
 * If the timeout value is negative, the read operation will not use a timeout.
 * 
 * If you pass nil or zero-length data as the "data" parameter,
 * the method will do nothing (except maybe print a warning), and the delegate will not be called.
 * 
 * To read a line from the socket, use the line separator (e.g. CRLF for HTTP, see below) as the "data" parameter.
 * If you're developing your own custom protocol, be sure your separator can not occur naturally as
 * part of the data between separators.
 * For example, imagine you want to send several small documents over a socket.
 * Using CRLF as a separator is likely unwise, as a CRLF could easily exist within the documents.
 * In this particular example, it would be better to use a protocol similar to HTTP with
 * a header that includes the length of the document.
 * Also be careful that your separator cannot occur naturally as part of the encoding for a character.
 * 
 * The given data (separator) parameter should be immutable.
 * For performance reasons, the socket will retain it, not copy it.
 * So if it is immutable, don't modify it while the socket is using it.
**/
- (void)readDataToData:(NSData *)data withTimeout:(NSTimeInterval)timeout tag:(long)tag;

/**
 * Reads bytes until (and including) the passed "data" parameter, which acts as a separator.
 * The bytes will be appended to the given byte buffer starting at the given offset.
 * The given buffer will automatically be increased in size if needed.
 * 
 * If the timeout value is negative, the read operation will not use a timeout.
 * If the buffer if nil, a buffer will automatically be created for you.
 * 
 * If the bufferOffset is greater than the length of the given buffer,
 * the method will do nothing (except maybe print a warning), and the delegate will not be called.
 * 
 * If you pass a buffer, you must not alter it in any way while the socket is using it.
 * After completion, the data returned in socket:didReadData:withTag: will be a subset of the given buffer.
 * That is, it will reference the bytes that were appended to the given buffer via
 * the method [NSData dataWithBytesNoCopy:length:freeWhenDone:NO].
 * 
 * To read a line from the socket, use the line separator (e.g. CRLF for HTTP, see below) as the "data" parameter.
 * If you're developing your own custom protocol, be sure your separator can not occur naturally as
 * part of the data between separators.
 * For example, imagine you want to send several small documents over a socket.
 * Using CRLF as a separator is likely unwise, as a CRLF could easily exist within the documents.
 * In this particular example, it would be better to use a protocol similar to HTTP with
 * a header that includes the length of the document.
 * Also be careful that your separator cannot occur naturally as part of the encoding for a character.
 * 
 * The given data (separator) parameter should be immutable.
 * For performance reasons, the socket will retain it, not copy it.
 * So if it is immutable, don't modify it while the socket is using it.
**/
- (void)readDataToData:(NSData *)data
           withTimeout:(NSTimeInterval)timeout
                buffer:(nullable NSMutableData *)buffer
          bufferOffset:(NSUInteger)offset
                   tag:(long)tag;

/**
 * Reads bytes until (and including) the passed "data" parameter, which acts as a separator.
 * 
 * If the timeout value is negative, the read operation will not use a timeout.
 * 
 * If maxLength is zero, no length restriction is enforced.
 * Otherwise if maxLength bytes are read without completing the read,
 * it is treated similarly to a timeout - the socket is closed with a FMLiveSwitchAsyncSocketReadMaxedOutError.
 * The read will complete successfully if exactly maxLength bytes are read and the given data is found at the end.
 * 
 * If you pass nil or zero-length data as the "data" parameter,
 * the method will do nothing (except maybe print a warning), and the delegate will not be called.
 * If you pass a maxLength parameter that is less than the length of the data parameter,
 * the method will do nothing (except maybe print a warning), and the delegate will not be called.
 * 
 * To read a line from the socket, use the line separator (e.g. CRLF for HTTP, see below) as the "data" parameter.
 * If you're developing your own custom protocol, be sure your separator can not occur naturally as
 * part of the data between separators.
 * For example, imagine you want to send several small documents over a socket.
 * Using CRLF as a separator is likely unwise, as a CRLF could easily exist within the documents.
 * In this particular example, it would be better to use a protocol similar to HTTP with
 * a header that includes the length of the document.
 * Also be careful that your separator cannot occur naturally as part of the encoding for a character.
 * 
 * The given data (separator) parameter should be immutable.
 * For performance reasons, the socket will retain it, not copy it.
 * So if it is immutable, don't modify it while the socket is using it.
**/
- (void)readDataToData:(NSData *)data withTimeout:(NSTimeInterval)timeout maxLength:(NSUInteger)length tag:(long)tag;

/**
 * Reads bytes until (and including) the passed "data" parameter, which acts as a separator.
 * The bytes will be appended to the given byte buffer starting at the given offset.
 * The given buffer will automatically be increased in size if needed.
 * 
 * If the timeout value is negative, the read operation will not use a timeout.
 * If the buffer if nil, a buffer will automatically be created for you.
 * 
 * If maxLength is zero, no length restriction is enforced.
 * Otherwise if maxLength bytes are read without completing the read,
 * it is treated similarly to a timeout - the socket is closed with a FMLiveSwitchAsyncSocketReadMaxedOutError.
 * The read will complete successfully if exactly maxLength bytes are read and the given data is found at the end.
 * 
 * If you pass a maxLength parameter that is less than the length of the data (separator) parameter,
 * the method will do nothing (except maybe print a warning), and the delegate will not be called.
 * If the bufferOffset is greater than the length of the given buffer,
 * the method will do nothing (except maybe print a warning), and the delegate will not be called.
 * 
 * If you pass a buffer, you must not alter it in any way while the socket is using it.
 * After completion, the data returned in socket:didReadData:withTag: will be a subset of the given buffer.
 * That is, it will reference the bytes that were appended to the given buffer via
 * the method [NSData dataWithBytesNoCopy:length:freeWhenDone:NO].
 * 
 * To read a line from the socket, use the line separator (e.g. CRLF for HTTP, see below) as the "data" parameter.
 * If you're developing your own custom protocol, be sure your separator can not occur naturally as
 * part of the data between separators.
 * For example, imagine you want to send several small documents over a socket.
 * Using CRLF as a separator is likely unwise, as a CRLF could easily exist within the documents.
 * In this particular example, it would be better to use a protocol similar to HTTP with
 * a header that includes the length of the document.
 * Also be careful that your separator cannot occur naturally as part of the encoding for a character.
 * 
 * The given data (separator) parameter should be immutable.
 * For performance reasons, the socket will retain it, not copy it.
 * So if it is immutable, don't modify it while the socket is using it.
**/
- (void)readDataToData:(NSData *)data
           withTimeout:(NSTimeInterval)timeout
                buffer:(nullable NSMutableData *)buffer
          bufferOffset:(NSUInteger)offset
             maxLength:(NSUInteger)length
                   tag:(long)tag;

/**
 * Returns progress of the current read, from 0.0 to 1.0, or NaN if no current read (use isnan() to check).
 * The parameters "tag", "done" and "total" will be filled in if they aren't NULL.
**/
- (float)progressOfReadReturningTag:(nullable long *)tagPtr bytesDone:(nullable NSUInteger *)donePtr total:(nullable NSUInteger *)totalPtr;

#pragma mark Writing

/**
 * Writes data to the socket, and calls the delegate when finished.
 * 
 * If you pass in nil or zero-length data, this method does nothing and the delegate will not be called.
 * If the timeout value is negative, the write operation will not use a timeout.
 * 
 * Thread-Safety Note:
 * If the given data parameter is mutable (NSMutableData) then you MUST NOT alter the data while
 * the socket is writing it. In other words, it's not safe to alter the data until after the delegate method
 * socket:didWriteDataWithTag: is invoked signifying that this particular write operation has completed.
 * This is due to the fact that FMLiveSwitchAsyncSocket does NOT copy the data. It simply retains it.
 * This is for performance reasons. Often times, if NSMutableData is passed, it is because
 * a request/response was built up in memory. Copying this data adds an unwanted/unneeded overhead.
 * If you need to write data from an immutable buffer, and you need to alter the buffer before the socket
 * completes writing the bytes (which is NOT immediately after this method returns, but rather at a later time
 * when the delegate method notifies you), then you should first copy the bytes, and pass the copy to this method.
**/
- (void)writeData:(NSData *)data withTimeout:(NSTimeInterval)timeout tag:(long)tag;

/**
 * Returns progress of the current write, from 0.0 to 1.0, or NaN if no current write (use isnan() to check).
 * The parameters "tag", "done" and "total" will be filled in if they aren't NULL.
**/
- (float)progressOfWriteReturningTag:(nullable long *)tagPtr bytesDone:(nullable NSUInteger *)donePtr total:(nullable NSUInteger *)totalPtr;

#pragma mark Security

/**
 * Secures the connection using SSL/TLS.
 * 
 * This method may be called at any time, and the TLS handshake will occur after all pending reads and writes
 * are finished. This allows one the option of sending a protocol dependent StartTLS message, and queuing
 * the upgrade to TLS at the same time, without having to wait for the write to finish.
 * Any reads or writes scheduled after this method is called will occur over the secured connection.
 *
 * ==== The available TOP-LEVEL KEYS are:
 * 
 * - FMLiveSwitchAsyncSocketManuallyEvaluateTrust
 *     The value must be of type NSNumber, encapsulating a BOOL value.
 *     If you set this to YES, then the underlying SecureTransport system will not evaluate the SecTrustRef of the peer.
 *     Instead it will pause at the moment evaulation would typically occur,
 *     and allow us to handle the security evaluation however we see fit.
 *     So FMLiveSwitchAsyncSocket will invoke the delegate method socket:shouldTrustPeer: passing the SecTrustRef.
 *
 *     Note that if you set this option, then all other configuration keys are ignored.
 *     Evaluation will be completely up to you during the socket:didReceiveTrust:completionHandler: delegate method.
 *
 *     For more information on trust evaluation see:
 *     Apple's Technical Note TN2232 - HTTPS Server Trust Evaluation
 *     https://developer.apple.com/library/ios/technotes/tn2232/_index.html
 *     
 *     If unspecified, the default value is NO.
 *
 * - FMLiveSwitchAsyncSocketUseCFStreamForTLS (iOS only)
 *     The value must be of type NSNumber, encapsulating a BOOL value.
 *     By default FMLiveSwitchAsyncSocket will use the SecureTransport layer to perform encryption.
 *     This gives us more control over the security protocol (many more configuration options),
 *     plus it allows us to optimize things like sys calls and buffer allocation.
 *     
 *     However, if you absolutely must, you can instruct FMLiveSwitchAsyncSocket to use the old-fashioned encryption
 *     technique by going through the CFStream instead. So instead of using SecureTransport, FMLiveSwitchAsyncSocket
 *     will instead setup a CFRead/CFWriteStream. And then set the kCFStreamPropertySSLSettings property
 *     (via CFReadStreamSetProperty / CFWriteStreamSetProperty) and will pass the given options to this method.
 *     
 *     Thus all the other keys in the given dictionary will be ignored by FMLiveSwitchAsyncSocket,
 *     and will passed directly CFReadStreamSetProperty / CFWriteStreamSetProperty.
 *     For more infomation on these keys, please see the documentation for kCFStreamPropertySSLSettings.
 *
 *     If unspecified, the default value is NO.
 *
 * ==== The available CONFIGURATION KEYS are:
 *
 * - kCFStreamSSLPeerName
 *     The value must be of type NSString.
 *     It should match the name in the X.509 certificate given by the remote party.
 *     See Apple's documentation for SSLSetPeerDomainName.
 *
 * - kCFStreamSSLCertificates
 *     The value must be of type NSArray.
 *     See Apple's documentation for SSLSetCertificate.
 *
 * - kCFStreamSSLIsServer
 *     The value must be of type NSNumber, encapsulationg a BOOL value.
 *     See Apple's documentation for SSLCreateContext for iOS.
 *     This is optional for iOS. If not supplied, a NO value is the default.
 *     This is not needed for Mac OS X, and the value is ignored.
 *
 * - FMLiveSwitchAsyncSocketSSLPeerID
 *     The value must be of type NSData.
 *     You must set this value if you want to use TLS session resumption.
 *     See Apple's documentation for SSLSetPeerID.
 *
 * - FMLiveSwitchAsyncSocketSSLProtocolVersionMin
 * - FMLiveSwitchAsyncSocketSSLProtocolVersionMax
 *     The value(s) must be of type NSNumber, encapsulting a SSLProtocol value.
 *     See Apple's documentation for SSLSetProtocolVersionMin & SSLSetProtocolVersionMax.
 *     See also the SSLProtocol typedef.
 * 
 * - FMLiveSwitchAsyncSocketSSLSessionOptionFalseStart
 *     The value must be of type NSNumber, encapsulating a BOOL value.
 *     See Apple's documentation for kSSLSessionOptionFalseStart.
 * 
 * - FMLiveSwitchAsyncSocketSSLSessionOptionSendOneByteRecord
 *     The value must be of type NSNumber, encapsulating a BOOL value.
 *     See Apple's documentation for kSSLSessionOptionSendOneByteRecord.
 * 
 * - FMLiveSwitchAsyncSocketSSLCipherSuites
 *     The values must be of type NSArray.
 *     Each item within the array must be a NSNumber, encapsulating
 *     See Apple's documentation for SSLSetEnabledCiphers.
 *     See also the SSLCipherSuite typedef.
 *
 * - FMLiveSwitchAsyncSocketSSLDiffieHellmanParameters (Mac OS X only)
 *     The value must be of type NSData.
 *     See Apple's documentation for SSLSetDiffieHellmanParams.
 * 
 * ==== The following UNAVAILABLE KEYS are: (with throw an exception)
 * 
 * - kCFStreamSSLAllowsAnyRoot (UNAVAILABLE)
 *     You MUST use manual trust evaluation instead (see FMLiveSwitchAsyncSocketManuallyEvaluateTrust).
 *     Corresponding deprecated method: SSLSetAllowsAnyRoot
 * 
 * - kCFStreamSSLAllowsExpiredRoots (UNAVAILABLE)
 *     You MUST use manual trust evaluation instead (see FMLiveSwitchAsyncSocketManuallyEvaluateTrust).
 *     Corresponding deprecated method: SSLSetAllowsExpiredRoots
 *
 * - kCFStreamSSLAllowsExpiredCertificates (UNAVAILABLE)
 *     You MUST use manual trust evaluation instead (see FMLiveSwitchAsyncSocketManuallyEvaluateTrust).
 *     Corresponding deprecated method: SSLSetAllowsExpiredCerts
 *
 * - kCFStreamSSLValidatesCertificateChain (UNAVAILABLE)
 *     You MUST use manual trust evaluation instead (see FMLiveSwitchAsyncSocketManuallyEvaluateTrust).
 *     Corresponding deprecated method: SSLSetEnableCertVerify
 *
 * - kCFStreamSSLLevel (UNAVAILABLE)
 *     You MUST use FMLiveSwitchAsyncSocketSSLProtocolVersionMin & FMLiveSwitchAsyncSocketSSLProtocolVersionMin instead.
 *     Corresponding deprecated method: SSLSetProtocolVersionEnabled
 *
 * 
 * Please refer to Apple's documentation for corresponding SSLFunctions.
 *
 * If you pass in nil or an empty dictionary, the default settings will be used.
 * 
 * IMPORTANT SECURITY NOTE:
 * The default settings will check to make sure the remote party's certificate is signed by a
 * trusted 3rd party certificate agency (e.g. verisign) and that the certificate is not expired.
 * However it will not verify the name on the certificate unless you
 * give it a name to verify against via the kCFStreamSSLPeerName key.
 * The security implications of this are important to understand.
 * Imagine you are attempting to create a secure connection to MySecureServer.com,
 * but your socket gets directed to MaliciousServer.com because of a hacked DNS server.
 * If you simply use the default settings, and MaliciousServer.com has a valid certificate,
 * the default settings will not detect any problems since the certificate is valid.
 * To properly secure your connection in this particular scenario you
 * should set the kCFStreamSSLPeerName property to "MySecureServer.com".
 * 
 * You can also perform additional validation in socketDidSecure.
**/
- (void)startTLS:(nullable NSDictionary <NSString*,NSObject*>*)tlsSettings;

#pragma mark Advanced

/**
 * Traditionally sockets are not closed until the conversation is over.
 * However, it is technically possible for the remote enpoint to close its write stream.
 * Our socket would then be notified that there is no more data to be read,
 * but our socket would still be writeable and the remote endpoint could continue to receive our data.
 * 
 * The argument for this confusing functionality stems from the idea that a client could shut down its
 * write stream after sending a request to the server, thus notifying the server there are to be no further requests.
 * In practice, however, this technique did little to help server developers.
 * 
 * To make matters worse, from a TCP perspective there is no way to tell the difference from a read stream close
 * and a full socket close. They both result in the TCP stack receiving a FIN packet. The only way to tell
 * is by continuing to write to the socket. If it was only a read stream close, then writes will continue to work.
 * Otherwise an error will be occur shortly (when the remote end sends us a RST packet).
 * 
 * In addition to the technical challenges and confusion, many high level socket/stream API's provide
 * no support for dealing with the problem. If the read stream is closed, the API immediately declares the
 * socket to be closed, and shuts down the write stream as well. In fact, this is what Apple's CFStream API does.
 * It might sound like poor design at first, but in fact it simplifies development.
 * 
 * The vast majority of the time if the read stream is closed it's because the remote endpoint closed its socket.
 * Thus it actually makes sense to close the socket at this point.
 * And in fact this is what most networking developers want and expect to happen.
 * However, if you are writing a server that interacts with a plethora of clients,
 * you might encounter a client that uses the discouraged technique of shutting down its write stream.
 * If this is the case, you can set this property to NO,
 * and make use of the socketDidCloseReadStream delegate method.
 * 
 * The default value is YES.
**/
@property (atomic, assign, readwrite) BOOL autoDisconnectOnClosedReadStream;

/**
 * FMLiveSwitchAsyncSocket maintains thread safety by using an internal serial dispatch_queue.
 * In most cases, the instance creates this queue itself.
 * However, to allow for maximum flexibility, the internal queue may be passed in the init method.
 * This allows for some advanced options such as controlling socket priority via target queues.
 * However, when one begins to use target queues like this, they open the door to some specific deadlock issues.
 * 
 * For example, imagine there are 2 queues:
 * dispatch_queue_t socketQueue;
 * dispatch_queue_t socketTargetQueue;
 * 
 * If you do this (pseudo-code):
 * socketQueue.targetQueue = socketTargetQueue;
 * 
 * Then all socketQueue operations will actually get run on the given socketTargetQueue.
 * This is fine and works great in most situations.
 * But if you run code directly from within the socketTargetQueue that accesses the socket,
 * you could potentially get deadlock. Imagine the following code:
 * 
 * - (BOOL)socketHasSomething
 * {
 *     __block BOOL result = NO;
 *     dispatch_block_t block = ^{
 *         result = [self someInternalMethodToBeRunOnlyOnSocketQueue];
 *     }
 *     if (is_executing_on_queue(socketQueue))
 *         block();
 *     else
 *         dispatch_sync(socketQueue, block);
 *     
 *     return result;
 * }
 * 
 * What happens if you call this method from the socketTargetQueue? The result is deadlock.
 * This is because the FMLiveSwitch API offers no mechanism to discover a queue's targetQueue.
 * Thus we have no idea if our socketQueue is configured with a targetQueue.
 * If we had this information, we could easily avoid deadlock.
 * But, since these API's are missing or unfeasible, you'll have to explicitly set it.
 * 
 * IF you pass a socketQueue via the init method,
 * AND you've configured the passed socketQueue with a targetQueue,
 * THEN you should pass the end queue in the target hierarchy.
 * 
 * For example, consider the following queue hierarchy:
 * socketQueue -> ipQueue -> moduleQueue
 *
 * This example demonstrates priority shaping within some server.
 * All incoming client connections from the same IP address are executed on the same target queue.
 * And all connections for a particular module are executed on the same target queue.
 * Thus, the priority of all networking for the entire module can be changed on the fly.
 * Additionally, networking traffic from a single IP cannot monopolize the module.
 * 
 * Here's how you would accomplish something like that:
 * - (dispatch_queue_t)newSocketQueueForConnectionFromAddress:(NSData *)address onSocket:(FMLiveSwitchAsyncSocket *)sock
 * {
 *     dispatch_queue_t socketQueue = dispatch_queue_create("", NULL);
 *     dispatch_queue_t ipQueue = [self ipQueueForAddress:address];
 *     
 *     dispatch_set_target_queue(socketQueue, ipQueue);
 *     dispatch_set_target_queue(iqQueue, moduleQueue);
 *     
 *     return socketQueue;
 * }
 * - (void)socket:(FMLiveSwitchAsyncSocket *)sock didAcceptNewSocket:(FMLiveSwitchAsyncSocket *)newSocket
 * {
 *     [clientConnections addObject:newSocket];
 *     [newSocket markSocketQueueTargetQueue:moduleQueue];
 * }
 * 
 * Note: This workaround is ONLY needed if you intend to execute code directly on the ipQueue or moduleQueue.
 * This is often NOT the case, as such queues are used solely for execution shaping.
**/
- (void)markSocketQueueTargetQueue:(dispatch_queue_t)socketQueuesPreConfiguredTargetQueue;
- (void)unmarkSocketQueueTargetQueue:(dispatch_queue_t)socketQueuesPreviouslyConfiguredTargetQueue;

/**
 * It's not thread-safe to access certain variables from outside the socket's internal queue.
 * 
 * For example, the socket file descriptor.
 * File descriptors are simply integers which reference an index in the per-process file table.
 * However, when one requests a new file descriptor (by opening a file or socket),
 * the file descriptor returned is guaranteed to be the lowest numbered unused descriptor.
 * So if we're not careful, the following could be possible:
 * 
 * - Thread A invokes a method which returns the socket's file descriptor.
 * - The socket is closed via the socket's internal queue on thread B.
 * - Thread C opens a file, and subsequently receives the file descriptor that was previously the socket's FD.
 * - Thread A is now accessing/altering the file instead of the socket.
 * 
 * In addition to this, other variables are not actually objects,
 * and thus cannot be retained/released or even autoreleased.
 * An example is the sslContext, of type SSLContextRef, which is actually a malloc'd struct.
 * 
 * Although there are internal variables that make it difficult to maintain thread-safety,
 * it is important to provide access to these variables
 * to ensure this class can be used in a wide array of environments.
 * This method helps to accomplish this by invoking the current block on the socket's internal queue.
 * The methods below can be invoked from within the block to access
 * those generally thread-unsafe internal variables in a thread-safe manner.
 * The given block will be invoked synchronously on the socket's internal queue.
 * 
 * If you save references to any protected variables and use them outside the block, you do so at your own peril.
**/
- (void)performBlock:(dispatch_block_t)block;

/**
 * These methods are only available from within the context of a performBlock: invocation.
 * See the documentation for the performBlock: method above.
 * 
 * Provides access to the socket's file descriptor(s).
 * If the socket is a server socket (is accepting incoming connections),
 * it might actually have multiple internal socket file descriptors - one for IPv4 and one for IPv6.
**/
- (int)socketFD;
- (int)socket4FD;
- (int)socket6FD;

#if TARGET_OS_IPHONE

/**
 * These methods are only available from within the context of a performBlock: invocation.
 * See the documentation for the performBlock: method above.
 * 
 * Provides access to the socket's internal CFReadStream/CFWriteStream.
 * 
 * These streams are only used as workarounds for specific iOS shortcomings:
 * 
 * - Apple has decided to keep the SecureTransport framework private is iOS.
 *   This means the only supplied way to do SSL/TLS is via CFStream or some other API layered on top of it.
 *   Thus, in order to provide SSL/TLS support on iOS we are forced to rely on CFStream,
 *   instead of the preferred and faster and more powerful SecureTransport.
 * 
 * - If a socket doesn't have backgrounding enabled, and that socket is closed while the app is backgrounded,
 *   Apple only bothers to notify us via the CFStream API.
 *   The faster and more powerful FMLiveSwitch API isn't notified properly in this case.
 * 
**/
- (nullable CFReadStreamRef)readStream;
- (nullable CFWriteStreamRef)writeStream;

#endif

/**
 * This method is only available from within the context of a performBlock: invocation.
 * See the documentation for the performBlock: method above.
 * 
 * Provides access to the socket's SSLContext, if SSL/TLS has been started on the socket.
**/
- (nullable SSLContextRef)sslContext;

#pragma mark Utilities

/**
 * The address lookup utility used by the class.
 * This method is synchronous, so it's recommended you use it on a background thread/queue.
 * 
 * The special strings "localhost" and "loopback" return the loopback address for IPv4 and IPv6.
 * 
 * @returns
 *   A mutable array with all IPv4 and IPv6 addresses returned by getaddrinfo.
 *   The addresses are specifically for TCP connections.
 *   You can filter the addresses, if needed, using the other utility methods provided by the class.
**/
+ (nullable NSMutableArray *)lookupHost:(NSString *)host port:(uint16_t)port error:(NSError **)errPtr;

/**
 * Extracting host and port information from raw address data.
**/

+ (nullable NSString *)hostFromAddress:(NSData *)address;
+ (uint16_t)portFromAddress:(NSData *)address;

+ (BOOL)isIPv4Address:(NSData *)address;
+ (BOOL)isIPv6Address:(NSData *)address;

+ (BOOL)getHost:( NSString * __nullable * __nullable)hostPtr port:(nullable uint16_t *)portPtr fromAddress:(NSData *)address;

+ (BOOL)getHost:(NSString * __nullable * __nullable)hostPtr port:(nullable uint16_t *)portPtr family:(nullable sa_family_t *)afPtr fromAddress:(NSData *)address;

/**
 * A few common line separators, for use with the readDataToData:... methods.
**/
+ (NSData *)CRLFData;   // 0x0D0A
+ (NSData *)CRData;     // 0x0D
+ (NSData *)LFData;     // 0x0A
+ (NSData *)ZeroData;   // 0x00

@end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma mark -
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

@protocol FMLiveSwitchAsyncSocketDelegate <NSObject>
@optional

/**
 * This method is called immediately prior to socket:didAcceptNewSocket:.
 * It optionally allows a listening socket to specify the socketQueue for a new accepted socket.
 * If this method is not implemented, or returns NULL, the new accepted socket will create its own default queue.
 * 
 * Since you cannot autorelease a dispatch_queue,
 * this method uses the "new" prefix in its name to specify that the returned queue has been retained.
 * 
 * Thus you could do something like this in the implementation:
 * return dispatch_queue_create("MyQueue", NULL);
 * 
 * If you are placing multiple sockets on the same queue,
 * then care should be taken to increment the retain count each time this method is invoked.
 * 
 * For example, your implementation might look something like this:
 * dispatch_retain(myExistingQueue);
 * return myExistingQueue;
**/
- (nullable dispatch_queue_t)newSocketQueueForConnectionFromAddress:(NSData *)address onSocket:(FMLiveSwitchAsyncSocket *)sock;

/**
 * Called when a socket accepts a connection.
 * Another socket is automatically spawned to handle it.
 * 
 * You must retain the newSocket if you wish to handle the connection.
 * Otherwise the newSocket instance will be released and the spawned connection will be closed.
 * 
 * By default the new socket will have the same delegate and delegateQueue.
 * You may, of course, change this at any time.
**/
- (void)socket:(FMLiveSwitchAsyncSocket *)sock didAcceptNewSocket:(FMLiveSwitchAsyncSocket *)newSocket;

/**
 * Called when a socket connects and is ready for reading and writing.
 * The host parameter will be an IP address, not a DNS name.
**/
- (void)socket:(FMLiveSwitchAsyncSocket *)sock didConnectToHost:(NSString *)host port:(uint16_t)port;

/**
 * Called when a socket connects and is ready for reading and writing.
 * The host parameter will be an IP address, not a DNS name.
 **/
- (void)socket:(FMLiveSwitchAsyncSocket *)sock didConnectToUrl:(NSURL *)url;

/**
 * Called when a socket has completed reading the requested data into memory.
 * Not called if there is an error.
**/
- (void)socket:(FMLiveSwitchAsyncSocket *)sock didReadData:(NSData *)data withTag:(long)tag;

/**
 * Called when a socket has read in data, but has not yet completed the read.
 * This would occur if using readToData: or readToLength: methods.
 * It may be used to for things such as updating progress bars.
**/
- (void)socket:(FMLiveSwitchAsyncSocket *)sock didReadPartialDataOfLength:(NSUInteger)partialLength tag:(long)tag;

/**
 * Called when a socket has completed writing the requested data. Not called if there is an error.
**/
- (void)socket:(FMLiveSwitchAsyncSocket *)sock didWriteDataWithTag:(long)tag;

/**
 * Called when a socket has written some data, but has not yet completed the entire write.
 * It may be used to for things such as updating progress bars.
**/
- (void)socket:(FMLiveSwitchAsyncSocket *)sock didWritePartialDataOfLength:(NSUInteger)partialLength tag:(long)tag;

/**
 * Called if a read operation has reached its timeout without completing.
 * This method allows you to optionally extend the timeout.
 * If you return a positive time interval (> 0) the read's timeout will be extended by the given amount.
 * If you don't implement this method, or return a non-positive time interval (<= 0) the read will timeout as usual.
 * 
 * The elapsed parameter is the sum of the original timeout, plus any additions previously added via this method.
 * The length parameter is the number of bytes that have been read so far for the read operation.
 * 
 * Note that this method may be called multiple times for a single read if you return positive numbers.
**/
- (NSTimeInterval)socket:(FMLiveSwitchAsyncSocket *)sock shouldTimeoutReadWithTag:(long)tag
                                                                 elapsed:(NSTimeInterval)elapsed
                                                               bytesDone:(NSUInteger)length;

/**
 * Called if a write operation has reached its timeout without completing.
 * This method allows you to optionally extend the timeout.
 * If you return a positive time interval (> 0) the write's timeout will be extended by the given amount.
 * If you don't implement this method, or return a non-positive time interval (<= 0) the write will timeout as usual.
 * 
 * The elapsed parameter is the sum of the original timeout, plus any additions previously added via this method.
 * The length parameter is the number of bytes that have been written so far for the write operation.
 * 
 * Note that this method may be called multiple times for a single write if you return positive numbers.
**/
- (NSTimeInterval)socket:(FMLiveSwitchAsyncSocket *)sock shouldTimeoutWriteWithTag:(long)tag
                                                                  elapsed:(NSTimeInterval)elapsed
                                                                bytesDone:(NSUInteger)length;

/**
 * Conditionally called if the read stream closes, but the write stream may still be writeable.
 * 
 * This delegate method is only called if autoDisconnectOnClosedReadStream has been set to NO.
 * See the discussion on the autoDisconnectOnClosedReadStream method for more information.
**/
- (void)socketDidCloseReadStream:(FMLiveSwitchAsyncSocket *)sock;

/**
 * Called when a socket disconnects with or without error.
 * 
 * If you call the disconnect method, and the socket wasn't already disconnected,
 * then an invocation of this delegate method will be enqueued on the delegateQueue
 * before the disconnect method returns.
 * 
 * Note: If the FMLiveSwitchAsyncSocket instance is deallocated while it is still connected,
 * and the delegate is not also deallocated, then this method will be invoked,
 * but the sock parameter will be nil. (It must necessarily be nil since it is no longer available.)
 * This is a generally rare, but is possible if one writes code like this:
 * 
 * asyncSocket = nil; // I'm implicitly disconnecting the socket
 * 
 * In this case it may preferrable to nil the delegate beforehand, like this:
 * 
 * asyncSocket.delegate = nil; // Don't invoke my delegate method
 * asyncSocket = nil; // I'm implicitly disconnecting the socket
 * 
 * Of course, this depends on how your state machine is configured.
**/
- (void)socketDidDisconnect:(FMLiveSwitchAsyncSocket *)sock withError:(nullable NSError *)err;

/**
 * Called after the socket has successfully completed SSL/TLS negotiation.
 * This method is not called unless you use the provided startTLS method.
 * 
 * If a SSL/TLS negotiation fails (invalid certificate, etc) then the socket will immediately close,
 * and the socketDidDisconnect:withError: delegate method will be called with the specific SSL error code.
**/
- (void)socketDidSecure:(FMLiveSwitchAsyncSocket *)sock;

/**
 * Allows a socket delegate to hook into the TLS handshake and manually validate the peer it's connecting to.
 *
 * This is only called if startTLS is invoked with options that include:
 * - FMLiveSwitchAsyncSocketManuallyEvaluateTrust == YES
 *
 * Typically the delegate will use SecTrustEvaluate (and related functions) to properly validate the peer.
 * 
 * Note from Apple's documentation:
 *   Because [SecTrustEvaluate] might look on the network for certificates in the certificate chain,
 *   [it] might block while attempting network access. You should never call it from your main thread;
 *   call it only from within a function running on a dispatch queue or on a separate thread.
 * 
 * Thus this method uses a completionHandler block rather than a normal return value.
 * The completionHandler block is thread-safe, and may be invoked from a background queue/thread.
 * It is safe to invoke the completionHandler block even if the socket has been closed.
**/
- (void)socket:(FMLiveSwitchAsyncSocket *)sock didReceiveTrust:(SecTrustRef)trust
                                    completionHandler:(void (^)(BOOL shouldTrustPeer))completionHandler;

@end
NS_ASSUME_NONNULL_END




@interface FMLiveSwitchPlatform : NSObject<FMLiveSwitchIPlatform> 

+ (NSObject<FMLiveSwitchIPlatform> *)instance;

@end




@interface FMLiveSwitchTcpSocket : FMLiveSwitchStreamSocket<FMLiveSwitchAsyncSocketDelegate>

/* static init */ + (instancetype)tcpSocketWithServer:(bool)server ipv6:(bool)ipv6 secure:(bool)secure;
- (instancetype)initWithServer:(bool)server ipv6:(bool)ipv6 secure:(bool)secure;

@end



@interface FMLiveSwitchUdpSocket : FMLiveSwitchDatagramSocket 

+ (int)defaultReceiveBufferSize;
+ (void)setDefaultReceiveBufferSize:(int)defaultReceiveBufferSize;
+ (int)defaultSendBufferSize;
+ (void)setDefaultSendBufferSize:(int)defaultSendBufferSize;
+ (bool)attemptDscp;
+ (void)setAttemptDscp:(bool)attemptDscp;
/* static init */ + (instancetype)udpSocketWithIPv6:(bool)ipv6;
- (instancetype)initWithIPv6:(bool)ipv6;
- (bool)ipv6;
- (bool)isClosed;
- (NSString *)localIPAddress;
- (int)localPort;
- (int)maxQueuedPackets;
- (void)setMaxQueuedPackets:(int)maxQueuedPackets;
- (bool)bindWithIPAddress:(NSString *)ipAddress port:(int)port addressInUse:(bool *)addressInUse;
- (FMLiveSwitchError *)sendWithBuffer:(FMLiveSwitchDataBuffer *)buffer ipAddress:(NSString *)ipAddress port:(int)port;
- (void)receiveAsyncWithOnSuccess:(FMLiveSwitchAction3 *)onSuccess onFailure:(FMLiveSwitchAction1 *)onFailure;
- (void)close;

@end


//
//  FMLiveSwitchNSLogProvider.h
//  FMLiveSwitchIceLinkExample-iOS
//
//  Created by Anton Venema on 2012-09-24.
//  Copyright (c) 2012 Frozen Mountain Software. All rights reserved.
//



@interface FMLiveSwitchNSLogProvider : FMLiveSwitchLogProvider

/* static init */ + (instancetype)nsLogProvider;
- (instancetype)init;
/* static init */ + (instancetype)nsLogProviderWithLogLevel:(FMLiveSwitchLogLevel)logLevel;
- (instancetype)initWithLogLevel:(FMLiveSwitchLogLevel)logLevel;

@end




@interface FMLiveSwitchLocalNetwork : NSObject 

+ (NSMutableArray*)getIPAddressesWithAddressTypes:(NSArray *)addressTypes;
+ (NSMutableArray*)getIPAddressesWithAddressTypes:(NSArray *)addressTypes allowPrivate:(bool)allowPrivate;
+ (NSMutableArray*)getLocalAddressesWithAddressTypes:(NSArray *)addressTypes;
+ (FMLiveSwitchAddressType)getAddressTypeWithIPAddress:(NSString*)ipAddress;
+ (NSMutableData*)getAddressBytesWithIPAddress:(NSString*)ipAddress;
+ (NSString*)getAddressWithAddressBytes:(NSData*)addressBytes;

@end


@interface FMLiveSwitchPcmuCodec : NSObject

+ (int)decompress:(int)value;
+ (int)compress:(int)value;

@end


@interface FMLiveSwitchPcmaCodec : NSObject

+ (int)decompress:(int)value;
+ (int)compress:(int)value;

@end

#pragma clang pop
